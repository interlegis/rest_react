var global = Function("return this;")();
/*!
  * Ender: open module JavaScript framework (client-lib)
  * copyright Dustin Diaz & Jacob Thornton 2011 (@ded @fat)
  * http://ender.no.de
  * License MIT
  */
!function (context) {

  // a global object for node.js module compatiblity
  // ============================================

  context['global'] = context

  // Implements simple module system
  // losely based on CommonJS Modules spec v1.1.1
  // ============================================

  var modules = {}
    , old = context.$

  function require (identifier) {
    // modules can be required from ender's build system, or found on the window
    var module = modules[identifier] || window[identifier]
    if (!module) throw new Error("Requested module '" + identifier + "' has not been defined.")
    return module
  }

  function provide (name, what) {
    return (modules[name] = what)
  }

  context['provide'] = provide
  context['require'] = require

  function aug(o, o2) {
    for (var k in o2) k != 'noConflict' && k != '_VERSION' && (o[k] = o2[k])
    return o
  }

  function boosh(s, r, els) {
    // string || node || nodelist || window
    if (typeof s == 'string' || s.nodeName || (s.length && 'item' in s) || s == window) {
      els = ender._select(s, r)
      els.selector = s
    } else els = isFinite(s.length) ? s : [s]
    return aug(els, boosh)
  }

  function ender(s, r) {
    return boosh(s, r)
  }

  aug(ender, {
      _VERSION: '0.3.6'
    , fn: boosh // for easy compat to jQuery plugins
    , ender: function (o, chain) {
        aug(chain ? boosh : ender, o)
      }
    , _select: function (s, r) {
        return (r || document).querySelectorAll(s)
      }
  })

  aug(boosh, {
    forEach: function (fn, scope, i) {
      // opt out of native forEach so we can intentionally call our own scope
      // defaulting to the current item and be able to return self
      for (i = 0, l = this.length; i < l; ++i) i in this && fn.call(scope || this[i], this[i], i, this)
      // return self for chaining
      return this
    },
    $: ender // handy reference to self
  })

  ender.noConflict = function () {
    context.$ = old
    return this
  }

  if (typeof module !== 'undefined' && module.exports) module.exports = ender
  // use subscript notation as extern for Closure compilation
  context['ender'] = context['$'] = context['ender'] || ender

}(this);
// pakmanager:iconv-lite/encodings/internal
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  "use strict"
    
    // Export Node.js internal encodings.
    
    module.exports = {
        // Encodings
        utf8:   { type: "_internal", bomAware: true},
        cesu8:  { type: "_internal", bomAware: true},
        unicode11utf8: "utf8",
    
        ucs2:   { type: "_internal", bomAware: true},
        utf16le: "ucs2",
    
        binary: { type: "_internal" },
        base64: { type: "_internal" },
        hex:    { type: "_internal" },
    
        // Codec.
        _internal: InternalCodec,
    };
    
    //------------------------------------------------------------------------------
    
    function InternalCodec(codecOptions, iconv) {
        this.enc = codecOptions.encodingName;
        this.bomAware = codecOptions.bomAware;
    
        if (this.enc === "base64")
            this.encoder = InternalEncoderBase64;
        else if (this.enc === "cesu8") {
            this.enc = "utf8"; // Use utf8 for decoding.
            this.encoder = InternalEncoderCesu8;
    
            // Add decoder for versions of Node not supporting CESU-8
            if (new Buffer("eda080", 'hex').toString().length == 3) {
                this.decoder = InternalDecoderCesu8;
                this.defaultCharUnicode = iconv.defaultCharUnicode;
            }
        }
    }
    
    InternalCodec.prototype.encoder = InternalEncoder;
    InternalCodec.prototype.decoder = InternalDecoder;
    
    //------------------------------------------------------------------------------
    
    // We use node.js internal decoder. Its signature is the same as ours.
    var StringDecoder = require('string_decoder').StringDecoder;
    
    if (!StringDecoder.prototype.end) // Node v0.8 doesn't have this method.
        StringDecoder.prototype.end = function() {};
    
    
    function InternalDecoder(options, codec) {
        StringDecoder.call(this, codec.enc);
    }
    
    InternalDecoder.prototype = StringDecoder.prototype;
    
    
    //------------------------------------------------------------------------------
    // Encoder is mostly trivial
    
    function InternalEncoder(options, codec) {
        this.enc = codec.enc;
    }
    
    InternalEncoder.prototype.write = function(str) {
        return new Buffer(str, this.enc);
    }
    
    InternalEncoder.prototype.end = function() {
    }
    
    
    //------------------------------------------------------------------------------
    // Except base64 encoder, which must keep its state.
    
    function InternalEncoderBase64(options, codec) {
        this.prevStr = '';
    }
    
    InternalEncoderBase64.prototype.write = function(str) {
        str = this.prevStr + str;
        var completeQuads = str.length - (str.length % 4);
        this.prevStr = str.slice(completeQuads);
        str = str.slice(0, completeQuads);
    
        return new Buffer(str, "base64");
    }
    
    InternalEncoderBase64.prototype.end = function() {
        return new Buffer(this.prevStr, "base64");
    }
    
    
    //------------------------------------------------------------------------------
    // CESU-8 encoder is also special.
    
    function InternalEncoderCesu8(options, codec) {
    }
    
    InternalEncoderCesu8.prototype.write = function(str) {
        var buf = new Buffer(str.length * 3), bufIdx = 0;
        for (var i = 0; i < str.length; i++) {
            var charCode = str.charCodeAt(i);
            // Naive implementation, but it works because CESU-8 is especially easy
            // to convert from UTF-16 (which all JS strings are encoded in).
            if (charCode < 0x80)
                buf[bufIdx++] = charCode;
            else if (charCode < 0x800) {
                buf[bufIdx++] = 0xC0 + (charCode >>> 6);
                buf[bufIdx++] = 0x80 + (charCode & 0x3f);
            }
            else { // charCode will always be < 0x10000 in javascript.
                buf[bufIdx++] = 0xE0 + (charCode >>> 12);
                buf[bufIdx++] = 0x80 + ((charCode >>> 6) & 0x3f);
                buf[bufIdx++] = 0x80 + (charCode & 0x3f);
            }
        }
        return buf.slice(0, bufIdx);
    }
    
    InternalEncoderCesu8.prototype.end = function() {
    }
    
    //------------------------------------------------------------------------------
    // CESU-8 decoder is not implemented in Node v4.0+
    
    function InternalDecoderCesu8(options, codec) {
        this.acc = 0;
        this.contBytes = 0;
        this.accBytes = 0;
        this.defaultCharUnicode = codec.defaultCharUnicode;
    }
    
    InternalDecoderCesu8.prototype.write = function(buf) {
        var acc = this.acc, contBytes = this.contBytes, accBytes = this.accBytes, 
            res = '';
        for (var i = 0; i < buf.length; i++) {
            var curByte = buf[i];
            if ((curByte & 0xC0) !== 0x80) { // Leading byte
                if (contBytes > 0) { // Previous code is invalid
                    res += this.defaultCharUnicode;
                    contBytes = 0;
                }
    
                if (curByte < 0x80) { // Single-byte code
                    res += String.fromCharCode(curByte);
                } else if (curByte < 0xE0) { // Two-byte code
                    acc = curByte & 0x1F;
                    contBytes = 1; accBytes = 1;
                } else if (curByte < 0xF0) { // Three-byte code
                    acc = curByte & 0x0F;
                    contBytes = 2; accBytes = 1;
                } else { // Four or more are not supported for CESU-8.
                    res += this.defaultCharUnicode;
                }
            } else { // Continuation byte
                if (contBytes > 0) { // We're waiting for it.
                    acc = (acc << 6) | (curByte & 0x3f);
                    contBytes--; accBytes++;
                    if (contBytes === 0) {
                        // Check for overlong encoding, but support Modified UTF-8 (encoding NULL as C0 80)
                        if (accBytes === 2 && acc < 0x80 && acc > 0)
                            res += this.defaultCharUnicode;
                        else if (accBytes === 3 && acc < 0x800)
                            res += this.defaultCharUnicode;
                        else
                            // Actually add character.
                            res += String.fromCharCode(acc);
                    }
                } else { // Unexpected continuation byte
                    res += this.defaultCharUnicode;
                }
            }
        }
        this.acc = acc; this.contBytes = contBytes; this.accBytes = accBytes;
        return res;
    }
    
    InternalDecoderCesu8.prototype.end = function() {
        var res = 0;
        if (this.contBytes > 0)
            res += this.defaultCharUnicode;
        return res;
    }
    
  provide("iconv-lite/encodings/internal", module.exports);
}(global));

// pakmanager:iconv-lite/encodings/utf16
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  "use strict"
    
    // == UTF16-BE codec. ==========================================================
    
    exports.utf16be = Utf16BECodec;
    function Utf16BECodec() {
    }
    
    Utf16BECodec.prototype.encoder = Utf16BEEncoder;
    Utf16BECodec.prototype.decoder = Utf16BEDecoder;
    Utf16BECodec.prototype.bomAware = true;
    
    
    // -- Encoding
    
    function Utf16BEEncoder() {
    }
    
    Utf16BEEncoder.prototype.write = function(str) {
        var buf = new Buffer(str, 'ucs2');
        for (var i = 0; i < buf.length; i += 2) {
            var tmp = buf[i]; buf[i] = buf[i+1]; buf[i+1] = tmp;
        }
        return buf;
    }
    
    Utf16BEEncoder.prototype.end = function() {
    }
    
    
    // -- Decoding
    
    function Utf16BEDecoder() {
        this.overflowByte = -1;
    }
    
    Utf16BEDecoder.prototype.write = function(buf) {
        if (buf.length == 0)
            return '';
    
        var buf2 = new Buffer(buf.length + 1),
            i = 0, j = 0;
    
        if (this.overflowByte !== -1) {
            buf2[0] = buf[0];
            buf2[1] = this.overflowByte;
            i = 1; j = 2;
        }
    
        for (; i < buf.length-1; i += 2, j+= 2) {
            buf2[j] = buf[i+1];
            buf2[j+1] = buf[i];
        }
    
        this.overflowByte = (i == buf.length-1) ? buf[buf.length-1] : -1;
    
        return buf2.slice(0, j).toString('ucs2');
    }
    
    Utf16BEDecoder.prototype.end = function() {
    }
    
    
    // == UTF-16 codec =============================================================
    // Decoder chooses automatically from UTF-16LE and UTF-16BE using BOM and space-based heuristic.
    // Defaults to UTF-16LE, as it's prevalent and default in Node.
    // http://en.wikipedia.org/wiki/UTF-16 and http://encoding.spec.whatwg.org/#utf-16le
    // Decoder default can be changed: iconv.decode(buf, 'utf16', {defaultEncoding: 'utf-16be'});
    
    // Encoder uses UTF-16LE and prepends BOM (which can be overridden with addBOM: false).
    
    exports.utf16 = Utf16Codec;
    function Utf16Codec(codecOptions, iconv) {
        this.iconv = iconv;
    }
    
    Utf16Codec.prototype.encoder = Utf16Encoder;
    Utf16Codec.prototype.decoder = Utf16Decoder;
    
    
    // -- Encoding (pass-through)
    
    function Utf16Encoder(options, codec) {
        options = options || {};
        if (options.addBOM === undefined)
            options.addBOM = true;
        this.encoder = codec.iconv.getEncoder('utf-16le', options);
    }
    
    Utf16Encoder.prototype.write = function(str) {
        return this.encoder.write(str);
    }
    
    Utf16Encoder.prototype.end = function() {
        return this.encoder.end();
    }
    
    
    // -- Decoding
    
    function Utf16Decoder(options, codec) {
        this.decoder = null;
        this.initialBytes = [];
        this.initialBytesLen = 0;
    
        this.options = options || {};
        this.iconv = codec.iconv;
    }
    
    Utf16Decoder.prototype.write = function(buf) {
        if (!this.decoder) {
            // Codec is not chosen yet. Accumulate initial bytes.
            this.initialBytes.push(buf);
            this.initialBytesLen += buf.length;
            
            if (this.initialBytesLen < 16) // We need more bytes to use space heuristic (see below)
                return '';
    
            // We have enough bytes -> detect endianness.
            var buf = Buffer.concat(this.initialBytes),
                encoding = detectEncoding(buf, this.options.defaultEncoding);
            this.decoder = this.iconv.getDecoder(encoding, this.options);
            this.initialBytes.length = this.initialBytesLen = 0;
        }
    
        return this.decoder.write(buf);
    }
    
    Utf16Decoder.prototype.end = function() {
        if (!this.decoder) {
            var buf = Buffer.concat(this.initialBytes),
                encoding = detectEncoding(buf, this.options.defaultEncoding);
            this.decoder = this.iconv.getDecoder(encoding, this.options);
    
            var res = this.decoder.write(buf),
                trail = this.decoder.end();
    
            return trail ? (res + trail) : res;
        }
        return this.decoder.end();
    }
    
    function detectEncoding(buf, defaultEncoding) {
        var enc = defaultEncoding || 'utf-16le';
    
        if (buf.length >= 2) {
            // Check BOM.
            if (buf[0] == 0xFE && buf[1] == 0xFF) // UTF-16BE BOM
                enc = 'utf-16be';
            else if (buf[0] == 0xFF && buf[1] == 0xFE) // UTF-16LE BOM
                enc = 'utf-16le';
            else {
                // No BOM found. Try to deduce encoding from initial content.
                // Most of the time, the content has ASCII chars (U+00**), but the opposite (U+**00) is uncommon.
                // So, we count ASCII as if it was LE or BE, and decide from that.
                var asciiCharsLE = 0, asciiCharsBE = 0, // Counts of chars in both positions
                    _len = Math.min(buf.length - (buf.length % 2), 64); // Len is always even.
    
                for (var i = 0; i < _len; i += 2) {
                    if (buf[i] === 0 && buf[i+1] !== 0) asciiCharsBE++;
                    if (buf[i] !== 0 && buf[i+1] === 0) asciiCharsLE++;
                }
    
                if (asciiCharsBE > asciiCharsLE)
                    enc = 'utf-16be';
                else if (asciiCharsBE < asciiCharsLE)
                    enc = 'utf-16le';
            }
        }
    
        return enc;
    }
    
    
    
  provide("iconv-lite/encodings/utf16", module.exports);
}(global));

// pakmanager:iconv-lite/encodings/utf7
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  "use strict"
    
    // UTF-7 codec, according to https://tools.ietf.org/html/rfc2152
    // See also below a UTF-7-IMAP codec, according to http://tools.ietf.org/html/rfc3501#section-5.1.3
    
    exports.utf7 = Utf7Codec;
    exports.unicode11utf7 = 'utf7'; // Alias UNICODE-1-1-UTF-7
    function Utf7Codec(codecOptions, iconv) {
        this.iconv = iconv;
    };
    
    Utf7Codec.prototype.encoder = Utf7Encoder;
    Utf7Codec.prototype.decoder = Utf7Decoder;
    Utf7Codec.prototype.bomAware = true;
    
    
    // -- Encoding
    
    var nonDirectChars = /[^A-Za-z0-9'\(\),-\.\/:\? \n\r\t]+/g;
    
    function Utf7Encoder(options, codec) {
        this.iconv = codec.iconv;
    }
    
    Utf7Encoder.prototype.write = function(str) {
        // Naive implementation.
        // Non-direct chars are encoded as "+<base64>-"; single "+" char is encoded as "+-".
        return new Buffer(str.replace(nonDirectChars, function(chunk) {
            return "+" + (chunk === '+' ? '' : 
                this.iconv.encode(chunk, 'utf16-be').toString('base64').replace(/=+$/, '')) 
                + "-";
        }.bind(this)));
    }
    
    Utf7Encoder.prototype.end = function() {
    }
    
    
    // -- Decoding
    
    function Utf7Decoder(options, codec) {
        this.iconv = codec.iconv;
        this.inBase64 = false;
        this.base64Accum = '';
    }
    
    var base64Regex = /[A-Za-z0-9\/+]/;
    var base64Chars = [];
    for (var i = 0; i < 256; i++)
        base64Chars[i] = base64Regex.test(String.fromCharCode(i));
    
    var plusChar = '+'.charCodeAt(0), 
        minusChar = '-'.charCodeAt(0),
        andChar = '&'.charCodeAt(0);
    
    Utf7Decoder.prototype.write = function(buf) {
        var res = "", lastI = 0,
            inBase64 = this.inBase64,
            base64Accum = this.base64Accum;
    
        // The decoder is more involved as we must handle chunks in stream.
    
        for (var i = 0; i < buf.length; i++) {
            if (!inBase64) { // We're in direct mode.
                // Write direct chars until '+'
                if (buf[i] == plusChar) {
                    res += this.iconv.decode(buf.slice(lastI, i), "ascii"); // Write direct chars.
                    lastI = i+1;
                    inBase64 = true;
                }
            } else { // We decode base64.
                if (!base64Chars[buf[i]]) { // Base64 ended.
                    if (i == lastI && buf[i] == minusChar) {// "+-" -> "+"
                        res += "+";
                    } else {
                        var b64str = base64Accum + buf.slice(lastI, i).toString();
                        res += this.iconv.decode(new Buffer(b64str, 'base64'), "utf16-be");
                    }
    
                    if (buf[i] != minusChar) // Minus is absorbed after base64.
                        i--;
    
                    lastI = i+1;
                    inBase64 = false;
                    base64Accum = '';
                }
            }
        }
    
        if (!inBase64) {
            res += this.iconv.decode(buf.slice(lastI), "ascii"); // Write direct chars.
        } else {
            var b64str = base64Accum + buf.slice(lastI).toString();
    
            var canBeDecoded = b64str.length - (b64str.length % 8); // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.
            base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.
            b64str = b64str.slice(0, canBeDecoded);
    
            res += this.iconv.decode(new Buffer(b64str, 'base64'), "utf16-be");
        }
    
        this.inBase64 = inBase64;
        this.base64Accum = base64Accum;
    
        return res;
    }
    
    Utf7Decoder.prototype.end = function() {
        var res = "";
        if (this.inBase64 && this.base64Accum.length > 0)
            res = this.iconv.decode(new Buffer(this.base64Accum, 'base64'), "utf16-be");
    
        this.inBase64 = false;
        this.base64Accum = '';
        return res;
    }
    
    
    // UTF-7-IMAP codec.
    // RFC3501 Sec. 5.1.3 Modified UTF-7 (http://tools.ietf.org/html/rfc3501#section-5.1.3)
    // Differences:
    //  * Base64 part is started by "&" instead of "+"
    //  * Direct characters are 0x20-0x7E, except "&" (0x26)
    //  * In Base64, "," is used instead of "/"
    //  * Base64 must not be used to represent direct characters.
    //  * No implicit shift back from Base64 (should always end with '-')
    //  * String must end in non-shifted position.
    //  * "-&" while in base64 is not allowed.
    
    
    exports.utf7imap = Utf7IMAPCodec;
    function Utf7IMAPCodec(codecOptions, iconv) {
        this.iconv = iconv;
    };
    
    Utf7IMAPCodec.prototype.encoder = Utf7IMAPEncoder;
    Utf7IMAPCodec.prototype.decoder = Utf7IMAPDecoder;
    Utf7IMAPCodec.prototype.bomAware = true;
    
    
    // -- Encoding
    
    function Utf7IMAPEncoder(options, codec) {
        this.iconv = codec.iconv;
        this.inBase64 = false;
        this.base64Accum = new Buffer(6);
        this.base64AccumIdx = 0;
    }
    
    Utf7IMAPEncoder.prototype.write = function(str) {
        var inBase64 = this.inBase64,
            base64Accum = this.base64Accum,
            base64AccumIdx = this.base64AccumIdx,
            buf = new Buffer(str.length*5 + 10), bufIdx = 0;
    
        for (var i = 0; i < str.length; i++) {
            var uChar = str.charCodeAt(i);
            if (0x20 <= uChar && uChar <= 0x7E) { // Direct character or '&'.
                if (inBase64) {
                    if (base64AccumIdx > 0) {
                        bufIdx += buf.write(base64Accum.slice(0, base64AccumIdx).toString('base64').replace(/\//g, ',').replace(/=+$/, ''), bufIdx);
                        base64AccumIdx = 0;
                    }
    
                    buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.
                    inBase64 = false;
                }
    
                if (!inBase64) {
                    buf[bufIdx++] = uChar; // Write direct character
    
                    if (uChar === andChar)  // Ampersand -> '&-'
                        buf[bufIdx++] = minusChar;
                }
    
            } else { // Non-direct character
                if (!inBase64) {
                    buf[bufIdx++] = andChar; // Write '&', then go to base64 mode.
                    inBase64 = true;
                }
                if (inBase64) {
                    base64Accum[base64AccumIdx++] = uChar >> 8;
                    base64Accum[base64AccumIdx++] = uChar & 0xFF;
    
                    if (base64AccumIdx == base64Accum.length) {
                        bufIdx += buf.write(base64Accum.toString('base64').replace(/\//g, ','), bufIdx);
                        base64AccumIdx = 0;
                    }
                }
            }
        }
    
        this.inBase64 = inBase64;
        this.base64AccumIdx = base64AccumIdx;
    
        return buf.slice(0, bufIdx);
    }
    
    Utf7IMAPEncoder.prototype.end = function() {
        var buf = new Buffer(10), bufIdx = 0;
        if (this.inBase64) {
            if (this.base64AccumIdx > 0) {
                bufIdx += buf.write(this.base64Accum.slice(0, this.base64AccumIdx).toString('base64').replace(/\//g, ',').replace(/=+$/, ''), bufIdx);
                this.base64AccumIdx = 0;
            }
    
            buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.
            this.inBase64 = false;
        }
    
        return buf.slice(0, bufIdx);
    }
    
    
    // -- Decoding
    
    function Utf7IMAPDecoder(options, codec) {
        this.iconv = codec.iconv;
        this.inBase64 = false;
        this.base64Accum = '';
    }
    
    var base64IMAPChars = base64Chars.slice();
    base64IMAPChars[','.charCodeAt(0)] = true;
    
    Utf7IMAPDecoder.prototype.write = function(buf) {
        var res = "", lastI = 0,
            inBase64 = this.inBase64,
            base64Accum = this.base64Accum;
    
        // The decoder is more involved as we must handle chunks in stream.
        // It is forgiving, closer to standard UTF-7 (for example, '-' is optional at the end).
    
        for (var i = 0; i < buf.length; i++) {
            if (!inBase64) { // We're in direct mode.
                // Write direct chars until '&'
                if (buf[i] == andChar) {
                    res += this.iconv.decode(buf.slice(lastI, i), "ascii"); // Write direct chars.
                    lastI = i+1;
                    inBase64 = true;
                }
            } else { // We decode base64.
                if (!base64IMAPChars[buf[i]]) { // Base64 ended.
                    if (i == lastI && buf[i] == minusChar) { // "&-" -> "&"
                        res += "&";
                    } else {
                        var b64str = base64Accum + buf.slice(lastI, i).toString().replace(/,/g, '/');
                        res += this.iconv.decode(new Buffer(b64str, 'base64'), "utf16-be");
                    }
    
                    if (buf[i] != minusChar) // Minus may be absorbed after base64.
                        i--;
    
                    lastI = i+1;
                    inBase64 = false;
                    base64Accum = '';
                }
            }
        }
    
        if (!inBase64) {
            res += this.iconv.decode(buf.slice(lastI), "ascii"); // Write direct chars.
        } else {
            var b64str = base64Accum + buf.slice(lastI).toString().replace(/,/g, '/');
    
            var canBeDecoded = b64str.length - (b64str.length % 8); // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.
            base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.
            b64str = b64str.slice(0, canBeDecoded);
    
            res += this.iconv.decode(new Buffer(b64str, 'base64'), "utf16-be");
        }
    
        this.inBase64 = inBase64;
        this.base64Accum = base64Accum;
    
        return res;
    }
    
    Utf7IMAPDecoder.prototype.end = function() {
        var res = "";
        if (this.inBase64 && this.base64Accum.length > 0)
            res = this.iconv.decode(new Buffer(this.base64Accum, 'base64'), "utf16-be");
    
        this.inBase64 = false;
        this.base64Accum = '';
        return res;
    }
    
    
    
  provide("iconv-lite/encodings/utf7", module.exports);
}(global));

// pakmanager:iconv-lite/encodings/sbcs-codec
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  "use strict"
    
    // Single-byte codec. Needs a 'chars' string parameter that contains 256 or 128 chars that
    // correspond to encoded bytes (if 128 - then lower half is ASCII). 
    
    exports._sbcs = SBCSCodec;
    function SBCSCodec(codecOptions, iconv) {
        if (!codecOptions)
            throw new Error("SBCS codec is called without the data.")
        
        // Prepare char buffer for decoding.
        if (!codecOptions.chars || (codecOptions.chars.length !== 128 && codecOptions.chars.length !== 256))
            throw new Error("Encoding '"+codecOptions.type+"' has incorrect 'chars' (must be of len 128 or 256)");
        
        if (codecOptions.chars.length === 128) {
            var asciiString = "";
            for (var i = 0; i < 128; i++)
                asciiString += String.fromCharCode(i);
            codecOptions.chars = asciiString + codecOptions.chars;
        }
    
        this.decodeBuf = new Buffer(codecOptions.chars, 'ucs2');
        
        // Encoding buffer.
        var encodeBuf = new Buffer(65536);
        encodeBuf.fill(iconv.defaultCharSingleByte.charCodeAt(0));
    
        for (var i = 0; i < codecOptions.chars.length; i++)
            encodeBuf[codecOptions.chars.charCodeAt(i)] = i;
    
        this.encodeBuf = encodeBuf;
    }
    
    SBCSCodec.prototype.encoder = SBCSEncoder;
    SBCSCodec.prototype.decoder = SBCSDecoder;
    
    
    function SBCSEncoder(options, codec) {
        this.encodeBuf = codec.encodeBuf;
    }
    
    SBCSEncoder.prototype.write = function(str) {
        var buf = new Buffer(str.length);
        for (var i = 0; i < str.length; i++)
            buf[i] = this.encodeBuf[str.charCodeAt(i)];
        
        return buf;
    }
    
    SBCSEncoder.prototype.end = function() {
    }
    
    
    function SBCSDecoder(options, codec) {
        this.decodeBuf = codec.decodeBuf;
    }
    
    SBCSDecoder.prototype.write = function(buf) {
        // Strings are immutable in JS -> we use ucs2 buffer to speed up computations.
        var decodeBuf = this.decodeBuf;
        var newBuf = new Buffer(buf.length*2);
        var idx1 = 0, idx2 = 0;
        for (var i = 0; i < buf.length; i++) {
            idx1 = buf[i]*2; idx2 = i*2;
            newBuf[idx2] = decodeBuf[idx1];
            newBuf[idx2+1] = decodeBuf[idx1+1];
        }
        return newBuf.toString('ucs2');
    }
    
    SBCSDecoder.prototype.end = function() {
    }
    
  provide("iconv-lite/encodings/sbcs-codec", module.exports);
}(global));

// pakmanager:iconv-lite/encodings/sbcs-data
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  "use strict"
    
    // Manually added data to be used by sbcs codec in addition to generated one.
    
    module.exports = {
        // Not supported by iconv, not sure why.
        "10029": "maccenteuro",
        "maccenteuro": {
            "type": "_sbcs",
            "chars": "ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ"
        },
    
        "808": "cp808",
        "ibm808": "cp808",
        "cp808": {
            "type": "_sbcs",
            "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№€■ "
        },
    
        // Aliases of generated encodings.
        "ascii8bit": "ascii",
        "usascii": "ascii",
        "ansix34": "ascii",
        "ansix341968": "ascii",
        "ansix341986": "ascii",
        "csascii": "ascii",
        "cp367": "ascii",
        "ibm367": "ascii",
        "isoir6": "ascii",
        "iso646us": "ascii",
        "iso646irv": "ascii",
        "us": "ascii",
    
        "latin1": "iso88591",
        "latin2": "iso88592",
        "latin3": "iso88593",
        "latin4": "iso88594",
        "latin5": "iso88599",
        "latin6": "iso885910",
        "latin7": "iso885913",
        "latin8": "iso885914",
        "latin9": "iso885915",
        "latin10": "iso885916",
    
        "csisolatin1": "iso88591",
        "csisolatin2": "iso88592",
        "csisolatin3": "iso88593",
        "csisolatin4": "iso88594",
        "csisolatincyrillic": "iso88595",
        "csisolatinarabic": "iso88596",
        "csisolatingreek" : "iso88597",
        "csisolatinhebrew": "iso88598",
        "csisolatin5": "iso88599",
        "csisolatin6": "iso885910",
    
        "l1": "iso88591",
        "l2": "iso88592",
        "l3": "iso88593",
        "l4": "iso88594",
        "l5": "iso88599",
        "l6": "iso885910",
        "l7": "iso885913",
        "l8": "iso885914",
        "l9": "iso885915",
        "l10": "iso885916",
    
        "isoir14": "iso646jp",
        "isoir57": "iso646cn",
        "isoir100": "iso88591",
        "isoir101": "iso88592",
        "isoir109": "iso88593",
        "isoir110": "iso88594",
        "isoir144": "iso88595",
        "isoir127": "iso88596",
        "isoir126": "iso88597",
        "isoir138": "iso88598",
        "isoir148": "iso88599",
        "isoir157": "iso885910",
        "isoir166": "tis620",
        "isoir179": "iso885913",
        "isoir199": "iso885914",
        "isoir203": "iso885915",
        "isoir226": "iso885916",
    
        "cp819": "iso88591",
        "ibm819": "iso88591",
    
        "cyrillic": "iso88595",
    
        "arabic": "iso88596",
        "arabic8": "iso88596",
        "ecma114": "iso88596",
        "asmo708": "iso88596",
    
        "greek" : "iso88597",
        "greek8" : "iso88597",
        "ecma118" : "iso88597",
        "elot928" : "iso88597",
    
        "hebrew": "iso88598",
        "hebrew8": "iso88598",
    
        "turkish": "iso88599",
        "turkish8": "iso88599",
    
        "thai": "iso885911",
        "thai8": "iso885911",
    
        "celtic": "iso885914",
        "celtic8": "iso885914",
        "isoceltic": "iso885914",
    
        "tis6200": "tis620",
        "tis62025291": "tis620",
        "tis62025330": "tis620",
    
        "10000": "macroman",
        "10006": "macgreek",
        "10007": "maccyrillic",
        "10079": "maciceland",
        "10081": "macturkish",
    
        "cspc8codepage437": "cp437",
        "cspc775baltic": "cp775",
        "cspc850multilingual": "cp850",
        "cspcp852": "cp852",
        "cspc862latinhebrew": "cp862",
        "cpgr": "cp869",
    
        "msee": "cp1250",
        "mscyrl": "cp1251",
        "msansi": "cp1252",
        "msgreek": "cp1253",
        "msturk": "cp1254",
        "mshebr": "cp1255",
        "msarab": "cp1256",
        "winbaltrim": "cp1257",
    
        "cp20866": "koi8r",
        "20866": "koi8r",
        "ibm878": "koi8r",
        "cskoi8r": "koi8r",
    
        "cp21866": "koi8u",
        "21866": "koi8u",
        "ibm1168": "koi8u",
    
        "strk10482002": "rk1048",
    
        "tcvn5712": "tcvn",
        "tcvn57121": "tcvn",
    
        "gb198880": "iso646cn",
        "cn": "iso646cn",
    
        "csiso14jisc6220ro": "iso646jp",
        "jisc62201969ro": "iso646jp",
        "jp": "iso646jp",
    
        "cshproman8": "hproman8",
        "r8": "hproman8",
        "roman8": "hproman8",
        "xroman8": "hproman8",
        "ibm1051": "hproman8",
    
        "mac": "macintosh",
        "csmacintosh": "macintosh",
    };
    
    
  provide("iconv-lite/encodings/sbcs-data", module.exports);
}(global));

// pakmanager:iconv-lite/encodings/sbcs-data-generated
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  "use strict"
    
    // Generated data for sbcs codec. Don't edit manually. Regenerate using generation/gen-sbcs.js script.
    module.exports = {
      "437": "cp437",
      "737": "cp737",
      "775": "cp775",
      "850": "cp850",
      "852": "cp852",
      "855": "cp855",
      "856": "cp856",
      "857": "cp857",
      "858": "cp858",
      "860": "cp860",
      "861": "cp861",
      "862": "cp862",
      "863": "cp863",
      "864": "cp864",
      "865": "cp865",
      "866": "cp866",
      "869": "cp869",
      "874": "windows874",
      "922": "cp922",
      "1046": "cp1046",
      "1124": "cp1124",
      "1125": "cp1125",
      "1129": "cp1129",
      "1133": "cp1133",
      "1161": "cp1161",
      "1162": "cp1162",
      "1163": "cp1163",
      "1250": "windows1250",
      "1251": "windows1251",
      "1252": "windows1252",
      "1253": "windows1253",
      "1254": "windows1254",
      "1255": "windows1255",
      "1256": "windows1256",
      "1257": "windows1257",
      "1258": "windows1258",
      "28591": "iso88591",
      "28592": "iso88592",
      "28593": "iso88593",
      "28594": "iso88594",
      "28595": "iso88595",
      "28596": "iso88596",
      "28597": "iso88597",
      "28598": "iso88598",
      "28599": "iso88599",
      "28600": "iso885910",
      "28601": "iso885911",
      "28603": "iso885913",
      "28604": "iso885914",
      "28605": "iso885915",
      "28606": "iso885916",
      "windows874": {
        "type": "_sbcs",
        "chars": "€����…�����������‘’“”•–—�������� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
      },
      "win874": "windows874",
      "cp874": "windows874",
      "windows1250": {
        "type": "_sbcs",
        "chars": "€�‚�„…†‡�‰Š‹ŚŤŽŹ�‘’“”•–—�™š›śťžź ˇ˘Ł¤Ą¦§¨©Ş«¬­®Ż°±˛ł´µ¶·¸ąş»Ľ˝ľżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙"
      },
      "win1250": "windows1250",
      "cp1250": "windows1250",
      "windows1251": {
        "type": "_sbcs",
        "chars": "ЂЃ‚ѓ„…†‡€‰Љ‹ЊЌЋЏђ‘’“”•–—�™љ›њќћџ ЎўЈ¤Ґ¦§Ё©Є«¬­®Ї°±Ііґµ¶·ё№є»јЅѕїАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"
      },
      "win1251": "windows1251",
      "cp1251": "windows1251",
      "windows1252": {
        "type": "_sbcs",
        "chars": "€�‚ƒ„…†‡ˆ‰Š‹Œ�Ž��‘’“”•–—˜™š›œ�žŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
      },
      "win1252": "windows1252",
      "cp1252": "windows1252",
      "windows1253": {
        "type": "_sbcs",
        "chars": "€�‚ƒ„…†‡�‰�‹�����‘’“”•–—�™�›���� ΅Ά£¤¥¦§¨©�«¬­®―°±²³΄µ¶·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�"
      },
      "win1253": "windows1253",
      "cp1253": "windows1253",
      "windows1254": {
        "type": "_sbcs",
        "chars": "€�‚ƒ„…†‡ˆ‰Š‹Œ����‘’“”•–—˜™š›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ"
      },
      "win1254": "windows1254",
      "cp1254": "windows1254",
      "windows1255": {
        "type": "_sbcs",
        "chars": "€�‚ƒ„…†‡ˆ‰�‹�����‘’“”•–—˜™�›���� ¡¢£₪¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾¿ְֱֲֳִֵֶַָֹ�ֻּֽ־ֿ׀ׁׂ׃װױײ׳״�������אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�"
      },
      "win1255": "windows1255",
      "cp1255": "windows1255",
      "windows1256": {
        "type": "_sbcs",
        "chars": "€پ‚ƒ„…†‡ˆ‰ٹ‹Œچژڈگ‘’“”•–—ک™ڑ›œ‌‍ں ،¢£¤¥¦§¨©ھ«¬­®¯°±²³´µ¶·¸¹؛»¼½¾؟ہءآأؤإئابةتثجحخدذرزسشصض×طظعغـفقكàلâمنهوçèéêëىيîïًٌٍَôُِ÷ّùْûü‎‏ے"
      },
      "win1256": "windows1256",
      "cp1256": "windows1256",
      "windows1257": {
        "type": "_sbcs",
        "chars": "€�‚�„…†‡�‰�‹�¨ˇ¸�‘’“”•–—�™�›�¯˛� �¢£¤�¦§Ø©Ŗ«¬­®Æ°±²³´µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž˙"
      },
      "win1257": "windows1257",
      "cp1257": "windows1257",
      "windows1258": {
        "type": "_sbcs",
        "chars": "€�‚ƒ„…†‡ˆ‰�‹Œ����‘’“”•–—˜™�›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"
      },
      "win1258": "windows1258",
      "cp1258": "windows1258",
      "iso88591": {
        "type": "_sbcs",
        "chars": " ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
      },
      "cp28591": "iso88591",
      "iso88592": {
        "type": "_sbcs",
        "chars": " Ą˘Ł¤ĽŚ§¨ŠŞŤŹ­ŽŻ°ą˛ł´ľśˇ¸šşťź˝žżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙"
      },
      "cp28592": "iso88592",
      "iso88593": {
        "type": "_sbcs",
        "chars": " Ħ˘£¤�Ĥ§¨İŞĞĴ­�Ż°ħ²³´µĥ·¸ışğĵ½�żÀÁÂ�ÄĊĈÇÈÉÊËÌÍÎÏ�ÑÒÓÔĠÖ×ĜÙÚÛÜŬŜßàáâ�äċĉçèéêëìíîï�ñòóôġö÷ĝùúûüŭŝ˙"
      },
      "cp28593": "iso88593",
      "iso88594": {
        "type": "_sbcs",
        "chars": " ĄĸŖ¤ĨĻ§¨ŠĒĢŦ­Ž¯°ą˛ŗ´ĩļˇ¸šēģŧŊžŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎĪĐŅŌĶÔÕÖ×ØŲÚÛÜŨŪßāáâãäåæįčéęëėíîīđņōķôõö÷øųúûüũū˙"
      },
      "cp28594": "iso88594",
      "iso88595": {
        "type": "_sbcs",
        "chars": " ЁЂЃЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђѓєѕіїјљњћќ§ўџ"
      },
      "cp28595": "iso88595",
      "iso88596": {
        "type": "_sbcs",
        "chars": " ���¤�������،­�������������؛���؟�ءآأؤإئابةتثجحخدذرزسشصضطظعغ�����ـفقكلمنهوىيًٌٍَُِّْ�������������"
      },
      "cp28596": "iso88596",
      "iso88597": {
        "type": "_sbcs",
        "chars": " ‘’£€₯¦§¨©ͺ«¬­�―°±²³΄΅Ά·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�"
      },
      "cp28597": "iso88597",
      "iso88598": {
        "type": "_sbcs",
        "chars": " �¢£¤¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾��������������������������������‗אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�"
      },
      "cp28598": "iso88598",
      "iso88599": {
        "type": "_sbcs",
        "chars": " ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ"
      },
      "cp28599": "iso88599",
      "iso885910": {
        "type": "_sbcs",
        "chars": " ĄĒĢĪĨĶ§ĻĐŠŦŽ­ŪŊ°ąēģīĩķ·ļđšŧž―ūŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎÏÐŅŌÓÔÕÖŨØŲÚÛÜÝÞßāáâãäåæįčéęëėíîïðņōóôõöũøųúûüýþĸ"
      },
      "cp28600": "iso885910",
      "iso885911": {
        "type": "_sbcs",
        "chars": " กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
      },
      "cp28601": "iso885911",
      "iso885913": {
        "type": "_sbcs",
        "chars": " ”¢£¤„¦§Ø©Ŗ«¬­®Æ°±²³“µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž’"
      },
      "cp28603": "iso885913",
      "iso885914": {
        "type": "_sbcs",
        "chars": " Ḃḃ£ĊċḊ§Ẁ©ẂḋỲ­®ŸḞḟĠġṀṁ¶ṖẁṗẃṠỳẄẅṡÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŴÑÒÓÔÕÖṪØÙÚÛÜÝŶßàáâãäåæçèéêëìíîïŵñòóôõöṫøùúûüýŷÿ"
      },
      "cp28604": "iso885914",
      "iso885915": {
        "type": "_sbcs",
        "chars": " ¡¢£€¥Š§š©ª«¬­®¯°±²³Žµ¶·ž¹º»ŒœŸ¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
      },
      "cp28605": "iso885915",
      "iso885916": {
        "type": "_sbcs",
        "chars": " ĄąŁ€„Š§š©Ș«Ź­źŻ°±ČłŽ”¶·žčș»ŒœŸżÀÁÂĂÄĆÆÇÈÉÊËÌÍÎÏĐŃÒÓÔŐÖŚŰÙÚÛÜĘȚßàáâăäćæçèéêëìíîïđńòóôőöśűùúûüęțÿ"
      },
      "cp28606": "iso885916",
      "cp437": {
        "type": "_sbcs",
        "chars": "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
      },
      "ibm437": "cp437",
      "csibm437": "cp437",
      "cp737": {
        "type": "_sbcs",
        "chars": "ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρσςτυφχψ░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀ωάέήϊίόύϋώΆΈΉΊΌΎΏ±≥≤ΪΫ÷≈°∙·√ⁿ²■ "
      },
      "ibm737": "cp737",
      "csibm737": "cp737",
      "cp775": {
        "type": "_sbcs",
        "chars": "ĆüéāäģåćłēŖŗīŹÄÅÉæÆōöĢ¢ŚśÖÜø£Ø×¤ĀĪóŻżź”¦©®¬½¼Ł«»░▒▓│┤ĄČĘĖ╣║╗╝ĮŠ┐└┴┬├─┼ŲŪ╚╔╩╦╠═╬Žąčęėįšųūž┘┌█▄▌▐▀ÓßŌŃõÕµńĶķĻļņĒŅ’­±“¾¶§÷„°∙·¹³²■ "
      },
      "ibm775": "cp775",
      "csibm775": "cp775",
      "cp850": {
        "type": "_sbcs",
        "chars": "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈıÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ "
      },
      "ibm850": "cp850",
      "csibm850": "cp850",
      "cp852": {
        "type": "_sbcs",
        "chars": "ÇüéâäůćçłëŐőîŹÄĆÉĹĺôöĽľŚśÖÜŤťŁ×čáíóúĄąŽžĘę¬źČş«»░▒▓│┤ÁÂĚŞ╣║╗╝Żż┐└┴┬├─┼Ăă╚╔╩╦╠═╬¤đĐĎËďŇÍÎě┘┌█▄ŢŮ▀ÓßÔŃńňŠšŔÚŕŰýÝţ´­˝˛ˇ˘§÷¸°¨˙űŘř■ "
      },
      "ibm852": "cp852",
      "csibm852": "cp852",
      "cp855": {
        "type": "_sbcs",
        "chars": "ђЂѓЃёЁєЄѕЅіІїЇјЈљЉњЊћЋќЌўЎџЏюЮъЪаАбБцЦдДеЕфФгГ«»░▒▓│┤хХиИ╣║╗╝йЙ┐└┴┬├─┼кК╚╔╩╦╠═╬¤лЛмМнНоОп┘┌█▄Пя▀ЯрРсСтТуУжЖвВьЬ№­ыЫзЗшШэЭщЩчЧ§■ "
      },
      "ibm855": "cp855",
      "csibm855": "cp855",
      "cp856": {
        "type": "_sbcs",
        "chars": "אבגדהוזחטיךכלםמןנסעףפץצקרשת�£�×����������®¬½¼�«»░▒▓│┤���©╣║╗╝¢¥┐└┴┬├─┼��╚╔╩╦╠═╬¤���������┘┌█▄¦�▀������µ�������¯´­±‗¾¶§÷¸°¨·¹³²■ "
      },
      "ibm856": "cp856",
      "csibm856": "cp856",
      "cp857": {
        "type": "_sbcs",
        "chars": "ÇüéâäàåçêëèïîıÄÅÉæÆôöòûùİÖÜø£ØŞşáíóúñÑĞğ¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ºªÊËÈ�ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµ�×ÚÛÙìÿ¯´­±�¾¶§÷¸°¨·¹³²■ "
      },
      "ibm857": "cp857",
      "csibm857": "cp857",
      "cp858": {
        "type": "_sbcs",
        "chars": "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈ€ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ "
      },
      "ibm858": "cp858",
      "csibm858": "cp858",
      "cp860": {
        "type": "_sbcs",
        "chars": "ÇüéâãàÁçêÊèÍÔìÃÂÉÀÈôõòÚùÌÕÜ¢£Ù₧ÓáíóúñÑªº¿Ò¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
      },
      "ibm860": "cp860",
      "csibm860": "cp860",
      "cp861": {
        "type": "_sbcs",
        "chars": "ÇüéâäàåçêëèÐðÞÄÅÉæÆôöþûÝýÖÜø£Ø₧ƒáíóúÁÍÓÚ¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
      },
      "ibm861": "cp861",
      "csibm861": "cp861",
      "cp862": {
        "type": "_sbcs",
        "chars": "אבגדהוזחטיךכלםמןנסעףפץצקרשת¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
      },
      "ibm862": "cp862",
      "csibm862": "cp862",
      "cp863": {
        "type": "_sbcs",
        "chars": "ÇüéâÂà¶çêëèïî‗À§ÉÈÊôËÏûù¤ÔÜ¢£ÙÛƒ¦´óú¨¸³¯Î⌐¬½¼¾«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
      },
      "ibm863": "cp863",
      "csibm863": "cp863",
      "cp864": {
        "type": "_sbcs",
        "chars": "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$٪&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~°·∙√▒─│┼┤┬├┴┐┌└┘β∞φ±½¼≈«»ﻷﻸ��ﻻﻼ� ­ﺂ£¤ﺄ��ﺎﺏﺕﺙ،ﺝﺡﺥ٠١٢٣٤٥٦٧٨٩ﻑ؛ﺱﺵﺹ؟¢ﺀﺁﺃﺅﻊﺋﺍﺑﺓﺗﺛﺟﺣﺧﺩﺫﺭﺯﺳﺷﺻﺿﻁﻅﻋﻏ¦¬÷×ﻉـﻓﻗﻛﻟﻣﻧﻫﻭﻯﻳﺽﻌﻎﻍﻡﹽّﻥﻩﻬﻰﻲﻐﻕﻵﻶﻝﻙﻱ■�"
      },
      "ibm864": "cp864",
      "csibm864": "cp864",
      "cp865": {
        "type": "_sbcs",
        "chars": "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø₧ƒáíóúñÑªº¿⌐¬½¼¡«¤░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
      },
      "ibm865": "cp865",
      "csibm865": "cp865",
      "cp866": {
        "type": "_sbcs",
        "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№¤■ "
      },
      "ibm866": "cp866",
      "csibm866": "cp866",
      "cp869": {
        "type": "_sbcs",
        "chars": "������Ά�·¬¦‘’Έ―ΉΊΪΌ��ΎΫ©Ώ²³ά£έήίϊΐόύΑΒΓΔΕΖΗ½ΘΙ«»░▒▓│┤ΚΛΜΝ╣║╗╝ΞΟ┐└┴┬├─┼ΠΡ╚╔╩╦╠═╬ΣΤΥΦΧΨΩαβγ┘┌█▄δε▀ζηθικλμνξοπρσςτ΄­±υφχ§ψ΅°¨ωϋΰώ■ "
      },
      "ibm869": "cp869",
      "csibm869": "cp869",
      "cp922": {
        "type": "_sbcs",
        "chars": " ¡¢£¤¥¦§¨©ª«¬­®‾°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŠÑÒÓÔÕÖ×ØÙÚÛÜÝŽßàáâãäåæçèéêëìíîïšñòóôõö÷øùúûüýžÿ"
      },
      "ibm922": "cp922",
      "csibm922": "cp922",
      "cp1046": {
        "type": "_sbcs",
        "chars": "ﺈ×÷ﹱ■│─┐┌└┘ﹹﹻﹽﹿﹷﺊﻰﻳﻲﻎﻏﻐﻶﻸﻺﻼ ¤ﺋﺑﺗﺛﺟﺣ،­ﺧﺳ٠١٢٣٤٥٦٧٨٩ﺷ؛ﺻﺿﻊ؟ﻋءآأؤإئابةتثجحخدذرزسشصضطﻇعغﻌﺂﺄﺎﻓـفقكلمنهوىيًٌٍَُِّْﻗﻛﻟﻵﻷﻹﻻﻣﻧﻬﻩ�"
      },
      "ibm1046": "cp1046",
      "csibm1046": "cp1046",
      "cp1124": {
        "type": "_sbcs",
        "chars": " ЁЂҐЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђґєѕіїјљњћќ§ўџ"
      },
      "ibm1124": "cp1124",
      "csibm1124": "cp1124",
      "cp1125": {
        "type": "_sbcs",
        "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёҐґЄєІіЇї·√№¤■ "
      },
      "ibm1125": "cp1125",
      "csibm1125": "cp1125",
      "cp1129": {
        "type": "_sbcs",
        "chars": " ¡¢£¤¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"
      },
      "ibm1129": "cp1129",
      "csibm1129": "cp1129",
      "cp1133": {
        "type": "_sbcs",
        "chars": " ກຂຄງຈສຊຍດຕຖທນບປຜຝພຟມຢຣລວຫອຮ���ຯະາຳິີຶືຸູຼັົຽ���ເແໂໃໄ່້໊໋໌ໍໆ�ໜໝ₭����������������໐໑໒໓໔໕໖໗໘໙��¢¬¦�"
      },
      "ibm1133": "cp1133",
      "csibm1133": "cp1133",
      "cp1161": {
        "type": "_sbcs",
        "chars": "��������������������������������่กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู้๊๋€฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛¢¬¦ "
      },
      "ibm1161": "cp1161",
      "csibm1161": "cp1161",
      "cp1162": {
        "type": "_sbcs",
        "chars": "€…‘’“”•–— กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
      },
      "ibm1162": "cp1162",
      "csibm1162": "cp1162",
      "cp1163": {
        "type": "_sbcs",
        "chars": " ¡¢£€¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"
      },
      "ibm1163": "cp1163",
      "csibm1163": "cp1163",
      "maccroatian": {
        "type": "_sbcs",
        "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊�©⁄¤‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ"
      },
      "maccyrillic": {
        "type": "_sbcs",
        "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°¢£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµ∂ЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤"
      },
      "macgreek": {
        "type": "_sbcs",
        "chars": "Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦­ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩάΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ�"
      },
      "maciceland": {
        "type": "_sbcs",
        "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
      },
      "macroman": {
        "type": "_sbcs",
        "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
      },
      "macromania": {
        "type": "_sbcs",
        "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂŞ∞±≤≥¥µ∂∑∏π∫ªºΩăş¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›Ţţ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
      },
      "macthai": {
        "type": "_sbcs",
        "chars": "«»…“”�•‘’� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู﻿​–—฿เแโใไๅๆ็่้๊๋์ํ™๏๐๑๒๓๔๕๖๗๘๙®©����"
      },
      "macturkish": {
        "type": "_sbcs",
        "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙ�ˆ˜¯˘˙˚¸˝˛ˇ"
      },
      "macukraine": {
        "type": "_sbcs",
        "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤"
      },
      "koi8r": {
        "type": "_sbcs",
        "chars": "─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ё╓╔╕╖╗╘╙╚╛╜╝╞╟╠╡Ё╢╣╤╥╦╧╨╩╪╫╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
      },
      "koi8u": {
        "type": "_sbcs",
        "chars": "─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґ╝╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪Ґ╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
      },
      "koi8ru": {
        "type": "_sbcs",
        "chars": "─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґў╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪ҐЎ©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
      },
      "koi8t": {
        "type": "_sbcs",
        "chars": "қғ‚Ғ„…†‡�‰ҳ‹ҲҷҶ�Қ‘’“”•–—�™�›�����ӯӮё¤ӣ¦§���«¬­®�°±²Ё�Ӣ¶·�№�»���©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
      },
      "armscii8": {
        "type": "_sbcs",
        "chars": " �և։)(»«—.՝,-֊…՜՛՞ԱաԲբԳգԴդԵեԶզԷէԸըԹթԺժԻիԼլԽխԾծԿկՀհՁձՂղՃճՄմՅյՆնՇշՈոՉչՊպՋջՌռՍսՎվՏտՐրՑցՒւՓփՔքՕօՖֆ՚�"
      },
      "rk1048": {
        "type": "_sbcs",
        "chars": "ЂЃ‚ѓ„…†‡€‰Љ‹ЊҚҺЏђ‘’“”•–—�™љ›њқһџ ҰұӘ¤Ө¦§Ё©Ғ«¬­®Ү°±Ііөµ¶·ё№ғ»әҢңүАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"
      },
      "tcvn": {
        "type": "_sbcs",
        "chars": "\u0000ÚỤ\u0003ỪỬỮ\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010ỨỰỲỶỸÝỴ\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÀẢÃÁẠẶẬÈẺẼÉẸỆÌỈĨÍỊÒỎÕÓỌỘỜỞỠỚỢÙỦŨ ĂÂÊÔƠƯĐăâêôơưđẶ̀̀̉̃́àảãáạẲằẳẵắẴẮẦẨẪẤỀặầẩẫấậèỂẻẽéẹềểễếệìỉỄẾỒĩíịòỔỏõóọồổỗốộờởỡớợùỖủũúụừửữứựỳỷỹýỵỐ"
      },
      "georgianacademy": {
        "type": "_sbcs",
        "chars": "‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზთიკლმნოპჟრსტუფქღყშჩცძწჭხჯჰჱჲჳჴჵჶçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
      },
      "georgianps": {
        "type": "_sbcs",
        "chars": "‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზჱთიკლმნჲოპჟრსტჳუფქღყშჩცძწჭხჴჯჰჵæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
      },
      "pt154": {
        "type": "_sbcs",
        "chars": "ҖҒӮғ„…ҶҮҲүҠӢҢҚҺҸҗ‘’“”•–—ҳҷҡӣңқһҹ ЎўЈӨҘҰ§Ё©Ә«¬ӯ®Ҝ°ұІіҙө¶·ё№ә»јҪҫҝАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"
      },
      "viscii": {
        "type": "_sbcs",
        "chars": "\u0000\u0001Ẳ\u0003\u0004ẴẪ\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013Ỷ\u0015\u0016\u0017\u0018Ỹ\u001a\u001b\u001c\u001dỴ\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ẠẮẰẶẤẦẨẬẼẸẾỀỂỄỆỐỒỔỖỘỢỚỜỞỊỎỌỈỦŨỤỲÕắằặấầẩậẽẹếềểễệốồổỗỠƠộờởịỰỨỪỬơớƯÀÁÂÃẢĂẳẵÈÉÊẺÌÍĨỳĐứÒÓÔạỷừửÙÚỹỵÝỡưàáâãảăữẫèéêẻìíĩỉđựòóôõỏọụùúũủýợỮ"
      },
      "iso646cn": {
        "type": "_sbcs",
        "chars": "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#¥%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}‾��������������������������������������������������������������������������������������������������������������������������������"
      },
      "iso646jp": {
        "type": "_sbcs",
        "chars": "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[¥]^_`abcdefghijklmnopqrstuvwxyz{|}‾��������������������������������������������������������������������������������������������������������������������������������"
      },
      "hproman8": {
        "type": "_sbcs",
        "chars": " ÀÂÈÊËÎÏ´ˋˆ¨˜ÙÛ₤¯Ýý°ÇçÑñ¡¿¤£¥§ƒ¢âêôûáéóúàèòùäëöüÅîØÆåíøæÄìÖÜÉïßÔÁÃãÐðÍÌÓÒÕõŠšÚŸÿÞþ·µ¶¾—¼½ªº«■»±�"
      },
      "macintosh": {
        "type": "_sbcs",
        "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
      },
      "ascii": {
        "type": "_sbcs",
        "chars": "��������������������������������������������������������������������������������������������������������������������������������"
      },
      "tis620": {
        "type": "_sbcs",
        "chars": "���������������������������������กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
      }
    }
  provide("iconv-lite/encodings/sbcs-data-generated", module.exports);
}(global));

// pakmanager:iconv-lite/encodings/dbcs-codec
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  "use strict"
    
    // Multibyte codec. In this scheme, a character is represented by 1 or more bytes.
    // Our codec supports UTF-16 surrogates, extensions for GB18030 and unicode sequences.
    // To save memory and loading time, we read table files only when requested.
    
    exports._dbcs = DBCSCodec;
    
    var UNASSIGNED = -1,
        GB18030_CODE = -2,
        SEQ_START  = -10,
        NODE_START = -1000,
        UNASSIGNED_NODE = new Array(0x100),
        DEF_CHAR = -1;
    
    for (var i = 0; i < 0x100; i++)
        UNASSIGNED_NODE[i] = UNASSIGNED;
    
    
    // Class DBCSCodec reads and initializes mapping tables.
    function DBCSCodec(codecOptions, iconv) {
        this.encodingName = codecOptions.encodingName;
        if (!codecOptions)
            throw new Error("DBCS codec is called without the data.")
        if (!codecOptions.table)
            throw new Error("Encoding '" + this.encodingName + "' has no data.");
    
        // Load tables.
        var mappingTable = codecOptions.table();
    
    
        // Decode tables: MBCS -> Unicode.
    
        // decodeTables is a trie, encoded as an array of arrays of integers. Internal arrays are trie nodes and all have len = 256.
        // Trie root is decodeTables[0].
        // Values: >=  0 -> unicode character code. can be > 0xFFFF
        //         == UNASSIGNED -> unknown/unassigned sequence.
        //         == GB18030_CODE -> this is the end of a GB18030 4-byte sequence.
        //         <= NODE_START -> index of the next node in our trie to process next byte.
        //         <= SEQ_START  -> index of the start of a character code sequence, in decodeTableSeq.
        this.decodeTables = [];
        this.decodeTables[0] = UNASSIGNED_NODE.slice(0); // Create root node.
    
        // Sometimes a MBCS char corresponds to a sequence of unicode chars. We store them as arrays of integers here. 
        this.decodeTableSeq = [];
    
        // Actual mapping tables consist of chunks. Use them to fill up decode tables.
        for (var i = 0; i < mappingTable.length; i++)
            this._addDecodeChunk(mappingTable[i]);
    
        this.defaultCharUnicode = iconv.defaultCharUnicode;
    
        
        // Encode tables: Unicode -> DBCS.
    
        // `encodeTable` is array mapping from unicode char to encoded char. All its values are integers for performance.
        // Because it can be sparse, it is represented as array of buckets by 256 chars each. Bucket can be null.
        // Values: >=  0 -> it is a normal char. Write the value (if <=256 then 1 byte, if <=65536 then 2 bytes, etc.).
        //         == UNASSIGNED -> no conversion found. Output a default char.
        //         <= SEQ_START  -> it's an index in encodeTableSeq, see below. The character starts a sequence.
        this.encodeTable = [];
        
        // `encodeTableSeq` is used when a sequence of unicode characters is encoded as a single code. We use a tree of
        // objects where keys correspond to characters in sequence and leafs are the encoded dbcs values. A special DEF_CHAR key
        // means end of sequence (needed when one sequence is a strict subsequence of another).
        // Objects are kept separately from encodeTable to increase performance.
        this.encodeTableSeq = [];
    
        // Some chars can be decoded, but need not be encoded.
        var skipEncodeChars = {};
        if (codecOptions.encodeSkipVals)
            for (var i = 0; i < codecOptions.encodeSkipVals.length; i++) {
                var val = codecOptions.encodeSkipVals[i];
                if (typeof val === 'number')
                    skipEncodeChars[val] = true;
                else
                    for (var j = val.from; j <= val.to; j++)
                        skipEncodeChars[j] = true;
            }
            
        // Use decode trie to recursively fill out encode tables.
        this._fillEncodeTable(0, 0, skipEncodeChars);
    
        // Add more encoding pairs when needed.
        if (codecOptions.encodeAdd) {
            for (var uChar in codecOptions.encodeAdd)
                if (Object.prototype.hasOwnProperty.call(codecOptions.encodeAdd, uChar))
                    this._setEncodeChar(uChar.charCodeAt(0), codecOptions.encodeAdd[uChar]);
        }
    
        this.defCharSB  = this.encodeTable[0][iconv.defaultCharSingleByte.charCodeAt(0)];
        if (this.defCharSB === UNASSIGNED) this.defCharSB = this.encodeTable[0]['?'];
        if (this.defCharSB === UNASSIGNED) this.defCharSB = "?".charCodeAt(0);
    
    
        // Load & create GB18030 tables when needed.
        if (typeof codecOptions.gb18030 === 'function') {
            this.gb18030 = codecOptions.gb18030(); // Load GB18030 ranges.
    
            // Add GB18030 decode tables.
            var thirdByteNodeIdx = this.decodeTables.length;
            var thirdByteNode = this.decodeTables[thirdByteNodeIdx] = UNASSIGNED_NODE.slice(0);
    
            var fourthByteNodeIdx = this.decodeTables.length;
            var fourthByteNode = this.decodeTables[fourthByteNodeIdx] = UNASSIGNED_NODE.slice(0);
    
            for (var i = 0x81; i <= 0xFE; i++) {
                var secondByteNodeIdx = NODE_START - this.decodeTables[0][i];
                var secondByteNode = this.decodeTables[secondByteNodeIdx];
                for (var j = 0x30; j <= 0x39; j++)
                    secondByteNode[j] = NODE_START - thirdByteNodeIdx;
            }
            for (var i = 0x81; i <= 0xFE; i++)
                thirdByteNode[i] = NODE_START - fourthByteNodeIdx;
            for (var i = 0x30; i <= 0x39; i++)
                fourthByteNode[i] = GB18030_CODE
        }        
    }
    
    DBCSCodec.prototype.encoder = DBCSEncoder;
    DBCSCodec.prototype.decoder = DBCSDecoder;
    
    // Decoder helpers
    DBCSCodec.prototype._getDecodeTrieNode = function(addr) {
        var bytes = [];
        for (; addr > 0; addr >>= 8)
            bytes.push(addr & 0xFF);
        if (bytes.length == 0)
            bytes.push(0);
    
        var node = this.decodeTables[0];
        for (var i = bytes.length-1; i > 0; i--) { // Traverse nodes deeper into the trie.
            var val = node[bytes[i]];
    
            if (val == UNASSIGNED) { // Create new node.
                node[bytes[i]] = NODE_START - this.decodeTables.length;
                this.decodeTables.push(node = UNASSIGNED_NODE.slice(0));
            }
            else if (val <= NODE_START) { // Existing node.
                node = this.decodeTables[NODE_START - val];
            }
            else
                throw new Error("Overwrite byte in " + this.encodingName + ", addr: " + addr.toString(16));
        }
        return node;
    }
    
    
    DBCSCodec.prototype._addDecodeChunk = function(chunk) {
        // First element of chunk is the hex mbcs code where we start.
        var curAddr = parseInt(chunk[0], 16);
    
        // Choose the decoding node where we'll write our chars.
        var writeTable = this._getDecodeTrieNode(curAddr);
        curAddr = curAddr & 0xFF;
    
        // Write all other elements of the chunk to the table.
        for (var k = 1; k < chunk.length; k++) {
            var part = chunk[k];
            if (typeof part === "string") { // String, write as-is.
                for (var l = 0; l < part.length;) {
                    var code = part.charCodeAt(l++);
                    if (0xD800 <= code && code < 0xDC00) { // Decode surrogate
                        var codeTrail = part.charCodeAt(l++);
                        if (0xDC00 <= codeTrail && codeTrail < 0xE000)
                            writeTable[curAddr++] = 0x10000 + (code - 0xD800) * 0x400 + (codeTrail - 0xDC00);
                        else
                            throw new Error("Incorrect surrogate pair in "  + this.encodingName + " at chunk " + chunk[0]);
                    }
                    else if (0x0FF0 < code && code <= 0x0FFF) { // Character sequence (our own encoding used)
                        var len = 0xFFF - code + 2;
                        var seq = [];
                        for (var m = 0; m < len; m++)
                            seq.push(part.charCodeAt(l++)); // Simple variation: don't support surrogates or subsequences in seq.
    
                        writeTable[curAddr++] = SEQ_START - this.decodeTableSeq.length;
                        this.decodeTableSeq.push(seq);
                    }
                    else
                        writeTable[curAddr++] = code; // Basic char
                }
            } 
            else if (typeof part === "number") { // Integer, meaning increasing sequence starting with prev character.
                var charCode = writeTable[curAddr - 1] + 1;
                for (var l = 0; l < part; l++)
                    writeTable[curAddr++] = charCode++;
            }
            else
                throw new Error("Incorrect type '" + typeof part + "' given in "  + this.encodingName + " at chunk " + chunk[0]);
        }
        if (curAddr > 0xFF)
            throw new Error("Incorrect chunk in "  + this.encodingName + " at addr " + chunk[0] + ": too long" + curAddr);
    }
    
    // Encoder helpers
    DBCSCodec.prototype._getEncodeBucket = function(uCode) {
        var high = uCode >> 8; // This could be > 0xFF because of astral characters.
        if (this.encodeTable[high] === undefined)
            this.encodeTable[high] = UNASSIGNED_NODE.slice(0); // Create bucket on demand.
        return this.encodeTable[high];
    }
    
    DBCSCodec.prototype._setEncodeChar = function(uCode, dbcsCode) {
        var bucket = this._getEncodeBucket(uCode);
        var low = uCode & 0xFF;
        if (bucket[low] <= SEQ_START)
            this.encodeTableSeq[SEQ_START-bucket[low]][DEF_CHAR] = dbcsCode; // There's already a sequence, set a single-char subsequence of it.
        else if (bucket[low] == UNASSIGNED)
            bucket[low] = dbcsCode;
    }
    
    DBCSCodec.prototype._setEncodeSequence = function(seq, dbcsCode) {
        
        // Get the root of character tree according to first character of the sequence.
        var uCode = seq[0];
        var bucket = this._getEncodeBucket(uCode);
        var low = uCode & 0xFF;
    
        var node;
        if (bucket[low] <= SEQ_START) {
            // There's already a sequence with  - use it.
            node = this.encodeTableSeq[SEQ_START-bucket[low]];
        }
        else {
            // There was no sequence object - allocate a new one.
            node = {};
            if (bucket[low] !== UNASSIGNED) node[DEF_CHAR] = bucket[low]; // If a char was set before - make it a single-char subsequence.
            bucket[low] = SEQ_START - this.encodeTableSeq.length;
            this.encodeTableSeq.push(node);
        }
    
        // Traverse the character tree, allocating new nodes as needed.
        for (var j = 1; j < seq.length-1; j++) {
            var oldVal = node[uCode];
            if (typeof oldVal === 'object')
                node = oldVal;
            else {
                node = node[uCode] = {}
                if (oldVal !== undefined)
                    node[DEF_CHAR] = oldVal
            }
        }
    
        // Set the leaf to given dbcsCode.
        uCode = seq[seq.length-1];
        node[uCode] = dbcsCode;
    }
    
    DBCSCodec.prototype._fillEncodeTable = function(nodeIdx, prefix, skipEncodeChars) {
        var node = this.decodeTables[nodeIdx];
        for (var i = 0; i < 0x100; i++) {
            var uCode = node[i];
            var mbCode = prefix + i;
            if (skipEncodeChars[mbCode])
                continue;
    
            if (uCode >= 0)
                this._setEncodeChar(uCode, mbCode);
            else if (uCode <= NODE_START)
                this._fillEncodeTable(NODE_START - uCode, mbCode << 8, skipEncodeChars);
            else if (uCode <= SEQ_START)
                this._setEncodeSequence(this.decodeTableSeq[SEQ_START - uCode], mbCode);
        }
    }
    
    
    
    // == Encoder ==================================================================
    
    function DBCSEncoder(options, codec) {
        // Encoder state
        this.leadSurrogate = -1;
        this.seqObj = undefined;
        
        // Static data
        this.encodeTable = codec.encodeTable;
        this.encodeTableSeq = codec.encodeTableSeq;
        this.defaultCharSingleByte = codec.defCharSB;
        this.gb18030 = codec.gb18030;
    }
    
    DBCSEncoder.prototype.write = function(str) {
        var newBuf = new Buffer(str.length * (this.gb18030 ? 4 : 3)), 
            leadSurrogate = this.leadSurrogate,
            seqObj = this.seqObj, nextChar = -1,
            i = 0, j = 0;
    
        while (true) {
            // 0. Get next character.
            if (nextChar === -1) {
                if (i == str.length) break;
                var uCode = str.charCodeAt(i++);
            }
            else {
                var uCode = nextChar;
                nextChar = -1;    
            }
    
            // 1. Handle surrogates.
            if (0xD800 <= uCode && uCode < 0xE000) { // Char is one of surrogates.
                if (uCode < 0xDC00) { // We've got lead surrogate.
                    if (leadSurrogate === -1) {
                        leadSurrogate = uCode;
                        continue;
                    } else {
                        leadSurrogate = uCode;
                        // Double lead surrogate found.
                        uCode = UNASSIGNED;
                    }
                } else { // We've got trail surrogate.
                    if (leadSurrogate !== -1) {
                        uCode = 0x10000 + (leadSurrogate - 0xD800) * 0x400 + (uCode - 0xDC00);
                        leadSurrogate = -1;
                    } else {
                        // Incomplete surrogate pair - only trail surrogate found.
                        uCode = UNASSIGNED;
                    }
                    
                }
            }
            else if (leadSurrogate !== -1) {
                // Incomplete surrogate pair - only lead surrogate found.
                nextChar = uCode; uCode = UNASSIGNED; // Write an error, then current char.
                leadSurrogate = -1;
            }
    
            // 2. Convert uCode character.
            var dbcsCode = UNASSIGNED;
            if (seqObj !== undefined && uCode != UNASSIGNED) { // We are in the middle of the sequence
                var resCode = seqObj[uCode];
                if (typeof resCode === 'object') { // Sequence continues.
                    seqObj = resCode;
                    continue;
    
                } else if (typeof resCode == 'number') { // Sequence finished. Write it.
                    dbcsCode = resCode;
    
                } else if (resCode == undefined) { // Current character is not part of the sequence.
    
                    // Try default character for this sequence
                    resCode = seqObj[DEF_CHAR];
                    if (resCode !== undefined) {
                        dbcsCode = resCode; // Found. Write it.
                        nextChar = uCode; // Current character will be written too in the next iteration.
    
                    } else {
                        // TODO: What if we have no default? (resCode == undefined)
                        // Then, we should write first char of the sequence as-is and try the rest recursively.
                        // Didn't do it for now because no encoding has this situation yet.
                        // Currently, just skip the sequence and write current char.
                    }
                }
                seqObj = undefined;
            }
            else if (uCode >= 0) {  // Regular character
                var subtable = this.encodeTable[uCode >> 8];
                if (subtable !== undefined)
                    dbcsCode = subtable[uCode & 0xFF];
                
                if (dbcsCode <= SEQ_START) { // Sequence start
                    seqObj = this.encodeTableSeq[SEQ_START-dbcsCode];
                    continue;
                }
    
                if (dbcsCode == UNASSIGNED && this.gb18030) {
                    // Use GB18030 algorithm to find character(s) to write.
                    var idx = findIdx(this.gb18030.uChars, uCode);
                    if (idx != -1) {
                        var dbcsCode = this.gb18030.gbChars[idx] + (uCode - this.gb18030.uChars[idx]);
                        newBuf[j++] = 0x81 + Math.floor(dbcsCode / 12600); dbcsCode = dbcsCode % 12600;
                        newBuf[j++] = 0x30 + Math.floor(dbcsCode / 1260); dbcsCode = dbcsCode % 1260;
                        newBuf[j++] = 0x81 + Math.floor(dbcsCode / 10); dbcsCode = dbcsCode % 10;
                        newBuf[j++] = 0x30 + dbcsCode;
                        continue;
                    }
                }
            }
    
            // 3. Write dbcsCode character.
            if (dbcsCode === UNASSIGNED)
                dbcsCode = this.defaultCharSingleByte;
            
            if (dbcsCode < 0x100) {
                newBuf[j++] = dbcsCode;
            }
            else if (dbcsCode < 0x10000) {
                newBuf[j++] = dbcsCode >> 8;   // high byte
                newBuf[j++] = dbcsCode & 0xFF; // low byte
            }
            else {
                newBuf[j++] = dbcsCode >> 16;
                newBuf[j++] = (dbcsCode >> 8) & 0xFF;
                newBuf[j++] = dbcsCode & 0xFF;
            }
        }
    
        this.seqObj = seqObj;
        this.leadSurrogate = leadSurrogate;
        return newBuf.slice(0, j);
    }
    
    DBCSEncoder.prototype.end = function() {
        if (this.leadSurrogate === -1 && this.seqObj === undefined)
            return; // All clean. Most often case.
    
        var newBuf = new Buffer(10), j = 0;
    
        if (this.seqObj) { // We're in the sequence.
            var dbcsCode = this.seqObj[DEF_CHAR];
            if (dbcsCode !== undefined) { // Write beginning of the sequence.
                if (dbcsCode < 0x100) {
                    newBuf[j++] = dbcsCode;
                }
                else {
                    newBuf[j++] = dbcsCode >> 8;   // high byte
                    newBuf[j++] = dbcsCode & 0xFF; // low byte
                }
            } else {
                // See todo above.
            }
            this.seqObj = undefined;
        }
    
        if (this.leadSurrogate !== -1) {
            // Incomplete surrogate pair - only lead surrogate found.
            newBuf[j++] = this.defaultCharSingleByte;
            this.leadSurrogate = -1;
        }
        
        return newBuf.slice(0, j);
    }
    
    // Export for testing
    DBCSEncoder.prototype.findIdx = findIdx;
    
    
    // == Decoder ==================================================================
    
    function DBCSDecoder(options, codec) {
        // Decoder state
        this.nodeIdx = 0;
        this.prevBuf = new Buffer(0);
    
        // Static data
        this.decodeTables = codec.decodeTables;
        this.decodeTableSeq = codec.decodeTableSeq;
        this.defaultCharUnicode = codec.defaultCharUnicode;
        this.gb18030 = codec.gb18030;
    }
    
    DBCSDecoder.prototype.write = function(buf) {
        var newBuf = new Buffer(buf.length*2),
            nodeIdx = this.nodeIdx, 
            prevBuf = this.prevBuf, prevBufOffset = this.prevBuf.length,
            seqStart = -this.prevBuf.length, // idx of the start of current parsed sequence.
            uCode;
    
        if (prevBufOffset > 0) // Make prev buf overlap a little to make it easier to slice later.
            prevBuf = Buffer.concat([prevBuf, buf.slice(0, 10)]);
        
        for (var i = 0, j = 0; i < buf.length; i++) {
            var curByte = (i >= 0) ? buf[i] : prevBuf[i + prevBufOffset];
    
            // Lookup in current trie node.
            var uCode = this.decodeTables[nodeIdx][curByte];
    
            if (uCode >= 0) { 
                // Normal character, just use it.
            }
            else if (uCode === UNASSIGNED) { // Unknown char.
                // TODO: Callback with seq.
                //var curSeq = (seqStart >= 0) ? buf.slice(seqStart, i+1) : prevBuf.slice(seqStart + prevBufOffset, i+1 + prevBufOffset);
                i = seqStart; // Try to parse again, after skipping first byte of the sequence ('i' will be incremented by 'for' cycle).
                uCode = this.defaultCharUnicode.charCodeAt(0);
            }
            else if (uCode === GB18030_CODE) {
                var curSeq = (seqStart >= 0) ? buf.slice(seqStart, i+1) : prevBuf.slice(seqStart + prevBufOffset, i+1 + prevBufOffset);
                var ptr = (curSeq[0]-0x81)*12600 + (curSeq[1]-0x30)*1260 + (curSeq[2]-0x81)*10 + (curSeq[3]-0x30);
                var idx = findIdx(this.gb18030.gbChars, ptr);
                uCode = this.gb18030.uChars[idx] + ptr - this.gb18030.gbChars[idx];
            }
            else if (uCode <= NODE_START) { // Go to next trie node.
                nodeIdx = NODE_START - uCode;
                continue;
            }
            else if (uCode <= SEQ_START) { // Output a sequence of chars.
                var seq = this.decodeTableSeq[SEQ_START - uCode];
                for (var k = 0; k < seq.length - 1; k++) {
                    uCode = seq[k];
                    newBuf[j++] = uCode & 0xFF;
                    newBuf[j++] = uCode >> 8;
                }
                uCode = seq[seq.length-1];
            }
            else
                throw new Error("iconv-lite internal error: invalid decoding table value " + uCode + " at " + nodeIdx + "/" + curByte);
    
            // Write the character to buffer, handling higher planes using surrogate pair.
            if (uCode > 0xFFFF) { 
                uCode -= 0x10000;
                var uCodeLead = 0xD800 + Math.floor(uCode / 0x400);
                newBuf[j++] = uCodeLead & 0xFF;
                newBuf[j++] = uCodeLead >> 8;
    
                uCode = 0xDC00 + uCode % 0x400;
            }
            newBuf[j++] = uCode & 0xFF;
            newBuf[j++] = uCode >> 8;
    
            // Reset trie node.
            nodeIdx = 0; seqStart = i+1;
        }
    
        this.nodeIdx = nodeIdx;
        this.prevBuf = (seqStart >= 0) ? buf.slice(seqStart) : prevBuf.slice(seqStart + prevBufOffset);
        return newBuf.slice(0, j).toString('ucs2');
    }
    
    DBCSDecoder.prototype.end = function() {
        var ret = '';
    
        // Try to parse all remaining chars.
        while (this.prevBuf.length > 0) {
            // Skip 1 character in the buffer.
            ret += this.defaultCharUnicode;
            var buf = this.prevBuf.slice(1);
    
            // Parse remaining as usual.
            this.prevBuf = new Buffer(0);
            this.nodeIdx = 0;
            if (buf.length > 0)
                ret += this.write(buf);
        }
    
        this.nodeIdx = 0;
        return ret;
    }
    
    // Binary search for GB18030. Returns largest i such that table[i] <= val.
    function findIdx(table, val) {
        if (table[0] > val)
            return -1;
    
        var l = 0, r = table.length;
        while (l < r-1) { // always table[l] <= val < table[r]
            var mid = l + Math.floor((r-l+1)/2);
            if (table[mid] <= val)
                l = mid;
            else
                r = mid;
        }
        return l;
    }
    
    
  provide("iconv-lite/encodings/dbcs-codec", module.exports);
}(global));

// pakmanager:iconv-lite/encodings/dbcs-data
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  "use strict"
    
    // Description of supported double byte encodings and aliases.
    // Tables are not require()-d until they are needed to speed up library load.
    // require()-s are direct to support Browserify.
    
    module.exports = {
        
        // == Japanese/ShiftJIS ====================================================
        // All japanese encodings are based on JIS X set of standards:
        // JIS X 0201 - Single-byte encoding of ASCII + ¥ + Kana chars at 0xA1-0xDF.
        // JIS X 0208 - Main set of 6879 characters, placed in 94x94 plane, to be encoded by 2 bytes. 
        //              Has several variations in 1978, 1983, 1990 and 1997.
        // JIS X 0212 - Supplementary plane of 6067 chars in 94x94 plane. 1990. Effectively dead.
        // JIS X 0213 - Extension and modern replacement of 0208 and 0212. Total chars: 11233.
        //              2 planes, first is superset of 0208, second - revised 0212.
        //              Introduced in 2000, revised 2004. Some characters are in Unicode Plane 2 (0x2xxxx)
    
        // Byte encodings are:
        //  * Shift_JIS: Compatible with 0201, uses not defined chars in top half as lead bytes for double-byte
        //               encoding of 0208. Lead byte ranges: 0x81-0x9F, 0xE0-0xEF; Trail byte ranges: 0x40-0x7E, 0x80-0x9E, 0x9F-0xFC.
        //               Windows CP932 is a superset of Shift_JIS. Some companies added more chars, notably KDDI.
        //  * EUC-JP:    Up to 3 bytes per character. Used mostly on *nixes.
        //               0x00-0x7F       - lower part of 0201
        //               0x8E, 0xA1-0xDF - upper part of 0201
        //               (0xA1-0xFE)x2   - 0208 plane (94x94).
        //               0x8F, (0xA1-0xFE)x2 - 0212 plane (94x94).
        //  * JIS X 208: 7-bit, direct encoding of 0208. Byte ranges: 0x21-0x7E (94 values). Uncommon.
        //               Used as-is in ISO2022 family.
        //  * ISO2022-JP: Stateful encoding, with escape sequences to switch between ASCII, 
        //                0201-1976 Roman, 0208-1978, 0208-1983.
        //  * ISO2022-JP-1: Adds esc seq for 0212-1990.
        //  * ISO2022-JP-2: Adds esc seq for GB2313-1980, KSX1001-1992, ISO8859-1, ISO8859-7.
        //  * ISO2022-JP-3: Adds esc seq for 0201-1976 Kana set, 0213-2000 Planes 1, 2.
        //  * ISO2022-JP-2004: Adds 0213-2004 Plane 1.
        //
        // After JIS X 0213 appeared, Shift_JIS-2004, EUC-JISX0213 and ISO2022-JP-2004 followed, with just changing the planes.
        //
        // Overall, it seems that it's a mess :( http://www8.plala.or.jp/tkubota1/unicode-symbols-map2.html
    
    
        'shiftjis': {
            type: '_dbcs',
            table: function() { return require('./tables/shiftjis.json') },
            encodeAdd: {'\u00a5': 0x5C, '\u203E': 0x7E},
            encodeSkipVals: [{from: 0xED40, to: 0xF940}],
        },
        'csshiftjis': 'shiftjis',
        'mskanji': 'shiftjis',
        'sjis': 'shiftjis',
        'windows31j': 'shiftjis',
        'xsjis': 'shiftjis',
        'windows932': 'shiftjis',
        '932': 'shiftjis',
        'cp932': 'shiftjis',
    
        'eucjp': {
            type: '_dbcs',
            table: function() { return require('./tables/eucjp.json') },
            encodeAdd: {'\u00a5': 0x5C, '\u203E': 0x7E},
        },
    
        // TODO: KDDI extension to Shift_JIS
        // TODO: IBM CCSID 942 = CP932, but F0-F9 custom chars and other char changes.
        // TODO: IBM CCSID 943 = Shift_JIS = CP932 with original Shift_JIS lower 128 chars.
    
        // == Chinese/GBK ==========================================================
        // http://en.wikipedia.org/wiki/GBK
    
        // Oldest GB2312 (1981, ~7600 chars) is a subset of CP936
        'gb2312': 'cp936',
        'gb231280': 'cp936',
        'gb23121980': 'cp936',
        'csgb2312': 'cp936',
        'csiso58gb231280': 'cp936',
        'euccn': 'cp936',
        'isoir58': 'gbk',
    
        // Microsoft's CP936 is a subset and approximation of GBK.
        // TODO: Euro = 0x80 in cp936, but not in GBK (where it's valid but undefined)
        'windows936': 'cp936',
        '936': 'cp936',
        'cp936': {
            type: '_dbcs',
            table: function() { return require('./tables/cp936.json') },
        },
    
        // GBK (~22000 chars) is an extension of CP936 that added user-mapped chars and some other.
        'gbk': {
            type: '_dbcs',
            table: function() { return require('./tables/cp936.json').concat(require('./tables/gbk-added.json')) },
        },
        'xgbk': 'gbk',
    
        // GB18030 is an algorithmic extension of GBK.
        'gb18030': {
            type: '_dbcs',
            table: function() { return require('./tables/cp936.json').concat(require('./tables/gbk-added.json')) },
            gb18030: function() { return require('./tables/gb18030-ranges.json') },
        },
    
        'chinese': 'gb18030',
    
        // TODO: Support GB18030 (~27000 chars + whole unicode mapping, cp54936)
        // http://icu-project.org/docs/papers/gb18030.html
        // http://source.icu-project.org/repos/icu/data/trunk/charset/data/xml/gb-18030-2000.xml
        // http://www.khngai.com/chinese/charmap/tblgbk.php?page=0
    
        // == Korean ===============================================================
        // EUC-KR, KS_C_5601 and KS X 1001 are exactly the same.
        'windows949': 'cp949',
        '949': 'cp949',
        'cp949': {
            type: '_dbcs',
            table: function() { return require('./tables/cp949.json') },
        },
    
        'cseuckr': 'cp949',
        'csksc56011987': 'cp949',
        'euckr': 'cp949',
        'isoir149': 'cp949',
        'korean': 'cp949',
        'ksc56011987': 'cp949',
        'ksc56011989': 'cp949',
        'ksc5601': 'cp949',
    
    
        // == Big5/Taiwan/Hong Kong ================================================
        // There are lots of tables for Big5 and cp950. Please see the following links for history:
        // http://moztw.org/docs/big5/  http://www.haible.de/bruno/charsets/conversion-tables/Big5.html
        // Variations, in roughly number of defined chars:
        //  * Windows CP 950: Microsoft variant of Big5. Canonical: http://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP950.TXT
        //  * Windows CP 951: Microsoft variant of Big5-HKSCS-2001. Seems to be never public. http://me.abelcheung.org/articles/research/what-is-cp951/
        //  * Big5-2003 (Taiwan standard) almost superset of cp950.
        //  * Unicode-at-on (UAO) / Mozilla 1.8. Falling out of use on the Web. Not supported by other browsers.
        //  * Big5-HKSCS (-2001, -2004, -2008). Hong Kong standard. 
        //    many unicode code points moved from PUA to Supplementary plane (U+2XXXX) over the years.
        //    Plus, it has 4 combining sequences.
        //    Seems that Mozilla refused to support it for 10 yrs. https://bugzilla.mozilla.org/show_bug.cgi?id=162431 https://bugzilla.mozilla.org/show_bug.cgi?id=310299
        //    because big5-hkscs is the only encoding to include astral characters in non-algorithmic way.
        //    Implementations are not consistent within browsers; sometimes labeled as just big5.
        //    MS Internet Explorer switches from big5 to big5-hkscs when a patch applied.
        //    Great discussion & recap of what's going on https://bugzilla.mozilla.org/show_bug.cgi?id=912470#c31
        //    In the encoder, it might make sense to support encoding old PUA mappings to Big5 bytes seq-s.
        //    Official spec: http://www.ogcio.gov.hk/en/business/tech_promotion/ccli/terms/doc/2003cmp_2008.txt
        //                   http://www.ogcio.gov.hk/tc/business/tech_promotion/ccli/terms/doc/hkscs-2008-big5-iso.txt
        // 
        // Current understanding of how to deal with Big5(-HKSCS) is in the Encoding Standard, http://encoding.spec.whatwg.org/#big5-encoder
        // Unicode mapping (http://www.unicode.org/Public/MAPPINGS/OBSOLETE/EASTASIA/OTHER/BIG5.TXT) is said to be wrong.
    
        'windows950': 'cp950',
        '950': 'cp950',
        'cp950': {
            type: '_dbcs',
            table: function() { return require('./tables/cp950.json') },
        },
    
        // Big5 has many variations and is an extension of cp950. We use Encoding Standard's as a consensus.
        'big5': 'big5hkscs',
        'big5hkscs': {
            type: '_dbcs',
            table: function() { return require('./tables/cp950.json').concat(require('./tables/big5-added.json')) },
            encodeSkipVals: [0xa2cc],
        },
    
        'cnbig5': 'big5hkscs',
        'csbig5': 'big5hkscs',
        'xxbig5': 'big5hkscs',
    
    };
    
  provide("iconv-lite/encodings/dbcs-data", module.exports);
}(global));

// pakmanager:iconv-lite/lib/bom-handling
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  "use strict"
    
    var BOMChar = '\uFEFF';
    
    exports.PrependBOM = PrependBOMWrapper
    function PrependBOMWrapper(encoder, options) {
        this.encoder = encoder;
        this.addBOM = true;
    }
    
    PrependBOMWrapper.prototype.write = function(str) {
        if (this.addBOM) {
            str = BOMChar + str;
            this.addBOM = false;
        }
    
        return this.encoder.write(str);
    }
    
    PrependBOMWrapper.prototype.end = function() {
        return this.encoder.end();
    }
    
    
    //------------------------------------------------------------------------------
    
    exports.StripBOM = StripBOMWrapper;
    function StripBOMWrapper(decoder, options) {
        this.decoder = decoder;
        this.pass = false;
        this.options = options || {};
    }
    
    StripBOMWrapper.prototype.write = function(buf) {
        var res = this.decoder.write(buf);
        if (this.pass || !res)
            return res;
    
        if (res[0] === BOMChar) {
            res = res.slice(1);
            if (typeof this.options.stripBOM === 'function')
                this.options.stripBOM();
        }
    
        this.pass = true;
        return res;
    }
    
    StripBOMWrapper.prototype.end = function() {
        return this.decoder.end();
    }
    
    
  provide("iconv-lite/lib/bom-handling", module.exports);
}(global));

// pakmanager:iconv-lite/encodings
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  "use strict"
    
    // Update this array if you add/rename/remove files in this directory.
    // We support Browserify by skipping automatic module discovery and requiring modules directly.
    var modules = [
         require('iconv-lite/encodings/internal'),
         require('iconv-lite/encodings/utf16'),
         require('iconv-lite/encodings/utf7'),
         require('iconv-lite/encodings/sbcs-codec'),
         require('iconv-lite/encodings/sbcs-data'),
         require('iconv-lite/encodings/sbcs-data-generated'),
         require('iconv-lite/encodings/dbcs-codec'),
         require('iconv-lite/encodings/dbcs-data'),
    ];
    
    // Put all encoding/alias/codec definitions to single object and export it. 
    for (var i = 0; i < modules.length; i++) {
        var module = modules[i];
        for (var enc in module)
            if (Object.prototype.hasOwnProperty.call(module, enc))
                exports[enc] = module[enc];
    }
    
  provide("iconv-lite/encodings", module.exports);
}(global));

// pakmanager:iconv-lite/lib/streams
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  "use strict"
    
    var Transform = require("stream").Transform;
    
    
    // == Exports ==================================================================
    module.exports = function(iconv) {
        
        // Additional Public API.
        iconv.encodeStream = function encodeStream(encoding, options) {
            return new IconvLiteEncoderStream(iconv.getEncoder(encoding, options), options);
        }
    
        iconv.decodeStream = function decodeStream(encoding, options) {
            return new IconvLiteDecoderStream(iconv.getDecoder(encoding, options), options);
        }
    
        iconv.supportsStreams = true;
    
    
        // Not published yet.
        iconv.IconvLiteEncoderStream = IconvLiteEncoderStream;
        iconv.IconvLiteDecoderStream = IconvLiteDecoderStream;
        iconv._collect = IconvLiteDecoderStream.prototype.collect;
    };
    
    
    // == Encoder stream =======================================================
    function IconvLiteEncoderStream(conv, options) {
        this.conv = conv;
        options = options || {};
        options.decodeStrings = false; // We accept only strings, so we don't need to decode them.
        Transform.call(this, options);
    }
    
    IconvLiteEncoderStream.prototype = Object.create(Transform.prototype, {
        constructor: { value: IconvLiteEncoderStream }
    });
    
    IconvLiteEncoderStream.prototype._transform = function(chunk, encoding, done) {
        if (typeof chunk != 'string')
            return done(new Error("Iconv encoding stream needs strings as its input."));
        try {
            var res = this.conv.write(chunk);
            if (res && res.length) this.push(res);
            done();
        }
        catch (e) {
            done(e);
        }
    }
    
    IconvLiteEncoderStream.prototype._flush = function(done) {
        try {
            var res = this.conv.end();
            if (res && res.length) this.push(res);
            done();
        }
        catch (e) {
            done(e);
        }
    }
    
    IconvLiteEncoderStream.prototype.collect = function(cb) {
        var chunks = [];
        this.on('error', cb);
        this.on('data', function(chunk) { chunks.push(chunk); });
        this.on('end', function() {
            cb(null, Buffer.concat(chunks));
        });
        return this;
    }
    
    
    // == Decoder stream =======================================================
    function IconvLiteDecoderStream(conv, options) {
        this.conv = conv;
        options = options || {};
        options.encoding = this.encoding = 'utf8'; // We output strings.
        Transform.call(this, options);
    }
    
    IconvLiteDecoderStream.prototype = Object.create(Transform.prototype, {
        constructor: { value: IconvLiteDecoderStream }
    });
    
    IconvLiteDecoderStream.prototype._transform = function(chunk, encoding, done) {
        if (!Buffer.isBuffer(chunk))
            return done(new Error("Iconv decoding stream needs buffers as its input."));
        try {
            var res = this.conv.write(chunk);
            if (res && res.length) this.push(res, this.encoding);
            done();
        }
        catch (e) {
            done(e);
        }
    }
    
    IconvLiteDecoderStream.prototype._flush = function(done) {
        try {
            var res = this.conv.end();
            if (res && res.length) this.push(res, this.encoding);                
            done();
        }
        catch (e) {
            done(e);
        }
    }
    
    IconvLiteDecoderStream.prototype.collect = function(cb) {
        var res = '';
        this.on('error', cb);
        this.on('data', function(chunk) { res += chunk; });
        this.on('end', function() {
            cb(null, res);
        });
        return this;
    }
    
    
  provide("iconv-lite/lib/streams", module.exports);
}(global));

// pakmanager:iconv-lite/lib/extend-node
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  "use strict"
    
    // == Extend Node primitives to use iconv-lite =================================
    
    module.exports = function (iconv) {
        var original = undefined; // Place to keep original methods.
    
        // Node authors rewrote Buffer internals to make it compatible with
        // Uint8Array and we cannot patch key functions since then.
        iconv.supportsNodeEncodingsExtension = !(new Buffer(0) instanceof Uint8Array);
    
        iconv.extendNodeEncodings = function extendNodeEncodings() {
            if (original) return;
            original = {};
    
            if (!iconv.supportsNodeEncodingsExtension) {
                console.error("ACTION NEEDED:  require('iconv-lite').extendNodeEncodings() is not supported in your version of Node");
                console.error("See more info at https://github.com/ashtuchkin/iconv-lite/wiki/Node-v4-compatibility");
                return;
            }
    
            var nodeNativeEncodings = {
                'hex': true, 'utf8': true, 'utf-8': true, 'ascii': true, 'binary': true, 
                'base64': true, 'ucs2': true, 'ucs-2': true, 'utf16le': true, 'utf-16le': true,
            };
    
            Buffer.isNativeEncoding = function(enc) {
                return enc && nodeNativeEncodings[enc.toLowerCase()];
            }
    
            // -- SlowBuffer -----------------------------------------------------------
            var SlowBuffer = require('buffer').SlowBuffer;
    
            original.SlowBufferToString = SlowBuffer.prototype.toString;
            SlowBuffer.prototype.toString = function(encoding, start, end) {
                encoding = String(encoding || 'utf8').toLowerCase();
    
                // Use native conversion when possible
                if (Buffer.isNativeEncoding(encoding))
                    return original.SlowBufferToString.call(this, encoding, start, end);
    
                // Otherwise, use our decoding method.
                if (typeof start == 'undefined') start = 0;
                if (typeof end == 'undefined') end = this.length;
                return iconv.decode(this.slice(start, end), encoding);
            }
    
            original.SlowBufferWrite = SlowBuffer.prototype.write;
            SlowBuffer.prototype.write = function(string, offset, length, encoding) {
                // Support both (string, offset, length, encoding)
                // and the legacy (string, encoding, offset, length)
                if (isFinite(offset)) {
                    if (!isFinite(length)) {
                        encoding = length;
                        length = undefined;
                    }
                } else {  // legacy
                    var swap = encoding;
                    encoding = offset;
                    offset = length;
                    length = swap;
                }
    
                offset = +offset || 0;
                var remaining = this.length - offset;
                if (!length) {
                    length = remaining;
                } else {
                    length = +length;
                    if (length > remaining) {
                        length = remaining;
                    }
                }
                encoding = String(encoding || 'utf8').toLowerCase();
    
                // Use native conversion when possible
                if (Buffer.isNativeEncoding(encoding))
                    return original.SlowBufferWrite.call(this, string, offset, length, encoding);
    
                if (string.length > 0 && (length < 0 || offset < 0))
                    throw new RangeError('attempt to write beyond buffer bounds');
    
                // Otherwise, use our encoding method.
                var buf = iconv.encode(string, encoding);
                if (buf.length < length) length = buf.length;
                buf.copy(this, offset, 0, length);
                return length;
            }
    
            // -- Buffer ---------------------------------------------------------------
    
            original.BufferIsEncoding = Buffer.isEncoding;
            Buffer.isEncoding = function(encoding) {
                return Buffer.isNativeEncoding(encoding) || iconv.encodingExists(encoding);
            }
    
            original.BufferByteLength = Buffer.byteLength;
            Buffer.byteLength = SlowBuffer.byteLength = function(str, encoding) {
                encoding = String(encoding || 'utf8').toLowerCase();
    
                // Use native conversion when possible
                if (Buffer.isNativeEncoding(encoding))
                    return original.BufferByteLength.call(this, str, encoding);
    
                // Slow, I know, but we don't have a better way yet.
                return iconv.encode(str, encoding).length;
            }
    
            original.BufferToString = Buffer.prototype.toString;
            Buffer.prototype.toString = function(encoding, start, end) {
                encoding = String(encoding || 'utf8').toLowerCase();
    
                // Use native conversion when possible
                if (Buffer.isNativeEncoding(encoding))
                    return original.BufferToString.call(this, encoding, start, end);
    
                // Otherwise, use our decoding method.
                if (typeof start == 'undefined') start = 0;
                if (typeof end == 'undefined') end = this.length;
                return iconv.decode(this.slice(start, end), encoding);
            }
    
            original.BufferWrite = Buffer.prototype.write;
            Buffer.prototype.write = function(string, offset, length, encoding) {
                var _offset = offset, _length = length, _encoding = encoding;
                // Support both (string, offset, length, encoding)
                // and the legacy (string, encoding, offset, length)
                if (isFinite(offset)) {
                    if (!isFinite(length)) {
                        encoding = length;
                        length = undefined;
                    }
                } else {  // legacy
                    var swap = encoding;
                    encoding = offset;
                    offset = length;
                    length = swap;
                }
    
                encoding = String(encoding || 'utf8').toLowerCase();
    
                // Use native conversion when possible
                if (Buffer.isNativeEncoding(encoding))
                    return original.BufferWrite.call(this, string, _offset, _length, _encoding);
    
                offset = +offset || 0;
                var remaining = this.length - offset;
                if (!length) {
                    length = remaining;
                } else {
                    length = +length;
                    if (length > remaining) {
                        length = remaining;
                    }
                }
    
                if (string.length > 0 && (length < 0 || offset < 0))
                    throw new RangeError('attempt to write beyond buffer bounds');
    
                // Otherwise, use our encoding method.
                var buf = iconv.encode(string, encoding);
                if (buf.length < length) length = buf.length;
                buf.copy(this, offset, 0, length);
                return length;
    
                // TODO: Set _charsWritten.
            }
    
    
            // -- Readable -------------------------------------------------------------
            if (iconv.supportsStreams) {
                var Readable = require('stream').Readable;
    
                original.ReadableSetEncoding = Readable.prototype.setEncoding;
                Readable.prototype.setEncoding = function setEncoding(enc, options) {
                    // Use our own decoder, it has the same interface.
                    // We cannot use original function as it doesn't handle BOM-s.
                    this._readableState.decoder = iconv.getDecoder(enc, options);
                    this._readableState.encoding = enc;
                }
    
                Readable.prototype.collect = iconv._collect;
            }
        }
    
        // Remove iconv-lite Node primitive extensions.
        iconv.undoExtendNodeEncodings = function undoExtendNodeEncodings() {
            if (!iconv.supportsNodeEncodingsExtension)
                return;
            if (!original)
                throw new Error(" require('iconv-lite').undoExtendNodeEncodings(): Nothing to undo; extendNodeEncodings() is not called.")
    
            delete Buffer.isNativeEncoding;
    
            var SlowBuffer = require('buffer').SlowBuffer;
    
            SlowBuffer.prototype.toString = original.SlowBufferToString;
            SlowBuffer.prototype.write = original.SlowBufferWrite;
    
            Buffer.isEncoding = original.BufferIsEncoding;
            Buffer.byteLength = original.BufferByteLength;
            Buffer.prototype.toString = original.BufferToString;
            Buffer.prototype.write = original.BufferWrite;
    
            if (iconv.supportsStreams) {
                var Readable = require('stream').Readable;
    
                Readable.prototype.setEncoding = original.ReadableSetEncoding;
                delete Readable.prototype.collect;
            }
    
            original = undefined;
        }
    }
    
  provide("iconv-lite/lib/extend-node", module.exports);
}(global));

// pakmanager:iconv-lite
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  "use strict"
    
    var bomHandling =  require('iconv-lite/lib/bom-handling'),
        iconv = module.exports;
    
    // All codecs and aliases are kept here, keyed by encoding name/alias.
    // They are lazy loaded in `iconv.getCodec` from `encodings/index.js`.
    iconv.encodings = null;
    
    // Characters emitted in case of error.
    iconv.defaultCharUnicode = '�';
    iconv.defaultCharSingleByte = '?';
    
    // Public API.
    iconv.encode = function encode(str, encoding, options) {
        str = "" + (str || ""); // Ensure string.
    
        var encoder = iconv.getEncoder(encoding, options);
    
        var res = encoder.write(str);
        var trail = encoder.end();
        
        return (trail && trail.length > 0) ? Buffer.concat([res, trail]) : res;
    }
    
    iconv.decode = function decode(buf, encoding, options) {
        if (typeof buf === 'string') {
            if (!iconv.skipDecodeWarning) {
                console.error('Iconv-lite warning: decode()-ing strings is deprecated. Refer to https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding');
                iconv.skipDecodeWarning = true;
            }
    
            buf = new Buffer("" + (buf || ""), "binary"); // Ensure buffer.
        }
    
        var decoder = iconv.getDecoder(encoding, options);
    
        var res = decoder.write(buf);
        var trail = decoder.end();
    
        return trail ? (res + trail) : res;
    }
    
    iconv.encodingExists = function encodingExists(enc) {
        try {
            iconv.getCodec(enc);
            return true;
        } catch (e) {
            return false;
        }
    }
    
    // Legacy aliases to convert functions
    iconv.toEncoding = iconv.encode;
    iconv.fromEncoding = iconv.decode;
    
    // Search for a codec in iconv.encodings. Cache codec data in iconv._codecDataCache.
    iconv._codecDataCache = {};
    iconv.getCodec = function getCodec(encoding) {
        if (!iconv.encodings)
            iconv.encodings =  require('iconv-lite/encodings'); // Lazy load all encoding definitions.
        
        // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.
        var enc = (''+encoding).toLowerCase().replace(/[^0-9a-z]|:\d{4}$/g, "");
    
        // Traverse iconv.encodings to find actual codec.
        var codecOptions = {};
        while (true) {
            var codec = iconv._codecDataCache[enc];
            if (codec)
                return codec;
    
            var codecDef = iconv.encodings[enc];
    
            switch (typeof codecDef) {
                case "string": // Direct alias to other encoding.
                    enc = codecDef;
                    break;
    
                case "object": // Alias with options. Can be layered.
                    for (var key in codecDef)
                        codecOptions[key] = codecDef[key];
    
                    if (!codecOptions.encodingName)
                        codecOptions.encodingName = enc;
                    
                    enc = codecDef.type;
                    break;
    
                case "function": // Codec itself.
                    if (!codecOptions.encodingName)
                        codecOptions.encodingName = enc;
    
                    // The codec function must load all tables and return object with .encoder and .decoder methods.
                    // It'll be called only once (for each different options object).
                    codec = new codecDef(codecOptions, iconv);
    
                    iconv._codecDataCache[codecOptions.encodingName] = codec; // Save it to be reused later.
                    return codec;
    
                default:
                    throw new Error("Encoding not recognized: '" + encoding + "' (searched as: '"+enc+"')");
            }
        }
    }
    
    iconv.getEncoder = function getEncoder(encoding, options) {
        var codec = iconv.getCodec(encoding),
            encoder = new codec.encoder(options, codec);
    
        if (codec.bomAware && options && options.addBOM)
            encoder = new bomHandling.PrependBOM(encoder, options);
    
        return encoder;
    }
    
    iconv.getDecoder = function getDecoder(encoding, options) {
        var codec = iconv.getCodec(encoding),
            decoder = new codec.decoder(options, codec);
    
        if (codec.bomAware && !(options && options.stripBOM === false))
            decoder = new bomHandling.StripBOM(decoder, options);
    
        return decoder;
    }
    
    
    // Load extensions in Node. All of them are omitted in Browserify build via 'browser' field in package.json.
    var nodeVer = typeof process !== 'undefined' && process.versions && process.versions.node;
    if (nodeVer) {
    
        // Load streaming support in Node v0.10+
        var nodeVerArr = nodeVer.split(".").map(Number);
        if (nodeVerArr[0] > 0 || nodeVerArr[1] >= 10) {
             require('iconv-lite/lib/streams')(iconv);
        }
    
        // Load Node primitive extensions.
         require('iconv-lite/lib/extend-node')(iconv);
    }
    
    
  provide("iconv-lite", module.exports);
}(global));

// pakmanager:encoding/lib/iconv-loader
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    var iconv_package;
    var Iconv;
    
    try {
        // this is to fool browserify so it doesn't try (in vain) to install iconv.
        iconv_package = 'iconv';
        Iconv = require(iconv_package).Iconv;
    } catch (E) {
        // node-iconv not present
    }
    
    module.exports = Iconv;
    
  provide("encoding/lib/iconv-loader", module.exports);
}(global));

// pakmanager:encoding
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    var iconvLite = require('iconv-lite');
    // Load Iconv from an external file to be able to disable Iconv for webpack
    // Add /\/iconv-loader$/ to webpack.IgnorePlugin to ignore it
    var Iconv =  require('encoding/lib/iconv-loader');
    
    // Expose to the world
    module.exports.convert = convert;
    
    /**
     * Convert encoding of an UTF-8 string or a buffer
     *
     * @param {String|Buffer} str String to be converted
     * @param {String} to Encoding to be converted to
     * @param {String} [from='UTF-8'] Encoding to be converted from
     * @param {Boolean} useLite If set to ture, force to use iconvLite
     * @return {Buffer} Encoded string
     */
    function convert(str, to, from, useLite) {
        from = checkEncoding(from || 'UTF-8');
        to = checkEncoding(to || 'UTF-8');
        str = str || '';
    
        var result;
    
        if (from !== 'UTF-8' && typeof str === 'string') {
            str = new Buffer(str, 'binary');
        }
    
        if (from === to) {
            if (typeof str === 'string') {
                result = new Buffer(str);
            } else {
                result = str;
            }
        } else if (Iconv && !useLite) {
            try {
                result = convertIconv(str, to, from);
            } catch (E) {
                console.error(E);
                try {
                    result = convertIconvLite(str, to, from);
                } catch (E) {
                    console.error(E);
                    result = str;
                }
            }
        } else {
            try {
                result = convertIconvLite(str, to, from);
            } catch (E) {
                console.error(E);
                result = str;
            }
        }
    
    
        if (typeof result === 'string') {
            result = new Buffer(result, 'utf-8');
        }
    
        return result;
    }
    
    /**
     * Convert encoding of a string with node-iconv (if available)
     *
     * @param {String|Buffer} str String to be converted
     * @param {String} to Encoding to be converted to
     * @param {String} [from='UTF-8'] Encoding to be converted from
     * @return {Buffer} Encoded string
     */
    function convertIconv(str, to, from) {
        var response, iconv;
        iconv = new Iconv(from, to + '//TRANSLIT//IGNORE');
        response = iconv.convert(str);
        return response.slice(0, response.length);
    }
    
    /**
     * Convert encoding of astring with iconv-lite
     *
     * @param {String|Buffer} str String to be converted
     * @param {String} to Encoding to be converted to
     * @param {String} [from='UTF-8'] Encoding to be converted from
     * @return {Buffer} Encoded string
     */
    function convertIconvLite(str, to, from) {
        if (to === 'UTF-8') {
            return iconvLite.decode(str, from);
        } else if (from === 'UTF-8') {
            return iconvLite.encode(str, to);
        } else {
            return iconvLite.encode(iconvLite.decode(str, from), to);
        }
    }
    
    /**
     * Converts charset name if needed
     *
     * @param {String} name Character set
     * @return {String} Character set name
     */
    function checkEncoding(name) {
        return (name || '').toString().trim().
        replace(/^latin[\-_]?(\d+)$/i, 'ISO-8859-$1').
        replace(/^win(?:dows)?[\-_]?(\d+)$/i, 'WINDOWS-$1').
        replace(/^utf[\-_]?(\d+)$/i, 'UTF-$1').
        replace(/^ks_c_5601\-1987$/i, 'CP949').
        replace(/^us[\-_]?ascii$/i, 'ASCII').
        toUpperCase();
    }
    
  provide("encoding", module.exports);
}(global));

// pakmanager:is-stream
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    var isStream = module.exports = function (stream) {
    	return stream !== null && typeof stream === 'object' && typeof stream.pipe === 'function';
    };
    
    isStream.writable = function (stream) {
    	return isStream(stream) && stream.writable !== false && typeof stream._write === 'function' && typeof stream._writableState === 'object';
    };
    
    isStream.readable = function (stream) {
    	return isStream(stream) && stream.readable !== false && typeof stream._read === 'function' && typeof stream._readableState === 'object';
    };
    
    isStream.duplex = function (stream) {
    	return isStream.writable(stream) && isStream.readable(stream);
    };
    
    isStream.transform = function (stream) {
    	return isStream.duplex(stream) && typeof stream._transform === 'function' && typeof stream._transformState === 'object';
    };
    
  provide("is-stream", module.exports);
}(global));

// pakmanager:js-tokens
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // Copyright 2014, 2015, 2016 Simon Lydell
    // X11 (“MIT”) Licensed. (See LICENSE.)
    
    // This regex comes from regex.coffee, and is inserted here by generate-index.js
    // (run `npm run build`).
    module.exports = /((['"])(?:(?!\2|\\).|\\(?:\r\n|[\s\S]))*(\2)?|`(?:[^`\\$]|\\[\s\S]|\$(?!\{)|\$\{(?:[^{}]|\{[^}]*\}?)*\}?)*(`)?)|(\/\/.*)|(\/\*(?:[^*]|\*(?!\/))*(\*\/)?)|(\/(?!\*)(?:\[(?:(?![\]\\]).|\\.)*\]|(?![\/\]\\]).|\\.)+\/(?:(?!\s*(?:\b|[\u0080-\uFFFF$\\'"~({]|[+\-!](?!=)|\.?\d))|[gmiyu]{1,5}\b(?![\u0080-\uFFFF$\\]|\s*(?:[+\-*%&|^<>!=?({]|\/(?![\/*])))))|(0[xX][\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?)|((?!\d)(?:(?!\s)[$\w\u0080-\uFFFF]|\\u[\da-fA-F]{4}|\\u\{[\da-fA-F]{1,6}\})+)|(--|\+\+|&&|\|\||=>|\.{3}|(?:[+\-*\/%&|^]|<{1,2}|>{1,3}|!=?|={1,2})=?|[?~.,:;[\](){}])|(\s+)|(^$|[\s\S])/g
    
    module.exports.matchToToken = function(match) {
      var token = {type: "invalid", value: match[0]}
           if (match[ 1]) token.type = "string" , token.closed = !!(match[3] || match[4])
      else if (match[ 5]) token.type = "comment"
      else if (match[ 6]) token.type = "comment", token.closed = !!match[7]
      else if (match[ 8]) token.type = "regex"
      else if (match[ 9]) token.type = "number"
      else if (match[10]) token.type = "name"
      else if (match[11]) token.type = "punctuator"
      else if (match[12]) token.type = "whitespace"
      return token
    }
    
  provide("js-tokens", module.exports);
}(global));

// pakmanager:node-fetch/lib/fetch-error
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  
    /**
     * fetch-error.js
     *
     * FetchError interface for operational errors
     */
    
    module.exports = FetchError;
    
    /**
     * Create FetchError instance
     *
     * @param   String      message      Error message for human
     * @param   String      type         Error type for machine
     * @param   String      systemError  For Node.js system error
     * @return  FetchError
     */
    function FetchError(message, type, systemError) {
    
    	// hide custom error implementation details from end-users
    	Error.captureStackTrace(this, this.constructor);
    
    	this.name = this.constructor.name;
    	this.message = message;
    	this.type = type;
    
    	// when err.type is `system`, err.code contains system error code
    	if (systemError) {
    		this.code = this.errno = systemError.code;
    	}
    
    }
    
    require('util').inherits(FetchError, Error);
    
  provide("node-fetch/lib/fetch-error", module.exports);
}(global));

// pakmanager:node-fetch/lib/headers
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  
    /**
     * headers.js
     *
     * Headers class offers convenient helpers
     */
    
    module.exports = Headers;
    
    /**
     * Headers class
     *
     * @param   Object  headers  Response headers
     * @return  Void
     */
    function Headers(headers) {
    
    	var self = this;
    	this._headers = {};
    
    	// Headers
    	if (headers instanceof Headers) {
    		headers = headers.raw();
    	}
    
    	// plain object
    	for (var prop in headers) {
    		if (!headers.hasOwnProperty(prop)) {
    			continue;
    		}
    
    		if (typeof headers[prop] === 'string') {
    			this.set(prop, headers[prop]);
    
    		} else if (typeof headers[prop] === 'number' && !isNaN(headers[prop])) {
    			this.set(prop, headers[prop].toString());
    
    		} else if (headers[prop] instanceof Array) {
    			headers[prop].forEach(function(item) {
    				self.append(prop, item.toString());
    			});
    		}
    	}
    
    }
    
    /**
     * Return first header value given name
     *
     * @param   String  name  Header name
     * @return  Mixed
     */
    Headers.prototype.get = function(name) {
    	var list = this._headers[name.toLowerCase()];
    	return list ? list[0] : null;
    };
    
    /**
     * Return all header values given name
     *
     * @param   String  name  Header name
     * @return  Array
     */
    Headers.prototype.getAll = function(name) {
    	if (!this.has(name)) {
    		return [];
    	}
    
    	return this._headers[name.toLowerCase()];
    };
    
    /**
     * Iterate over all headers
     *
     * @param   Function  callback  Executed for each item with parameters (value, name, thisArg)
     * @param   Boolean   thisArg   `this` context for callback function
     * @return  Void
     */
    Headers.prototype.forEach = function(callback, thisArg) {
    	Object.getOwnPropertyNames(this._headers).forEach(function(name) {
    		this._headers[name].forEach(function(value) {
    			callback.call(thisArg, value, name, this)
    		}, this)
    	}, this)
    }
    
    /**
     * Overwrite header values given name
     *
     * @param   String  name   Header name
     * @param   String  value  Header value
     * @return  Void
     */
    Headers.prototype.set = function(name, value) {
    	this._headers[name.toLowerCase()] = [value];
    };
    
    /**
     * Append a value onto existing header
     *
     * @param   String  name   Header name
     * @param   String  value  Header value
     * @return  Void
     */
    Headers.prototype.append = function(name, value) {
    	if (!this.has(name)) {
    		this.set(name, value);
    		return;
    	}
    
    	this._headers[name.toLowerCase()].push(value);
    };
    
    /**
     * Check for header name existence
     *
     * @param   String   name  Header name
     * @return  Boolean
     */
    Headers.prototype.has = function(name) {
    	return this._headers.hasOwnProperty(name.toLowerCase());
    };
    
    /**
     * Delete all header values given name
     *
     * @param   String  name  Header name
     * @return  Void
     */
    Headers.prototype['delete'] = function(name) {
    	delete this._headers[name.toLowerCase()];
    };
    
    /**
     * Return raw headers (non-spec api)
     *
     * @return  Object
     */
    Headers.prototype.raw = function() {
    	return this._headers;
    };
    
  provide("node-fetch/lib/headers", module.exports);
}(global));

// pakmanager:node-fetch/lib/body
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  
    /**
     * body.js
     *
     * Body interface provides common methods for Request and Response
     */
    
    var convert = require('encoding').convert;
    var bodyStream = require('is-stream');
    var PassThrough = require('stream').PassThrough;
    var FetchError =  require('node-fetch/lib/fetch-error');
    
    module.exports = Body;
    
    /**
     * Body class
     *
     * @param   Stream  body  Readable stream
     * @param   Object  opts  Response options
     * @return  Void
     */
    function Body(body, opts) {
    
    	opts = opts || {};
    
    	this.body = body;
    	this.bodyUsed = false;
    	this.size = opts.size || 0;
    	this.timeout = opts.timeout || 0;
    	this._raw = [];
    	this._abort = false;
    
    }
    
    /**
     * Decode response as json
     *
     * @return  Promise
     */
    Body.prototype.json = function() {
    
    	return this._decode().then(function(text) {
    		return JSON.parse(text);
    	});
    
    };
    
    /**
     * Decode response as text
     *
     * @return  Promise
     */
    Body.prototype.text = function() {
    
    	return this._decode();
    
    };
    
    /**
     * Decode buffers into utf-8 string
     *
     * @return  Promise
     */
    Body.prototype._decode = function() {
    
    	var self = this;
    
    	if (this.bodyUsed) {
    		return Body.Promise.reject(new Error('body used already for: ' + this.url));
    	}
    
    	this.bodyUsed = true;
    	this._bytes = 0;
    	this._abort = false;
    	this._raw = [];
    
    	return new Body.Promise(function(resolve, reject) {
    		var resTimeout;
    
    		if (typeof self.body === 'string') {
    			self._bytes = self.body.length;
    			self._raw = [new Buffer(self.body)];
    			return resolve(self._convert());
    		}
    
    		if (self.body instanceof Buffer) {
    			self._bytes = self.body.length;
    			self._raw = [self.body];
    			return resolve(self._convert());
    		}
    
    		// allow timeout on slow response body
    		if (self.timeout) {
    			resTimeout = setTimeout(function() {
    				self._abort = true;
    				reject(new FetchError('response timeout at ' + self.url + ' over limit: ' + self.timeout, 'body-timeout'));
    			}, self.timeout);
    		}
    
    		// handle stream error, such as incorrect content-encoding
    		self.body.on('error', function(err) {
    			reject(new FetchError('invalid response body at: ' + self.url + ' reason: ' + err.message, 'system', err));
    		});
    
    		self.body.on('data', function(chunk) {
    			if (self._abort || chunk === null) {
    				return;
    			}
    
    			if (self.size && self._bytes + chunk.length > self.size) {
    				self._abort = true;
    				reject(new FetchError('content size at ' + self.url + ' over limit: ' + self.size, 'max-size'));
    				return;
    			}
    
    			self._bytes += chunk.length;
    			self._raw.push(chunk);
    		});
    
    		self.body.on('end', function() {
    			if (self._abort) {
    				return;
    			}
    
    			clearTimeout(resTimeout);
    			resolve(self._convert());
    		});
    	});
    
    };
    
    /**
     * Detect buffer encoding and convert to target encoding
     * ref: http://www.w3.org/TR/2011/WD-html5-20110113/parsing.html#determining-the-character-encoding
     *
     * @param   String  encoding  Target encoding
     * @return  String
     */
    Body.prototype._convert = function(encoding) {
    
    	encoding = encoding || 'utf-8';
    
    	var charset = 'utf-8';
    	var res, str;
    
    	// header
    	if (this.headers.has('content-type')) {
    		res = /charset=([^;]*)/i.exec(this.headers.get('content-type'));
    	}
    
    	// no charset in content type, peek at response body for at most 1024 bytes
    	if (!res && this._raw.length > 0) {
    		for (var i = 0; i < this._raw.length; i++) {
    			str += this._raw[i].toString()
    			if (str.length > 1024) {
    				break;
    			}
    		}
    		str = str.substr(0, 1024);
    	}
    
    	// html5
    	if (!res && str) {
    		res = /<meta.+?charset=(['"])(.+?)\1/i.exec(str);
    	}
    
    	// html4
    	if (!res && str) {
    		res = /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(str);
    
    		if (res) {
    			res = /charset=(.*)/i.exec(res.pop());
    		}
    	}
    
    	// xml
    	if (!res && str) {
    		res = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(str);
    	}
    
    	// found charset
    	if (res) {
    		charset = res.pop();
    
    		// prevent decode issues when sites use incorrect encoding
    		// ref: https://hsivonen.fi/encoding-menu/
    		if (charset === 'gb2312' || charset === 'gbk') {
    			charset = 'gb18030';
    		}
    	}
    
    	// turn raw buffers into utf-8 string
    	return convert(
    		Buffer.concat(this._raw)
    		, encoding
    		, charset
    	).toString();
    
    };
    
    /**
     * Clone body given Res/Req instance
     *
     * @param   Mixed  instance  Response or Request instance
     * @return  Mixed
     */
    Body.prototype._clone = function(instance) {
    	var p1, p2;
    	var body = instance.body;
    
    	// don't allow cloning a used body
    	if (instance.bodyUsed) {
    		throw new Error('cannot clone body after it is used');
    	}
    
    	// check that body is a stream and not form-data object
    	// note: we can't clone the form-data object without having it as a dependency
    	if (bodyStream(body) && typeof body.getBoundary !== 'function') {
    		// tee instance body
    		p1 = new PassThrough();
    		p2 = new PassThrough();
    		body.pipe(p1);
    		body.pipe(p2);
    		// set instance body to teed body and return the other teed body
    		instance.body = p1;
    		body = p2;
    	}
    
    	return body;
    }
    
    // expose Promise
    Body.Promise = global.Promise;
    
  provide("node-fetch/lib/body", module.exports);
}(global));

// pakmanager:node-fetch/lib/response
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  
    /**
     * response.js
     *
     * Response class provides content decoding
     */
    
    var http = require('http');
    var Headers =  require('node-fetch/lib/headers');
    var Body =  require('node-fetch/lib/body');
    
    module.exports = Response;
    
    /**
     * Response class
     *
     * @param   Stream  body  Readable stream
     * @param   Object  opts  Response options
     * @return  Void
     */
    function Response(body, opts) {
    
    	opts = opts || {};
    
    	this.url = opts.url;
    	this.status = opts.status;
    	this.statusText = opts.statusText || http.STATUS_CODES[this.status];
    	this.headers = new Headers(opts.headers);
    	this.ok = this.status >= 200 && this.status < 300;
    
    	Body.call(this, body, opts);
    
    }
    
    Response.prototype = Object.create(Body.prototype);
    
    /**
     * Clone this response
     *
     * @return  Response
     */
    Response.prototype.clone = function() {
    	return new Response(this._clone(this), {
    		url: this.url
    		, status: this.status
    		, statusText: this.statusText
    		, headers: this.headers
    		, ok: this.ok
    	});
    };
    
  provide("node-fetch/lib/response", module.exports);
}(global));

// pakmanager:node-fetch/lib/request
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  
    /**
     * request.js
     *
     * Request class contains server only options
     */
    
    var parse_url = require('url').parse;
    var Headers =  require('node-fetch/lib/headers');
    var Body =  require('node-fetch/lib/body');
    
    module.exports = Request;
    
    /**
     * Request class
     *
     * @param   Mixed   input  Url or Request instance
     * @param   Object  init   Custom options
     * @return  Void
     */
    function Request(input, init) {
    	var url, url_parsed;
    
    	// normalize input
    	if (!(input instanceof Request)) {
    		url = input;
    		url_parsed = parse_url(url);
    		input = {};
    	} else {
    		url = input.url;
    		url_parsed = parse_url(url);
    	}
    
    	// normalize init
    	init = init || {};
    
    	// fetch spec options
    	this.method = init.method || input.method || 'GET';
    	this.redirect = init.redirect || input.redirect || 'follow';
    	this.headers = new Headers(init.headers || input.headers || {});
    	this.url = url;
    
    	// server only options
    	this.follow = init.follow !== undefined ?
    		init.follow : input.follow !== undefined ?
    		input.follow : 20;
    	this.compress = init.compress !== undefined ?
    		init.compress : input.compress !== undefined ?
    		input.compress : true;
    	this.counter = init.counter || input.counter || input.follow || 0;
    	this.agent = init.agent || input.agent;
    
    	Body.call(this, init.body || this._clone(input), {
    		timeout: init.timeout || input.timeout || 0,
    		size: init.size || input.size || 0
    	});
    
    	// server request options
    	this.protocol = url_parsed.protocol;
    	this.hostname = url_parsed.hostname;
    	this.port = url_parsed.port;
    	this.path = url_parsed.path;
    	this.auth = url_parsed.auth;
    }
    
    Request.prototype = Object.create(Body.prototype);
    
    /**
     * Clone this request
     *
     * @return  Request
     */
    Request.prototype.clone = function() {
    	return new Request(this);
    };
    
  provide("node-fetch/lib/request", module.exports);
}(global));

// pakmanager:node-fetch
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  
    /**
     * index.js
     *
     * a request API compatible with window.fetch
     */
    
    var parse_url = require('url').parse;
    var resolve_url = require('url').resolve;
    var http = require('http');
    var https = require('https');
    var zlib = require('zlib');
    var stream = require('stream');
    
    var Body =  require('node-fetch/lib/body');
    var Response =  require('node-fetch/lib/response');
    var Headers =  require('node-fetch/lib/headers');
    var Request =  require('node-fetch/lib/request');
    var FetchError =  require('node-fetch/lib/fetch-error');
    
    // commonjs
    module.exports = Fetch;
    // es6 default export compatibility
    module.exports.default = module.exports;
    
    /**
     * Fetch class
     *
     * @param   Mixed    url   Absolute url or Request instance
     * @param   Object   opts  Fetch options
     * @return  Promise
     */
    function Fetch(url, opts) {
    
    	// allow call as function
    	if (!(this instanceof Fetch))
    		return new Fetch(url, opts);
    
    	// allow custom promise
    	if (!Fetch.Promise) {
    		throw new Error('native promise missing, set Fetch.Promise to your favorite alternative');
    	}
    
    	Body.Promise = Fetch.Promise;
    
    	var self = this;
    
    	// wrap http.request into fetch
    	return new Fetch.Promise(function(resolve, reject) {
    		// build request object
    		var options = new Request(url, opts);
    
    		if (!options.protocol || !options.hostname) {
    			throw new Error('only absolute urls are supported');
    		}
    
    		if (options.protocol !== 'http:' && options.protocol !== 'https:') {
    			throw new Error('only http(s) protocols are supported');
    		}
    
    		var send;
    		if (options.protocol === 'https:') {
    			send = https.request;
    		} else {
    			send = http.request;
    		}
    
    		// normalize headers
    		var headers = new Headers(options.headers);
    
    		if (options.compress) {
    			headers.set('accept-encoding', 'gzip,deflate');
    		}
    
    		if (!headers.has('user-agent')) {
    			headers.set('user-agent', 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)');
    		}
    
    		if (!headers.has('connection') && !options.agent) {
    			headers.set('connection', 'close');
    		}
    
    		if (!headers.has('accept')) {
    			headers.set('accept', '*/*');
    		}
    
    		// detect form data input from form-data module, this hack avoid the need to pass multipart header manually
    		if (!headers.has('content-type') && options.body && typeof options.body.getBoundary === 'function') {
    			headers.set('content-type', 'multipart/form-data; boundary=' + options.body.getBoundary());
    		}
    
    		// bring node-fetch closer to browser behavior by setting content-length automatically
    		if (!headers.has('content-length') && /post|put|patch|delete/i.test(options.method)) {
    			if (typeof options.body === 'string') {
    				headers.set('content-length', Buffer.byteLength(options.body));
    			// detect form data input from form-data module, this hack avoid the need to add content-length header manually
    			} else if (options.body && typeof options.body.getLengthSync === 'function' && options.body._lengthRetrievers.length == 0) {
    				headers.set('content-length', options.body.getLengthSync().toString());
    			// this is only necessary for older nodejs releases (before iojs merge)
    			} else if (options.body === undefined || options.body === null) {
    				headers.set('content-length', '0');
    			}
    		}
    
    		options.headers = headers.raw();
    
    		// http.request only support string as host header, this hack make custom host header possible
    		if (options.headers.host) {
    			options.headers.host = options.headers.host[0];
    		}
    
    		// send request
    		var req = send(options);
    		var reqTimeout;
    
    		if (options.timeout) {
    			req.once('socket', function(socket) {
    				reqTimeout = setTimeout(function() {
    					req.abort();
    					reject(new FetchError('network timeout at: ' + options.url, 'request-timeout'));
    				}, options.timeout);
    			});
    		}
    
    		req.on('error', function(err) {
    			clearTimeout(reqTimeout);
    			reject(new FetchError('request to ' + options.url + ' failed, reason: ' + err.message, 'system', err));
    		});
    
    		req.on('response', function(res) {
    			clearTimeout(reqTimeout);
    
    			// handle redirect
    			if (self.isRedirect(res.statusCode) && options.redirect !== 'manual') {
    				if (options.redirect === 'error') {
    					reject(new FetchError('redirect mode is set to error: ' + options.url, 'no-redirect'));
    					return;
    				}
    
    				if (options.counter >= options.follow) {
    					reject(new FetchError('maximum redirect reached at: ' + options.url, 'max-redirect'));
    					return;
    				}
    
    				if (!res.headers.location) {
    					reject(new FetchError('redirect location header missing at: ' + options.url, 'invalid-redirect'));
    					return;
    				}
    
    				// per fetch spec, for POST request with 301/302 response, or any request with 303 response, use GET when following redirect
    				if (res.statusCode === 303
    					|| ((res.statusCode === 301 || res.statusCode === 302) && options.method === 'POST'))
    				{
    					options.method = 'GET';
    					delete options.body;
    					delete options.headers['content-length'];
    				}
    
    				options.counter++;
    
    				resolve(Fetch(resolve_url(options.url, res.headers.location), options));
    				return;
    			}
    
    			// handle compression
    			var body = res.pipe(new stream.PassThrough());
    			var headers = new Headers(res.headers);
    
    			if (options.compress && headers.has('content-encoding')) {
    				var name = headers.get('content-encoding');
    
    				// no need to pipe no content and not modified response body
    				if (res.statusCode !== 204 && res.statusCode !== 304) {
    					if (name == 'gzip' || name == 'x-gzip') {
    						body = body.pipe(zlib.createGunzip());
    					} else if (name == 'deflate' || name == 'x-deflate') {
    						body = body.pipe(zlib.createInflate());
    					}
    				}
    			}
    
    			// normalize location header for manual redirect mode
    			if (options.redirect === 'manual' && headers.has('location')) {
    				headers.set('location', resolve_url(options.url, headers.get('location')));
    			}
    
    			// response object
    			var output = new Response(body, {
    				url: options.url
    				, status: res.statusCode
    				, statusText: res.statusMessage
    				, headers: headers
    				, size: options.size
    				, timeout: options.timeout
    			});
    
    			resolve(output);
    		});
    
    		// accept string or readable stream as body
    		if (typeof options.body === 'string') {
    			req.write(options.body);
    			req.end();
    		} else if (typeof options.body === 'object' && options.body.pipe) {
    			options.body.pipe(req);
    		} else {
    			req.end();
    		}
    	});
    
    };
    
    /**
     * Redirect code matching
     *
     * @param   Number   code  Status code
     * @return  Boolean
     */
    Fetch.prototype.isRedirect = function(code) {
    	return code === 301 || code === 302 || code === 303 || code === 307 || code === 308;
    }
    
    // expose Promise
    Fetch.Promise = global.Promise;
    Fetch.Response = Response;
    Fetch.Headers = Headers;
    Fetch.Request = Request;
    
  provide("node-fetch", module.exports);
}(global));

// pakmanager:whatwg-fetch
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  (function(self) {
      'use strict';
    
      if (self.fetch) {
        return
      }
    
      var support = {
        searchParams: 'URLSearchParams' in self,
        iterable: 'Symbol' in self && 'iterator' in Symbol,
        blob: 'FileReader' in self && 'Blob' in self && (function() {
          try {
            new Blob()
            return true
          } catch(e) {
            return false
          }
        })(),
        formData: 'FormData' in self,
        arrayBuffer: 'ArrayBuffer' in self
      }
    
      function normalizeName(name) {
        if (typeof name !== 'string') {
          name = String(name)
        }
        if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
          throw new TypeError('Invalid character in header field name')
        }
        return name.toLowerCase()
      }
    
      function normalizeValue(value) {
        if (typeof value !== 'string') {
          value = String(value)
        }
        return value
      }
    
      // Build a destructive iterator for the value list
      function iteratorFor(items) {
        var iterator = {
          next: function() {
            var value = items.shift()
            return {done: value === undefined, value: value}
          }
        }
    
        if (support.iterable) {
          iterator[Symbol.iterator] = function() {
            return iterator
          }
        }
    
        return iterator
      }
    
      function Headers(headers) {
        this.map = {}
    
        if (headers instanceof Headers) {
          headers.forEach(function(value, name) {
            this.append(name, value)
          }, this)
    
        } else if (headers) {
          Object.getOwnPropertyNames(headers).forEach(function(name) {
            this.append(name, headers[name])
          }, this)
        }
      }
    
      Headers.prototype.append = function(name, value) {
        name = normalizeName(name)
        value = normalizeValue(value)
        var list = this.map[name]
        if (!list) {
          list = []
          this.map[name] = list
        }
        list.push(value)
      }
    
      Headers.prototype['delete'] = function(name) {
        delete this.map[normalizeName(name)]
      }
    
      Headers.prototype.get = function(name) {
        var values = this.map[normalizeName(name)]
        return values ? values[0] : null
      }
    
      Headers.prototype.getAll = function(name) {
        return this.map[normalizeName(name)] || []
      }
    
      Headers.prototype.has = function(name) {
        return this.map.hasOwnProperty(normalizeName(name))
      }
    
      Headers.prototype.set = function(name, value) {
        this.map[normalizeName(name)] = [normalizeValue(value)]
      }
    
      Headers.prototype.forEach = function(callback, thisArg) {
        Object.getOwnPropertyNames(this.map).forEach(function(name) {
          this.map[name].forEach(function(value) {
            callback.call(thisArg, value, name, this)
          }, this)
        }, this)
      }
    
      Headers.prototype.keys = function() {
        var items = []
        this.forEach(function(value, name) { items.push(name) })
        return iteratorFor(items)
      }
    
      Headers.prototype.values = function() {
        var items = []
        this.forEach(function(value) { items.push(value) })
        return iteratorFor(items)
      }
    
      Headers.prototype.entries = function() {
        var items = []
        this.forEach(function(value, name) { items.push([name, value]) })
        return iteratorFor(items)
      }
    
      if (support.iterable) {
        Headers.prototype[Symbol.iterator] = Headers.prototype.entries
      }
    
      function consumed(body) {
        if (body.bodyUsed) {
          return Promise.reject(new TypeError('Already read'))
        }
        body.bodyUsed = true
      }
    
      function fileReaderReady(reader) {
        return new Promise(function(resolve, reject) {
          reader.onload = function() {
            resolve(reader.result)
          }
          reader.onerror = function() {
            reject(reader.error)
          }
        })
      }
    
      function readBlobAsArrayBuffer(blob) {
        var reader = new FileReader()
        reader.readAsArrayBuffer(blob)
        return fileReaderReady(reader)
      }
    
      function readBlobAsText(blob) {
        var reader = new FileReader()
        reader.readAsText(blob)
        return fileReaderReady(reader)
      }
    
      function Body() {
        this.bodyUsed = false
    
        this._initBody = function(body) {
          this._bodyInit = body
          if (typeof body === 'string') {
            this._bodyText = body
          } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
            this._bodyBlob = body
          } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
            this._bodyFormData = body
          } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
            this._bodyText = body.toString()
          } else if (!body) {
            this._bodyText = ''
          } else if (support.arrayBuffer && ArrayBuffer.prototype.isPrototypeOf(body)) {
            // Only support ArrayBuffers for POST method.
            // Receiving ArrayBuffers happens via Blobs, instead.
          } else {
            throw new Error('unsupported BodyInit type')
          }
    
          if (!this.headers.get('content-type')) {
            if (typeof body === 'string') {
              this.headers.set('content-type', 'text/plain;charset=UTF-8')
            } else if (this._bodyBlob && this._bodyBlob.type) {
              this.headers.set('content-type', this._bodyBlob.type)
            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
              this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')
            }
          }
        }
    
        if (support.blob) {
          this.blob = function() {
            var rejected = consumed(this)
            if (rejected) {
              return rejected
            }
    
            if (this._bodyBlob) {
              return Promise.resolve(this._bodyBlob)
            } else if (this._bodyFormData) {
              throw new Error('could not read FormData body as blob')
            } else {
              return Promise.resolve(new Blob([this._bodyText]))
            }
          }
    
          this.arrayBuffer = function() {
            return this.blob().then(readBlobAsArrayBuffer)
          }
    
          this.text = function() {
            var rejected = consumed(this)
            if (rejected) {
              return rejected
            }
    
            if (this._bodyBlob) {
              return readBlobAsText(this._bodyBlob)
            } else if (this._bodyFormData) {
              throw new Error('could not read FormData body as text')
            } else {
              return Promise.resolve(this._bodyText)
            }
          }
        } else {
          this.text = function() {
            var rejected = consumed(this)
            return rejected ? rejected : Promise.resolve(this._bodyText)
          }
        }
    
        if (support.formData) {
          this.formData = function() {
            return this.text().then(decode)
          }
        }
    
        this.json = function() {
          return this.text().then(JSON.parse)
        }
    
        return this
      }
    
      // HTTP methods whose capitalization should be normalized
      var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']
    
      function normalizeMethod(method) {
        var upcased = method.toUpperCase()
        return (methods.indexOf(upcased) > -1) ? upcased : method
      }
    
      function Request(input, options) {
        options = options || {}
        var body = options.body
        if (Request.prototype.isPrototypeOf(input)) {
          if (input.bodyUsed) {
            throw new TypeError('Already read')
          }
          this.url = input.url
          this.credentials = input.credentials
          if (!options.headers) {
            this.headers = new Headers(input.headers)
          }
          this.method = input.method
          this.mode = input.mode
          if (!body) {
            body = input._bodyInit
            input.bodyUsed = true
          }
        } else {
          this.url = input
        }
    
        this.credentials = options.credentials || this.credentials || 'omit'
        if (options.headers || !this.headers) {
          this.headers = new Headers(options.headers)
        }
        this.method = normalizeMethod(options.method || this.method || 'GET')
        this.mode = options.mode || this.mode || null
        this.referrer = null
    
        if ((this.method === 'GET' || this.method === 'HEAD') && body) {
          throw new TypeError('Body not allowed for GET or HEAD requests')
        }
        this._initBody(body)
      }
    
      Request.prototype.clone = function() {
        return new Request(this)
      }
    
      function decode(body) {
        var form = new FormData()
        body.trim().split('&').forEach(function(bytes) {
          if (bytes) {
            var split = bytes.split('=')
            var name = split.shift().replace(/\+/g, ' ')
            var value = split.join('=').replace(/\+/g, ' ')
            form.append(decodeURIComponent(name), decodeURIComponent(value))
          }
        })
        return form
      }
    
      function headers(xhr) {
        var head = new Headers()
        var pairs = (xhr.getAllResponseHeaders() || '').trim().split('\n')
        pairs.forEach(function(header) {
          var split = header.trim().split(':')
          var key = split.shift().trim()
          var value = split.join(':').trim()
          head.append(key, value)
        })
        return head
      }
    
      Body.call(Request.prototype)
    
      function Response(bodyInit, options) {
        if (!options) {
          options = {}
        }
    
        this.type = 'default'
        this.status = options.status
        this.ok = this.status >= 200 && this.status < 300
        this.statusText = options.statusText
        this.headers = options.headers instanceof Headers ? options.headers : new Headers(options.headers)
        this.url = options.url || ''
        this._initBody(bodyInit)
      }
    
      Body.call(Response.prototype)
    
      Response.prototype.clone = function() {
        return new Response(this._bodyInit, {
          status: this.status,
          statusText: this.statusText,
          headers: new Headers(this.headers),
          url: this.url
        })
      }
    
      Response.error = function() {
        var response = new Response(null, {status: 0, statusText: ''})
        response.type = 'error'
        return response
      }
    
      var redirectStatuses = [301, 302, 303, 307, 308]
    
      Response.redirect = function(url, status) {
        if (redirectStatuses.indexOf(status) === -1) {
          throw new RangeError('Invalid status code')
        }
    
        return new Response(null, {status: status, headers: {location: url}})
      }
    
      self.Headers = Headers
      self.Request = Request
      self.Response = Response
    
      self.fetch = function(input, init) {
        return new Promise(function(resolve, reject) {
          var request
          if (Request.prototype.isPrototypeOf(input) && !init) {
            request = input
          } else {
            request = new Request(input, init)
          }
    
          var xhr = new XMLHttpRequest()
    
          function responseURL() {
            if ('responseURL' in xhr) {
              return xhr.responseURL
            }
    
            // Avoid security warnings on getResponseHeader when not allowed by CORS
            if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {
              return xhr.getResponseHeader('X-Request-URL')
            }
    
            return
          }
    
          xhr.onload = function() {
            var options = {
              status: xhr.status,
              statusText: xhr.statusText,
              headers: headers(xhr),
              url: responseURL()
            }
            var body = 'response' in xhr ? xhr.response : xhr.responseText
            resolve(new Response(body, options))
          }
    
          xhr.onerror = function() {
            reject(new TypeError('Network request failed'))
          }
    
          xhr.ontimeout = function() {
            reject(new TypeError('Network request failed'))
          }
    
          xhr.open(request.method, request.url, true)
    
          if (request.credentials === 'include') {
            xhr.withCredentials = true
          }
    
          if ('responseType' in xhr && support.blob) {
            xhr.responseType = 'blob'
          }
    
          request.headers.forEach(function(value, name) {
            xhr.setRequestHeader(name, value)
          })
    
          xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)
        })
      }
      self.fetch.polyfill = true
    })(typeof self !== 'undefined' ? self : this);
    
  provide("whatwg-fetch", module.exports);
}(global));

// pakmanager:asap/raw
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  "use strict";
    
    var domain; // The domain module is executed on demand
    var hasSetImmediate = typeof setImmediate === "function";
    
    // Use the fastest means possible to execute a task in its own turn, with
    // priority over other events including network IO events in Node.js.
    //
    // An exception thrown by a task will permanently interrupt the processing of
    // subsequent tasks. The higher level `asap` function ensures that if an
    // exception is thrown by a task, that the task queue will continue flushing as
    // soon as possible, but if you use `rawAsap` directly, you are responsible to
    // either ensure that no exceptions are thrown from your task, or to manually
    // call `rawAsap.requestFlush` if an exception is thrown.
    module.exports = rawAsap;
    function rawAsap(task) {
        if (!queue.length) {
            requestFlush();
            flushing = true;
        }
        // Avoids a function call
        queue[queue.length] = task;
    }
    
    var queue = [];
    // Once a flush has been requested, no further calls to `requestFlush` are
    // necessary until the next `flush` completes.
    var flushing = false;
    // The position of the next task to execute in the task queue. This is
    // preserved between calls to `flush` so that it can be resumed if
    // a task throws an exception.
    var index = 0;
    // If a task schedules additional tasks recursively, the task queue can grow
    // unbounded. To prevent memory excaustion, the task queue will periodically
    // truncate already-completed tasks.
    var capacity = 1024;
    
    // The flush function processes all tasks that have been scheduled with
    // `rawAsap` unless and until one of those tasks throws an exception.
    // If a task throws an exception, `flush` ensures that its state will remain
    // consistent and will resume where it left off when called again.
    // However, `flush` does not make any arrangements to be called again if an
    // exception is thrown.
    function flush() {
        while (index < queue.length) {
            var currentIndex = index;
            // Advance the index before calling the task. This ensures that we will
            // begin flushing on the next task the task throws an error.
            index = index + 1;
            queue[currentIndex].call();
            // Prevent leaking memory for long chains of recursive calls to `asap`.
            // If we call `asap` within tasks scheduled by `asap`, the queue will
            // grow, but to avoid an O(n) walk for every task we execute, we don't
            // shift tasks off the queue after they have been executed.
            // Instead, we periodically shift 1024 tasks off the queue.
            if (index > capacity) {
                // Manually shift all values starting at the index back to the
                // beginning of the queue.
                for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {
                    queue[scan] = queue[scan + index];
                }
                queue.length -= index;
                index = 0;
            }
        }
        queue.length = 0;
        index = 0;
        flushing = false;
    }
    
    rawAsap.requestFlush = requestFlush;
    function requestFlush() {
        // Ensure flushing is not bound to any domain.
        // It is not sufficient to exit the domain, because domains exist on a stack.
        // To execute code outside of any domain, the following dance is necessary.
        var parentDomain = process.domain;
        if (parentDomain) {
            if (!domain) {
                // Lazy execute the domain module.
                // Only employed if the user elects to use domains.
                domain = require("domain");
            }
            domain.active = process.domain = null;
        }
    
        // `setImmediate` is slower that `process.nextTick`, but `process.nextTick`
        // cannot handle recursion.
        // `requestFlush` will only be called recursively from `asap.js`, to resume
        // flushing after an error is thrown into a domain.
        // Conveniently, `setImmediate` was introduced in the same version
        // `process.nextTick` started throwing recursion errors.
        if (flushing && hasSetImmediate) {
            setImmediate(flush);
        } else {
            process.nextTick(flush);
        }
    
        if (parentDomain) {
            domain.active = process.domain = parentDomain;
        }
    }
    
  provide("asap/raw", module.exports);
}(global));

// pakmanager:asap
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  "use strict";
    
    var rawAsap =  require('asap/raw');
    var freeTasks = [];
    
    /**
     * Calls a task as soon as possible after returning, in its own event, with
     * priority over IO events. An exception thrown in a task can be handled by
     * `process.on("uncaughtException") or `domain.on("error")`, but will otherwise
     * crash the process. If the error is handled, all subsequent tasks will
     * resume.
     *
     * @param {{call}} task A callable object, typically a function that takes no
     * arguments.
     */
    module.exports = asap;
    function asap(task) {
        var rawTask;
        if (freeTasks.length) {
            rawTask = freeTasks.pop();
        } else {
            rawTask = new RawTask();
        }
        rawTask.task = task;
        rawTask.domain = process.domain;
        rawAsap(rawTask);
    }
    
    function RawTask() {
        this.task = null;
        this.domain = null;
    }
    
    RawTask.prototype.call = function () {
        if (this.domain) {
            this.domain.enter();
        }
        var threw = true;
        try {
            this.task.call();
            threw = false;
            // If the task throws an exception (presumably) Node.js restores the
            // domain stack for the next event.
            if (this.domain) {
                this.domain.exit();
            }
        } finally {
            // We use try/finally and a threw flag to avoid messing up stack traces
            // when we catch and release errors.
            if (threw) {
                // In Node.js, uncaught exceptions are considered fatal errors.
                // Re-throw them to interrupt flushing!
                // Ensure that flushing continues if an uncaught exception is
                // suppressed listening process.on("uncaughtException") or
                // domain.on("error").
                rawAsap.requestFlush();
            }
            // If the task threw an error, we do not want to exit the domain here.
            // Exiting the domain would prevent the domain from catching the error.
            this.task = null;
            this.domain = null;
            freeTasks.push(this);
        }
    };
    
    
  provide("asap", module.exports);
}(global));

// pakmanager:loose-envify
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  module.exports =   require('loose-envify')(process.env);
    
  provide("loose-envify", module.exports);
}(global));

// pakmanager:object-assign
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    /* eslint-disable no-unused-vars */
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    
    function toObject(val) {
    	if (val === null || val === undefined) {
    		throw new TypeError('Object.assign cannot be called with null or undefined');
    	}
    
    	return Object(val);
    }
    
    function shouldUseNative() {
    	try {
    		if (!Object.assign) {
    			return false;
    		}
    
    		// Detect buggy property enumeration order in older V8 versions.
    
    		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
    		var test1 = new String('abc');  // eslint-disable-line
    		test1[5] = 'de';
    		if (Object.getOwnPropertyNames(test1)[0] === '5') {
    			return false;
    		}
    
    		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
    		var test2 = {};
    		for (var i = 0; i < 10; i++) {
    			test2['_' + String.fromCharCode(i)] = i;
    		}
    		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
    			return test2[n];
    		});
    		if (order2.join('') !== '0123456789') {
    			return false;
    		}
    
    		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
    		var test3 = {};
    		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
    			test3[letter] = letter;
    		});
    		if (Object.keys(Object.assign({}, test3)).join('') !==
    				'abcdefghijklmnopqrst') {
    			return false;
    		}
    
    		return true;
    	} catch (e) {
    		// We don't expect any of the above to throw, but better to be safe.
    		return false;
    	}
    }
    
    module.exports = shouldUseNative() ? Object.assign : function (target, source) {
    	var from;
    	var to = toObject(target);
    	var symbols;
    
    	for (var s = 1; s < arguments.length; s++) {
    		from = Object(arguments[s]);
    
    		for (var key in from) {
    			if (hasOwnProperty.call(from, key)) {
    				to[key] = from[key];
    			}
    		}
    
    		if (Object.getOwnPropertySymbols) {
    			symbols = Object.getOwnPropertySymbols(from);
    			for (var i = 0; i < symbols.length; i++) {
    				if (propIsEnumerable.call(from, symbols[i])) {
    					to[symbols[i]] = from[symbols[i]];
    				}
    			}
    		}
    	}
    
    	return to;
    };
    
  provide("object-assign", module.exports);
}(global));

// pakmanager:strict-uri-encode
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    module.exports = function (str) {
    	return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
    		return '%' + c.charCodeAt(0).toString(16).toUpperCase();
    	});
    };
    
  provide("strict-uri-encode", module.exports);
}(global));

// pakmanager:core-js/modules/_fails
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  module.exports = function(exec){
      try {
        return !!exec();
      } catch(e){
        return true;
      }
    };
  provide("core-js/modules/_fails", module.exports);
}(global));

// pakmanager:core-js/modules/_is-object
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  module.exports = function(it){
      return typeof it === 'object' ? it !== null : typeof it === 'function';
    };
  provide("core-js/modules/_is-object", module.exports);
}(global));

// pakmanager:core-js/modules/_global
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
    var global = module.exports = typeof window != 'undefined' && window.Math == Math
      ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
    if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef
  provide("core-js/modules/_global", module.exports);
}(global));

// pakmanager:core-js/modules/_descriptors
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // Thank's IE8 for his funny defineProperty
    module.exports = ! require('core-js/modules/_fails')(function(){
      return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
    });
  provide("core-js/modules/_descriptors", module.exports);
}(global));

// pakmanager:core-js/modules/_dom-create
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var isObject =  require('core-js/modules/_is-object')
      , document =  require('core-js/modules/_global').document
      // in old IE typeof document.createElement is 'object'
      , is = isObject(document) && isObject(document.createElement);
    module.exports = function(it){
      return is ? document.createElement(it) : {};
    };
  provide("core-js/modules/_dom-create", module.exports);
}(global));

// pakmanager:core-js/modules/_cof
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var toString = {}.toString;
    
    module.exports = function(it){
      return toString.call(it).slice(8, -1);
    };
  provide("core-js/modules/_cof", module.exports);
}(global));

// pakmanager:core-js/modules/_iobject
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // fallback for non-array-like ES3 and non-enumerable old V8 strings
    var cof =  require('core-js/modules/_cof');
    module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
      return cof(it) == 'String' ? it.split('') : Object(it);
    };
  provide("core-js/modules/_iobject", module.exports);
}(global));

// pakmanager:core-js/modules/_defined
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 7.2.1 RequireObjectCoercible(argument)
    module.exports = function(it){
      if(it == undefined)throw TypeError("Can't call method on  " + it);
      return it;
    };
  provide("core-js/modules/_defined", module.exports);
}(global));

// pakmanager:core-js/modules/_to-integer
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 7.1.4 ToInteger
    var ceil  = Math.ceil
      , floor = Math.floor;
    module.exports = function(it){
      return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
    };
  provide("core-js/modules/_to-integer", module.exports);
}(global));

// pakmanager:core-js/modules/_to-iobject
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // to indexed object, toObject with fallback for non-array-like ES3 strings
    var IObject =  require('core-js/modules/_iobject')
      , defined =  require('core-js/modules/_defined');
    module.exports = function(it){
      return IObject(defined(it));
    };
  provide("core-js/modules/_to-iobject", module.exports);
}(global));

// pakmanager:core-js/modules/_to-length
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 7.1.15 ToLength
    var toInteger =  require('core-js/modules/_to-integer')
      , min       = Math.min;
    module.exports = function(it){
      return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
    };
  provide("core-js/modules/_to-length", module.exports);
}(global));

// pakmanager:core-js/modules/_to-index
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var toInteger =  require('core-js/modules/_to-integer')
      , max       = Math.max
      , min       = Math.min;
    module.exports = function(index, length){
      index = toInteger(index);
      return index < 0 ? max(index + length, 0) : min(index, length);
    };
  provide("core-js/modules/_to-index", module.exports);
}(global));

// pakmanager:core-js/modules/_shared
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var global =  require('core-js/modules/_global')
      , SHARED = '__core-js_shared__'
      , store  = global[SHARED] || (global[SHARED] = {});
    module.exports = function(key){
      return store[key] || (store[key] = {});
    };
  provide("core-js/modules/_shared", module.exports);
}(global));

// pakmanager:core-js/modules/_uid
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var id = 0
      , px = Math.random();
    module.exports = function(key){
      return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
    };
  provide("core-js/modules/_uid", module.exports);
}(global));

// pakmanager:core-js/modules/_an-object
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var isObject =  require('core-js/modules/_is-object');
    module.exports = function(it){
      if(!isObject(it))throw TypeError(it + ' is not an object!');
      return it;
    };
  provide("core-js/modules/_an-object", module.exports);
}(global));

// pakmanager:core-js/modules/_ie8-dom-define
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  module.exports = ! require('core-js/modules/_descriptors') && ! require('core-js/modules/_fails')(function(){
      return Object.defineProperty( require('core-js/modules/_dom-create')('div'), 'a', {get: function(){ return 7; }}).a != 7;
    });
  provide("core-js/modules/_ie8-dom-define", module.exports);
}(global));

// pakmanager:core-js/modules/_to-primitive
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 7.1.1 ToPrimitive(input [, PreferredType])
    var isObject =  require('core-js/modules/_is-object');
    // instead of the ES6 spec version, we didn't implement @@toPrimitive case
    // and the second argument - flag - preferred type is a string
    module.exports = function(it, S){
      if(!isObject(it))return it;
      var fn, val;
      if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
      if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
      if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
      throw TypeError("Can't convert object to primitive value");
    };
  provide("core-js/modules/_to-primitive", module.exports);
}(global));

// pakmanager:core-js/modules/_object-dp
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var anObject       =  require('core-js/modules/_an-object')
      , IE8_DOM_DEFINE =  require('core-js/modules/_ie8-dom-define')
      , toPrimitive    =  require('core-js/modules/_to-primitive')
      , dP             = Object.defineProperty;
    
    exports.f =  require('core-js/modules/_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes){
      anObject(O);
      P = toPrimitive(P, true);
      anObject(Attributes);
      if(IE8_DOM_DEFINE)try {
        return dP(O, P, Attributes);
      } catch(e){ /* empty */ }
      if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
      if('value' in Attributes)O[P] = Attributes.value;
      return O;
    };
  provide("core-js/modules/_object-dp", module.exports);
}(global));

// pakmanager:core-js/modules/_property-desc
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  module.exports = function(bitmap, value){
      return {
        enumerable  : !(bitmap & 1),
        configurable: !(bitmap & 2),
        writable    : !(bitmap & 4),
        value       : value
      };
    };
  provide("core-js/modules/_property-desc", module.exports);
}(global));

// pakmanager:core-js/modules/_object-keys-internal
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var has          =  require('core-js/modules/_has')
      , toIObject    =  require('core-js/modules/_to-iobject')
      , arrayIndexOf =  require('core-js/modules/_array-includes')(false)
      , IE_PROTO     =  require('core-js/modules/_shared-key')('IE_PROTO');
    
    module.exports = function(object, names){
      var O      = toIObject(object)
        , i      = 0
        , result = []
        , key;
      for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
      // Don't enum bug & hidden keys
      while(names.length > i)if(has(O, key = names[i++])){
        ~arrayIndexOf(result, key) || result.push(key);
      }
      return result;
    };
  provide("core-js/modules/_object-keys-internal", module.exports);
}(global));

// pakmanager:core-js/modules/_enum-bug-keys
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // IE 8- don't enum bug keys
    module.exports = (
      'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
    ).split(',');
  provide("core-js/modules/_enum-bug-keys", module.exports);
}(global));

// pakmanager:core-js/modules/_has
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var hasOwnProperty = {}.hasOwnProperty;
    module.exports = function(it, key){
      return hasOwnProperty.call(it, key);
    };
  provide("core-js/modules/_has", module.exports);
}(global));

// pakmanager:core-js/modules/_array-includes
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // false -> Array#indexOf
    // true  -> Array#includes
    var toIObject =  require('core-js/modules/_to-iobject')
      , toLength  =  require('core-js/modules/_to-length')
      , toIndex   =  require('core-js/modules/_to-index');
    module.exports = function(IS_INCLUDES){
      return function($this, el, fromIndex){
        var O      = toIObject($this)
          , length = toLength(O.length)
          , index  = toIndex(fromIndex, length)
          , value;
        // Array#includes uses SameValueZero equality algorithm
        if(IS_INCLUDES && el != el)while(length > index){
          value = O[index++];
          if(value != value)return true;
        // Array#toIndex ignores holes, Array#includes - not
        } else for(;length > index; index++)if(IS_INCLUDES || index in O){
          if(O[index] === el)return IS_INCLUDES || index || 0;
        } return !IS_INCLUDES && -1;
      };
    };
  provide("core-js/modules/_array-includes", module.exports);
}(global));

// pakmanager:core-js/modules/_shared-key
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var shared =  require('core-js/modules/_shared')('keys')
      , uid    =  require('core-js/modules/_uid');
    module.exports = function(key){
      return shared[key] || (shared[key] = uid(key));
    };
  provide("core-js/modules/_shared-key", module.exports);
}(global));

// pakmanager:core-js/modules/_object-keys
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 19.1.2.14 / 15.2.3.14 Object.keys(O)
    var $keys       =  require('core-js/modules/_object-keys-internal')
      , enumBugKeys =  require('core-js/modules/_enum-bug-keys');
    
    module.exports = Object.keys || function keys(O){
      return $keys(O, enumBugKeys);
    };
  provide("core-js/modules/_object-keys", module.exports);
}(global));

// pakmanager:core-js/modules/_hide
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var dP         =  require('core-js/modules/_object-dp')
      , createDesc =  require('core-js/modules/_property-desc');
    module.exports =  require('core-js/modules/_descriptors') ? function(object, key, value){
      return dP.f(object, key, createDesc(1, value));
    } : function(object, key, value){
      object[key] = value;
      return object;
    };
  provide("core-js/modules/_hide", module.exports);
}(global));

// pakmanager:core-js/modules/_core
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var core = module.exports = {version: '2.4.0'};
    if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef
  provide("core-js/modules/_core", module.exports);
}(global));

// pakmanager:core-js/modules/_a-function
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  module.exports = function(it){
      if(typeof it != 'function')throw TypeError(it + ' is not a function!');
      return it;
    };
  provide("core-js/modules/_a-function", module.exports);
}(global));

// pakmanager:core-js/modules/_object-dps
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var dP       =  require('core-js/modules/_object-dp')
      , anObject =  require('core-js/modules/_an-object')
      , getKeys  =  require('core-js/modules/_object-keys');
    
    module.exports =  require('core-js/modules/_descriptors') ? Object.defineProperties : function defineProperties(O, Properties){
      anObject(O);
      var keys   = getKeys(Properties)
        , length = keys.length
        , i = 0
        , P;
      while(length > i)dP.f(O, P = keys[i++], Properties[P]);
      return O;
    };
  provide("core-js/modules/_object-dps", module.exports);
}(global));

// pakmanager:core-js/modules/_html
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  module.exports =  require('core-js/modules/_global').document && document.documentElement;
  provide("core-js/modules/_html", module.exports);
}(global));

// pakmanager:core-js/modules/_wks
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var store      =  require('core-js/modules/_shared')('wks')
      , uid        =  require('core-js/modules/_uid')
      , Symbol     =  require('core-js/modules/_global').Symbol
      , USE_SYMBOL = typeof Symbol == 'function';
    
    var $exports = module.exports = function(name){
      return store[name] || (store[name] =
        USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
    };
    
    $exports.store = store;
  provide("core-js/modules/_wks", module.exports);
}(global));

// pakmanager:core-js/modules/_iterators
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  module.exports = {};
  provide("core-js/modules/_iterators", module.exports);
}(global));

// pakmanager:core-js/modules/_classof
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // getting tag from 19.1.3.6 Object.prototype.toString()
    var cof =  require('core-js/modules/_cof')
      , TAG =  require('core-js/modules/_wks')('toStringTag')
      // ES3 wrong here
      , ARG = cof(function(){ return arguments; }()) == 'Arguments';
    
    // fallback for IE11 Script Access Denied error
    var tryGet = function(it, key){
      try {
        return it[key];
      } catch(e){ /* empty */ }
    };
    
    module.exports = function(it){
      var O, T, B;
      return it === undefined ? 'Undefined' : it === null ? 'Null'
        // @@toStringTag case
        : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
        // builtinTag case
        : ARG ? cof(O)
        // ES3 arguments fallback
        : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
    };
  provide("core-js/modules/_classof", module.exports);
}(global));

// pakmanager:core-js/modules/_redefine
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var global    =  require('core-js/modules/_global')
      , hide      =  require('core-js/modules/_hide')
      , has       =  require('core-js/modules/_has')
      , SRC       =  require('core-js/modules/_uid')('src')
      , TO_STRING = 'toString'
      , $toString = Function[TO_STRING]
      , TPL       = ('' + $toString).split(TO_STRING);
    
     require('core-js/modules/_core').inspectSource = function(it){
      return $toString.call(it);
    };
    
    (module.exports = function(O, key, val, safe){
      var isFunction = typeof val == 'function';
      if(isFunction)has(val, 'name') || hide(val, 'name', key);
      if(O[key] === val)return;
      if(isFunction)has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
      if(O === global){
        O[key] = val;
      } else {
        if(!safe){
          delete O[key];
          hide(O, key, val);
        } else {
          if(O[key])O[key] = val;
          else hide(O, key, val);
        }
      }
    // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
    })(Function.prototype, TO_STRING, function toString(){
      return typeof this == 'function' && this[SRC] || $toString.call(this);
    });
  provide("core-js/modules/_redefine", module.exports);
}(global));

// pakmanager:core-js/modules/_ctx
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // optional / simple context binding
    var aFunction =  require('core-js/modules/_a-function');
    module.exports = function(fn, that, length){
      aFunction(fn);
      if(that === undefined)return fn;
      switch(length){
        case 1: return function(a){
          return fn.call(that, a);
        };
        case 2: return function(a, b){
          return fn.call(that, a, b);
        };
        case 3: return function(a, b, c){
          return fn.call(that, a, b, c);
        };
      }
      return function(/* ...args */){
        return fn.apply(that, arguments);
      };
    };
  provide("core-js/modules/_ctx", module.exports);
}(global));

// pakmanager:core-js/modules/_object-create
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
    var anObject    =  require('core-js/modules/_an-object')
      , dPs         =  require('core-js/modules/_object-dps')
      , enumBugKeys =  require('core-js/modules/_enum-bug-keys')
      , IE_PROTO    =  require('core-js/modules/_shared-key')('IE_PROTO')
      , Empty       = function(){ /* empty */ }
      , PROTOTYPE   = 'prototype';
    
    // Create object with fake `null` prototype: use iframe Object with cleared prototype
    var createDict = function(){
      // Thrash, waste and sodomy: IE GC bug
      var iframe =  require('core-js/modules/_dom-create')('iframe')
        , i      = enumBugKeys.length
        , gt     = '>'
        , iframeDocument;
      iframe.style.display = 'none';
       require('core-js/modules/_html').appendChild(iframe);
      iframe.src = 'javascript:'; // eslint-disable-line no-script-url
      // createDict = iframe.contentWindow.Object;
      // html.removeChild(iframe);
      iframeDocument = iframe.contentWindow.document;
      iframeDocument.open();
      iframeDocument.write('<script>document.F=Object</script' + gt);
      iframeDocument.close();
      createDict = iframeDocument.F;
      while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
      return createDict();
    };
    
    module.exports = Object.create || function create(O, Properties){
      var result;
      if(O !== null){
        Empty[PROTOTYPE] = anObject(O);
        result = new Empty;
        Empty[PROTOTYPE] = null;
        // add "__proto__" for Object.getPrototypeOf polyfill
        result[IE_PROTO] = O;
      } else result = createDict();
      return Properties === undefined ? result : dPs(result, Properties);
    };
  provide("core-js/modules/_object-create", module.exports);
}(global));

// pakmanager:core-js/modules/_set-to-string-tag
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var def =  require('core-js/modules/_object-dp').f
      , has =  require('core-js/modules/_has')
      , TAG =  require('core-js/modules/_wks')('toStringTag');
    
    module.exports = function(it, tag, stat){
      if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
    };
  provide("core-js/modules/_set-to-string-tag", module.exports);
}(global));

// pakmanager:core-js/modules/_to-object
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 7.1.13 ToObject(argument)
    var defined =  require('core-js/modules/_defined');
    module.exports = function(it){
      return Object(defined(it));
    };
  provide("core-js/modules/_to-object", module.exports);
}(global));

// pakmanager:core-js/modules/_object-gopd
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var pIE            =  require('core-js/modules/_object-pie')
      , createDesc     =  require('core-js/modules/_property-desc')
      , toIObject      =  require('core-js/modules/_to-iobject')
      , toPrimitive    =  require('core-js/modules/_to-primitive')
      , has            =  require('core-js/modules/_has')
      , IE8_DOM_DEFINE =  require('core-js/modules/_ie8-dom-define')
      , gOPD           = Object.getOwnPropertyDescriptor;
    
    exports.f =  require('core-js/modules/_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P){
      O = toIObject(O);
      P = toPrimitive(P, true);
      if(IE8_DOM_DEFINE)try {
        return gOPD(O, P);
      } catch(e){ /* empty */ }
      if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
    };
  provide("core-js/modules/_object-gopd", module.exports);
}(global));

// pakmanager:core-js/modules/_is-array
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 7.2.2 IsArray(argument)
    var cof =  require('core-js/modules/_cof');
    module.exports = Array.isArray || function isArray(arg){
      return cof(arg) == 'Array';
    };
  provide("core-js/modules/_is-array", module.exports);
}(global));

// pakmanager:core-js/modules/_array-species-constructor
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var isObject =  require('core-js/modules/_is-object')
      , isArray  =  require('core-js/modules/_is-array')
      , SPECIES  =  require('core-js/modules/_wks')('species');
    
    module.exports = function(original){
      var C;
      if(isArray(original)){
        C = original.constructor;
        // cross-realm fallback
        if(typeof C == 'function' && (C === Array || isArray(C.prototype)))C = undefined;
        if(isObject(C)){
          C = C[SPECIES];
          if(C === null)C = undefined;
        }
      } return C === undefined ? Array : C;
    };
  provide("core-js/modules/_array-species-constructor", module.exports);
}(global));

// pakmanager:core-js/modules/_object-pie
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  exports.f = {}.propertyIsEnumerable;
  provide("core-js/modules/_object-pie", module.exports);
}(global));

// pakmanager:core-js/modules/_iter-call
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // call something on iterator step with safe closing on error
    var anObject =  require('core-js/modules/_an-object');
    module.exports = function(iterator, fn, value, entries){
      try {
        return entries ? fn(anObject(value)[0], value[1]) : fn(value);
      // 7.4.6 IteratorClose(iterator, completion)
      } catch(e){
        var ret = iterator['return'];
        if(ret !== undefined)anObject(ret.call(iterator));
        throw e;
      }
    };
  provide("core-js/modules/_iter-call", module.exports);
}(global));

// pakmanager:core-js/modules/_is-array-iter
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // check on default Array iterator
    var Iterators  =  require('core-js/modules/_iterators')
      , ITERATOR   =  require('core-js/modules/_wks')('iterator')
      , ArrayProto = Array.prototype;
    
    module.exports = function(it){
      return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
    };
  provide("core-js/modules/_is-array-iter", module.exports);
}(global));

// pakmanager:core-js/modules/core.get-iterator-method
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var classof   =  require('core-js/modules/_classof')
      , ITERATOR  =  require('core-js/modules/_wks')('iterator')
      , Iterators =  require('core-js/modules/_iterators');
    module.exports =  require('core-js/modules/_core').getIteratorMethod = function(it){
      if(it != undefined)return it[ITERATOR]
        || it['@@iterator']
        || Iterators[classof(it)];
    };
  provide("core-js/modules/core.get-iterator-method", module.exports);
}(global));

// pakmanager:core-js/modules/_library
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  module.exports = false;
  provide("core-js/modules/_library", module.exports);
}(global));

// pakmanager:core-js/modules/_export
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var global    =  require('core-js/modules/_global')
      , core      =  require('core-js/modules/_core')
      , hide      =  require('core-js/modules/_hide')
      , redefine  =  require('core-js/modules/_redefine')
      , ctx       =  require('core-js/modules/_ctx')
      , PROTOTYPE = 'prototype';
    
    var $export = function(type, name, source){
      var IS_FORCED = type & $export.F
        , IS_GLOBAL = type & $export.G
        , IS_STATIC = type & $export.S
        , IS_PROTO  = type & $export.P
        , IS_BIND   = type & $export.B
        , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE]
        , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
        , expProto  = exports[PROTOTYPE] || (exports[PROTOTYPE] = {})
        , key, own, out, exp;
      if(IS_GLOBAL)source = name;
      for(key in source){
        // contains in native
        own = !IS_FORCED && target && target[key] !== undefined;
        // export native or passed
        out = (own ? target : source)[key];
        // bind timers to global for call from export context
        exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
        // extend global
        if(target)redefine(target, key, out, type & $export.U);
        // export
        if(exports[key] != out)hide(exports, key, exp);
        if(IS_PROTO && expProto[key] != out)expProto[key] = out;
      }
    };
    global.core = core;
    // type bitmap
    $export.F = 1;   // forced
    $export.G = 2;   // global
    $export.S = 4;   // static
    $export.P = 8;   // proto
    $export.B = 16;  // bind
    $export.W = 32;  // wrap
    $export.U = 64;  // safe
    $export.R = 128; // real proto method for `library` 
    module.exports = $export;
  provide("core-js/modules/_export", module.exports);
}(global));

// pakmanager:core-js/modules/_iter-create
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    var create         =  require('core-js/modules/_object-create')
      , descriptor     =  require('core-js/modules/_property-desc')
      , setToStringTag =  require('core-js/modules/_set-to-string-tag')
      , IteratorPrototype = {};
    
    // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
     require('core-js/modules/_hide')(IteratorPrototype,  require('core-js/modules/_wks')('iterator'), function(){ return this; });
    
    module.exports = function(Constructor, NAME, next){
      Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
      setToStringTag(Constructor, NAME + ' Iterator');
    };
  provide("core-js/modules/_iter-create", module.exports);
}(global));

// pakmanager:core-js/modules/_object-gpo
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
    var has         =  require('core-js/modules/_has')
      , toObject    =  require('core-js/modules/_to-object')
      , IE_PROTO    =  require('core-js/modules/_shared-key')('IE_PROTO')
      , ObjectProto = Object.prototype;
    
    module.exports = Object.getPrototypeOf || function(O){
      O = toObject(O);
      if(has(O, IE_PROTO))return O[IE_PROTO];
      if(typeof O.constructor == 'function' && O instanceof O.constructor){
        return O.constructor.prototype;
      } return O instanceof Object ? ObjectProto : null;
    };
  provide("core-js/modules/_object-gpo", module.exports);
}(global));

// pakmanager:core-js/modules/_set-proto
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // Works with __proto__ only. Old v8 can't work with null proto objects.
    /* eslint-disable no-proto */
    var isObject =  require('core-js/modules/_is-object')
      , anObject =  require('core-js/modules/_an-object');
    var check = function(O, proto){
      anObject(O);
      if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
    };
    module.exports = {
      set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
        function(test, buggy, set){
          try {
            set =  require('core-js/modules/_ctx')(Function.call,  require('core-js/modules/_object-gopd').f(Object.prototype, '__proto__').set, 2);
            set(test, []);
            buggy = !(test instanceof Array);
          } catch(e){ buggy = true; }
          return function setPrototypeOf(O, proto){
            check(O, proto);
            if(buggy)O.__proto__ = proto;
            else set(O, proto);
            return O;
          };
        }({}, false) : undefined),
      check: check
    };
  provide("core-js/modules/_set-proto", module.exports);
}(global));

// pakmanager:core-js/modules/_array-species-create
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 9.4.2.3 ArraySpeciesCreate(originalArray, length)
    var speciesConstructor =  require('core-js/modules/_array-species-constructor');
    
    module.exports = function(original, length){
      return new (speciesConstructor(original))(length);
    };
  provide("core-js/modules/_array-species-create", module.exports);
}(global));

// pakmanager:core-js/modules/_redefine-all
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var redefine =  require('core-js/modules/_redefine');
    module.exports = function(target, src, safe){
      for(var key in src)redefine(target, key, src[key], safe);
      return target;
    };
  provide("core-js/modules/_redefine-all", module.exports);
}(global));

// pakmanager:core-js/modules/_an-instance
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  module.exports = function(it, Constructor, name, forbiddenField){
      if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){
        throw TypeError(name + ': incorrect invocation!');
      } return it;
    };
  provide("core-js/modules/_an-instance", module.exports);
}(global));

// pakmanager:core-js/modules/_for-of
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var ctx         =  require('core-js/modules/_ctx')
      , call        =  require('core-js/modules/_iter-call')
      , isArrayIter =  require('core-js/modules/_is-array-iter')
      , anObject    =  require('core-js/modules/_an-object')
      , toLength    =  require('core-js/modules/_to-length')
      , getIterFn   =  require('core-js/modules/core.get-iterator-method')
      , BREAK       = {}
      , RETURN      = {};
    var exports = module.exports = function(iterable, entries, fn, that, ITERATOR){
      var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)
        , f      = ctx(fn, that, entries ? 2 : 1)
        , index  = 0
        , length, step, iterator, result;
      if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
      // fast case for arrays with default iterator
      if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
        result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
        if(result === BREAK || result === RETURN)return result;
      } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
        result = call(iterator, f, step.value, entries);
        if(result === BREAK || result === RETURN)return result;
      }
    };
    exports.BREAK  = BREAK;
    exports.RETURN = RETURN;
  provide("core-js/modules/_for-of", module.exports);
}(global));

// pakmanager:core-js/modules/_iter-define
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    var LIBRARY        =  require('core-js/modules/_library')
      , $export        =  require('core-js/modules/_export')
      , redefine       =  require('core-js/modules/_redefine')
      , hide           =  require('core-js/modules/_hide')
      , has            =  require('core-js/modules/_has')
      , Iterators      =  require('core-js/modules/_iterators')
      , $iterCreate    =  require('core-js/modules/_iter-create')
      , setToStringTag =  require('core-js/modules/_set-to-string-tag')
      , getPrototypeOf =  require('core-js/modules/_object-gpo')
      , ITERATOR       =  require('core-js/modules/_wks')('iterator')
      , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
      , FF_ITERATOR    = '@@iterator'
      , KEYS           = 'keys'
      , VALUES         = 'values';
    
    var returnThis = function(){ return this; };
    
    module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
      $iterCreate(Constructor, NAME, next);
      var getMethod = function(kind){
        if(!BUGGY && kind in proto)return proto[kind];
        switch(kind){
          case KEYS: return function keys(){ return new Constructor(this, kind); };
          case VALUES: return function values(){ return new Constructor(this, kind); };
        } return function entries(){ return new Constructor(this, kind); };
      };
      var TAG        = NAME + ' Iterator'
        , DEF_VALUES = DEFAULT == VALUES
        , VALUES_BUG = false
        , proto      = Base.prototype
        , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
        , $default   = $native || getMethod(DEFAULT)
        , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
        , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
        , methods, key, IteratorPrototype;
      // Fix native
      if($anyNative){
        IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
        if(IteratorPrototype !== Object.prototype){
          // Set @@toStringTag to native iterators
          setToStringTag(IteratorPrototype, TAG, true);
          // fix for some old engines
          if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
        }
      }
      // fix Array#{values, @@iterator}.name in V8 / FF
      if(DEF_VALUES && $native && $native.name !== VALUES){
        VALUES_BUG = true;
        $default = function values(){ return $native.call(this); };
      }
      // Define iterator
      if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
        hide(proto, ITERATOR, $default);
      }
      // Plug for library
      Iterators[NAME] = $default;
      Iterators[TAG]  = returnThis;
      if(DEFAULT){
        methods = {
          values:  DEF_VALUES ? $default : getMethod(VALUES),
          keys:    IS_SET     ? $default : getMethod(KEYS),
          entries: $entries
        };
        if(FORCED)for(key in methods){
          if(!(key in proto))redefine(proto, key, methods[key]);
        } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
      }
      return methods;
    };
  provide("core-js/modules/_iter-define", module.exports);
}(global));

// pakmanager:core-js/modules/_iter-step
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  module.exports = function(done, value){
      return {value: value, done: !!done};
    };
  provide("core-js/modules/_iter-step", module.exports);
}(global));

// pakmanager:core-js/modules/_set-species
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    var global      =  require('core-js/modules/_global')
      , dP          =  require('core-js/modules/_object-dp')
      , DESCRIPTORS =  require('core-js/modules/_descriptors')
      , SPECIES     =  require('core-js/modules/_wks')('species');
    
    module.exports = function(KEY){
      var C = global[KEY];
      if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {
        configurable: true,
        get: function(){ return this; }
      });
    };
  provide("core-js/modules/_set-species", module.exports);
}(global));

// pakmanager:core-js/modules/_meta
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var META     =  require('core-js/modules/_uid')('meta')
      , isObject =  require('core-js/modules/_is-object')
      , has      =  require('core-js/modules/_has')
      , setDesc  =  require('core-js/modules/_object-dp').f
      , id       = 0;
    var isExtensible = Object.isExtensible || function(){
      return true;
    };
    var FREEZE = ! require('core-js/modules/_fails')(function(){
      return isExtensible(Object.preventExtensions({}));
    });
    var setMeta = function(it){
      setDesc(it, META, {value: {
        i: 'O' + ++id, // object ID
        w: {}          // weak collections IDs
      }});
    };
    var fastKey = function(it, create){
      // return primitive with prefix
      if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
      if(!has(it, META)){
        // can't set metadata to uncaught frozen object
        if(!isExtensible(it))return 'F';
        // not necessary to add metadata
        if(!create)return 'E';
        // add missing metadata
        setMeta(it);
      // return object ID
      } return it[META].i;
    };
    var getWeak = function(it, create){
      if(!has(it, META)){
        // can't set metadata to uncaught frozen object
        if(!isExtensible(it))return true;
        // not necessary to add metadata
        if(!create)return false;
        // add missing metadata
        setMeta(it);
      // return hash weak collections IDs
      } return it[META].w;
    };
    // add metadata on freeze-family methods calling
    var onFreeze = function(it){
      if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
      return it;
    };
    var meta = module.exports = {
      KEY:      META,
      NEED:     false,
      fastKey:  fastKey,
      getWeak:  getWeak,
      onFreeze: onFreeze
    };
  provide("core-js/modules/_meta", module.exports);
}(global));

// pakmanager:core-js/modules/_iter-detect
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var ITERATOR     =  require('core-js/modules/_wks')('iterator')
      , SAFE_CLOSING = false;
    
    try {
      var riter = [7][ITERATOR]();
      riter['return'] = function(){ SAFE_CLOSING = true; };
      Array.from(riter, function(){ throw 2; });
    } catch(e){ /* empty */ }
    
    module.exports = function(exec, skipClosing){
      if(!skipClosing && !SAFE_CLOSING)return false;
      var safe = false;
      try {
        var arr  = [7]
          , iter = arr[ITERATOR]();
        iter.next = function(){ return {done: safe = true}; };
        arr[ITERATOR] = function(){ return iter; };
        exec(arr);
      } catch(e){ /* empty */ }
      return safe;
    };
  provide("core-js/modules/_iter-detect", module.exports);
}(global));

// pakmanager:core-js/modules/_inherit-if-required
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var isObject       =  require('core-js/modules/_is-object')
      , setPrototypeOf =  require('core-js/modules/_set-proto').set;
    module.exports = function(that, target, C){
      var P, S = target.constructor;
      if(S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf){
        setPrototypeOf(that, P);
      } return that;
    };
  provide("core-js/modules/_inherit-if-required", module.exports);
}(global));

// pakmanager:core-js/modules/_object-gops
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  exports.f = Object.getOwnPropertySymbols;
  provide("core-js/modules/_object-gops", module.exports);
}(global));

// pakmanager:core-js/modules/_array-methods
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 0 -> Array#forEach
    // 1 -> Array#map
    // 2 -> Array#filter
    // 3 -> Array#some
    // 4 -> Array#every
    // 5 -> Array#find
    // 6 -> Array#findIndex
    var ctx      =  require('core-js/modules/_ctx')
      , IObject  =  require('core-js/modules/_iobject')
      , toObject =  require('core-js/modules/_to-object')
      , toLength =  require('core-js/modules/_to-length')
      , asc      =  require('core-js/modules/_array-species-create');
    module.exports = function(TYPE, $create){
      var IS_MAP        = TYPE == 1
        , IS_FILTER     = TYPE == 2
        , IS_SOME       = TYPE == 3
        , IS_EVERY      = TYPE == 4
        , IS_FIND_INDEX = TYPE == 6
        , NO_HOLES      = TYPE == 5 || IS_FIND_INDEX
        , create        = $create || asc;
      return function($this, callbackfn, that){
        var O      = toObject($this)
          , self   = IObject(O)
          , f      = ctx(callbackfn, that, 3)
          , length = toLength(self.length)
          , index  = 0
          , result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined
          , val, res;
        for(;length > index; index++)if(NO_HOLES || index in self){
          val = self[index];
          res = f(val, index, O);
          if(TYPE){
            if(IS_MAP)result[index] = res;            // map
            else if(res)switch(TYPE){
              case 3: return true;                    // some
              case 5: return val;                     // find
              case 6: return index;                   // findIndex
              case 2: result.push(val);               // filter
            } else if(IS_EVERY)return false;          // every
          }
        }
        return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
      };
    };
  provide("core-js/modules/_array-methods", module.exports);
}(global));

// pakmanager:core-js/modules/_string-ws
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
      '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';
  provide("core-js/modules/_string-ws", module.exports);
}(global));

// pakmanager:core-js/modules/_invoke
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // fast apply, http://jsperf.lnkit.com/fast-apply/5
    module.exports = function(fn, args, that){
      var un = that === undefined;
      switch(args.length){
        case 0: return un ? fn()
                          : fn.call(that);
        case 1: return un ? fn(args[0])
                          : fn.call(that, args[0]);
        case 2: return un ? fn(args[0], args[1])
                          : fn.call(that, args[0], args[1]);
        case 3: return un ? fn(args[0], args[1], args[2])
                          : fn.call(that, args[0], args[1], args[2]);
        case 4: return un ? fn(args[0], args[1], args[2], args[3])
                          : fn.call(that, args[0], args[1], args[2], args[3]);
      } return              fn.apply(that, args);
    };
  provide("core-js/modules/_invoke", module.exports);
}(global));

// pakmanager:core-js/modules/_typed
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var global =  require('core-js/modules/_global')
      , hide   =  require('core-js/modules/_hide')
      , uid    =  require('core-js/modules/_uid')
      , TYPED  = uid('typed_array')
      , VIEW   = uid('view')
      , ABV    = !!(global.ArrayBuffer && global.DataView)
      , CONSTR = ABV
      , i = 0, l = 9, Typed;
    
    var TypedArrayConstructors = (
      'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
    ).split(',');
    
    while(i < l){
      if(Typed = global[TypedArrayConstructors[i++]]){
        hide(Typed.prototype, TYPED, true);
        hide(Typed.prototype, VIEW, true);
      } else CONSTR = false;
    }
    
    module.exports = {
      ABV:    ABV,
      CONSTR: CONSTR,
      TYPED:  TYPED,
      VIEW:   VIEW
    };
  provide("core-js/modules/_typed", module.exports);
}(global));

// pakmanager:core-js/modules/_object-gopn
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
    var $keys      =  require('core-js/modules/_object-keys-internal')
      , hiddenKeys =  require('core-js/modules/_enum-bug-keys').concat('length', 'prototype');
    
    exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
      return $keys(O, hiddenKeys);
    };
  provide("core-js/modules/_object-gopn", module.exports);
}(global));

// pakmanager:core-js/modules/_array-fill
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
    'use strict';
    var toObject =  require('core-js/modules/_to-object')
      , toIndex  =  require('core-js/modules/_to-index')
      , toLength =  require('core-js/modules/_to-length');
    module.exports = function fill(value /*, start = 0, end = @length */){
      var O      = toObject(this)
        , length = toLength(O.length)
        , aLen   = arguments.length
        , index  = toIndex(aLen > 1 ? arguments[1] : undefined, length)
        , end    = aLen > 2 ? arguments[2] : undefined
        , endPos = end === undefined ? length : toIndex(end, length);
      while(endPos > index)O[index++] = value;
      return O;
    };
  provide("core-js/modules/_array-fill", module.exports);
}(global));

// pakmanager:core-js/modules/_add-to-unscopables
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 22.1.3.31 Array.prototype[@@unscopables]
    var UNSCOPABLES =  require('core-js/modules/_wks')('unscopables')
      , ArrayProto  = Array.prototype;
    if(ArrayProto[UNSCOPABLES] == undefined) require('core-js/modules/_hide')(ArrayProto, UNSCOPABLES, {});
    module.exports = function(key){
      ArrayProto[UNSCOPABLES][key] = true;
    };
  provide("core-js/modules/_add-to-unscopables", module.exports);
}(global));

// pakmanager:core-js/modules/_collection-strong
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    var dP          =  require('core-js/modules/_object-dp').f
      , create      =  require('core-js/modules/_object-create')
      , hide        =  require('core-js/modules/_hide')
      , redefineAll =  require('core-js/modules/_redefine-all')
      , ctx         =  require('core-js/modules/_ctx')
      , anInstance  =  require('core-js/modules/_an-instance')
      , defined     =  require('core-js/modules/_defined')
      , forOf       =  require('core-js/modules/_for-of')
      , $iterDefine =  require('core-js/modules/_iter-define')
      , step        =  require('core-js/modules/_iter-step')
      , setSpecies  =  require('core-js/modules/_set-species')
      , DESCRIPTORS =  require('core-js/modules/_descriptors')
      , fastKey     =  require('core-js/modules/_meta').fastKey
      , SIZE        = DESCRIPTORS ? '_s' : 'size';
    
    var getEntry = function(that, key){
      // fast case
      var index = fastKey(key), entry;
      if(index !== 'F')return that._i[index];
      // frozen object case
      for(entry = that._f; entry; entry = entry.n){
        if(entry.k == key)return entry;
      }
    };
    
    module.exports = {
      getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
        var C = wrapper(function(that, iterable){
          anInstance(that, C, NAME, '_i');
          that._i = create(null); // index
          that._f = undefined;    // first entry
          that._l = undefined;    // last entry
          that[SIZE] = 0;         // size
          if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
        });
        redefineAll(C.prototype, {
          // 23.1.3.1 Map.prototype.clear()
          // 23.2.3.2 Set.prototype.clear()
          clear: function clear(){
            for(var that = this, data = that._i, entry = that._f; entry; entry = entry.n){
              entry.r = true;
              if(entry.p)entry.p = entry.p.n = undefined;
              delete data[entry.i];
            }
            that._f = that._l = undefined;
            that[SIZE] = 0;
          },
          // 23.1.3.3 Map.prototype.delete(key)
          // 23.2.3.4 Set.prototype.delete(value)
          'delete': function(key){
            var that  = this
              , entry = getEntry(that, key);
            if(entry){
              var next = entry.n
                , prev = entry.p;
              delete that._i[entry.i];
              entry.r = true;
              if(prev)prev.n = next;
              if(next)next.p = prev;
              if(that._f == entry)that._f = next;
              if(that._l == entry)that._l = prev;
              that[SIZE]--;
            } return !!entry;
          },
          // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
          // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
          forEach: function forEach(callbackfn /*, that = undefined */){
            anInstance(this, C, 'forEach');
            var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3)
              , entry;
            while(entry = entry ? entry.n : this._f){
              f(entry.v, entry.k, this);
              // revert to the last existing entry
              while(entry && entry.r)entry = entry.p;
            }
          },
          // 23.1.3.7 Map.prototype.has(key)
          // 23.2.3.7 Set.prototype.has(value)
          has: function has(key){
            return !!getEntry(this, key);
          }
        });
        if(DESCRIPTORS)dP(C.prototype, 'size', {
          get: function(){
            return defined(this[SIZE]);
          }
        });
        return C;
      },
      def: function(that, key, value){
        var entry = getEntry(that, key)
          , prev, index;
        // change existing entry
        if(entry){
          entry.v = value;
        // create new entry
        } else {
          that._l = entry = {
            i: index = fastKey(key, true), // <- index
            k: key,                        // <- key
            v: value,                      // <- value
            p: prev = that._l,             // <- previous entry
            n: undefined,                  // <- next entry
            r: false                       // <- removed
          };
          if(!that._f)that._f = entry;
          if(prev)prev.n = entry;
          that[SIZE]++;
          // add to index
          if(index !== 'F')that._i[index] = entry;
        } return that;
      },
      getEntry: getEntry,
      setStrong: function(C, NAME, IS_MAP){
        // add .keys, .values, .entries, [@@iterator]
        // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
        $iterDefine(C, NAME, function(iterated, kind){
          this._t = iterated;  // target
          this._k = kind;      // kind
          this._l = undefined; // previous
        }, function(){
          var that  = this
            , kind  = that._k
            , entry = that._l;
          // revert to the last existing entry
          while(entry && entry.r)entry = entry.p;
          // get next entry
          if(!that._t || !(that._l = entry = entry ? entry.n : that._t._f)){
            // or finish the iteration
            that._t = undefined;
            return step(1);
          }
          // return step by kind
          if(kind == 'keys'  )return step(0, entry.k);
          if(kind == 'values')return step(0, entry.v);
          return step(0, [entry.k, entry.v]);
        }, IS_MAP ? 'entries' : 'values' , !IS_MAP, true);
    
        // add [@@species], 23.1.2.2, 23.2.2.2
        setSpecies(NAME);
      }
    };
  provide("core-js/modules/_collection-strong", module.exports);
}(global));

// pakmanager:core-js/modules/_collection
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    var global            =  require('core-js/modules/_global')
      , $export           =  require('core-js/modules/_export')
      , redefine          =  require('core-js/modules/_redefine')
      , redefineAll       =  require('core-js/modules/_redefine-all')
      , meta              =  require('core-js/modules/_meta')
      , forOf             =  require('core-js/modules/_for-of')
      , anInstance        =  require('core-js/modules/_an-instance')
      , isObject          =  require('core-js/modules/_is-object')
      , fails             =  require('core-js/modules/_fails')
      , $iterDetect       =  require('core-js/modules/_iter-detect')
      , setToStringTag    =  require('core-js/modules/_set-to-string-tag')
      , inheritIfRequired =  require('core-js/modules/_inherit-if-required');
    
    module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK){
      var Base  = global[NAME]
        , C     = Base
        , ADDER = IS_MAP ? 'set' : 'add'
        , proto = C && C.prototype
        , O     = {};
      var fixMethod = function(KEY){
        var fn = proto[KEY];
        redefine(proto, KEY,
          KEY == 'delete' ? function(a){
            return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
          } : KEY == 'has' ? function has(a){
            return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
          } : KEY == 'get' ? function get(a){
            return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
          } : KEY == 'add' ? function add(a){ fn.call(this, a === 0 ? 0 : a); return this; }
            : function set(a, b){ fn.call(this, a === 0 ? 0 : a, b); return this; }
        );
      };
      if(typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function(){
        new C().entries().next();
      }))){
        // create collection constructor
        C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
        redefineAll(C.prototype, methods);
        meta.NEED = true;
      } else {
        var instance             = new C
          // early implementations not supports chaining
          , HASNT_CHAINING       = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance
          // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
          , THROWS_ON_PRIMITIVES = fails(function(){ instance.has(1); })
          // most early implementations doesn't supports iterables, most modern - not close it correctly
          , ACCEPT_ITERABLES     = $iterDetect(function(iter){ new C(iter); }) // eslint-disable-line no-new
          // for early implementations -0 and +0 not the same
          , BUGGY_ZERO = !IS_WEAK && fails(function(){
            // V8 ~ Chromium 42- fails only with 5+ elements
            var $instance = new C()
              , index     = 5;
            while(index--)$instance[ADDER](index, index);
            return !$instance.has(-0);
          });
        if(!ACCEPT_ITERABLES){ 
          C = wrapper(function(target, iterable){
            anInstance(target, C, NAME);
            var that = inheritIfRequired(new Base, target, C);
            if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
            return that;
          });
          C.prototype = proto;
          proto.constructor = C;
        }
        if(THROWS_ON_PRIMITIVES || BUGGY_ZERO){
          fixMethod('delete');
          fixMethod('has');
          IS_MAP && fixMethod('get');
        }
        if(BUGGY_ZERO || HASNT_CHAINING)fixMethod(ADDER);
        // weak collections should not contains .clear method
        if(IS_WEAK && proto.clear)delete proto.clear;
      }
    
      setToStringTag(C, NAME);
    
      O[NAME] = C;
      $export($export.G + $export.W + $export.F * (C != Base), O);
    
      if(!IS_WEAK)common.setStrong(C, NAME, IS_MAP);
    
      return C;
    };
  provide("core-js/modules/_collection", module.exports);
}(global));

// pakmanager:core-js/modules/_object-assign
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    // 19.1.2.1 Object.assign(target, source, ...)
    var getKeys  =  require('core-js/modules/_object-keys')
      , gOPS     =  require('core-js/modules/_object-gops')
      , pIE      =  require('core-js/modules/_object-pie')
      , toObject =  require('core-js/modules/_to-object')
      , IObject  =  require('core-js/modules/_iobject')
      , $assign  = Object.assign;
    
    // should work with symbols and should have deterministic property order (V8 bug)
    module.exports = !$assign ||  require('core-js/modules/_fails')(function(){
      var A = {}
        , B = {}
        , S = Symbol()
        , K = 'abcdefghijklmnopqrst';
      A[S] = 7;
      K.split('').forEach(function(k){ B[k] = k; });
      return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
    }) ? function assign(target, source){ // eslint-disable-line no-unused-vars
      var T     = toObject(target)
        , aLen  = arguments.length
        , index = 1
        , getSymbols = gOPS.f
        , isEnum     = pIE.f;
      while(aLen > index){
        var S      = IObject(arguments[index++])
          , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
          , length = keys.length
          , j      = 0
          , key;
        while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
      } return T;
    } : $assign;
  provide("core-js/modules/_object-assign", module.exports);
}(global));

// pakmanager:core-js/modules/_collection-weak
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    var redefineAll       =  require('core-js/modules/_redefine-all')
      , getWeak           =  require('core-js/modules/_meta').getWeak
      , anObject          =  require('core-js/modules/_an-object')
      , isObject          =  require('core-js/modules/_is-object')
      , anInstance        =  require('core-js/modules/_an-instance')
      , forOf             =  require('core-js/modules/_for-of')
      , createArrayMethod =  require('core-js/modules/_array-methods')
      , $has              =  require('core-js/modules/_has')
      , arrayFind         = createArrayMethod(5)
      , arrayFindIndex    = createArrayMethod(6)
      , id                = 0;
    
    // fallback for uncaught frozen keys
    var uncaughtFrozenStore = function(that){
      return that._l || (that._l = new UncaughtFrozenStore);
    };
    var UncaughtFrozenStore = function(){
      this.a = [];
    };
    var findUncaughtFrozen = function(store, key){
      return arrayFind(store.a, function(it){
        return it[0] === key;
      });
    };
    UncaughtFrozenStore.prototype = {
      get: function(key){
        var entry = findUncaughtFrozen(this, key);
        if(entry)return entry[1];
      },
      has: function(key){
        return !!findUncaughtFrozen(this, key);
      },
      set: function(key, value){
        var entry = findUncaughtFrozen(this, key);
        if(entry)entry[1] = value;
        else this.a.push([key, value]);
      },
      'delete': function(key){
        var index = arrayFindIndex(this.a, function(it){
          return it[0] === key;
        });
        if(~index)this.a.splice(index, 1);
        return !!~index;
      }
    };
    
    module.exports = {
      getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
        var C = wrapper(function(that, iterable){
          anInstance(that, C, NAME, '_i');
          that._i = id++;      // collection id
          that._l = undefined; // leak store for uncaught frozen objects
          if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
        });
        redefineAll(C.prototype, {
          // 23.3.3.2 WeakMap.prototype.delete(key)
          // 23.4.3.3 WeakSet.prototype.delete(value)
          'delete': function(key){
            if(!isObject(key))return false;
            var data = getWeak(key);
            if(data === true)return uncaughtFrozenStore(this)['delete'](key);
            return data && $has(data, this._i) && delete data[this._i];
          },
          // 23.3.3.4 WeakMap.prototype.has(key)
          // 23.4.3.4 WeakSet.prototype.has(value)
          has: function has(key){
            if(!isObject(key))return false;
            var data = getWeak(key);
            if(data === true)return uncaughtFrozenStore(this).has(key);
            return data && $has(data, this._i);
          }
        });
        return C;
      },
      def: function(that, key, value){
        var data = getWeak(anObject(key), true);
        if(data === true)uncaughtFrozenStore(that).set(key, value);
        else data[that._i] = value;
        return that;
      },
      ufstore: uncaughtFrozenStore
    };
  provide("core-js/modules/_collection-weak", module.exports);
}(global));

// pakmanager:core-js/modules/_wks-ext
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  exports.f =  require('core-js/modules/_wks');
  provide("core-js/modules/_wks-ext", module.exports);
}(global));

// pakmanager:core-js/modules/_string-trim
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var $export =  require('core-js/modules/_export')
      , defined =  require('core-js/modules/_defined')
      , fails   =  require('core-js/modules/_fails')
      , spaces  =  require('core-js/modules/_string-ws')
      , space   = '[' + spaces + ']'
      , non     = '\u200b\u0085'
      , ltrim   = RegExp('^' + space + space + '*')
      , rtrim   = RegExp(space + space + '*$');
    
    var exporter = function(KEY, exec, ALIAS){
      var exp   = {};
      var FORCE = fails(function(){
        return !!spaces[KEY]() || non[KEY]() != non;
      });
      var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
      if(ALIAS)exp[ALIAS] = fn;
      $export($export.P + $export.F * FORCE, 'String', exp);
    };
    
    // 1 -> String#trimLeft
    // 2 -> String#trimRight
    // 3 -> String#trim
    var trim = exporter.trim = function(string, TYPE){
      string = String(defined(string));
      if(TYPE & 1)string = string.replace(ltrim, '');
      if(TYPE & 2)string = string.replace(rtrim, '');
      return string;
    };
    
    module.exports = exporter;
  provide("core-js/modules/_string-trim", module.exports);
}(global));

// pakmanager:core-js/modules/_is-regexp
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 7.2.8 IsRegExp(argument)
    var isObject =  require('core-js/modules/_is-object')
      , cof      =  require('core-js/modules/_cof')
      , MATCH    =  require('core-js/modules/_wks')('match');
    module.exports = function(it){
      var isRegExp;
      return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
    };
  provide("core-js/modules/_is-regexp", module.exports);
}(global));

// pakmanager:core-js/modules/_flags
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    // 21.2.5.3 get RegExp.prototype.flags
    var anObject =  require('core-js/modules/_an-object');
    module.exports = function(){
      var that   = anObject(this)
        , result = '';
      if(that.global)     result += 'g';
      if(that.ignoreCase) result += 'i';
      if(that.multiline)  result += 'm';
      if(that.unicode)    result += 'u';
      if(that.sticky)     result += 'y';
      return result;
    };
  provide("core-js/modules/_flags", module.exports);
}(global));

// pakmanager:core-js/modules/_task
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var ctx                =  require('core-js/modules/_ctx')
      , invoke             =  require('core-js/modules/_invoke')
      , html               =  require('core-js/modules/_html')
      , cel                =  require('core-js/modules/_dom-create')
      , global             =  require('core-js/modules/_global')
      , process            = global.process
      , setTask            = global.setImmediate
      , clearTask          = global.clearImmediate
      , MessageChannel     = global.MessageChannel
      , counter            = 0
      , queue              = {}
      , ONREADYSTATECHANGE = 'onreadystatechange'
      , defer, channel, port;
    var run = function(){
      var id = +this;
      if(queue.hasOwnProperty(id)){
        var fn = queue[id];
        delete queue[id];
        fn();
      }
    };
    var listener = function(event){
      run.call(event.data);
    };
    // Node.js 0.9+ & IE10+ has setImmediate, otherwise:
    if(!setTask || !clearTask){
      setTask = function setImmediate(fn){
        var args = [], i = 1;
        while(arguments.length > i)args.push(arguments[i++]);
        queue[++counter] = function(){
          invoke(typeof fn == 'function' ? fn : Function(fn), args);
        };
        defer(counter);
        return counter;
      };
      clearTask = function clearImmediate(id){
        delete queue[id];
      };
      // Node.js 0.8-
      if( require('core-js/modules/_cof')(process) == 'process'){
        defer = function(id){
          process.nextTick(ctx(run, id, 1));
        };
      // Browsers with MessageChannel, includes WebWorkers
      } else if(MessageChannel){
        channel = new MessageChannel;
        port    = channel.port2;
        channel.port1.onmessage = listener;
        defer = ctx(port.postMessage, port, 1);
      // Browsers with postMessage, skip WebWorkers
      // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
      } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){
        defer = function(id){
          global.postMessage(id + '', '*');
        };
        global.addEventListener('message', listener, false);
      // IE8-
      } else if(ONREADYSTATECHANGE in cel('script')){
        defer = function(id){
          html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){
            html.removeChild(this);
            run.call(id);
          };
        };
      // Rest old browsers
      } else {
        defer = function(id){
          setTimeout(ctx(run, id, 1), 0);
        };
      }
    }
    module.exports = {
      set:   setTask,
      clear: clearTask
    };
  provide("core-js/modules/_task", module.exports);
}(global));

// pakmanager:core-js/modules/_typed-buffer
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    var global         =  require('core-js/modules/_global')
      , DESCRIPTORS    =  require('core-js/modules/_descriptors')
      , LIBRARY        =  require('core-js/modules/_library')
      , $typed         =  require('core-js/modules/_typed')
      , hide           =  require('core-js/modules/_hide')
      , redefineAll    =  require('core-js/modules/_redefine-all')
      , fails          =  require('core-js/modules/_fails')
      , anInstance     =  require('core-js/modules/_an-instance')
      , toInteger      =  require('core-js/modules/_to-integer')
      , toLength       =  require('core-js/modules/_to-length')
      , gOPN           =  require('core-js/modules/_object-gopn').f
      , dP             =  require('core-js/modules/_object-dp').f
      , arrayFill      =  require('core-js/modules/_array-fill')
      , setToStringTag =  require('core-js/modules/_set-to-string-tag')
      , ARRAY_BUFFER   = 'ArrayBuffer'
      , DATA_VIEW      = 'DataView'
      , PROTOTYPE      = 'prototype'
      , WRONG_LENGTH   = 'Wrong length!'
      , WRONG_INDEX    = 'Wrong index!'
      , $ArrayBuffer   = global[ARRAY_BUFFER]
      , $DataView      = global[DATA_VIEW]
      , Math           = global.Math
      , parseInt       = global.parseInt
      , RangeError     = global.RangeError
      , Infinity       = global.Infinity
      , BaseBuffer     = $ArrayBuffer
      , abs            = Math.abs
      , pow            = Math.pow
      , min            = Math.min
      , floor          = Math.floor
      , log            = Math.log
      , LN2            = Math.LN2
      , BUFFER         = 'buffer'
      , BYTE_LENGTH    = 'byteLength'
      , BYTE_OFFSET    = 'byteOffset'
      , $BUFFER        = DESCRIPTORS ? '_b' : BUFFER
      , $LENGTH        = DESCRIPTORS ? '_l' : BYTE_LENGTH
      , $OFFSET        = DESCRIPTORS ? '_o' : BYTE_OFFSET;
    
    // IEEE754 conversions based on https://github.com/feross/ieee754
    var packIEEE754 = function(value, mLen, nBytes){
      var buffer = Array(nBytes)
        , eLen   = nBytes * 8 - mLen - 1
        , eMax   = (1 << eLen) - 1
        , eBias  = eMax >> 1
        , rt     = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0
        , i      = 0
        , s      = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0
        , e, m, c;
      value = abs(value)
      if(value != value || value === Infinity){
        m = value != value ? 1 : 0;
        e = eMax;
      } else {
        e = floor(log(value) / LN2);
        if(value * (c = pow(2, -e)) < 1){
          e--;
          c *= 2;
        }
        if(e + eBias >= 1){
          value += rt / c;
        } else {
          value += rt * pow(2, 1 - eBias);
        }
        if(value * c >= 2){
          e++;
          c /= 2;
        }
        if(e + eBias >= eMax){
          m = 0;
          e = eMax;
        } else if(e + eBias >= 1){
          m = (value * c - 1) * pow(2, mLen);
          e = e + eBias;
        } else {
          m = value * pow(2, eBias - 1) * pow(2, mLen);
          e = 0;
        }
      }
      for(; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
      e = e << mLen | m;
      eLen += mLen;
      for(; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
      buffer[--i] |= s * 128;
      return buffer;
    };
    var unpackIEEE754 = function(buffer, mLen, nBytes){
      var eLen  = nBytes * 8 - mLen - 1
        , eMax  = (1 << eLen) - 1
        , eBias = eMax >> 1
        , nBits = eLen - 7
        , i     = nBytes - 1
        , s     = buffer[i--]
        , e     = s & 127
        , m;
      s >>= 7;
      for(; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
      m = e & (1 << -nBits) - 1;
      e >>= -nBits;
      nBits += mLen;
      for(; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
      if(e === 0){
        e = 1 - eBias;
      } else if(e === eMax){
        return m ? NaN : s ? -Infinity : Infinity;
      } else {
        m = m + pow(2, mLen);
        e = e - eBias;
      } return (s ? -1 : 1) * m * pow(2, e - mLen);
    };
    
    var unpackI32 = function(bytes){
      return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
    };
    var packI8 = function(it){
      return [it & 0xff];
    };
    var packI16 = function(it){
      return [it & 0xff, it >> 8 & 0xff];
    };
    var packI32 = function(it){
      return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
    };
    var packF64 = function(it){
      return packIEEE754(it, 52, 8);
    };
    var packF32 = function(it){
      return packIEEE754(it, 23, 4);
    };
    
    var addGetter = function(C, key, internal){
      dP(C[PROTOTYPE], key, {get: function(){ return this[internal]; }});
    };
    
    var get = function(view, bytes, index, isLittleEndian){
      var numIndex = +index
        , intIndex = toInteger(numIndex);
      if(numIndex != intIndex || intIndex < 0 || intIndex + bytes > view[$LENGTH])throw RangeError(WRONG_INDEX);
      var store = view[$BUFFER]._b
        , start = intIndex + view[$OFFSET]
        , pack  = store.slice(start, start + bytes);
      return isLittleEndian ? pack : pack.reverse();
    };
    var set = function(view, bytes, index, conversion, value, isLittleEndian){
      var numIndex = +index
        , intIndex = toInteger(numIndex);
      if(numIndex != intIndex || intIndex < 0 || intIndex + bytes > view[$LENGTH])throw RangeError(WRONG_INDEX);
      var store = view[$BUFFER]._b
        , start = intIndex + view[$OFFSET]
        , pack  = conversion(+value);
      for(var i = 0; i < bytes; i++)store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
    };
    
    var validateArrayBufferArguments = function(that, length){
      anInstance(that, $ArrayBuffer, ARRAY_BUFFER);
      var numberLength = +length
        , byteLength   = toLength(numberLength);
      if(numberLength != byteLength)throw RangeError(WRONG_LENGTH);
      return byteLength;
    };
    
    if(!$typed.ABV){
      $ArrayBuffer = function ArrayBuffer(length){
        var byteLength = validateArrayBufferArguments(this, length);
        this._b       = arrayFill.call(Array(byteLength), 0);
        this[$LENGTH] = byteLength;
      };
    
      $DataView = function DataView(buffer, byteOffset, byteLength){
        anInstance(this, $DataView, DATA_VIEW);
        anInstance(buffer, $ArrayBuffer, DATA_VIEW);
        var bufferLength = buffer[$LENGTH]
          , offset       = toInteger(byteOffset);
        if(offset < 0 || offset > bufferLength)throw RangeError('Wrong offset!');
        byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
        if(offset + byteLength > bufferLength)throw RangeError(WRONG_LENGTH);
        this[$BUFFER] = buffer;
        this[$OFFSET] = offset;
        this[$LENGTH] = byteLength;
      };
    
      if(DESCRIPTORS){
        addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
        addGetter($DataView, BUFFER, '_b');
        addGetter($DataView, BYTE_LENGTH, '_l');
        addGetter($DataView, BYTE_OFFSET, '_o');
      }
    
      redefineAll($DataView[PROTOTYPE], {
        getInt8: function getInt8(byteOffset){
          return get(this, 1, byteOffset)[0] << 24 >> 24;
        },
        getUint8: function getUint8(byteOffset){
          return get(this, 1, byteOffset)[0];
        },
        getInt16: function getInt16(byteOffset /*, littleEndian */){
          var bytes = get(this, 2, byteOffset, arguments[1]);
          return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
        },
        getUint16: function getUint16(byteOffset /*, littleEndian */){
          var bytes = get(this, 2, byteOffset, arguments[1]);
          return bytes[1] << 8 | bytes[0];
        },
        getInt32: function getInt32(byteOffset /*, littleEndian */){
          return unpackI32(get(this, 4, byteOffset, arguments[1]));
        },
        getUint32: function getUint32(byteOffset /*, littleEndian */){
          return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
        },
        getFloat32: function getFloat32(byteOffset /*, littleEndian */){
          return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
        },
        getFloat64: function getFloat64(byteOffset /*, littleEndian */){
          return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
        },
        setInt8: function setInt8(byteOffset, value){
          set(this, 1, byteOffset, packI8, value);
        },
        setUint8: function setUint8(byteOffset, value){
          set(this, 1, byteOffset, packI8, value);
        },
        setInt16: function setInt16(byteOffset, value /*, littleEndian */){
          set(this, 2, byteOffset, packI16, value, arguments[2]);
        },
        setUint16: function setUint16(byteOffset, value /*, littleEndian */){
          set(this, 2, byteOffset, packI16, value, arguments[2]);
        },
        setInt32: function setInt32(byteOffset, value /*, littleEndian */){
          set(this, 4, byteOffset, packI32, value, arguments[2]);
        },
        setUint32: function setUint32(byteOffset, value /*, littleEndian */){
          set(this, 4, byteOffset, packI32, value, arguments[2]);
        },
        setFloat32: function setFloat32(byteOffset, value /*, littleEndian */){
          set(this, 4, byteOffset, packF32, value, arguments[2]);
        },
        setFloat64: function setFloat64(byteOffset, value /*, littleEndian */){
          set(this, 8, byteOffset, packF64, value, arguments[2]);
        }
      });
    } else {
      if(!fails(function(){
        new $ArrayBuffer;     // eslint-disable-line no-new
      }) || !fails(function(){
        new $ArrayBuffer(.5); // eslint-disable-line no-new
      })){
        $ArrayBuffer = function ArrayBuffer(length){
          return new BaseBuffer(validateArrayBufferArguments(this, length));
        };
        var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
        for(var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j; ){
          if(!((key = keys[j++]) in $ArrayBuffer))hide($ArrayBuffer, key, BaseBuffer[key]);
        };
        if(!LIBRARY)ArrayBufferProto.constructor = $ArrayBuffer;
      }
      // iOS Safari 7.x bug
      var view = new $DataView(new $ArrayBuffer(2))
        , $setInt8 = $DataView[PROTOTYPE].setInt8;
      view.setInt8(0, 2147483648);
      view.setInt8(1, 2147483649);
      if(view.getInt8(0) || !view.getInt8(1))redefineAll($DataView[PROTOTYPE], {
        setInt8: function setInt8(byteOffset, value){
          $setInt8.call(this, byteOffset, value << 24 >> 24);
        },
        setUint8: function setUint8(byteOffset, value){
          $setInt8.call(this, byteOffset, value << 24 >> 24);
        }
      }, true);
    }
    setToStringTag($ArrayBuffer, ARRAY_BUFFER);
    setToStringTag($DataView, DATA_VIEW);
    hide($DataView[PROTOTYPE], $typed.VIEW, true);
    exports[ARRAY_BUFFER] = $ArrayBuffer;
    exports[DATA_VIEW] = $DataView;
  provide("core-js/modules/_typed-buffer", module.exports);
}(global));

// pakmanager:core-js/modules/_is-integer
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 20.1.2.3 Number.isInteger(number)
    var isObject =  require('core-js/modules/_is-object')
      , floor    = Math.floor;
    module.exports = function isInteger(it){
      return !isObject(it) && isFinite(it) && floor(it) === it;
    };
  provide("core-js/modules/_is-integer", module.exports);
}(global));

// pakmanager:core-js/modules/_same-value
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 7.2.9 SameValue(x, y)
    module.exports = Object.is || function is(x, y){
      return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
    };
  provide("core-js/modules/_same-value", module.exports);
}(global));

// pakmanager:core-js/modules/core.is-iterable
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var classof   =  require('core-js/modules/_classof')
      , ITERATOR  =  require('core-js/modules/_wks')('iterator')
      , Iterators =  require('core-js/modules/_iterators');
    module.exports =  require('core-js/modules/_core').isIterable = function(it){
      var O = Object(it);
      return O[ITERATOR] !== undefined
        || '@@iterator' in O
        || Iterators.hasOwnProperty(classof(O));
    };
  provide("core-js/modules/core.is-iterable", module.exports);
}(global));

// pakmanager:core-js/modules/_species-constructor
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 7.3.20 SpeciesConstructor(O, defaultConstructor)
    var anObject  =  require('core-js/modules/_an-object')
      , aFunction =  require('core-js/modules/_a-function')
      , SPECIES   =  require('core-js/modules/_wks')('species');
    module.exports = function(O, D){
      var C = anObject(O).constructor, S;
      return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
    };
  provide("core-js/modules/_species-constructor", module.exports);
}(global));

// pakmanager:core-js/modules/es6.array.iterator
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    var addToUnscopables =  require('core-js/modules/_add-to-unscopables')
      , step             =  require('core-js/modules/_iter-step')
      , Iterators        =  require('core-js/modules/_iterators')
      , toIObject        =  require('core-js/modules/_to-iobject');
    
    // 22.1.3.4 Array.prototype.entries()
    // 22.1.3.13 Array.prototype.keys()
    // 22.1.3.29 Array.prototype.values()
    // 22.1.3.30 Array.prototype[@@iterator]()
    module.exports =  require('core-js/modules/_iter-define')(Array, 'Array', function(iterated, kind){
      this._t = toIObject(iterated); // target
      this._i = 0;                   // next index
      this._k = kind;                // kind
    // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
    }, function(){
      var O     = this._t
        , kind  = this._k
        , index = this._i++;
      if(!O || index >= O.length){
        this._t = undefined;
        return step(1);
      }
      if(kind == 'keys'  )return step(0, index);
      if(kind == 'values')return step(0, O[index]);
      return step(0, [index, O[index]]);
    }, 'values');
    
    // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
    Iterators.Arguments = Iterators.Array;
    
    addToUnscopables('keys');
    addToUnscopables('values');
    addToUnscopables('entries');
  provide("core-js/modules/es6.array.iterator", module.exports);
}(global));

// pakmanager:core-js/modules/_array-copy-within
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
    'use strict';
    var toObject =  require('core-js/modules/_to-object')
      , toIndex  =  require('core-js/modules/_to-index')
      , toLength =  require('core-js/modules/_to-length');
    
    module.exports = [].copyWithin || function copyWithin(target/*= 0*/, start/*= 0, end = @length*/){
      var O     = toObject(this)
        , len   = toLength(O.length)
        , to    = toIndex(target, len)
        , from  = toIndex(start, len)
        , end   = arguments.length > 2 ? arguments[2] : undefined
        , count = Math.min((end === undefined ? len : toIndex(end, len)) - from, len - to)
        , inc   = 1;
      if(from < to && to < from + count){
        inc  = -1;
        from += count - 1;
        to   += count - 1;
      }
      while(count-- > 0){
        if(from in O)O[to] = O[from];
        else delete O[to];
        to   += inc;
        from += inc;
      } return O;
    };
  provide("core-js/modules/_array-copy-within", module.exports);
}(global));

// pakmanager:core-js/modules/_string-repeat
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    var toInteger =  require('core-js/modules/_to-integer')
      , defined   =  require('core-js/modules/_defined');
    
    module.exports = function repeat(count){
      var str = String(defined(this))
        , res = ''
        , n   = toInteger(count);
      if(n < 0 || n == Infinity)throw RangeError("Count can't be negative");
      for(;n > 0; (n >>>= 1) && (str += str))if(n & 1)res += str;
      return res;
    };
  provide("core-js/modules/_string-repeat", module.exports);
}(global));

// pakmanager:core-js/modules/_array-from-iterable
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var forOf =  require('core-js/modules/_for-of');
    
    module.exports = function(iter, ITERATOR){
      var result = [];
      forOf(iter, false, result.push, result, ITERATOR);
      return result;
    };
    
  provide("core-js/modules/_array-from-iterable", module.exports);
}(global));

// pakmanager:core-js/modules/es6.map
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    var strong =  require('core-js/modules/_collection-strong');
    
    // 23.1 Map Objects
    module.exports =  require('core-js/modules/_collection')('Map', function(get){
      return function Map(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
    }, {
      // 23.1.3.6 Map.prototype.get(key)
      get: function get(key){
        var entry = strong.getEntry(this, key);
        return entry && entry.v;
      },
      // 23.1.3.9 Map.prototype.set(key, value)
      set: function set(key, value){
        return strong.def(this, key === 0 ? 0 : key, value);
      }
    }, strong, true);
  provide("core-js/modules/es6.map", module.exports);
}(global));

// pakmanager:core-js/modules/es6.weak-map
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    var each         =  require('core-js/modules/_array-methods')(0)
      , redefine     =  require('core-js/modules/_redefine')
      , meta         =  require('core-js/modules/_meta')
      , assign       =  require('core-js/modules/_object-assign')
      , weak         =  require('core-js/modules/_collection-weak')
      , isObject     =  require('core-js/modules/_is-object')
      , has          =  require('core-js/modules/_has')
      , getWeak      = meta.getWeak
      , isExtensible = Object.isExtensible
      , uncaughtFrozenStore = weak.ufstore
      , tmp          = {}
      , InternalMap;
    
    var wrapper = function(get){
      return function WeakMap(){
        return get(this, arguments.length > 0 ? arguments[0] : undefined);
      };
    };
    
    var methods = {
      // 23.3.3.3 WeakMap.prototype.get(key)
      get: function get(key){
        if(isObject(key)){
          var data = getWeak(key);
          if(data === true)return uncaughtFrozenStore(this).get(key);
          return data ? data[this._i] : undefined;
        }
      },
      // 23.3.3.5 WeakMap.prototype.set(key, value)
      set: function set(key, value){
        return weak.def(this, key, value);
      }
    };
    
    // 23.3 WeakMap Objects
    var $WeakMap = module.exports =  require('core-js/modules/_collection')('WeakMap', wrapper, methods, weak, true, true);
    
    // IE11 WeakMap frozen keys fix
    if(new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7){
      InternalMap = weak.getConstructor(wrapper);
      assign(InternalMap.prototype, methods);
      meta.NEED = true;
      each(['delete', 'has', 'get', 'set'], function(key){
        var proto  = $WeakMap.prototype
          , method = proto[key];
        redefine(proto, key, function(a, b){
          // store frozen objects on internal weakmap shim
          if(isObject(a) && !isExtensible(a)){
            if(!this._f)this._f = new InternalMap;
            var result = this._f[key](a, b);
            return key == 'set' ? this : result;
          // store all the rest on native weakmap
          } return method.call(this, a, b);
        });
      });
    }
  provide("core-js/modules/es6.weak-map", module.exports);
}(global));

// pakmanager:core-js/modules/_path
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  module.exports =  require('core-js/modules/_global');
  provide("core-js/modules/_path", module.exports);
}(global));

// pakmanager:core-js/modules/_wks-define
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var global         =  require('core-js/modules/_global')
      , core           =  require('core-js/modules/_core')
      , LIBRARY        =  require('core-js/modules/_library')
      , wksExt         =  require('core-js/modules/_wks-ext')
      , defineProperty =  require('core-js/modules/_object-dp').f;
    module.exports = function(name){
      var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
      if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});
    };
  provide("core-js/modules/_wks-define", module.exports);
}(global));

// pakmanager:core-js/modules/_keyof
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var getKeys   =  require('core-js/modules/_object-keys')
      , toIObject =  require('core-js/modules/_to-iobject');
    module.exports = function(object, el){
      var O      = toIObject(object)
        , keys   = getKeys(O)
        , length = keys.length
        , index  = 0
        , key;
      while(length > index)if(O[key = keys[index++]] === el)return key;
    };
  provide("core-js/modules/_keyof", module.exports);
}(global));

// pakmanager:core-js/modules/_enum-keys
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // all enumerable object keys, includes symbols
    var getKeys =  require('core-js/modules/_object-keys')
      , gOPS    =  require('core-js/modules/_object-gops')
      , pIE     =  require('core-js/modules/_object-pie');
    module.exports = function(it){
      var result     = getKeys(it)
        , getSymbols = gOPS.f;
      if(getSymbols){
        var symbols = getSymbols(it)
          , isEnum  = pIE.f
          , i       = 0
          , key;
        while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
      } return result;
    };
  provide("core-js/modules/_enum-keys", module.exports);
}(global));

// pakmanager:core-js/modules/_object-gopn-ext
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
    var toIObject =  require('core-js/modules/_to-iobject')
      , gOPN      =  require('core-js/modules/_object-gopn').f
      , toString  = {}.toString;
    
    var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
      ? Object.getOwnPropertyNames(window) : [];
    
    var getWindowNames = function(it){
      try {
        return gOPN(it);
      } catch(e){
        return windowNames.slice();
      }
    };
    
    module.exports.f = function getOwnPropertyNames(it){
      return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
    };
    
  provide("core-js/modules/_object-gopn-ext", module.exports);
}(global));

// pakmanager:core-js/modules/_object-sap
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // most Object methods by ES6 should accept primitives
    var $export =  require('core-js/modules/_export')
      , core    =  require('core-js/modules/_core')
      , fails   =  require('core-js/modules/_fails');
    module.exports = function(KEY, exec){
      var fn  = (core.Object || {})[KEY] || Object[KEY]
        , exp = {};
      exp[KEY] = exec(fn);
      $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
    };
  provide("core-js/modules/_object-sap", module.exports);
}(global));

// pakmanager:core-js/modules/_bind
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    var aFunction  =  require('core-js/modules/_a-function')
      , isObject   =  require('core-js/modules/_is-object')
      , invoke     =  require('core-js/modules/_invoke')
      , arraySlice = [].slice
      , factories  = {};
    
    var construct = function(F, len, args){
      if(!(len in factories)){
        for(var n = [], i = 0; i < len; i++)n[i] = 'a[' + i + ']';
        factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
      } return factories[len](F, args);
    };
    
    module.exports = Function.bind || function bind(that /*, args... */){
      var fn       = aFunction(this)
        , partArgs = arraySlice.call(arguments, 1);
      var bound = function(/* args... */){
        var args = partArgs.concat(arraySlice.call(arguments));
        return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
      };
      if(isObject(fn.prototype))bound.prototype = fn.prototype;
      return bound;
    };
  provide("core-js/modules/_bind", module.exports);
}(global));

// pakmanager:core-js/modules/_parse-int
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var $parseInt =  require('core-js/modules/_global').parseInt
      , $trim     =  require('core-js/modules/_string-trim').trim
      , ws        =  require('core-js/modules/_string-ws')
      , hex       = /^[\-+]?0[xX]/;
    
    module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix){
      var string = $trim(String(str), 3);
      return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
    } : $parseInt;
  provide("core-js/modules/_parse-int", module.exports);
}(global));

// pakmanager:core-js/modules/_parse-float
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var $parseFloat =  require('core-js/modules/_global').parseFloat
      , $trim       =  require('core-js/modules/_string-trim').trim;
    
    module.exports = 1 / $parseFloat( require('core-js/modules/_string-ws') + '-0') !== -Infinity ? function parseFloat(str){
      var string = $trim(String(str), 3)
        , result = $parseFloat(string);
      return result === 0 && string.charAt(0) == '-' ? -0 : result;
    } : $parseFloat;
  provide("core-js/modules/_parse-float", module.exports);
}(global));

// pakmanager:core-js/modules/_a-number-value
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var cof =  require('core-js/modules/_cof');
    module.exports = function(it, msg){
      if(typeof it != 'number' && cof(it) != 'Number')throw TypeError(msg);
      return +it;
    };
  provide("core-js/modules/_a-number-value", module.exports);
}(global));

// pakmanager:core-js/modules/_math-log1p
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 20.2.2.20 Math.log1p(x)
    module.exports = Math.log1p || function log1p(x){
      return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
    };
  provide("core-js/modules/_math-log1p", module.exports);
}(global));

// pakmanager:core-js/modules/_math-sign
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 20.2.2.28 Math.sign(x)
    module.exports = Math.sign || function sign(x){
      return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
    };
  provide("core-js/modules/_math-sign", module.exports);
}(global));

// pakmanager:core-js/modules/_math-expm1
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 20.2.2.14 Math.expm1(x)
    var $expm1 = Math.expm1;
    module.exports = (!$expm1
      // Old FF bug
      || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
      // Tor Browser bug
      || $expm1(-2e-17) != -2e-17
    ) ? function expm1(x){
      return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
    } : $expm1;
  provide("core-js/modules/_math-expm1", module.exports);
}(global));

// pakmanager:core-js/modules/_string-at
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var toInteger =  require('core-js/modules/_to-integer')
      , defined   =  require('core-js/modules/_defined');
    // true  -> String#at
    // false -> String#codePointAt
    module.exports = function(TO_STRING){
      return function(that, pos){
        var s = String(defined(that))
          , i = toInteger(pos)
          , l = s.length
          , a, b;
        if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
        a = s.charCodeAt(i);
        return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
          ? TO_STRING ? s.charAt(i) : a
          : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
      };
    };
  provide("core-js/modules/_string-at", module.exports);
}(global));

// pakmanager:core-js/modules/_string-context
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // helper for String#{startsWith, endsWith, includes}
    var isRegExp =  require('core-js/modules/_is-regexp')
      , defined  =  require('core-js/modules/_defined');
    
    module.exports = function(that, searchString, NAME){
      if(isRegExp(searchString))throw TypeError('String#' + NAME + " doesn't accept regex!");
      return String(defined(that));
    };
  provide("core-js/modules/_string-context", module.exports);
}(global));

// pakmanager:core-js/modules/_fails-is-regexp
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var MATCH =  require('core-js/modules/_wks')('match');
    module.exports = function(KEY){
      var re = /./;
      try {
        '/./'[KEY](re);
      } catch(e){
        try {
          re[MATCH] = false;
          return !'/./'[KEY](re);
        } catch(f){ /* empty */ }
      } return true;
    };
  provide("core-js/modules/_fails-is-regexp", module.exports);
}(global));

// pakmanager:core-js/modules/_string-html
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var $export =  require('core-js/modules/_export')
      , fails   =  require('core-js/modules/_fails')
      , defined =  require('core-js/modules/_defined')
      , quot    = /"/g;
    // B.2.3.2.1 CreateHTML(string, tag, attribute, value)
    var createHTML = function(string, tag, attribute, value) {
      var S  = String(defined(string))
        , p1 = '<' + tag;
      if(attribute !== '')p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
      return p1 + '>' + S + '</' + tag + '>';
    };
    module.exports = function(NAME, exec){
      var O = {};
      O[NAME] = exec(createHTML);
      $export($export.P + $export.F * fails(function(){
        var test = ''[NAME]('"');
        return test !== test.toLowerCase() || test.split('"').length > 3;
      }), 'String', O);
    };
  provide("core-js/modules/_string-html", module.exports);
}(global));

// pakmanager:core-js/modules/_date-to-primitive
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    var anObject    =  require('core-js/modules/_an-object')
      , toPrimitive =  require('core-js/modules/_to-primitive')
      , NUMBER      = 'number';
    
    module.exports = function(hint){
      if(hint !== 'string' && hint !== NUMBER && hint !== 'default')throw TypeError('Incorrect hint');
      return toPrimitive(anObject(this), hint != NUMBER);
    };
  provide("core-js/modules/_date-to-primitive", module.exports);
}(global));

// pakmanager:core-js/modules/_create-property
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    var $defineProperty =  require('core-js/modules/_object-dp')
      , createDesc      =  require('core-js/modules/_property-desc');
    
    module.exports = function(object, index, value){
      if(index in object)$defineProperty.f(object, index, createDesc(0, value));
      else object[index] = value;
    };
  provide("core-js/modules/_create-property", module.exports);
}(global));

// pakmanager:core-js/modules/_strict-method
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var fails =  require('core-js/modules/_fails');
    
    module.exports = function(method, arg){
      return !!method && fails(function(){
        arg ? method.call(null, function(){}, 1) : method.call(null);
      });
    };
  provide("core-js/modules/_strict-method", module.exports);
}(global));

// pakmanager:core-js/modules/_array-reduce
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var aFunction =  require('core-js/modules/_a-function')
      , toObject  =  require('core-js/modules/_to-object')
      , IObject   =  require('core-js/modules/_iobject')
      , toLength  =  require('core-js/modules/_to-length');
    
    module.exports = function(that, callbackfn, aLen, memo, isRight){
      aFunction(callbackfn);
      var O      = toObject(that)
        , self   = IObject(O)
        , length = toLength(O.length)
        , index  = isRight ? length - 1 : 0
        , i      = isRight ? -1 : 1;
      if(aLen < 2)for(;;){
        if(index in self){
          memo = self[index];
          index += i;
          break;
        }
        index += i;
        if(isRight ? index < 0 : length <= index){
          throw TypeError('Reduce of empty array with no initial value');
        }
      }
      for(;isRight ? index >= 0 : length > index; index += i)if(index in self){
        memo = callbackfn(memo, self[index], index, O);
      }
      return memo;
    };
  provide("core-js/modules/_array-reduce", module.exports);
}(global));

// pakmanager:core-js/modules/es6.regexp.flags
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 21.2.5.3 get RegExp.prototype.flags()
    if( require('core-js/modules/_descriptors') && /./g.flags != 'g') require('core-js/modules/_object-dp').f(RegExp.prototype, 'flags', {
      configurable: true,
      get:  require('core-js/modules/_flags')
    });
  provide("core-js/modules/es6.regexp.flags", module.exports);
}(global));

// pakmanager:core-js/modules/_fix-re-wks
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    var hide     =  require('core-js/modules/_hide')
      , redefine =  require('core-js/modules/_redefine')
      , fails    =  require('core-js/modules/_fails')
      , defined  =  require('core-js/modules/_defined')
      , wks      =  require('core-js/modules/_wks');
    
    module.exports = function(KEY, length, exec){
      var SYMBOL   = wks(KEY)
        , fns      = exec(defined, SYMBOL, ''[KEY])
        , strfn    = fns[0]
        , rxfn     = fns[1];
      if(fails(function(){
        var O = {};
        O[SYMBOL] = function(){ return 7; };
        return ''[KEY](O) != 7;
      })){
        redefine(String.prototype, KEY, strfn);
        hide(RegExp.prototype, SYMBOL, length == 2
          // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
          // 21.2.5.11 RegExp.prototype[@@split](string, limit)
          ? function(string, arg){ return rxfn.call(string, this, arg); }
          // 21.2.5.6 RegExp.prototype[@@match](string)
          // 21.2.5.9 RegExp.prototype[@@search](string)
          : function(string){ return rxfn.call(string, this); }
        );
      }
    };
  provide("core-js/modules/_fix-re-wks", module.exports);
}(global));

// pakmanager:core-js/modules/_microtask
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var global    =  require('core-js/modules/_global')
      , macrotask =  require('core-js/modules/_task').set
      , Observer  = global.MutationObserver || global.WebKitMutationObserver
      , process   = global.process
      , Promise   = global.Promise
      , isNode    =  require('core-js/modules/_cof')(process) == 'process';
    
    module.exports = function(){
      var head, last, notify;
    
      var flush = function(){
        var parent, fn;
        if(isNode && (parent = process.domain))parent.exit();
        while(head){
          fn   = head.fn;
          head = head.next;
          try {
            fn();
          } catch(e){
            if(head)notify();
            else last = undefined;
            throw e;
          }
        } last = undefined;
        if(parent)parent.enter();
      };
    
      // Node.js
      if(isNode){
        notify = function(){
          process.nextTick(flush);
        };
      // browsers with MutationObserver
      } else if(Observer){
        var toggle = true
          , node   = document.createTextNode('');
        new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new
        notify = function(){
          node.data = toggle = !toggle;
        };
      // environments with maybe non-completely correct, but existent Promise
      } else if(Promise && Promise.resolve){
        var promise = Promise.resolve();
        notify = function(){
          promise.then(flush);
        };
      // for other environments - macrotask based on:
      // - setImmediate
      // - MessageChannel
      // - window.postMessag
      // - onreadystatechange
      // - setTimeout
      } else {
        notify = function(){
          // strange IE + webpack dev server bug - use .call(global)
          macrotask.call(global, flush);
        };
      }
    
      return function(fn){
        var task = {fn: fn, next: undefined};
        if(last)last.next = task;
        if(!head){
          head = task;
          notify();
        } last = task;
      };
    };
  provide("core-js/modules/_microtask", module.exports);
}(global));

// pakmanager:core-js/modules/_typed-array
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    if( require('core-js/modules/_descriptors')){
      var LIBRARY             =  require('core-js/modules/_library')
        , global              =  require('core-js/modules/_global')
        , fails               =  require('core-js/modules/_fails')
        , $export             =  require('core-js/modules/_export')
        , $typed              =  require('core-js/modules/_typed')
        , $buffer             =  require('core-js/modules/_typed-buffer')
        , ctx                 =  require('core-js/modules/_ctx')
        , anInstance          =  require('core-js/modules/_an-instance')
        , propertyDesc        =  require('core-js/modules/_property-desc')
        , hide                =  require('core-js/modules/_hide')
        , redefineAll         =  require('core-js/modules/_redefine-all')
        , isInteger           =  require('core-js/modules/_is-integer')
        , toInteger           =  require('core-js/modules/_to-integer')
        , toLength            =  require('core-js/modules/_to-length')
        , toIndex             =  require('core-js/modules/_to-index')
        , toPrimitive         =  require('core-js/modules/_to-primitive')
        , has                 =  require('core-js/modules/_has')
        , same                =  require('core-js/modules/_same-value')
        , classof             =  require('core-js/modules/_classof')
        , isObject            =  require('core-js/modules/_is-object')
        , toObject            =  require('core-js/modules/_to-object')
        , isArrayIter         =  require('core-js/modules/_is-array-iter')
        , create              =  require('core-js/modules/_object-create')
        , getPrototypeOf      =  require('core-js/modules/_object-gpo')
        , gOPN                =  require('core-js/modules/_object-gopn').f
        , isIterable          =  require('core-js/modules/core.is-iterable')
        , getIterFn           =  require('core-js/modules/core.get-iterator-method')
        , uid                 =  require('core-js/modules/_uid')
        , wks                 =  require('core-js/modules/_wks')
        , createArrayMethod   =  require('core-js/modules/_array-methods')
        , createArrayIncludes =  require('core-js/modules/_array-includes')
        , speciesConstructor  =  require('core-js/modules/_species-constructor')
        , ArrayIterators      =  require('core-js/modules/es6.array.iterator')
        , Iterators           =  require('core-js/modules/_iterators')
        , $iterDetect         =  require('core-js/modules/_iter-detect')
        , setSpecies          =  require('core-js/modules/_set-species')
        , arrayFill           =  require('core-js/modules/_array-fill')
        , arrayCopyWithin     =  require('core-js/modules/_array-copy-within')
        , $DP                 =  require('core-js/modules/_object-dp')
        , $GOPD               =  require('core-js/modules/_object-gopd')
        , dP                  = $DP.f
        , gOPD                = $GOPD.f
        , RangeError          = global.RangeError
        , TypeError           = global.TypeError
        , Uint8Array          = global.Uint8Array
        , ARRAY_BUFFER        = 'ArrayBuffer'
        , SHARED_BUFFER       = 'Shared' + ARRAY_BUFFER
        , BYTES_PER_ELEMENT   = 'BYTES_PER_ELEMENT'
        , PROTOTYPE           = 'prototype'
        , ArrayProto          = Array[PROTOTYPE]
        , $ArrayBuffer        = $buffer.ArrayBuffer
        , $DataView           = $buffer.DataView
        , arrayForEach        = createArrayMethod(0)
        , arrayFilter         = createArrayMethod(2)
        , arraySome           = createArrayMethod(3)
        , arrayEvery          = createArrayMethod(4)
        , arrayFind           = createArrayMethod(5)
        , arrayFindIndex      = createArrayMethod(6)
        , arrayIncludes       = createArrayIncludes(true)
        , arrayIndexOf        = createArrayIncludes(false)
        , arrayValues         = ArrayIterators.values
        , arrayKeys           = ArrayIterators.keys
        , arrayEntries        = ArrayIterators.entries
        , arrayLastIndexOf    = ArrayProto.lastIndexOf
        , arrayReduce         = ArrayProto.reduce
        , arrayReduceRight    = ArrayProto.reduceRight
        , arrayJoin           = ArrayProto.join
        , arraySort           = ArrayProto.sort
        , arraySlice          = ArrayProto.slice
        , arrayToString       = ArrayProto.toString
        , arrayToLocaleString = ArrayProto.toLocaleString
        , ITERATOR            = wks('iterator')
        , TAG                 = wks('toStringTag')
        , TYPED_CONSTRUCTOR   = uid('typed_constructor')
        , DEF_CONSTRUCTOR     = uid('def_constructor')
        , ALL_CONSTRUCTORS    = $typed.CONSTR
        , TYPED_ARRAY         = $typed.TYPED
        , VIEW                = $typed.VIEW
        , WRONG_LENGTH        = 'Wrong length!';
    
      var $map = createArrayMethod(1, function(O, length){
        return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
      });
    
      var LITTLE_ENDIAN = fails(function(){
        return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
      });
    
      var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function(){
        new Uint8Array(1).set({});
      });
    
      var strictToLength = function(it, SAME){
        if(it === undefined)throw TypeError(WRONG_LENGTH);
        var number = +it
          , length = toLength(it);
        if(SAME && !same(number, length))throw RangeError(WRONG_LENGTH);
        return length;
      };
    
      var toOffset = function(it, BYTES){
        var offset = toInteger(it);
        if(offset < 0 || offset % BYTES)throw RangeError('Wrong offset!');
        return offset;
      };
    
      var validate = function(it){
        if(isObject(it) && TYPED_ARRAY in it)return it;
        throw TypeError(it + ' is not a typed array!');
      };
    
      var allocate = function(C, length){
        if(!(isObject(C) && TYPED_CONSTRUCTOR in C)){
          throw TypeError('It is not a typed array constructor!');
        } return new C(length);
      };
    
      var speciesFromList = function(O, list){
        return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
      };
    
      var fromList = function(C, list){
        var index  = 0
          , length = list.length
          , result = allocate(C, length);
        while(length > index)result[index] = list[index++];
        return result;
      };
    
      var addGetter = function(it, key, internal){
        dP(it, key, {get: function(){ return this._d[internal]; }});
      };
    
      var $from = function from(source /*, mapfn, thisArg */){
        var O       = toObject(source)
          , aLen    = arguments.length
          , mapfn   = aLen > 1 ? arguments[1] : undefined
          , mapping = mapfn !== undefined
          , iterFn  = getIterFn(O)
          , i, length, values, result, step, iterator;
        if(iterFn != undefined && !isArrayIter(iterFn)){
          for(iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++){
            values.push(step.value);
          } O = values;
        }
        if(mapping && aLen > 2)mapfn = ctx(mapfn, arguments[2], 2);
        for(i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++){
          result[i] = mapping ? mapfn(O[i], i) : O[i];
        }
        return result;
      };
    
      var $of = function of(/*...items*/){
        var index  = 0
          , length = arguments.length
          , result = allocate(this, length);
        while(length > index)result[index] = arguments[index++];
        return result;
      };
    
      // iOS Safari 6.x fails here
      var TO_LOCALE_BUG = !!Uint8Array && fails(function(){ arrayToLocaleString.call(new Uint8Array(1)); });
    
      var $toLocaleString = function toLocaleString(){
        return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
      };
    
      var proto = {
        copyWithin: function copyWithin(target, start /*, end */){
          return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
        },
        every: function every(callbackfn /*, thisArg */){
          return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        },
        fill: function fill(value /*, start, end */){ // eslint-disable-line no-unused-vars
          return arrayFill.apply(validate(this), arguments);
        },
        filter: function filter(callbackfn /*, thisArg */){
          return speciesFromList(this, arrayFilter(validate(this), callbackfn,
            arguments.length > 1 ? arguments[1] : undefined));
        },
        find: function find(predicate /*, thisArg */){
          return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
        },
        findIndex: function findIndex(predicate /*, thisArg */){
          return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
        },
        forEach: function forEach(callbackfn /*, thisArg */){
          arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        },
        indexOf: function indexOf(searchElement /*, fromIndex */){
          return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
        },
        includes: function includes(searchElement /*, fromIndex */){
          return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
        },
        join: function join(separator){ // eslint-disable-line no-unused-vars
          return arrayJoin.apply(validate(this), arguments);
        },
        lastIndexOf: function lastIndexOf(searchElement /*, fromIndex */){ // eslint-disable-line no-unused-vars
          return arrayLastIndexOf.apply(validate(this), arguments);
        },
        map: function map(mapfn /*, thisArg */){
          return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
        },
        reduce: function reduce(callbackfn /*, initialValue */){ // eslint-disable-line no-unused-vars
          return arrayReduce.apply(validate(this), arguments);
        },
        reduceRight: function reduceRight(callbackfn /*, initialValue */){ // eslint-disable-line no-unused-vars
          return arrayReduceRight.apply(validate(this), arguments);
        },
        reverse: function reverse(){
          var that   = this
            , length = validate(that).length
            , middle = Math.floor(length / 2)
            , index  = 0
            , value;
          while(index < middle){
            value         = that[index];
            that[index++] = that[--length];
            that[length]  = value;
          } return that;
        },
        some: function some(callbackfn /*, thisArg */){
          return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        },
        sort: function sort(comparefn){
          return arraySort.call(validate(this), comparefn);
        },
        subarray: function subarray(begin, end){
          var O      = validate(this)
            , length = O.length
            , $begin = toIndex(begin, length);
          return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
            O.buffer,
            O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
            toLength((end === undefined ? length : toIndex(end, length)) - $begin)
          );
        }
      };
    
      var $slice = function slice(start, end){
        return speciesFromList(this, arraySlice.call(validate(this), start, end));
      };
    
      var $set = function set(arrayLike /*, offset */){
        validate(this);
        var offset = toOffset(arguments[1], 1)
          , length = this.length
          , src    = toObject(arrayLike)
          , len    = toLength(src.length)
          , index  = 0;
        if(len + offset > length)throw RangeError(WRONG_LENGTH);
        while(index < len)this[offset + index] = src[index++];
      };
    
      var $iterators = {
        entries: function entries(){
          return arrayEntries.call(validate(this));
        },
        keys: function keys(){
          return arrayKeys.call(validate(this));
        },
        values: function values(){
          return arrayValues.call(validate(this));
        }
      };
    
      var isTAIndex = function(target, key){
        return isObject(target)
          && target[TYPED_ARRAY]
          && typeof key != 'symbol'
          && key in target
          && String(+key) == String(key);
      };
      var $getDesc = function getOwnPropertyDescriptor(target, key){
        return isTAIndex(target, key = toPrimitive(key, true))
          ? propertyDesc(2, target[key])
          : gOPD(target, key);
      };
      var $setDesc = function defineProperty(target, key, desc){
        if(isTAIndex(target, key = toPrimitive(key, true))
          && isObject(desc)
          && has(desc, 'value')
          && !has(desc, 'get')
          && !has(desc, 'set')
          // TODO: add validation descriptor w/o calling accessors
          && !desc.configurable
          && (!has(desc, 'writable') || desc.writable)
          && (!has(desc, 'enumerable') || desc.enumerable)
        ){
          target[key] = desc.value;
          return target;
        } else return dP(target, key, desc);
      };
    
      if(!ALL_CONSTRUCTORS){
        $GOPD.f = $getDesc;
        $DP.f   = $setDesc;
      }
    
      $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
        getOwnPropertyDescriptor: $getDesc,
        defineProperty:           $setDesc
      });
    
      if(fails(function(){ arrayToString.call({}); })){
        arrayToString = arrayToLocaleString = function toString(){
          return arrayJoin.call(this);
        }
      }
    
      var $TypedArrayPrototype$ = redefineAll({}, proto);
      redefineAll($TypedArrayPrototype$, $iterators);
      hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
      redefineAll($TypedArrayPrototype$, {
        slice:          $slice,
        set:            $set,
        constructor:    function(){ /* noop */ },
        toString:       arrayToString,
        toLocaleString: $toLocaleString
      });
      addGetter($TypedArrayPrototype$, 'buffer', 'b');
      addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
      addGetter($TypedArrayPrototype$, 'byteLength', 'l');
      addGetter($TypedArrayPrototype$, 'length', 'e');
      dP($TypedArrayPrototype$, TAG, {
        get: function(){ return this[TYPED_ARRAY]; }
      });
    
      module.exports = function(KEY, BYTES, wrapper, CLAMPED){
        CLAMPED = !!CLAMPED;
        var NAME       = KEY + (CLAMPED ? 'Clamped' : '') + 'Array'
          , ISNT_UINT8 = NAME != 'Uint8Array'
          , GETTER     = 'get' + KEY
          , SETTER     = 'set' + KEY
          , TypedArray = global[NAME]
          , Base       = TypedArray || {}
          , TAC        = TypedArray && getPrototypeOf(TypedArray)
          , FORCED     = !TypedArray || !$typed.ABV
          , O          = {}
          , TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
        var getter = function(that, index){
          var data = that._d;
          return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
        };
        var setter = function(that, index, value){
          var data = that._d;
          if(CLAMPED)value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
          data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
        };
        var addElement = function(that, index){
          dP(that, index, {
            get: function(){
              return getter(this, index);
            },
            set: function(value){
              return setter(this, index, value);
            },
            enumerable: true
          });
        };
        if(FORCED){
          TypedArray = wrapper(function(that, data, $offset, $length){
            anInstance(that, TypedArray, NAME, '_d');
            var index  = 0
              , offset = 0
              , buffer, byteLength, length, klass;
            if(!isObject(data)){
              length     = strictToLength(data, true)
              byteLength = length * BYTES;
              buffer     = new $ArrayBuffer(byteLength);
            } else if(data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER){
              buffer = data;
              offset = toOffset($offset, BYTES);
              var $len = data.byteLength;
              if($length === undefined){
                if($len % BYTES)throw RangeError(WRONG_LENGTH);
                byteLength = $len - offset;
                if(byteLength < 0)throw RangeError(WRONG_LENGTH);
              } else {
                byteLength = toLength($length) * BYTES;
                if(byteLength + offset > $len)throw RangeError(WRONG_LENGTH);
              }
              length = byteLength / BYTES;
            } else if(TYPED_ARRAY in data){
              return fromList(TypedArray, data);
            } else {
              return $from.call(TypedArray, data);
            }
            hide(that, '_d', {
              b: buffer,
              o: offset,
              l: byteLength,
              e: length,
              v: new $DataView(buffer)
            });
            while(index < length)addElement(that, index++);
          });
          TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
          hide(TypedArrayPrototype, 'constructor', TypedArray);
        } else if(!$iterDetect(function(iter){
          // V8 works with iterators, but fails in many other cases
          // https://code.google.com/p/v8/issues/detail?id=4552
          new TypedArray(null); // eslint-disable-line no-new
          new TypedArray(iter); // eslint-disable-line no-new
        }, true)){
          TypedArray = wrapper(function(that, data, $offset, $length){
            anInstance(that, TypedArray, NAME);
            var klass;
            // `ws` module bug, temporarily remove validation length for Uint8Array
            // https://github.com/websockets/ws/pull/645
            if(!isObject(data))return new Base(strictToLength(data, ISNT_UINT8));
            if(data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER){
              return $length !== undefined
                ? new Base(data, toOffset($offset, BYTES), $length)
                : $offset !== undefined
                  ? new Base(data, toOffset($offset, BYTES))
                  : new Base(data);
            }
            if(TYPED_ARRAY in data)return fromList(TypedArray, data);
            return $from.call(TypedArray, data);
          });
          arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function(key){
            if(!(key in TypedArray))hide(TypedArray, key, Base[key]);
          });
          TypedArray[PROTOTYPE] = TypedArrayPrototype;
          if(!LIBRARY)TypedArrayPrototype.constructor = TypedArray;
        }
        var $nativeIterator   = TypedArrayPrototype[ITERATOR]
          , CORRECT_ITER_NAME = !!$nativeIterator && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined)
          , $iterator         = $iterators.values;
        hide(TypedArray, TYPED_CONSTRUCTOR, true);
        hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
        hide(TypedArrayPrototype, VIEW, true);
        hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);
    
        if(CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)){
          dP(TypedArrayPrototype, TAG, {
            get: function(){ return NAME; }
          });
        }
    
        O[NAME] = TypedArray;
    
        $export($export.G + $export.W + $export.F * (TypedArray != Base), O);
    
        $export($export.S, NAME, {
          BYTES_PER_ELEMENT: BYTES,
          from: $from,
          of: $of
        });
    
        if(!(BYTES_PER_ELEMENT in TypedArrayPrototype))hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);
    
        $export($export.P, NAME, proto);
    
        setSpecies(NAME);
    
        $export($export.P + $export.F * FORCED_SET, NAME, {set: $set});
    
        $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);
    
        $export($export.P + $export.F * (TypedArrayPrototype.toString != arrayToString), NAME, {toString: arrayToString});
    
        $export($export.P + $export.F * fails(function(){
          new TypedArray(1).slice();
        }), NAME, {slice: $slice});
    
        $export($export.P + $export.F * (fails(function(){
          return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString()
        }) || !fails(function(){
          TypedArrayPrototype.toLocaleString.call([1, 2]);
        })), NAME, {toLocaleString: $toLocaleString});
    
        Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
        if(!LIBRARY && !CORRECT_ITER_NAME)hide(TypedArrayPrototype, ITERATOR, $iterator);
      };
    } else module.exports = function(){ /* empty */ };
  provide("core-js/modules/_typed-array", module.exports);
}(global));

// pakmanager:core-js/modules/_own-keys
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // all object keys, includes non-enumerable and symbols
    var gOPN     =  require('core-js/modules/_object-gopn')
      , gOPS     =  require('core-js/modules/_object-gops')
      , anObject =  require('core-js/modules/_an-object')
      , Reflect  =  require('core-js/modules/_global').Reflect;
    module.exports = Reflect && Reflect.ownKeys || function ownKeys(it){
      var keys       = gOPN.f(anObject(it))
        , getSymbols = gOPS.f;
      return getSymbols ? keys.concat(getSymbols(it)) : keys;
    };
  provide("core-js/modules/_own-keys", module.exports);
}(global));

// pakmanager:core-js/modules/_string-pad
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // https://github.com/tc39/proposal-string-pad-start-end
    var toLength =  require('core-js/modules/_to-length')
      , repeat   =  require('core-js/modules/_string-repeat')
      , defined  =  require('core-js/modules/_defined');
    
    module.exports = function(that, maxLength, fillString, left){
      var S            = String(defined(that))
        , stringLength = S.length
        , fillStr      = fillString === undefined ? ' ' : String(fillString)
        , intMaxLength = toLength(maxLength);
      if(intMaxLength <= stringLength || fillStr == '')return S;
      var fillLen = intMaxLength - stringLength
        , stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
      if(stringFiller.length > fillLen)stringFiller = stringFiller.slice(0, fillLen);
      return left ? stringFiller + S : S + stringFiller;
    };
    
  provide("core-js/modules/_string-pad", module.exports);
}(global));

// pakmanager:core-js/modules/_object-to-array
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var getKeys   =  require('core-js/modules/_object-keys')
      , toIObject =  require('core-js/modules/_to-iobject')
      , isEnum    =  require('core-js/modules/_object-pie').f;
    module.exports = function(isEntries){
      return function(it){
        var O      = toIObject(it)
          , keys   = getKeys(O)
          , length = keys.length
          , i      = 0
          , result = []
          , key;
        while(length > i)if(isEnum.call(O, key = keys[i++])){
          result.push(isEntries ? [key, O[key]] : O[key]);
        } return result;
      };
    };
  provide("core-js/modules/_object-to-array", module.exports);
}(global));

// pakmanager:core-js/modules/_object-forced-pam
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // Forced replacement prototype accessors methods
    module.exports =  require('core-js/modules/_library')|| ! require('core-js/modules/_fails')(function(){
      var K = Math.random();
      // In FF throws only define methods
      __defineSetter__.call(null, K, function(){ /* empty */});
      delete  require('core-js/modules/_global')[K];
    });
  provide("core-js/modules/_object-forced-pam", module.exports);
}(global));

// pakmanager:core-js/modules/_collection-to-json
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // https://github.com/DavidBruant/Map-Set.prototype.toJSON
    var classof =  require('core-js/modules/_classof')
      , from    =  require('core-js/modules/_array-from-iterable');
    module.exports = function(NAME){
      return function toJSON(){
        if(classof(this) != NAME)throw TypeError(NAME + "#toJSON isn't generic");
        return from(this);
      };
    };
  provide("core-js/modules/_collection-to-json", module.exports);
}(global));

// pakmanager:core-js/modules/_metadata
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var Map     =  require('core-js/modules/es6.map')
      , $export =  require('core-js/modules/_export')
      , shared  =  require('core-js/modules/_shared')('metadata')
      , store   = shared.store || (shared.store = new ( require('core-js/modules/es6.weak-map')));
    
    var getOrCreateMetadataMap = function(target, targetKey, create){
      var targetMetadata = store.get(target);
      if(!targetMetadata){
        if(!create)return undefined;
        store.set(target, targetMetadata = new Map);
      }
      var keyMetadata = targetMetadata.get(targetKey);
      if(!keyMetadata){
        if(!create)return undefined;
        targetMetadata.set(targetKey, keyMetadata = new Map);
      } return keyMetadata;
    };
    var ordinaryHasOwnMetadata = function(MetadataKey, O, P){
      var metadataMap = getOrCreateMetadataMap(O, P, false);
      return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
    };
    var ordinaryGetOwnMetadata = function(MetadataKey, O, P){
      var metadataMap = getOrCreateMetadataMap(O, P, false);
      return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
    };
    var ordinaryDefineOwnMetadata = function(MetadataKey, MetadataValue, O, P){
      getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
    };
    var ordinaryOwnMetadataKeys = function(target, targetKey){
      var metadataMap = getOrCreateMetadataMap(target, targetKey, false)
        , keys        = [];
      if(metadataMap)metadataMap.forEach(function(_, key){ keys.push(key); });
      return keys;
    };
    var toMetaKey = function(it){
      return it === undefined || typeof it == 'symbol' ? it : String(it);
    };
    var exp = function(O){
      $export($export.S, 'Reflect', O);
    };
    
    module.exports = {
      store: store,
      map: getOrCreateMetadataMap,
      has: ordinaryHasOwnMetadata,
      get: ordinaryGetOwnMetadata,
      set: ordinaryDefineOwnMetadata,
      keys: ordinaryOwnMetadataKeys,
      key: toMetaKey,
      exp: exp
    };
  provide("core-js/modules/_metadata", module.exports);
}(global));

// pakmanager:core-js/modules/es6.set
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    var strong =  require('core-js/modules/_collection-strong');
    
    // 23.2 Set Objects
    module.exports =  require('core-js/modules/_collection')('Set', function(get){
      return function Set(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
    }, {
      // 23.2.3.1 Set.prototype.add(value)
      add: function add(value){
        return strong.def(this, value = value === 0 ? 0 : value, value);
      }
    }, strong);
  provide("core-js/modules/es6.set", module.exports);
}(global));

// pakmanager:core-js/modules/_partial
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    var path      =  require('core-js/modules/_path')
      , invoke    =  require('core-js/modules/_invoke')
      , aFunction =  require('core-js/modules/_a-function');
    module.exports = function(/* ...pargs */){
      var fn     = aFunction(this)
        , length = arguments.length
        , pargs  = Array(length)
        , i      = 0
        , _      = path._
        , holder = false;
      while(length > i)if((pargs[i] = arguments[i++]) === _)holder = true;
      return function(/* ...args */){
        var that = this
          , aLen = arguments.length
          , j = 0, k = 0, args;
        if(!holder && !aLen)return invoke(fn, pargs, that);
        args = pargs.slice();
        if(holder)for(;length > j; j++)if(args[j] === _)args[j] = arguments[k++];
        while(aLen > k)args.push(arguments[k++]);
        return invoke(fn, args, that);
      };
    };
  provide("core-js/modules/_partial", module.exports);
}(global));

// pakmanager:core-js/modules/es6.symbol
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    // ECMAScript 6 symbols shim
    var global         =  require('core-js/modules/_global')
      , has            =  require('core-js/modules/_has')
      , DESCRIPTORS    =  require('core-js/modules/_descriptors')
      , $export        =  require('core-js/modules/_export')
      , redefine       =  require('core-js/modules/_redefine')
      , META           =  require('core-js/modules/_meta').KEY
      , $fails         =  require('core-js/modules/_fails')
      , shared         =  require('core-js/modules/_shared')
      , setToStringTag =  require('core-js/modules/_set-to-string-tag')
      , uid            =  require('core-js/modules/_uid')
      , wks            =  require('core-js/modules/_wks')
      , wksExt         =  require('core-js/modules/_wks-ext')
      , wksDefine      =  require('core-js/modules/_wks-define')
      , keyOf          =  require('core-js/modules/_keyof')
      , enumKeys       =  require('core-js/modules/_enum-keys')
      , isArray        =  require('core-js/modules/_is-array')
      , anObject       =  require('core-js/modules/_an-object')
      , toIObject      =  require('core-js/modules/_to-iobject')
      , toPrimitive    =  require('core-js/modules/_to-primitive')
      , createDesc     =  require('core-js/modules/_property-desc')
      , _create        =  require('core-js/modules/_object-create')
      , gOPNExt        =  require('core-js/modules/_object-gopn-ext')
      , $GOPD          =  require('core-js/modules/_object-gopd')
      , $DP            =  require('core-js/modules/_object-dp')
      , $keys          =  require('core-js/modules/_object-keys')
      , gOPD           = $GOPD.f
      , dP             = $DP.f
      , gOPN           = gOPNExt.f
      , $Symbol        = global.Symbol
      , $JSON          = global.JSON
      , _stringify     = $JSON && $JSON.stringify
      , PROTOTYPE      = 'prototype'
      , HIDDEN         = wks('_hidden')
      , TO_PRIMITIVE   = wks('toPrimitive')
      , isEnum         = {}.propertyIsEnumerable
      , SymbolRegistry = shared('symbol-registry')
      , AllSymbols     = shared('symbols')
      , OPSymbols      = shared('op-symbols')
      , ObjectProto    = Object[PROTOTYPE]
      , USE_NATIVE     = typeof $Symbol == 'function'
      , QObject        = global.QObject;
    // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
    var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
    
    // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
    var setSymbolDesc = DESCRIPTORS && $fails(function(){
      return _create(dP({}, 'a', {
        get: function(){ return dP(this, 'a', {value: 7}).a; }
      })).a != 7;
    }) ? function(it, key, D){
      var protoDesc = gOPD(ObjectProto, key);
      if(protoDesc)delete ObjectProto[key];
      dP(it, key, D);
      if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);
    } : dP;
    
    var wrap = function(tag){
      var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
      sym._k = tag;
      return sym;
    };
    
    var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){
      return typeof it == 'symbol';
    } : function(it){
      return it instanceof $Symbol;
    };
    
    var $defineProperty = function defineProperty(it, key, D){
      if(it === ObjectProto)$defineProperty(OPSymbols, key, D);
      anObject(it);
      key = toPrimitive(key, true);
      anObject(D);
      if(has(AllSymbols, key)){
        if(!D.enumerable){
          if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));
          it[HIDDEN][key] = true;
        } else {
          if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
          D = _create(D, {enumerable: createDesc(0, false)});
        } return setSymbolDesc(it, key, D);
      } return dP(it, key, D);
    };
    var $defineProperties = function defineProperties(it, P){
      anObject(it);
      var keys = enumKeys(P = toIObject(P))
        , i    = 0
        , l = keys.length
        , key;
      while(l > i)$defineProperty(it, key = keys[i++], P[key]);
      return it;
    };
    var $create = function create(it, P){
      return P === undefined ? _create(it) : $defineProperties(_create(it), P);
    };
    var $propertyIsEnumerable = function propertyIsEnumerable(key){
      var E = isEnum.call(this, key = toPrimitive(key, true));
      if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;
      return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
    };
    var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
      it  = toIObject(it);
      key = toPrimitive(key, true);
      if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;
      var D = gOPD(it, key);
      if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
      return D;
    };
    var $getOwnPropertyNames = function getOwnPropertyNames(it){
      var names  = gOPN(toIObject(it))
        , result = []
        , i      = 0
        , key;
      while(names.length > i){
        if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
      } return result;
    };
    var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
      var IS_OP  = it === ObjectProto
        , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))
        , result = []
        , i      = 0
        , key;
      while(names.length > i){
        if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);
      } return result;
    };
    
    // 19.4.1.1 Symbol([description])
    if(!USE_NATIVE){
      $Symbol = function Symbol(){
        if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');
        var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
        var $set = function(value){
          if(this === ObjectProto)$set.call(OPSymbols, value);
          if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
          setSymbolDesc(this, tag, createDesc(1, value));
        };
        if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});
        return wrap(tag);
      };
      redefine($Symbol[PROTOTYPE], 'toString', function toString(){
        return this._k;
      });
    
      $GOPD.f = $getOwnPropertyDescriptor;
      $DP.f   = $defineProperty;
       require('core-js/modules/_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;
       require('core-js/modules/_object-pie').f  = $propertyIsEnumerable;
       require('core-js/modules/_object-gops').f = $getOwnPropertySymbols;
    
      if(DESCRIPTORS && ! require('core-js/modules/_library')){
        redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
      }
    
      wksExt.f = function(name){
        return wrap(wks(name));
      }
    }
    
    $export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});
    
    for(var symbols = (
      // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
      'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
    ).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);
    
    for(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);
    
    $export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
      // 19.4.2.1 Symbol.for(key)
      'for': function(key){
        return has(SymbolRegistry, key += '')
          ? SymbolRegistry[key]
          : SymbolRegistry[key] = $Symbol(key);
      },
      // 19.4.2.5 Symbol.keyFor(sym)
      keyFor: function keyFor(key){
        if(isSymbol(key))return keyOf(SymbolRegistry, key);
        throw TypeError(key + ' is not a symbol!');
      },
      useSetter: function(){ setter = true; },
      useSimple: function(){ setter = false; }
    });
    
    $export($export.S + $export.F * !USE_NATIVE, 'Object', {
      // 19.1.2.2 Object.create(O [, Properties])
      create: $create,
      // 19.1.2.4 Object.defineProperty(O, P, Attributes)
      defineProperty: $defineProperty,
      // 19.1.2.3 Object.defineProperties(O, Properties)
      defineProperties: $defineProperties,
      // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
      getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
      // 19.1.2.7 Object.getOwnPropertyNames(O)
      getOwnPropertyNames: $getOwnPropertyNames,
      // 19.1.2.8 Object.getOwnPropertySymbols(O)
      getOwnPropertySymbols: $getOwnPropertySymbols
    });
    
    // 24.3.2 JSON.stringify(value [, replacer [, space]])
    $JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){
      var S = $Symbol();
      // MS Edge converts symbol values to JSON as {}
      // WebKit converts symbol values to JSON as null
      // V8 throws on boxed symbols
      return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
    })), 'JSON', {
      stringify: function stringify(it){
        if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
        var args = [it]
          , i    = 1
          , replacer, $replacer;
        while(arguments.length > i)args.push(arguments[i++]);
        replacer = args[1];
        if(typeof replacer == 'function')$replacer = replacer;
        if($replacer || !isArray(replacer))replacer = function(key, value){
          if($replacer)value = $replacer.call(this, key, value);
          if(!isSymbol(value))return value;
        };
        args[1] = replacer;
        return _stringify.apply($JSON, args);
      }
    });
    
    // 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
    $Symbol[PROTOTYPE][TO_PRIMITIVE] ||  require('core-js/modules/_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
    // 19.4.3.5 Symbol.prototype[@@toStringTag]
    setToStringTag($Symbol, 'Symbol');
    // 20.2.1.9 Math[@@toStringTag]
    setToStringTag(Math, 'Math', true);
    // 24.3.3 JSON[@@toStringTag]
    setToStringTag(global.JSON, 'JSON', true);
  provide("core-js/modules/es6.symbol", module.exports);
}(global));

// pakmanager:core-js/modules/es6.object.create
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var $export =  require('core-js/modules/_export')
    // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
    $export($export.S, 'Object', {create:  require('core-js/modules/_object-create')});
  provide("core-js/modules/es6.object.create", module.exports);
}(global));

// pakmanager:core-js/modules/es6.object.define-property
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var $export =  require('core-js/modules/_export');
    // 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
    $export($export.S + $export.F * ! require('core-js/modules/_descriptors'), 'Object', {defineProperty:  require('core-js/modules/_object-dp').f});
  provide("core-js/modules/es6.object.define-property", module.exports);
}(global));

// pakmanager:core-js/modules/es6.object.define-properties
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var $export =  require('core-js/modules/_export');
    // 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
    $export($export.S + $export.F * ! require('core-js/modules/_descriptors'), 'Object', {defineProperties:  require('core-js/modules/_object-dps')});
  provide("core-js/modules/es6.object.define-properties", module.exports);
}(global));

// pakmanager:core-js/modules/es6.object.get-own-property-descriptor
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
    var toIObject                 =  require('core-js/modules/_to-iobject')
      , $getOwnPropertyDescriptor =  require('core-js/modules/_object-gopd').f;
    
     require('core-js/modules/_object-sap')('getOwnPropertyDescriptor', function(){
      return function getOwnPropertyDescriptor(it, key){
        return $getOwnPropertyDescriptor(toIObject(it), key);
      };
    });
  provide("core-js/modules/es6.object.get-own-property-descriptor", module.exports);
}(global));

// pakmanager:core-js/modules/es6.object.get-prototype-of
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 19.1.2.9 Object.getPrototypeOf(O)
    var toObject        =  require('core-js/modules/_to-object')
      , $getPrototypeOf =  require('core-js/modules/_object-gpo');
    
     require('core-js/modules/_object-sap')('getPrototypeOf', function(){
      return function getPrototypeOf(it){
        return $getPrototypeOf(toObject(it));
      };
    });
  provide("core-js/modules/es6.object.get-prototype-of", module.exports);
}(global));

// pakmanager:core-js/modules/es6.object.keys
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 19.1.2.14 Object.keys(O)
    var toObject =  require('core-js/modules/_to-object')
      , $keys    =  require('core-js/modules/_object-keys');
    
     require('core-js/modules/_object-sap')('keys', function(){
      return function keys(it){
        return $keys(toObject(it));
      };
    });
  provide("core-js/modules/es6.object.keys", module.exports);
}(global));

// pakmanager:core-js/modules/es6.object.get-own-property-names
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 19.1.2.7 Object.getOwnPropertyNames(O)
     require('core-js/modules/_object-sap')('getOwnPropertyNames', function(){
      return  require('core-js/modules/_object-gopn-ext').f;
    });
  provide("core-js/modules/es6.object.get-own-property-names", module.exports);
}(global));

// pakmanager:core-js/modules/es6.object.freeze
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 19.1.2.5 Object.freeze(O)
    var isObject =  require('core-js/modules/_is-object')
      , meta     =  require('core-js/modules/_meta').onFreeze;
    
     require('core-js/modules/_object-sap')('freeze', function($freeze){
      return function freeze(it){
        return $freeze && isObject(it) ? $freeze(meta(it)) : it;
      };
    });
  provide("core-js/modules/es6.object.freeze", module.exports);
}(global));

// pakmanager:core-js/modules/es6.object.seal
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 19.1.2.17 Object.seal(O)
    var isObject =  require('core-js/modules/_is-object')
      , meta     =  require('core-js/modules/_meta').onFreeze;
    
     require('core-js/modules/_object-sap')('seal', function($seal){
      return function seal(it){
        return $seal && isObject(it) ? $seal(meta(it)) : it;
      };
    });
  provide("core-js/modules/es6.object.seal", module.exports);
}(global));

// pakmanager:core-js/modules/es6.object.prevent-extensions
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 19.1.2.15 Object.preventExtensions(O)
    var isObject =  require('core-js/modules/_is-object')
      , meta     =  require('core-js/modules/_meta').onFreeze;
    
     require('core-js/modules/_object-sap')('preventExtensions', function($preventExtensions){
      return function preventExtensions(it){
        return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
      };
    });
  provide("core-js/modules/es6.object.prevent-extensions", module.exports);
}(global));

// pakmanager:core-js/modules/es6.object.is-frozen
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 19.1.2.12 Object.isFrozen(O)
    var isObject =  require('core-js/modules/_is-object');
    
     require('core-js/modules/_object-sap')('isFrozen', function($isFrozen){
      return function isFrozen(it){
        return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
      };
    });
  provide("core-js/modules/es6.object.is-frozen", module.exports);
}(global));

// pakmanager:core-js/modules/es6.object.is-sealed
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 19.1.2.13 Object.isSealed(O)
    var isObject =  require('core-js/modules/_is-object');
    
     require('core-js/modules/_object-sap')('isSealed', function($isSealed){
      return function isSealed(it){
        return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
      };
    });
  provide("core-js/modules/es6.object.is-sealed", module.exports);
}(global));

// pakmanager:core-js/modules/es6.object.is-extensible
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 19.1.2.11 Object.isExtensible(O)
    var isObject =  require('core-js/modules/_is-object');
    
     require('core-js/modules/_object-sap')('isExtensible', function($isExtensible){
      return function isExtensible(it){
        return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
      };
    });
  provide("core-js/modules/es6.object.is-extensible", module.exports);
}(global));

// pakmanager:core-js/modules/es6.object.assign
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 19.1.3.1 Object.assign(target, source)
    var $export =  require('core-js/modules/_export');
    
    $export($export.S + $export.F, 'Object', {assign:  require('core-js/modules/_object-assign')});
  provide("core-js/modules/es6.object.assign", module.exports);
}(global));

// pakmanager:core-js/modules/es6.object.is
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 19.1.3.10 Object.is(value1, value2)
    var $export =  require('core-js/modules/_export');
    $export($export.S, 'Object', {is:  require('core-js/modules/_same-value')});
  provide("core-js/modules/es6.object.is", module.exports);
}(global));

// pakmanager:core-js/modules/es6.object.set-prototype-of
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 19.1.3.19 Object.setPrototypeOf(O, proto)
    var $export =  require('core-js/modules/_export');
    $export($export.S, 'Object', {setPrototypeOf:  require('core-js/modules/_set-proto').set});
  provide("core-js/modules/es6.object.set-prototype-of", module.exports);
}(global));

// pakmanager:core-js/modules/es6.object.to-string
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    // 19.1.3.6 Object.prototype.toString()
    var classof =  require('core-js/modules/_classof')
      , test    = {};
    test[ require('core-js/modules/_wks')('toStringTag')] = 'z';
    if(test + '' != '[object z]'){
       require('core-js/modules/_redefine')(Object.prototype, 'toString', function toString(){
        return '[object ' + classof(this) + ']';
      }, true);
    }
  provide("core-js/modules/es6.object.to-string", module.exports);
}(global));

// pakmanager:core-js/modules/es6.function.bind
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
    var $export =  require('core-js/modules/_export');
    
    $export($export.P, 'Function', {bind:  require('core-js/modules/_bind')});
  provide("core-js/modules/es6.function.bind", module.exports);
}(global));

// pakmanager:core-js/modules/es6.function.name
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var dP         =  require('core-js/modules/_object-dp').f
      , createDesc =  require('core-js/modules/_property-desc')
      , has        =  require('core-js/modules/_has')
      , FProto     = Function.prototype
      , nameRE     = /^\s*function ([^ (]*)/
      , NAME       = 'name';
    
    var isExtensible = Object.isExtensible || function(){
      return true;
    };
    
    // 19.2.4.2 name
    NAME in FProto ||  require('core-js/modules/_descriptors') && dP(FProto, NAME, {
      configurable: true,
      get: function(){
        try {
          var that = this
            , name = ('' + that).match(nameRE)[1];
          has(that, NAME) || !isExtensible(that) || dP(that, NAME, createDesc(5, name));
          return name;
        } catch(e){
          return '';
        }
      }
    });
  provide("core-js/modules/es6.function.name", module.exports);
}(global));

// pakmanager:core-js/modules/es6.function.has-instance
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    var isObject       =  require('core-js/modules/_is-object')
      , getPrototypeOf =  require('core-js/modules/_object-gpo')
      , HAS_INSTANCE   =  require('core-js/modules/_wks')('hasInstance')
      , FunctionProto  = Function.prototype;
    // 19.2.3.6 Function.prototype[@@hasInstance](V)
    if(!(HAS_INSTANCE in FunctionProto)) require('core-js/modules/_object-dp').f(FunctionProto, HAS_INSTANCE, {value: function(O){
      if(typeof this != 'function' || !isObject(O))return false;
      if(!isObject(this.prototype))return O instanceof this;
      // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
      while(O = getPrototypeOf(O))if(this.prototype === O)return true;
      return false;
    }});
  provide("core-js/modules/es6.function.has-instance", module.exports);
}(global));

// pakmanager:core-js/modules/es6.parse-int
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var $export   =  require('core-js/modules/_export')
      , $parseInt =  require('core-js/modules/_parse-int');
    // 18.2.5 parseInt(string, radix)
    $export($export.G + $export.F * (parseInt != $parseInt), {parseInt: $parseInt});
  provide("core-js/modules/es6.parse-int", module.exports);
}(global));

// pakmanager:core-js/modules/es6.parse-float
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var $export     =  require('core-js/modules/_export')
      , $parseFloat =  require('core-js/modules/_parse-float');
    // 18.2.4 parseFloat(string)
    $export($export.G + $export.F * (parseFloat != $parseFloat), {parseFloat: $parseFloat});
  provide("core-js/modules/es6.parse-float", module.exports);
}(global));

// pakmanager:core-js/modules/es6.number.constructor
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    var global            =  require('core-js/modules/_global')
      , has               =  require('core-js/modules/_has')
      , cof               =  require('core-js/modules/_cof')
      , inheritIfRequired =  require('core-js/modules/_inherit-if-required')
      , toPrimitive       =  require('core-js/modules/_to-primitive')
      , fails             =  require('core-js/modules/_fails')
      , gOPN              =  require('core-js/modules/_object-gopn').f
      , gOPD              =  require('core-js/modules/_object-gopd').f
      , dP                =  require('core-js/modules/_object-dp').f
      , $trim             =  require('core-js/modules/_string-trim').trim
      , NUMBER            = 'Number'
      , $Number           = global[NUMBER]
      , Base              = $Number
      , proto             = $Number.prototype
      // Opera ~12 has broken Object#toString
      , BROKEN_COF        = cof( require('core-js/modules/_object-create')(proto)) == NUMBER
      , TRIM              = 'trim' in String.prototype;
    
    // 7.1.3 ToNumber(argument)
    var toNumber = function(argument){
      var it = toPrimitive(argument, false);
      if(typeof it == 'string' && it.length > 2){
        it = TRIM ? it.trim() : $trim(it, 3);
        var first = it.charCodeAt(0)
          , third, radix, maxCode;
        if(first === 43 || first === 45){
          third = it.charCodeAt(2);
          if(third === 88 || third === 120)return NaN; // Number('+0x1') should be NaN, old V8 fix
        } else if(first === 48){
          switch(it.charCodeAt(1)){
            case 66 : case 98  : radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
            case 79 : case 111 : radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
            default : return +it;
          }
          for(var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++){
            code = digits.charCodeAt(i);
            // parseInt parses a string to a first unavailable symbol
            // but ToNumber should return NaN if a string contains unavailable symbols
            if(code < 48 || code > maxCode)return NaN;
          } return parseInt(digits, radix);
        }
      } return +it;
    };
    
    if(!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')){
      $Number = function Number(value){
        var it = arguments.length < 1 ? 0 : value
          , that = this;
        return that instanceof $Number
          // check on 1..constructor(foo) case
          && (BROKEN_COF ? fails(function(){ proto.valueOf.call(that); }) : cof(that) != NUMBER)
            ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
      };
      for(var keys =  require('core-js/modules/_descriptors') ? gOPN(Base) : (
        // ES3:
        'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
        // ES6 (in case, if modules with ES6 Number statics required before):
        'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
        'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
      ).split(','), j = 0, key; keys.length > j; j++){
        if(has(Base, key = keys[j]) && !has($Number, key)){
          dP($Number, key, gOPD(Base, key));
        }
      }
      $Number.prototype = proto;
      proto.constructor = $Number;
       require('core-js/modules/_redefine')(global, NUMBER, $Number);
    }
  provide("core-js/modules/es6.number.constructor", module.exports);
}(global));

// pakmanager:core-js/modules/es6.number.to-fixed
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    var $export      =  require('core-js/modules/_export')
      , anInstance   =  require('core-js/modules/_an-instance')
      , toInteger    =  require('core-js/modules/_to-integer')
      , aNumberValue =  require('core-js/modules/_a-number-value')
      , repeat       =  require('core-js/modules/_string-repeat')
      , $toFixed     = 1..toFixed
      , floor        = Math.floor
      , data         = [0, 0, 0, 0, 0, 0]
      , ERROR        = 'Number.toFixed: incorrect invocation!'
      , ZERO         = '0';
    
    var multiply = function(n, c){
      var i  = -1
        , c2 = c;
      while(++i < 6){
        c2 += n * data[i];
        data[i] = c2 % 1e7;
        c2 = floor(c2 / 1e7);
      }
    };
    var divide = function(n){
      var i = 6
        , c = 0;
      while(--i >= 0){
        c += data[i];
        data[i] = floor(c / n);
        c = (c % n) * 1e7;
      }
    };
    var numToString = function(){
      var i = 6
        , s = '';
      while(--i >= 0){
        if(s !== '' || i === 0 || data[i] !== 0){
          var t = String(data[i]);
          s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
        }
      } return s;
    };
    var pow = function(x, n, acc){
      return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
    };
    var log = function(x){
      var n  = 0
        , x2 = x;
      while(x2 >= 4096){
        n += 12;
        x2 /= 4096;
      }
      while(x2 >= 2){
        n  += 1;
        x2 /= 2;
      } return n;
    };
    
    $export($export.P + $export.F * (!!$toFixed && (
      0.00008.toFixed(3) !== '0.000' ||
      0.9.toFixed(0) !== '1' ||
      1.255.toFixed(2) !== '1.25' ||
      1000000000000000128..toFixed(0) !== '1000000000000000128'
    ) || ! require('core-js/modules/_fails')(function(){
      // V8 ~ Android 4.3-
      $toFixed.call({});
    })), 'Number', {
      toFixed: function toFixed(fractionDigits){
        var x = aNumberValue(this, ERROR)
          , f = toInteger(fractionDigits)
          , s = ''
          , m = ZERO
          , e, z, j, k;
        if(f < 0 || f > 20)throw RangeError(ERROR);
        if(x != x)return 'NaN';
        if(x <= -1e21 || x >= 1e21)return String(x);
        if(x < 0){
          s = '-';
          x = -x;
        }
        if(x > 1e-21){
          e = log(x * pow(2, 69, 1)) - 69;
          z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
          z *= 0x10000000000000;
          e = 52 - e;
          if(e > 0){
            multiply(0, z);
            j = f;
            while(j >= 7){
              multiply(1e7, 0);
              j -= 7;
            }
            multiply(pow(10, j, 1), 0);
            j = e - 1;
            while(j >= 23){
              divide(1 << 23);
              j -= 23;
            }
            divide(1 << j);
            multiply(1, 1);
            divide(2);
            m = numToString();
          } else {
            multiply(0, z);
            multiply(1 << -e, 0);
            m = numToString() + repeat.call(ZERO, f);
          }
        }
        if(f > 0){
          k = m.length;
          m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
        } else {
          m = s + m;
        } return m;
      }
    });
  provide("core-js/modules/es6.number.to-fixed", module.exports);
}(global));

// pakmanager:core-js/modules/es6.number.to-precision
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    var $export      =  require('core-js/modules/_export')
      , $fails       =  require('core-js/modules/_fails')
      , aNumberValue =  require('core-js/modules/_a-number-value')
      , $toPrecision = 1..toPrecision;
    
    $export($export.P + $export.F * ($fails(function(){
      // IE7-
      return $toPrecision.call(1, undefined) !== '1';
    }) || !$fails(function(){
      // V8 ~ Android 4.3-
      $toPrecision.call({});
    })), 'Number', {
      toPrecision: function toPrecision(precision){
        var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
        return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision); 
      }
    });
  provide("core-js/modules/es6.number.to-precision", module.exports);
}(global));

// pakmanager:core-js/modules/es6.number.epsilon
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 20.1.2.1 Number.EPSILON
    var $export =  require('core-js/modules/_export');
    
    $export($export.S, 'Number', {EPSILON: Math.pow(2, -52)});
  provide("core-js/modules/es6.number.epsilon", module.exports);
}(global));

// pakmanager:core-js/modules/es6.number.is-finite
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 20.1.2.2 Number.isFinite(number)
    var $export   =  require('core-js/modules/_export')
      , _isFinite =  require('core-js/modules/_global').isFinite;
    
    $export($export.S, 'Number', {
      isFinite: function isFinite(it){
        return typeof it == 'number' && _isFinite(it);
      }
    });
  provide("core-js/modules/es6.number.is-finite", module.exports);
}(global));

// pakmanager:core-js/modules/es6.number.is-integer
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 20.1.2.3 Number.isInteger(number)
    var $export =  require('core-js/modules/_export');
    
    $export($export.S, 'Number', {isInteger:  require('core-js/modules/_is-integer')});
  provide("core-js/modules/es6.number.is-integer", module.exports);
}(global));

// pakmanager:core-js/modules/es6.number.is-nan
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 20.1.2.4 Number.isNaN(number)
    var $export =  require('core-js/modules/_export');
    
    $export($export.S, 'Number', {
      isNaN: function isNaN(number){
        return number != number;
      }
    });
  provide("core-js/modules/es6.number.is-nan", module.exports);
}(global));

// pakmanager:core-js/modules/es6.number.is-safe-integer
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 20.1.2.5 Number.isSafeInteger(number)
    var $export   =  require('core-js/modules/_export')
      , isInteger =  require('core-js/modules/_is-integer')
      , abs       = Math.abs;
    
    $export($export.S, 'Number', {
      isSafeInteger: function isSafeInteger(number){
        return isInteger(number) && abs(number) <= 0x1fffffffffffff;
      }
    });
  provide("core-js/modules/es6.number.is-safe-integer", module.exports);
}(global));

// pakmanager:core-js/modules/es6.number.max-safe-integer
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 20.1.2.6 Number.MAX_SAFE_INTEGER
    var $export =  require('core-js/modules/_export');
    
    $export($export.S, 'Number', {MAX_SAFE_INTEGER: 0x1fffffffffffff});
  provide("core-js/modules/es6.number.max-safe-integer", module.exports);
}(global));

// pakmanager:core-js/modules/es6.number.min-safe-integer
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 20.1.2.10 Number.MIN_SAFE_INTEGER
    var $export =  require('core-js/modules/_export');
    
    $export($export.S, 'Number', {MIN_SAFE_INTEGER: -0x1fffffffffffff});
  provide("core-js/modules/es6.number.min-safe-integer", module.exports);
}(global));

// pakmanager:core-js/modules/es6.number.parse-float
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var $export     =  require('core-js/modules/_export')
      , $parseFloat =  require('core-js/modules/_parse-float');
    // 20.1.2.12 Number.parseFloat(string)
    $export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', {parseFloat: $parseFloat});
  provide("core-js/modules/es6.number.parse-float", module.exports);
}(global));

// pakmanager:core-js/modules/es6.number.parse-int
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var $export   =  require('core-js/modules/_export')
      , $parseInt =  require('core-js/modules/_parse-int');
    // 20.1.2.13 Number.parseInt(string, radix)
    $export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', {parseInt: $parseInt});
  provide("core-js/modules/es6.number.parse-int", module.exports);
}(global));

// pakmanager:core-js/modules/es6.math.acosh
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 20.2.2.3 Math.acosh(x)
    var $export =  require('core-js/modules/_export')
      , log1p   =  require('core-js/modules/_math-log1p')
      , sqrt    = Math.sqrt
      , $acosh  = Math.acosh;
    
    $export($export.S + $export.F * !($acosh
      // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
      && Math.floor($acosh(Number.MAX_VALUE)) == 710
      // Tor Browser bug: Math.acosh(Infinity) -> NaN 
      && $acosh(Infinity) == Infinity
    ), 'Math', {
      acosh: function acosh(x){
        return (x = +x) < 1 ? NaN : x > 94906265.62425156
          ? Math.log(x) + Math.LN2
          : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
      }
    });
  provide("core-js/modules/es6.math.acosh", module.exports);
}(global));

// pakmanager:core-js/modules/es6.math.asinh
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 20.2.2.5 Math.asinh(x)
    var $export =  require('core-js/modules/_export')
      , $asinh  = Math.asinh;
    
    function asinh(x){
      return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
    }
    
    // Tor Browser bug: Math.asinh(0) -> -0 
    $export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', {asinh: asinh});
  provide("core-js/modules/es6.math.asinh", module.exports);
}(global));

// pakmanager:core-js/modules/es6.math.atanh
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 20.2.2.7 Math.atanh(x)
    var $export =  require('core-js/modules/_export')
      , $atanh  = Math.atanh;
    
    // Tor Browser bug: Math.atanh(-0) -> 0 
    $export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
      atanh: function atanh(x){
        return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
      }
    });
  provide("core-js/modules/es6.math.atanh", module.exports);
}(global));

// pakmanager:core-js/modules/es6.math.cbrt
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 20.2.2.9 Math.cbrt(x)
    var $export =  require('core-js/modules/_export')
      , sign    =  require('core-js/modules/_math-sign');
    
    $export($export.S, 'Math', {
      cbrt: function cbrt(x){
        return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
      }
    });
  provide("core-js/modules/es6.math.cbrt", module.exports);
}(global));

// pakmanager:core-js/modules/es6.math.clz32
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 20.2.2.11 Math.clz32(x)
    var $export =  require('core-js/modules/_export');
    
    $export($export.S, 'Math', {
      clz32: function clz32(x){
        return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
      }
    });
  provide("core-js/modules/es6.math.clz32", module.exports);
}(global));

// pakmanager:core-js/modules/es6.math.cosh
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 20.2.2.12 Math.cosh(x)
    var $export =  require('core-js/modules/_export')
      , exp     = Math.exp;
    
    $export($export.S, 'Math', {
      cosh: function cosh(x){
        return (exp(x = +x) + exp(-x)) / 2;
      }
    });
  provide("core-js/modules/es6.math.cosh", module.exports);
}(global));

// pakmanager:core-js/modules/es6.math.expm1
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 20.2.2.14 Math.expm1(x)
    var $export =  require('core-js/modules/_export')
      , $expm1  =  require('core-js/modules/_math-expm1');
    
    $export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', {expm1: $expm1});
  provide("core-js/modules/es6.math.expm1", module.exports);
}(global));

// pakmanager:core-js/modules/es6.math.fround
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 20.2.2.16 Math.fround(x)
    var $export   =  require('core-js/modules/_export')
      , sign      =  require('core-js/modules/_math-sign')
      , pow       = Math.pow
      , EPSILON   = pow(2, -52)
      , EPSILON32 = pow(2, -23)
      , MAX32     = pow(2, 127) * (2 - EPSILON32)
      , MIN32     = pow(2, -126);
    
    var roundTiesToEven = function(n){
      return n + 1 / EPSILON - 1 / EPSILON;
    };
    
    
    $export($export.S, 'Math', {
      fround: function fround(x){
        var $abs  = Math.abs(x)
          , $sign = sign(x)
          , a, result;
        if($abs < MIN32)return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
        a = (1 + EPSILON32 / EPSILON) * $abs;
        result = a - (a - $abs);
        if(result > MAX32 || result != result)return $sign * Infinity;
        return $sign * result;
      }
    });
  provide("core-js/modules/es6.math.fround", module.exports);
}(global));

// pakmanager:core-js/modules/es6.math.hypot
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
    var $export =  require('core-js/modules/_export')
      , abs     = Math.abs;
    
    $export($export.S, 'Math', {
      hypot: function hypot(value1, value2){ // eslint-disable-line no-unused-vars
        var sum  = 0
          , i    = 0
          , aLen = arguments.length
          , larg = 0
          , arg, div;
        while(i < aLen){
          arg = abs(arguments[i++]);
          if(larg < arg){
            div  = larg / arg;
            sum  = sum * div * div + 1;
            larg = arg;
          } else if(arg > 0){
            div  = arg / larg;
            sum += div * div;
          } else sum += arg;
        }
        return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
      }
    });
  provide("core-js/modules/es6.math.hypot", module.exports);
}(global));

// pakmanager:core-js/modules/es6.math.imul
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 20.2.2.18 Math.imul(x, y)
    var $export =  require('core-js/modules/_export')
      , $imul   = Math.imul;
    
    // some WebKit versions fails with big numbers, some has wrong arity
    $export($export.S + $export.F *  require('core-js/modules/_fails')(function(){
      return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
    }), 'Math', {
      imul: function imul(x, y){
        var UINT16 = 0xffff
          , xn = +x
          , yn = +y
          , xl = UINT16 & xn
          , yl = UINT16 & yn;
        return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
      }
    });
  provide("core-js/modules/es6.math.imul", module.exports);
}(global));

// pakmanager:core-js/modules/es6.math.log10
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 20.2.2.21 Math.log10(x)
    var $export =  require('core-js/modules/_export');
    
    $export($export.S, 'Math', {
      log10: function log10(x){
        return Math.log(x) / Math.LN10;
      }
    });
  provide("core-js/modules/es6.math.log10", module.exports);
}(global));

// pakmanager:core-js/modules/es6.math.log1p
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 20.2.2.20 Math.log1p(x)
    var $export =  require('core-js/modules/_export');
    
    $export($export.S, 'Math', {log1p:  require('core-js/modules/_math-log1p')});
  provide("core-js/modules/es6.math.log1p", module.exports);
}(global));

// pakmanager:core-js/modules/es6.math.log2
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 20.2.2.22 Math.log2(x)
    var $export =  require('core-js/modules/_export');
    
    $export($export.S, 'Math', {
      log2: function log2(x){
        return Math.log(x) / Math.LN2;
      }
    });
  provide("core-js/modules/es6.math.log2", module.exports);
}(global));

// pakmanager:core-js/modules/es6.math.sign
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 20.2.2.28 Math.sign(x)
    var $export =  require('core-js/modules/_export');
    
    $export($export.S, 'Math', {sign:  require('core-js/modules/_math-sign')});
  provide("core-js/modules/es6.math.sign", module.exports);
}(global));

// pakmanager:core-js/modules/es6.math.sinh
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 20.2.2.30 Math.sinh(x)
    var $export =  require('core-js/modules/_export')
      , expm1   =  require('core-js/modules/_math-expm1')
      , exp     = Math.exp;
    
    // V8 near Chromium 38 has a problem with very small numbers
    $export($export.S + $export.F *  require('core-js/modules/_fails')(function(){
      return !Math.sinh(-2e-17) != -2e-17;
    }), 'Math', {
      sinh: function sinh(x){
        return Math.abs(x = +x) < 1
          ? (expm1(x) - expm1(-x)) / 2
          : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
      }
    });
  provide("core-js/modules/es6.math.sinh", module.exports);
}(global));

// pakmanager:core-js/modules/es6.math.tanh
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 20.2.2.33 Math.tanh(x)
    var $export =  require('core-js/modules/_export')
      , expm1   =  require('core-js/modules/_math-expm1')
      , exp     = Math.exp;
    
    $export($export.S, 'Math', {
      tanh: function tanh(x){
        var a = expm1(x = +x)
          , b = expm1(-x);
        return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
      }
    });
  provide("core-js/modules/es6.math.tanh", module.exports);
}(global));

// pakmanager:core-js/modules/es6.math.trunc
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 20.2.2.34 Math.trunc(x)
    var $export =  require('core-js/modules/_export');
    
    $export($export.S, 'Math', {
      trunc: function trunc(it){
        return (it > 0 ? Math.floor : Math.ceil)(it);
      }
    });
  provide("core-js/modules/es6.math.trunc", module.exports);
}(global));

// pakmanager:core-js/modules/es6.string.from-code-point
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var $export        =  require('core-js/modules/_export')
      , toIndex        =  require('core-js/modules/_to-index')
      , fromCharCode   = String.fromCharCode
      , $fromCodePoint = String.fromCodePoint;
    
    // length should be 1, old FF problem
    $export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
      // 21.1.2.2 String.fromCodePoint(...codePoints)
      fromCodePoint: function fromCodePoint(x){ // eslint-disable-line no-unused-vars
        var res  = []
          , aLen = arguments.length
          , i    = 0
          , code;
        while(aLen > i){
          code = +arguments[i++];
          if(toIndex(code, 0x10ffff) !== code)throw RangeError(code + ' is not a valid code point');
          res.push(code < 0x10000
            ? fromCharCode(code)
            : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
          );
        } return res.join('');
      }
    });
  provide("core-js/modules/es6.string.from-code-point", module.exports);
}(global));

// pakmanager:core-js/modules/es6.string.raw
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var $export   =  require('core-js/modules/_export')
      , toIObject =  require('core-js/modules/_to-iobject')
      , toLength  =  require('core-js/modules/_to-length');
    
    $export($export.S, 'String', {
      // 21.1.2.4 String.raw(callSite, ...substitutions)
      raw: function raw(callSite){
        var tpl  = toIObject(callSite.raw)
          , len  = toLength(tpl.length)
          , aLen = arguments.length
          , res  = []
          , i    = 0;
        while(len > i){
          res.push(String(tpl[i++]));
          if(i < aLen)res.push(String(arguments[i]));
        } return res.join('');
      }
    });
  provide("core-js/modules/es6.string.raw", module.exports);
}(global));

// pakmanager:core-js/modules/es6.string.trim
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    // 21.1.3.25 String.prototype.trim()
     require('core-js/modules/_string-trim')('trim', function($trim){
      return function trim(){
        return $trim(this, 3);
      };
    });
  provide("core-js/modules/es6.string.trim", module.exports);
}(global));

// pakmanager:core-js/modules/es6.string.iterator
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    var $at  =  require('core-js/modules/_string-at')(true);
    
    // 21.1.3.27 String.prototype[@@iterator]()
     require('core-js/modules/_iter-define')(String, 'String', function(iterated){
      this._t = String(iterated); // target
      this._i = 0;                // next index
    // 21.1.5.2.1 %StringIteratorPrototype%.next()
    }, function(){
      var O     = this._t
        , index = this._i
        , point;
      if(index >= O.length)return {value: undefined, done: true};
      point = $at(O, index);
      this._i += point.length;
      return {value: point, done: false};
    });
  provide("core-js/modules/es6.string.iterator", module.exports);
}(global));

// pakmanager:core-js/modules/es6.string.code-point-at
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    var $export =  require('core-js/modules/_export')
      , $at     =  require('core-js/modules/_string-at')(false);
    $export($export.P, 'String', {
      // 21.1.3.3 String.prototype.codePointAt(pos)
      codePointAt: function codePointAt(pos){
        return $at(this, pos);
      }
    });
  provide("core-js/modules/es6.string.code-point-at", module.exports);
}(global));

// pakmanager:core-js/modules/es6.string.ends-with
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
    'use strict';
    var $export   =  require('core-js/modules/_export')
      , toLength  =  require('core-js/modules/_to-length')
      , context   =  require('core-js/modules/_string-context')
      , ENDS_WITH = 'endsWith'
      , $endsWith = ''[ENDS_WITH];
    
    $export($export.P + $export.F *  require('core-js/modules/_fails-is-regexp')(ENDS_WITH), 'String', {
      endsWith: function endsWith(searchString /*, endPosition = @length */){
        var that = context(this, searchString, ENDS_WITH)
          , endPosition = arguments.length > 1 ? arguments[1] : undefined
          , len    = toLength(that.length)
          , end    = endPosition === undefined ? len : Math.min(toLength(endPosition), len)
          , search = String(searchString);
        return $endsWith
          ? $endsWith.call(that, search, end)
          : that.slice(end - search.length, end) === search;
      }
    });
  provide("core-js/modules/es6.string.ends-with", module.exports);
}(global));

// pakmanager:core-js/modules/es6.string.includes
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 21.1.3.7 String.prototype.includes(searchString, position = 0)
    'use strict';
    var $export  =  require('core-js/modules/_export')
      , context  =  require('core-js/modules/_string-context')
      , INCLUDES = 'includes';
    
    $export($export.P + $export.F *  require('core-js/modules/_fails-is-regexp')(INCLUDES), 'String', {
      includes: function includes(searchString /*, position = 0 */){
        return !!~context(this, searchString, INCLUDES)
          .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
      }
    });
  provide("core-js/modules/es6.string.includes", module.exports);
}(global));

// pakmanager:core-js/modules/es6.string.repeat
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var $export =  require('core-js/modules/_export');
    
    $export($export.P, 'String', {
      // 21.1.3.13 String.prototype.repeat(count)
      repeat:  require('core-js/modules/_string-repeat')
    });
  provide("core-js/modules/es6.string.repeat", module.exports);
}(global));

// pakmanager:core-js/modules/es6.string.starts-with
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 21.1.3.18 String.prototype.startsWith(searchString [, position ])
    'use strict';
    var $export     =  require('core-js/modules/_export')
      , toLength    =  require('core-js/modules/_to-length')
      , context     =  require('core-js/modules/_string-context')
      , STARTS_WITH = 'startsWith'
      , $startsWith = ''[STARTS_WITH];
    
    $export($export.P + $export.F *  require('core-js/modules/_fails-is-regexp')(STARTS_WITH), 'String', {
      startsWith: function startsWith(searchString /*, position = 0 */){
        var that   = context(this, searchString, STARTS_WITH)
          , index  = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length))
          , search = String(searchString);
        return $startsWith
          ? $startsWith.call(that, search, index)
          : that.slice(index, index + search.length) === search;
      }
    });
  provide("core-js/modules/es6.string.starts-with", module.exports);
}(global));

// pakmanager:core-js/modules/es6.string.anchor
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    // B.2.3.2 String.prototype.anchor(name)
     require('core-js/modules/_string-html')('anchor', function(createHTML){
      return function anchor(name){
        return createHTML(this, 'a', 'name', name);
      }
    });
  provide("core-js/modules/es6.string.anchor", module.exports);
}(global));

// pakmanager:core-js/modules/es6.string.big
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    // B.2.3.3 String.prototype.big()
     require('core-js/modules/_string-html')('big', function(createHTML){
      return function big(){
        return createHTML(this, 'big', '', '');
      }
    });
  provide("core-js/modules/es6.string.big", module.exports);
}(global));

// pakmanager:core-js/modules/es6.string.blink
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    // B.2.3.4 String.prototype.blink()
     require('core-js/modules/_string-html')('blink', function(createHTML){
      return function blink(){
        return createHTML(this, 'blink', '', '');
      }
    });
  provide("core-js/modules/es6.string.blink", module.exports);
}(global));

// pakmanager:core-js/modules/es6.string.bold
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    // B.2.3.5 String.prototype.bold()
     require('core-js/modules/_string-html')('bold', function(createHTML){
      return function bold(){
        return createHTML(this, 'b', '', '');
      }
    });
  provide("core-js/modules/es6.string.bold", module.exports);
}(global));

// pakmanager:core-js/modules/es6.string.fixed
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    // B.2.3.6 String.prototype.fixed()
     require('core-js/modules/_string-html')('fixed', function(createHTML){
      return function fixed(){
        return createHTML(this, 'tt', '', '');
      }
    });
  provide("core-js/modules/es6.string.fixed", module.exports);
}(global));

// pakmanager:core-js/modules/es6.string.fontcolor
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    // B.2.3.7 String.prototype.fontcolor(color)
     require('core-js/modules/_string-html')('fontcolor', function(createHTML){
      return function fontcolor(color){
        return createHTML(this, 'font', 'color', color);
      }
    });
  provide("core-js/modules/es6.string.fontcolor", module.exports);
}(global));

// pakmanager:core-js/modules/es6.string.fontsize
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    // B.2.3.8 String.prototype.fontsize(size)
     require('core-js/modules/_string-html')('fontsize', function(createHTML){
      return function fontsize(size){
        return createHTML(this, 'font', 'size', size);
      }
    });
  provide("core-js/modules/es6.string.fontsize", module.exports);
}(global));

// pakmanager:core-js/modules/es6.string.italics
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    // B.2.3.9 String.prototype.italics()
     require('core-js/modules/_string-html')('italics', function(createHTML){
      return function italics(){
        return createHTML(this, 'i', '', '');
      }
    });
  provide("core-js/modules/es6.string.italics", module.exports);
}(global));

// pakmanager:core-js/modules/es6.string.link
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    // B.2.3.10 String.prototype.link(url)
     require('core-js/modules/_string-html')('link', function(createHTML){
      return function link(url){
        return createHTML(this, 'a', 'href', url);
      }
    });
  provide("core-js/modules/es6.string.link", module.exports);
}(global));

// pakmanager:core-js/modules/es6.string.small
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    // B.2.3.11 String.prototype.small()
     require('core-js/modules/_string-html')('small', function(createHTML){
      return function small(){
        return createHTML(this, 'small', '', '');
      }
    });
  provide("core-js/modules/es6.string.small", module.exports);
}(global));

// pakmanager:core-js/modules/es6.string.strike
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    // B.2.3.12 String.prototype.strike()
     require('core-js/modules/_string-html')('strike', function(createHTML){
      return function strike(){
        return createHTML(this, 'strike', '', '');
      }
    });
  provide("core-js/modules/es6.string.strike", module.exports);
}(global));

// pakmanager:core-js/modules/es6.string.sub
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    // B.2.3.13 String.prototype.sub()
     require('core-js/modules/_string-html')('sub', function(createHTML){
      return function sub(){
        return createHTML(this, 'sub', '', '');
      }
    });
  provide("core-js/modules/es6.string.sub", module.exports);
}(global));

// pakmanager:core-js/modules/es6.string.sup
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    // B.2.3.14 String.prototype.sup()
     require('core-js/modules/_string-html')('sup', function(createHTML){
      return function sup(){
        return createHTML(this, 'sup', '', '');
      }
    });
  provide("core-js/modules/es6.string.sup", module.exports);
}(global));

// pakmanager:core-js/modules/es6.date.now
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 20.3.3.1 / 15.9.4.4 Date.now()
    var $export =  require('core-js/modules/_export');
    
    $export($export.S, 'Date', {now: function(){ return new Date().getTime(); }});
  provide("core-js/modules/es6.date.now", module.exports);
}(global));

// pakmanager:core-js/modules/es6.date.to-json
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    var $export     =  require('core-js/modules/_export')
      , toObject    =  require('core-js/modules/_to-object')
      , toPrimitive =  require('core-js/modules/_to-primitive');
    
    $export($export.P + $export.F *  require('core-js/modules/_fails')(function(){
      return new Date(NaN).toJSON() !== null || Date.prototype.toJSON.call({toISOString: function(){ return 1; }}) !== 1;
    }), 'Date', {
      toJSON: function toJSON(key){
        var O  = toObject(this)
          , pv = toPrimitive(O);
        return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
      }
    });
  provide("core-js/modules/es6.date.to-json", module.exports);
}(global));

// pakmanager:core-js/modules/es6.date.to-iso-string
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    // 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
    var $export =  require('core-js/modules/_export')
      , fails   =  require('core-js/modules/_fails')
      , getTime = Date.prototype.getTime;
    
    var lz = function(num){
      return num > 9 ? num : '0' + num;
    };
    
    // PhantomJS / old WebKit has a broken implementations
    $export($export.P + $export.F * (fails(function(){
      return new Date(-5e13 - 1).toISOString() != '0385-07-25T07:06:39.999Z';
    }) || !fails(function(){
      new Date(NaN).toISOString();
    })), 'Date', {
      toISOString: function toISOString(){
        if(!isFinite(getTime.call(this)))throw RangeError('Invalid time value');
        var d = this
          , y = d.getUTCFullYear()
          , m = d.getUTCMilliseconds()
          , s = y < 0 ? '-' : y > 9999 ? '+' : '';
        return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
          '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
          'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
          ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
      }
    });
  provide("core-js/modules/es6.date.to-iso-string", module.exports);
}(global));

// pakmanager:core-js/modules/es6.date.to-string
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var DateProto    = Date.prototype
      , INVALID_DATE = 'Invalid Date'
      , TO_STRING    = 'toString'
      , $toString    = DateProto[TO_STRING]
      , getTime      = DateProto.getTime;
    if(new Date(NaN) + '' != INVALID_DATE){
       require('core-js/modules/_redefine')(DateProto, TO_STRING, function toString(){
        var value = getTime.call(this);
        return value === value ? $toString.call(this) : INVALID_DATE;
      });
    }
  provide("core-js/modules/es6.date.to-string", module.exports);
}(global));

// pakmanager:core-js/modules/es6.date.to-primitive
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var TO_PRIMITIVE =  require('core-js/modules/_wks')('toPrimitive')
      , proto        = Date.prototype;
    
    if(!(TO_PRIMITIVE in proto)) require('core-js/modules/_hide')(proto, TO_PRIMITIVE,  require('core-js/modules/_date-to-primitive'));
  provide("core-js/modules/es6.date.to-primitive", module.exports);
}(global));

// pakmanager:core-js/modules/es6.array.is-array
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
    var $export =  require('core-js/modules/_export');
    
    $export($export.S, 'Array', {isArray:  require('core-js/modules/_is-array')});
  provide("core-js/modules/es6.array.is-array", module.exports);
}(global));

// pakmanager:core-js/modules/es6.array.from
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    var ctx            =  require('core-js/modules/_ctx')
      , $export        =  require('core-js/modules/_export')
      , toObject       =  require('core-js/modules/_to-object')
      , call           =  require('core-js/modules/_iter-call')
      , isArrayIter    =  require('core-js/modules/_is-array-iter')
      , toLength       =  require('core-js/modules/_to-length')
      , createProperty =  require('core-js/modules/_create-property')
      , getIterFn      =  require('core-js/modules/core.get-iterator-method');
    
    $export($export.S + $export.F * ! require('core-js/modules/_iter-detect')(function(iter){ Array.from(iter); }), 'Array', {
      // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
      from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){
        var O       = toObject(arrayLike)
          , C       = typeof this == 'function' ? this : Array
          , aLen    = arguments.length
          , mapfn   = aLen > 1 ? arguments[1] : undefined
          , mapping = mapfn !== undefined
          , index   = 0
          , iterFn  = getIterFn(O)
          , length, result, step, iterator;
        if(mapping)mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
        // if object isn't iterable or it's array with default iterator - use simple case
        if(iterFn != undefined && !(C == Array && isArrayIter(iterFn))){
          for(iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++){
            createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
          }
        } else {
          length = toLength(O.length);
          for(result = new C(length); length > index; index++){
            createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
          }
        }
        result.length = index;
        return result;
      }
    });
    
  provide("core-js/modules/es6.array.from", module.exports);
}(global));

// pakmanager:core-js/modules/es6.array.of
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    var $export        =  require('core-js/modules/_export')
      , createProperty =  require('core-js/modules/_create-property');
    
    // WebKit Array.of isn't generic
    $export($export.S + $export.F *  require('core-js/modules/_fails')(function(){
      function F(){}
      return !(Array.of.call(F) instanceof F);
    }), 'Array', {
      // 22.1.2.3 Array.of( ...items)
      of: function of(/* ...args */){
        var index  = 0
          , aLen   = arguments.length
          , result = new (typeof this == 'function' ? this : Array)(aLen);
        while(aLen > index)createProperty(result, index, arguments[index++]);
        result.length = aLen;
        return result;
      }
    });
  provide("core-js/modules/es6.array.of", module.exports);
}(global));

// pakmanager:core-js/modules/es6.array.join
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    // 22.1.3.13 Array.prototype.join(separator)
    var $export   =  require('core-js/modules/_export')
      , toIObject =  require('core-js/modules/_to-iobject')
      , arrayJoin = [].join;
    
    // fallback for not array-like strings
    $export($export.P + $export.F * ( require('core-js/modules/_iobject') != Object || ! require('core-js/modules/_strict-method')(arrayJoin)), 'Array', {
      join: function join(separator){
        return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
      }
    });
  provide("core-js/modules/es6.array.join", module.exports);
}(global));

// pakmanager:core-js/modules/es6.array.slice
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    var $export    =  require('core-js/modules/_export')
      , html       =  require('core-js/modules/_html')
      , cof        =  require('core-js/modules/_cof')
      , toIndex    =  require('core-js/modules/_to-index')
      , toLength   =  require('core-js/modules/_to-length')
      , arraySlice = [].slice;
    
    // fallback for not array-like ES3 strings and DOM objects
    $export($export.P + $export.F *  require('core-js/modules/_fails')(function(){
      if(html)arraySlice.call(html);
    }), 'Array', {
      slice: function slice(begin, end){
        var len   = toLength(this.length)
          , klass = cof(this);
        end = end === undefined ? len : end;
        if(klass == 'Array')return arraySlice.call(this, begin, end);
        var start  = toIndex(begin, len)
          , upTo   = toIndex(end, len)
          , size   = toLength(upTo - start)
          , cloned = Array(size)
          , i      = 0;
        for(; i < size; i++)cloned[i] = klass == 'String'
          ? this.charAt(start + i)
          : this[start + i];
        return cloned;
      }
    });
  provide("core-js/modules/es6.array.slice", module.exports);
}(global));

// pakmanager:core-js/modules/es6.array.sort
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    var $export   =  require('core-js/modules/_export')
      , aFunction =  require('core-js/modules/_a-function')
      , toObject  =  require('core-js/modules/_to-object')
      , fails     =  require('core-js/modules/_fails')
      , $sort     = [].sort
      , test      = [1, 2, 3];
    
    $export($export.P + $export.F * (fails(function(){
      // IE8-
      test.sort(undefined);
    }) || !fails(function(){
      // V8 bug
      test.sort(null);
      // Old WebKit
    }) || ! require('core-js/modules/_strict-method')($sort)), 'Array', {
      // 22.1.3.25 Array.prototype.sort(comparefn)
      sort: function sort(comparefn){
        return comparefn === undefined
          ? $sort.call(toObject(this))
          : $sort.call(toObject(this), aFunction(comparefn));
      }
    });
  provide("core-js/modules/es6.array.sort", module.exports);
}(global));

// pakmanager:core-js/modules/es6.array.for-each
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    var $export  =  require('core-js/modules/_export')
      , $forEach =  require('core-js/modules/_array-methods')(0)
      , STRICT   =  require('core-js/modules/_strict-method')([].forEach, true);
    
    $export($export.P + $export.F * !STRICT, 'Array', {
      // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
      forEach: function forEach(callbackfn /* , thisArg */){
        return $forEach(this, callbackfn, arguments[1]);
      }
    });
  provide("core-js/modules/es6.array.for-each", module.exports);
}(global));

// pakmanager:core-js/modules/es6.array.map
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    var $export =  require('core-js/modules/_export')
      , $map    =  require('core-js/modules/_array-methods')(1);
    
    $export($export.P + $export.F * ! require('core-js/modules/_strict-method')([].map, true), 'Array', {
      // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
      map: function map(callbackfn /* , thisArg */){
        return $map(this, callbackfn, arguments[1]);
      }
    });
  provide("core-js/modules/es6.array.map", module.exports);
}(global));

// pakmanager:core-js/modules/es6.array.filter
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    var $export =  require('core-js/modules/_export')
      , $filter =  require('core-js/modules/_array-methods')(2);
    
    $export($export.P + $export.F * ! require('core-js/modules/_strict-method')([].filter, true), 'Array', {
      // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
      filter: function filter(callbackfn /* , thisArg */){
        return $filter(this, callbackfn, arguments[1]);
      }
    });
  provide("core-js/modules/es6.array.filter", module.exports);
}(global));

// pakmanager:core-js/modules/es6.array.some
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    var $export =  require('core-js/modules/_export')
      , $some   =  require('core-js/modules/_array-methods')(3);
    
    $export($export.P + $export.F * ! require('core-js/modules/_strict-method')([].some, true), 'Array', {
      // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
      some: function some(callbackfn /* , thisArg */){
        return $some(this, callbackfn, arguments[1]);
      }
    });
  provide("core-js/modules/es6.array.some", module.exports);
}(global));

// pakmanager:core-js/modules/es6.array.every
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    var $export =  require('core-js/modules/_export')
      , $every  =  require('core-js/modules/_array-methods')(4);
    
    $export($export.P + $export.F * ! require('core-js/modules/_strict-method')([].every, true), 'Array', {
      // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
      every: function every(callbackfn /* , thisArg */){
        return $every(this, callbackfn, arguments[1]);
      }
    });
  provide("core-js/modules/es6.array.every", module.exports);
}(global));

// pakmanager:core-js/modules/es6.array.reduce
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    var $export =  require('core-js/modules/_export')
      , $reduce =  require('core-js/modules/_array-reduce');
    
    $export($export.P + $export.F * ! require('core-js/modules/_strict-method')([].reduce, true), 'Array', {
      // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
      reduce: function reduce(callbackfn /* , initialValue */){
        return $reduce(this, callbackfn, arguments.length, arguments[1], false);
      }
    });
  provide("core-js/modules/es6.array.reduce", module.exports);
}(global));

// pakmanager:core-js/modules/es6.array.reduce-right
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    var $export =  require('core-js/modules/_export')
      , $reduce =  require('core-js/modules/_array-reduce');
    
    $export($export.P + $export.F * ! require('core-js/modules/_strict-method')([].reduceRight, true), 'Array', {
      // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
      reduceRight: function reduceRight(callbackfn /* , initialValue */){
        return $reduce(this, callbackfn, arguments.length, arguments[1], true);
      }
    });
  provide("core-js/modules/es6.array.reduce-right", module.exports);
}(global));

// pakmanager:core-js/modules/es6.array.index-of
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    var $export       =  require('core-js/modules/_export')
      , $indexOf      =  require('core-js/modules/_array-includes')(false)
      , $native       = [].indexOf
      , NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;
    
    $export($export.P + $export.F * (NEGATIVE_ZERO || ! require('core-js/modules/_strict-method')($native)), 'Array', {
      // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
      indexOf: function indexOf(searchElement /*, fromIndex = 0 */){
        return NEGATIVE_ZERO
          // convert -0 to +0
          ? $native.apply(this, arguments) || 0
          : $indexOf(this, searchElement, arguments[1]);
      }
    });
  provide("core-js/modules/es6.array.index-of", module.exports);
}(global));

// pakmanager:core-js/modules/es6.array.last-index-of
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    var $export       =  require('core-js/modules/_export')
      , toIObject     =  require('core-js/modules/_to-iobject')
      , toInteger     =  require('core-js/modules/_to-integer')
      , toLength      =  require('core-js/modules/_to-length')
      , $native       = [].lastIndexOf
      , NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;
    
    $export($export.P + $export.F * (NEGATIVE_ZERO || ! require('core-js/modules/_strict-method')($native)), 'Array', {
      // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
      lastIndexOf: function lastIndexOf(searchElement /*, fromIndex = @[*-1] */){
        // convert -0 to +0
        if(NEGATIVE_ZERO)return $native.apply(this, arguments) || 0;
        var O      = toIObject(this)
          , length = toLength(O.length)
          , index  = length - 1;
        if(arguments.length > 1)index = Math.min(index, toInteger(arguments[1]));
        if(index < 0)index = length + index;
        for(;index >= 0; index--)if(index in O)if(O[index] === searchElement)return index || 0;
        return -1;
      }
    });
  provide("core-js/modules/es6.array.last-index-of", module.exports);
}(global));

// pakmanager:core-js/modules/es6.array.copy-within
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
    var $export =  require('core-js/modules/_export');
    
    $export($export.P, 'Array', {copyWithin:  require('core-js/modules/_array-copy-within')});
    
     require('core-js/modules/_add-to-unscopables')('copyWithin');
  provide("core-js/modules/es6.array.copy-within", module.exports);
}(global));

// pakmanager:core-js/modules/es6.array.fill
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
    var $export =  require('core-js/modules/_export');
    
    $export($export.P, 'Array', {fill:  require('core-js/modules/_array-fill')});
    
     require('core-js/modules/_add-to-unscopables')('fill');
  provide("core-js/modules/es6.array.fill", module.exports);
}(global));

// pakmanager:core-js/modules/es6.array.find
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    // 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
    var $export =  require('core-js/modules/_export')
      , $find   =  require('core-js/modules/_array-methods')(5)
      , KEY     = 'find'
      , forced  = true;
    // Shouldn't skip holes
    if(KEY in [])Array(1)[KEY](function(){ forced = false; });
    $export($export.P + $export.F * forced, 'Array', {
      find: function find(callbackfn/*, that = undefined */){
        return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
      }
    });
     require('core-js/modules/_add-to-unscopables')(KEY);
  provide("core-js/modules/es6.array.find", module.exports);
}(global));

// pakmanager:core-js/modules/es6.array.find-index
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    // 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
    var $export =  require('core-js/modules/_export')
      , $find   =  require('core-js/modules/_array-methods')(6)
      , KEY     = 'findIndex'
      , forced  = true;
    // Shouldn't skip holes
    if(KEY in [])Array(1)[KEY](function(){ forced = false; });
    $export($export.P + $export.F * forced, 'Array', {
      findIndex: function findIndex(callbackfn/*, that = undefined */){
        return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
      }
    });
     require('core-js/modules/_add-to-unscopables')(KEY);
  provide("core-js/modules/es6.array.find-index", module.exports);
}(global));

// pakmanager:core-js/modules/es6.array.species
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
   require('core-js/modules/_set-species')('Array');
  provide("core-js/modules/es6.array.species", module.exports);
}(global));

// pakmanager:core-js/modules/es6.regexp.constructor
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var global            =  require('core-js/modules/_global')
      , inheritIfRequired =  require('core-js/modules/_inherit-if-required')
      , dP                =  require('core-js/modules/_object-dp').f
      , gOPN              =  require('core-js/modules/_object-gopn').f
      , isRegExp          =  require('core-js/modules/_is-regexp')
      , $flags            =  require('core-js/modules/_flags')
      , $RegExp           = global.RegExp
      , Base              = $RegExp
      , proto             = $RegExp.prototype
      , re1               = /a/g
      , re2               = /a/g
      // "new" creates a new object, old webkit buggy here
      , CORRECT_NEW       = new $RegExp(re1) !== re1;
    
    if( require('core-js/modules/_descriptors') && (!CORRECT_NEW ||  require('core-js/modules/_fails')(function(){
      re2[ require('core-js/modules/_wks')('match')] = false;
      // RegExp constructor can alter flags and IsRegExp works correct with @@match
      return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
    }))){
      $RegExp = function RegExp(p, f){
        var tiRE = this instanceof $RegExp
          , piRE = isRegExp(p)
          , fiU  = f === undefined;
        return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
          : inheritIfRequired(CORRECT_NEW
            ? new Base(piRE && !fiU ? p.source : p, f)
            : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
          , tiRE ? this : proto, $RegExp);
      };
      var proxy = function(key){
        key in $RegExp || dP($RegExp, key, {
          configurable: true,
          get: function(){ return Base[key]; },
          set: function(it){ Base[key] = it; }
        });
      };
      for(var keys = gOPN(Base), i = 0; keys.length > i; )proxy(keys[i++]);
      proto.constructor = $RegExp;
      $RegExp.prototype = proto;
       require('core-js/modules/_redefine')(global, 'RegExp', $RegExp);
    }
    
     require('core-js/modules/_set-species')('RegExp');
  provide("core-js/modules/es6.regexp.constructor", module.exports);
}(global));

// pakmanager:core-js/modules/es6.regexp.to-string
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
     require('core-js/modules/es6.regexp.flags');
    var anObject    =  require('core-js/modules/_an-object')
      , $flags      =  require('core-js/modules/_flags')
      , DESCRIPTORS =  require('core-js/modules/_descriptors')
      , TO_STRING   = 'toString'
      , $toString   = /./[TO_STRING];
    
    var define = function(fn){
       require('core-js/modules/_redefine')(RegExp.prototype, TO_STRING, fn, true);
    };
    
    // 21.2.5.14 RegExp.prototype.toString()
    if( require('core-js/modules/_fails')(function(){ return $toString.call({source: 'a', flags: 'b'}) != '/a/b'; })){
      define(function toString(){
        var R = anObject(this);
        return '/'.concat(R.source, '/',
          'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
      });
    // FF44- RegExp#toString has a wrong name
    } else if($toString.name != TO_STRING){
      define(function toString(){
        return $toString.call(this);
      });
    }
  provide("core-js/modules/es6.regexp.to-string", module.exports);
}(global));

// pakmanager:core-js/modules/es6.regexp.match
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // @@match logic
     require('core-js/modules/_fix-re-wks')('match', 1, function(defined, MATCH, $match){
      // 21.1.3.11 String.prototype.match(regexp)
      return [function match(regexp){
        'use strict';
        var O  = defined(this)
          , fn = regexp == undefined ? undefined : regexp[MATCH];
        return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
      }, $match];
    });
  provide("core-js/modules/es6.regexp.match", module.exports);
}(global));

// pakmanager:core-js/modules/es6.regexp.replace
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // @@replace logic
     require('core-js/modules/_fix-re-wks')('replace', 2, function(defined, REPLACE, $replace){
      // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
      return [function replace(searchValue, replaceValue){
        'use strict';
        var O  = defined(this)
          , fn = searchValue == undefined ? undefined : searchValue[REPLACE];
        return fn !== undefined
          ? fn.call(searchValue, O, replaceValue)
          : $replace.call(String(O), searchValue, replaceValue);
      }, $replace];
    });
  provide("core-js/modules/es6.regexp.replace", module.exports);
}(global));

// pakmanager:core-js/modules/es6.regexp.search
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // @@search logic
     require('core-js/modules/_fix-re-wks')('search', 1, function(defined, SEARCH, $search){
      // 21.1.3.15 String.prototype.search(regexp)
      return [function search(regexp){
        'use strict';
        var O  = defined(this)
          , fn = regexp == undefined ? undefined : regexp[SEARCH];
        return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
      }, $search];
    });
  provide("core-js/modules/es6.regexp.search", module.exports);
}(global));

// pakmanager:core-js/modules/es6.regexp.split
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // @@split logic
     require('core-js/modules/_fix-re-wks')('split', 2, function(defined, SPLIT, $split){
      'use strict';
      var isRegExp   =  require('core-js/modules/_is-regexp')
        , _split     = $split
        , $push      = [].push
        , $SPLIT     = 'split'
        , LENGTH     = 'length'
        , LAST_INDEX = 'lastIndex';
      if(
        'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
        'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
        'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
        '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
        '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
        ''[$SPLIT](/.?/)[LENGTH]
      ){
        var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group
        // based on es5-shim implementation, need to rework it
        $split = function(separator, limit){
          var string = String(this);
          if(separator === undefined && limit === 0)return [];
          // If `separator` is not a regex, use native split
          if(!isRegExp(separator))return _split.call(string, separator, limit);
          var output = [];
          var flags = (separator.ignoreCase ? 'i' : '') +
                      (separator.multiline ? 'm' : '') +
                      (separator.unicode ? 'u' : '') +
                      (separator.sticky ? 'y' : '');
          var lastLastIndex = 0;
          var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;
          // Make `global` and avoid `lastIndex` issues by working with a copy
          var separatorCopy = new RegExp(separator.source, flags + 'g');
          var separator2, match, lastIndex, lastLength, i;
          // Doesn't need flags gy, but they don't hurt
          if(!NPCG)separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);
          while(match = separatorCopy.exec(string)){
            // `separatorCopy.lastIndex` is not reliable cross-browser
            lastIndex = match.index + match[0][LENGTH];
            if(lastIndex > lastLastIndex){
              output.push(string.slice(lastLastIndex, match.index));
              // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG
              if(!NPCG && match[LENGTH] > 1)match[0].replace(separator2, function(){
                for(i = 1; i < arguments[LENGTH] - 2; i++)if(arguments[i] === undefined)match[i] = undefined;
              });
              if(match[LENGTH] > 1 && match.index < string[LENGTH])$push.apply(output, match.slice(1));
              lastLength = match[0][LENGTH];
              lastLastIndex = lastIndex;
              if(output[LENGTH] >= splitLimit)break;
            }
            if(separatorCopy[LAST_INDEX] === match.index)separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
          }
          if(lastLastIndex === string[LENGTH]){
            if(lastLength || !separatorCopy.test(''))output.push('');
          } else output.push(string.slice(lastLastIndex));
          return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
        };
      // Chakra, V8
      } else if('0'[$SPLIT](undefined, 0)[LENGTH]){
        $split = function(separator, limit){
          return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);
        };
      }
      // 21.1.3.17 String.prototype.split(separator, limit)
      return [function split(separator, limit){
        var O  = defined(this)
          , fn = separator == undefined ? undefined : separator[SPLIT];
        return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);
      }, $split];
    });
  provide("core-js/modules/es6.regexp.split", module.exports);
}(global));

// pakmanager:core-js/modules/es6.promise
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    var LIBRARY            =  require('core-js/modules/_library')
      , global             =  require('core-js/modules/_global')
      , ctx                =  require('core-js/modules/_ctx')
      , classof            =  require('core-js/modules/_classof')
      , $export            =  require('core-js/modules/_export')
      , isObject           =  require('core-js/modules/_is-object')
      , anObject           =  require('core-js/modules/_an-object')
      , aFunction          =  require('core-js/modules/_a-function')
      , anInstance         =  require('core-js/modules/_an-instance')
      , forOf              =  require('core-js/modules/_for-of')
      , setProto           =  require('core-js/modules/_set-proto').set
      , speciesConstructor =  require('core-js/modules/_species-constructor')
      , task               =  require('core-js/modules/_task').set
      , microtask          =  require('core-js/modules/_microtask')()
      , PROMISE            = 'Promise'
      , TypeError          = global.TypeError
      , process            = global.process
      , $Promise           = global[PROMISE]
      , process            = global.process
      , isNode             = classof(process) == 'process'
      , empty              = function(){ /* empty */ }
      , Internal, GenericPromiseCapability, Wrapper;
    
    var USE_NATIVE = !!function(){
      try {
        // correct subclassing with @@species support
        var promise     = $Promise.resolve(1)
          , FakePromise = (promise.constructor = {})[ require('core-js/modules/_wks')('species')] = function(exec){ exec(empty, empty); };
        // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
        return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
      } catch(e){ /* empty */ }
    }();
    
    // helpers
    var sameConstructor = function(a, b){
      // with library wrapper special case
      return a === b || a === $Promise && b === Wrapper;
    };
    var isThenable = function(it){
      var then;
      return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
    };
    var newPromiseCapability = function(C){
      return sameConstructor($Promise, C)
        ? new PromiseCapability(C)
        : new GenericPromiseCapability(C);
    };
    var PromiseCapability = GenericPromiseCapability = function(C){
      var resolve, reject;
      this.promise = new C(function($$resolve, $$reject){
        if(resolve !== undefined || reject !== undefined)throw TypeError('Bad Promise constructor');
        resolve = $$resolve;
        reject  = $$reject;
      });
      this.resolve = aFunction(resolve);
      this.reject  = aFunction(reject);
    };
    var perform = function(exec){
      try {
        exec();
      } catch(e){
        return {error: e};
      }
    };
    var notify = function(promise, isReject){
      if(promise._n)return;
      promise._n = true;
      var chain = promise._c;
      microtask(function(){
        var value = promise._v
          , ok    = promise._s == 1
          , i     = 0;
        var run = function(reaction){
          var handler = ok ? reaction.ok : reaction.fail
            , resolve = reaction.resolve
            , reject  = reaction.reject
            , domain  = reaction.domain
            , result, then;
          try {
            if(handler){
              if(!ok){
                if(promise._h == 2)onHandleUnhandled(promise);
                promise._h = 1;
              }
              if(handler === true)result = value;
              else {
                if(domain)domain.enter();
                result = handler(value);
                if(domain)domain.exit();
              }
              if(result === reaction.promise){
                reject(TypeError('Promise-chain cycle'));
              } else if(then = isThenable(result)){
                then.call(result, resolve, reject);
              } else resolve(result);
            } else reject(value);
          } catch(e){
            reject(e);
          }
        };
        while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
        promise._c = [];
        promise._n = false;
        if(isReject && !promise._h)onUnhandled(promise);
      });
    };
    var onUnhandled = function(promise){
      task.call(global, function(){
        var value = promise._v
          , abrupt, handler, console;
        if(isUnhandled(promise)){
          abrupt = perform(function(){
            if(isNode){
              process.emit('unhandledRejection', value, promise);
            } else if(handler = global.onunhandledrejection){
              handler({promise: promise, reason: value});
            } else if((console = global.console) && console.error){
              console.error('Unhandled promise rejection', value);
            }
          });
          // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
          promise._h = isNode || isUnhandled(promise) ? 2 : 1;
        } promise._a = undefined;
        if(abrupt)throw abrupt.error;
      });
    };
    var isUnhandled = function(promise){
      if(promise._h == 1)return false;
      var chain = promise._a || promise._c
        , i     = 0
        , reaction;
      while(chain.length > i){
        reaction = chain[i++];
        if(reaction.fail || !isUnhandled(reaction.promise))return false;
      } return true;
    };
    var onHandleUnhandled = function(promise){
      task.call(global, function(){
        var handler;
        if(isNode){
          process.emit('rejectionHandled', promise);
        } else if(handler = global.onrejectionhandled){
          handler({promise: promise, reason: promise._v});
        }
      });
    };
    var $reject = function(value){
      var promise = this;
      if(promise._d)return;
      promise._d = true;
      promise = promise._w || promise; // unwrap
      promise._v = value;
      promise._s = 2;
      if(!promise._a)promise._a = promise._c.slice();
      notify(promise, true);
    };
    var $resolve = function(value){
      var promise = this
        , then;
      if(promise._d)return;
      promise._d = true;
      promise = promise._w || promise; // unwrap
      try {
        if(promise === value)throw TypeError("Promise can't be resolved itself");
        if(then = isThenable(value)){
          microtask(function(){
            var wrapper = {_w: promise, _d: false}; // wrap
            try {
              then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
            } catch(e){
              $reject.call(wrapper, e);
            }
          });
        } else {
          promise._v = value;
          promise._s = 1;
          notify(promise, false);
        }
      } catch(e){
        $reject.call({_w: promise, _d: false}, e); // wrap
      }
    };
    
    // constructor polyfill
    if(!USE_NATIVE){
      // 25.4.3.1 Promise(executor)
      $Promise = function Promise(executor){
        anInstance(this, $Promise, PROMISE, '_h');
        aFunction(executor);
        Internal.call(this);
        try {
          executor(ctx($resolve, this, 1), ctx($reject, this, 1));
        } catch(err){
          $reject.call(this, err);
        }
      };
      Internal = function Promise(executor){
        this._c = [];             // <- awaiting reactions
        this._a = undefined;      // <- checked in isUnhandled reactions
        this._s = 0;              // <- state
        this._d = false;          // <- done
        this._v = undefined;      // <- value
        this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
        this._n = false;          // <- notify
      };
      Internal.prototype =  require('core-js/modules/_redefine-all')($Promise.prototype, {
        // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
        then: function then(onFulfilled, onRejected){
          var reaction    = newPromiseCapability(speciesConstructor(this, $Promise));
          reaction.ok     = typeof onFulfilled == 'function' ? onFulfilled : true;
          reaction.fail   = typeof onRejected == 'function' && onRejected;
          reaction.domain = isNode ? process.domain : undefined;
          this._c.push(reaction);
          if(this._a)this._a.push(reaction);
          if(this._s)notify(this, false);
          return reaction.promise;
        },
        // 25.4.5.1 Promise.prototype.catch(onRejected)
        'catch': function(onRejected){
          return this.then(undefined, onRejected);
        }
      });
      PromiseCapability = function(){
        var promise  = new Internal;
        this.promise = promise;
        this.resolve = ctx($resolve, promise, 1);
        this.reject  = ctx($reject, promise, 1);
      };
    }
    
    $export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: $Promise});
     require('core-js/modules/_set-to-string-tag')($Promise, PROMISE);
     require('core-js/modules/_set-species')(PROMISE);
    Wrapper =  require('core-js/modules/_core')[PROMISE];
    
    // statics
    $export($export.S + $export.F * !USE_NATIVE, PROMISE, {
      // 25.4.4.5 Promise.reject(r)
      reject: function reject(r){
        var capability = newPromiseCapability(this)
          , $$reject   = capability.reject;
        $$reject(r);
        return capability.promise;
      }
    });
    $export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
      // 25.4.4.6 Promise.resolve(x)
      resolve: function resolve(x){
        // instanceof instead of internal slot check because we should fix it without replacement native Promise core
        if(x instanceof $Promise && sameConstructor(x.constructor, this))return x;
        var capability = newPromiseCapability(this)
          , $$resolve  = capability.resolve;
        $$resolve(x);
        return capability.promise;
      }
    });
    $export($export.S + $export.F * !(USE_NATIVE &&  require('core-js/modules/_iter-detect')(function(iter){
      $Promise.all(iter)['catch'](empty);
    })), PROMISE, {
      // 25.4.4.1 Promise.all(iterable)
      all: function all(iterable){
        var C          = this
          , capability = newPromiseCapability(C)
          , resolve    = capability.resolve
          , reject     = capability.reject;
        var abrupt = perform(function(){
          var values    = []
            , index     = 0
            , remaining = 1;
          forOf(iterable, false, function(promise){
            var $index        = index++
              , alreadyCalled = false;
            values.push(undefined);
            remaining++;
            C.resolve(promise).then(function(value){
              if(alreadyCalled)return;
              alreadyCalled  = true;
              values[$index] = value;
              --remaining || resolve(values);
            }, reject);
          });
          --remaining || resolve(values);
        });
        if(abrupt)reject(abrupt.error);
        return capability.promise;
      },
      // 25.4.4.4 Promise.race(iterable)
      race: function race(iterable){
        var C          = this
          , capability = newPromiseCapability(C)
          , reject     = capability.reject;
        var abrupt = perform(function(){
          forOf(iterable, false, function(promise){
            C.resolve(promise).then(capability.resolve, reject);
          });
        });
        if(abrupt)reject(abrupt.error);
        return capability.promise;
      }
    });
  provide("core-js/modules/es6.promise", module.exports);
}(global));

// pakmanager:core-js/modules/es6.weak-set
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    var weak =  require('core-js/modules/_collection-weak');
    
    // 23.4 WeakSet Objects
     require('core-js/modules/_collection')('WeakSet', function(get){
      return function WeakSet(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
    }, {
      // 23.4.3.1 WeakSet.prototype.add(value)
      add: function add(value){
        return weak.def(this, value, true);
      }
    }, weak, false, true);
  provide("core-js/modules/es6.weak-set", module.exports);
}(global));

// pakmanager:core-js/modules/es6.typed.array-buffer
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    var $export      =  require('core-js/modules/_export')
      , $typed       =  require('core-js/modules/_typed')
      , buffer       =  require('core-js/modules/_typed-buffer')
      , anObject     =  require('core-js/modules/_an-object')
      , toIndex      =  require('core-js/modules/_to-index')
      , toLength     =  require('core-js/modules/_to-length')
      , isObject     =  require('core-js/modules/_is-object')
      , TYPED_ARRAY  =  require('core-js/modules/_wks')('typed_array')
      , ArrayBuffer  =  require('core-js/modules/_global').ArrayBuffer
      , speciesConstructor =  require('core-js/modules/_species-constructor')
      , $ArrayBuffer = buffer.ArrayBuffer
      , $DataView    = buffer.DataView
      , $isView      = $typed.ABV && ArrayBuffer.isView
      , $slice       = $ArrayBuffer.prototype.slice
      , VIEW         = $typed.VIEW
      , ARRAY_BUFFER = 'ArrayBuffer';
    
    $export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), {ArrayBuffer: $ArrayBuffer});
    
    $export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
      // 24.1.3.1 ArrayBuffer.isView(arg)
      isView: function isView(it){
        return $isView && $isView(it) || isObject(it) && VIEW in it;
      }
    });
    
    $export($export.P + $export.U + $export.F *  require('core-js/modules/_fails')(function(){
      return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
    }), ARRAY_BUFFER, {
      // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
      slice: function slice(start, end){
        if($slice !== undefined && end === undefined)return $slice.call(anObject(this), start); // FF fix
        var len    = anObject(this).byteLength
          , first  = toIndex(start, len)
          , final  = toIndex(end === undefined ? len : end, len)
          , result = new (speciesConstructor(this, $ArrayBuffer))(toLength(final - first))
          , viewS  = new $DataView(this)
          , viewT  = new $DataView(result)
          , index  = 0;
        while(first < final){
          viewT.setUint8(index++, viewS.getUint8(first++));
        } return result;
      }
    });
    
     require('core-js/modules/_set-species')(ARRAY_BUFFER);
  provide("core-js/modules/es6.typed.array-buffer", module.exports);
}(global));

// pakmanager:core-js/modules/es6.typed.data-view
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var $export =  require('core-js/modules/_export');
    $export($export.G + $export.W + $export.F * ! require('core-js/modules/_typed').ABV, {
      DataView:  require('core-js/modules/_typed-buffer').DataView
    });
  provide("core-js/modules/es6.typed.data-view", module.exports);
}(global));

// pakmanager:core-js/modules/es6.typed.int8-array
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
   require('core-js/modules/_typed-array')('Int8', 1, function(init){
      return function Int8Array(data, byteOffset, length){
        return init(this, data, byteOffset, length);
      };
    });
  provide("core-js/modules/es6.typed.int8-array", module.exports);
}(global));

// pakmanager:core-js/modules/es6.typed.uint8-array
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
   require('core-js/modules/_typed-array')('Uint8', 1, function(init){
      return function Uint8Array(data, byteOffset, length){
        return init(this, data, byteOffset, length);
      };
    });
  provide("core-js/modules/es6.typed.uint8-array", module.exports);
}(global));

// pakmanager:core-js/modules/es6.typed.uint8-clamped-array
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
   require('core-js/modules/_typed-array')('Uint8', 1, function(init){
      return function Uint8ClampedArray(data, byteOffset, length){
        return init(this, data, byteOffset, length);
      };
    }, true);
  provide("core-js/modules/es6.typed.uint8-clamped-array", module.exports);
}(global));

// pakmanager:core-js/modules/es6.typed.int16-array
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
   require('core-js/modules/_typed-array')('Int16', 2, function(init){
      return function Int16Array(data, byteOffset, length){
        return init(this, data, byteOffset, length);
      };
    });
  provide("core-js/modules/es6.typed.int16-array", module.exports);
}(global));

// pakmanager:core-js/modules/es6.typed.uint16-array
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
   require('core-js/modules/_typed-array')('Uint16', 2, function(init){
      return function Uint16Array(data, byteOffset, length){
        return init(this, data, byteOffset, length);
      };
    });
  provide("core-js/modules/es6.typed.uint16-array", module.exports);
}(global));

// pakmanager:core-js/modules/es6.typed.int32-array
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
   require('core-js/modules/_typed-array')('Int32', 4, function(init){
      return function Int32Array(data, byteOffset, length){
        return init(this, data, byteOffset, length);
      };
    });
  provide("core-js/modules/es6.typed.int32-array", module.exports);
}(global));

// pakmanager:core-js/modules/es6.typed.uint32-array
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
   require('core-js/modules/_typed-array')('Uint32', 4, function(init){
      return function Uint32Array(data, byteOffset, length){
        return init(this, data, byteOffset, length);
      };
    });
  provide("core-js/modules/es6.typed.uint32-array", module.exports);
}(global));

// pakmanager:core-js/modules/es6.typed.float32-array
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
   require('core-js/modules/_typed-array')('Float32', 4, function(init){
      return function Float32Array(data, byteOffset, length){
        return init(this, data, byteOffset, length);
      };
    });
  provide("core-js/modules/es6.typed.float32-array", module.exports);
}(global));

// pakmanager:core-js/modules/es6.typed.float64-array
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
   require('core-js/modules/_typed-array')('Float64', 8, function(init){
      return function Float64Array(data, byteOffset, length){
        return init(this, data, byteOffset, length);
      };
    });
  provide("core-js/modules/es6.typed.float64-array", module.exports);
}(global));

// pakmanager:core-js/modules/es6.reflect.apply
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
    var $export   =  require('core-js/modules/_export')
      , aFunction =  require('core-js/modules/_a-function')
      , anObject  =  require('core-js/modules/_an-object')
      , _apply    = Function.apply;
    
    $export($export.S, 'Reflect', {
      apply: function apply(target, thisArgument, argumentsList){
        return _apply.call(aFunction(target), thisArgument, anObject(argumentsList));
      }
    });
  provide("core-js/modules/es6.reflect.apply", module.exports);
}(global));

// pakmanager:core-js/modules/es6.reflect.construct
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
    var $export   =  require('core-js/modules/_export')
      , create    =  require('core-js/modules/_object-create')
      , aFunction =  require('core-js/modules/_a-function')
      , anObject  =  require('core-js/modules/_an-object')
      , isObject  =  require('core-js/modules/_is-object')
      , bind      =  require('core-js/modules/_bind');
    
    // MS Edge supports only 2 arguments
    // FF Nightly sets third argument as `new.target`, but does not create `this` from it
    $export($export.S + $export.F *  require('core-js/modules/_fails')(function(){
      function F(){}
      return !(Reflect.construct(function(){}, [], F) instanceof F);
    }), 'Reflect', {
      construct: function construct(Target, args /*, newTarget*/){
        aFunction(Target);
        anObject(args);
        var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
        if(Target == newTarget){
          // w/o altered newTarget, optimization for 0-4 arguments
          switch(args.length){
            case 0: return new Target;
            case 1: return new Target(args[0]);
            case 2: return new Target(args[0], args[1]);
            case 3: return new Target(args[0], args[1], args[2]);
            case 4: return new Target(args[0], args[1], args[2], args[3]);
          }
          // w/o altered newTarget, lot of arguments case
          var $args = [null];
          $args.push.apply($args, args);
          return new (bind.apply(Target, $args));
        }
        // with altered newTarget, not support built-in constructors
        var proto    = newTarget.prototype
          , instance = create(isObject(proto) ? proto : Object.prototype)
          , result   = Function.apply.call(Target, instance, args);
        return isObject(result) ? result : instance;
      }
    });
  provide("core-js/modules/es6.reflect.construct", module.exports);
}(global));

// pakmanager:core-js/modules/es6.reflect.define-property
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
    var dP          =  require('core-js/modules/_object-dp')
      , $export     =  require('core-js/modules/_export')
      , anObject    =  require('core-js/modules/_an-object')
      , toPrimitive =  require('core-js/modules/_to-primitive');
    
    // MS Edge has broken Reflect.defineProperty - throwing instead of returning false
    $export($export.S + $export.F *  require('core-js/modules/_fails')(function(){
      Reflect.defineProperty(dP.f({}, 1, {value: 1}), 1, {value: 2});
    }), 'Reflect', {
      defineProperty: function defineProperty(target, propertyKey, attributes){
        anObject(target);
        propertyKey = toPrimitive(propertyKey, true);
        anObject(attributes);
        try {
          dP.f(target, propertyKey, attributes);
          return true;
        } catch(e){
          return false;
        }
      }
    });
  provide("core-js/modules/es6.reflect.define-property", module.exports);
}(global));

// pakmanager:core-js/modules/es6.reflect.delete-property
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 26.1.4 Reflect.deleteProperty(target, propertyKey)
    var $export  =  require('core-js/modules/_export')
      , gOPD     =  require('core-js/modules/_object-gopd').f
      , anObject =  require('core-js/modules/_an-object');
    
    $export($export.S, 'Reflect', {
      deleteProperty: function deleteProperty(target, propertyKey){
        var desc = gOPD(anObject(target), propertyKey);
        return desc && !desc.configurable ? false : delete target[propertyKey];
      }
    });
  provide("core-js/modules/es6.reflect.delete-property", module.exports);
}(global));

// pakmanager:core-js/modules/es6.reflect.enumerate
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    // 26.1.5 Reflect.enumerate(target)
    var $export  =  require('core-js/modules/_export')
      , anObject =  require('core-js/modules/_an-object');
    var Enumerate = function(iterated){
      this._t = anObject(iterated); // target
      this._i = 0;                  // next index
      var keys = this._k = []       // keys
        , key;
      for(key in iterated)keys.push(key);
    };
     require('core-js/modules/_iter-create')(Enumerate, 'Object', function(){
      var that = this
        , keys = that._k
        , key;
      do {
        if(that._i >= keys.length)return {value: undefined, done: true};
      } while(!((key = keys[that._i++]) in that._t));
      return {value: key, done: false};
    });
    
    $export($export.S, 'Reflect', {
      enumerate: function enumerate(target){
        return new Enumerate(target);
      }
    });
  provide("core-js/modules/es6.reflect.enumerate", module.exports);
}(global));

// pakmanager:core-js/modules/es6.reflect.get
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 26.1.6 Reflect.get(target, propertyKey [, receiver])
    var gOPD           =  require('core-js/modules/_object-gopd')
      , getPrototypeOf =  require('core-js/modules/_object-gpo')
      , has            =  require('core-js/modules/_has')
      , $export        =  require('core-js/modules/_export')
      , isObject       =  require('core-js/modules/_is-object')
      , anObject       =  require('core-js/modules/_an-object');
    
    function get(target, propertyKey/*, receiver*/){
      var receiver = arguments.length < 3 ? target : arguments[2]
        , desc, proto;
      if(anObject(target) === receiver)return target[propertyKey];
      if(desc = gOPD.f(target, propertyKey))return has(desc, 'value')
        ? desc.value
        : desc.get !== undefined
          ? desc.get.call(receiver)
          : undefined;
      if(isObject(proto = getPrototypeOf(target)))return get(proto, propertyKey, receiver);
    }
    
    $export($export.S, 'Reflect', {get: get});
  provide("core-js/modules/es6.reflect.get", module.exports);
}(global));

// pakmanager:core-js/modules/es6.reflect.get-own-property-descriptor
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
    var gOPD     =  require('core-js/modules/_object-gopd')
      , $export  =  require('core-js/modules/_export')
      , anObject =  require('core-js/modules/_an-object');
    
    $export($export.S, 'Reflect', {
      getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey){
        return gOPD.f(anObject(target), propertyKey);
      }
    });
  provide("core-js/modules/es6.reflect.get-own-property-descriptor", module.exports);
}(global));

// pakmanager:core-js/modules/es6.reflect.get-prototype-of
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 26.1.8 Reflect.getPrototypeOf(target)
    var $export  =  require('core-js/modules/_export')
      , getProto =  require('core-js/modules/_object-gpo')
      , anObject =  require('core-js/modules/_an-object');
    
    $export($export.S, 'Reflect', {
      getPrototypeOf: function getPrototypeOf(target){
        return getProto(anObject(target));
      }
    });
  provide("core-js/modules/es6.reflect.get-prototype-of", module.exports);
}(global));

// pakmanager:core-js/modules/es6.reflect.has
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 26.1.9 Reflect.has(target, propertyKey)
    var $export =  require('core-js/modules/_export');
    
    $export($export.S, 'Reflect', {
      has: function has(target, propertyKey){
        return propertyKey in target;
      }
    });
  provide("core-js/modules/es6.reflect.has", module.exports);
}(global));

// pakmanager:core-js/modules/es6.reflect.is-extensible
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 26.1.10 Reflect.isExtensible(target)
    var $export       =  require('core-js/modules/_export')
      , anObject      =  require('core-js/modules/_an-object')
      , $isExtensible = Object.isExtensible;
    
    $export($export.S, 'Reflect', {
      isExtensible: function isExtensible(target){
        anObject(target);
        return $isExtensible ? $isExtensible(target) : true;
      }
    });
  provide("core-js/modules/es6.reflect.is-extensible", module.exports);
}(global));

// pakmanager:core-js/modules/es6.reflect.own-keys
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 26.1.11 Reflect.ownKeys(target)
    var $export =  require('core-js/modules/_export');
    
    $export($export.S, 'Reflect', {ownKeys:  require('core-js/modules/_own-keys')});
  provide("core-js/modules/es6.reflect.own-keys", module.exports);
}(global));

// pakmanager:core-js/modules/es6.reflect.prevent-extensions
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 26.1.12 Reflect.preventExtensions(target)
    var $export            =  require('core-js/modules/_export')
      , anObject           =  require('core-js/modules/_an-object')
      , $preventExtensions = Object.preventExtensions;
    
    $export($export.S, 'Reflect', {
      preventExtensions: function preventExtensions(target){
        anObject(target);
        try {
          if($preventExtensions)$preventExtensions(target);
          return true;
        } catch(e){
          return false;
        }
      }
    });
  provide("core-js/modules/es6.reflect.prevent-extensions", module.exports);
}(global));

// pakmanager:core-js/modules/es6.reflect.set
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
    var dP             =  require('core-js/modules/_object-dp')
      , gOPD           =  require('core-js/modules/_object-gopd')
      , getPrototypeOf =  require('core-js/modules/_object-gpo')
      , has            =  require('core-js/modules/_has')
      , $export        =  require('core-js/modules/_export')
      , createDesc     =  require('core-js/modules/_property-desc')
      , anObject       =  require('core-js/modules/_an-object')
      , isObject       =  require('core-js/modules/_is-object');
    
    function set(target, propertyKey, V/*, receiver*/){
      var receiver = arguments.length < 4 ? target : arguments[3]
        , ownDesc  = gOPD.f(anObject(target), propertyKey)
        , existingDescriptor, proto;
      if(!ownDesc){
        if(isObject(proto = getPrototypeOf(target))){
          return set(proto, propertyKey, V, receiver);
        }
        ownDesc = createDesc(0);
      }
      if(has(ownDesc, 'value')){
        if(ownDesc.writable === false || !isObject(receiver))return false;
        existingDescriptor = gOPD.f(receiver, propertyKey) || createDesc(0);
        existingDescriptor.value = V;
        dP.f(receiver, propertyKey, existingDescriptor);
        return true;
      }
      return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
    }
    
    $export($export.S, 'Reflect', {set: set});
  provide("core-js/modules/es6.reflect.set", module.exports);
}(global));

// pakmanager:core-js/modules/es6.reflect.set-prototype-of
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // 26.1.14 Reflect.setPrototypeOf(target, proto)
    var $export  =  require('core-js/modules/_export')
      , setProto =  require('core-js/modules/_set-proto');
    
    if(setProto)$export($export.S, 'Reflect', {
      setPrototypeOf: function setPrototypeOf(target, proto){
        setProto.check(target, proto);
        try {
          setProto.set(target, proto);
          return true;
        } catch(e){
          return false;
        }
      }
    });
  provide("core-js/modules/es6.reflect.set-prototype-of", module.exports);
}(global));

// pakmanager:core-js/modules/es7.array.includes
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    // https://github.com/tc39/Array.prototype.includes
    var $export   =  require('core-js/modules/_export')
      , $includes =  require('core-js/modules/_array-includes')(true);
    
    $export($export.P, 'Array', {
      includes: function includes(el /*, fromIndex = 0 */){
        return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
      }
    });
    
     require('core-js/modules/_add-to-unscopables')('includes');
  provide("core-js/modules/es7.array.includes", module.exports);
}(global));

// pakmanager:core-js/modules/es7.string.at
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    // https://github.com/mathiasbynens/String.prototype.at
    var $export =  require('core-js/modules/_export')
      , $at     =  require('core-js/modules/_string-at')(true);
    
    $export($export.P, 'String', {
      at: function at(pos){
        return $at(this, pos);
      }
    });
  provide("core-js/modules/es7.string.at", module.exports);
}(global));

// pakmanager:core-js/modules/es7.string.pad-start
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    // https://github.com/tc39/proposal-string-pad-start-end
    var $export =  require('core-js/modules/_export')
      , $pad    =  require('core-js/modules/_string-pad');
    
    $export($export.P, 'String', {
      padStart: function padStart(maxLength /*, fillString = ' ' */){
        return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
      }
    });
  provide("core-js/modules/es7.string.pad-start", module.exports);
}(global));

// pakmanager:core-js/modules/es7.string.pad-end
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    // https://github.com/tc39/proposal-string-pad-start-end
    var $export =  require('core-js/modules/_export')
      , $pad    =  require('core-js/modules/_string-pad');
    
    $export($export.P, 'String', {
      padEnd: function padEnd(maxLength /*, fillString = ' ' */){
        return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
      }
    });
  provide("core-js/modules/es7.string.pad-end", module.exports);
}(global));

// pakmanager:core-js/modules/es7.string.trim-left
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    // https://github.com/sebmarkbage/ecmascript-string-left-right-trim
     require('core-js/modules/_string-trim')('trimLeft', function($trim){
      return function trimLeft(){
        return $trim(this, 1);
      };
    }, 'trimStart');
  provide("core-js/modules/es7.string.trim-left", module.exports);
}(global));

// pakmanager:core-js/modules/es7.string.trim-right
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    // https://github.com/sebmarkbage/ecmascript-string-left-right-trim
     require('core-js/modules/_string-trim')('trimRight', function($trim){
      return function trimRight(){
        return $trim(this, 2);
      };
    }, 'trimEnd');
  provide("core-js/modules/es7.string.trim-right", module.exports);
}(global));

// pakmanager:core-js/modules/es7.string.match-all
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    // https://tc39.github.io/String.prototype.matchAll/
    var $export     =  require('core-js/modules/_export')
      , defined     =  require('core-js/modules/_defined')
      , toLength    =  require('core-js/modules/_to-length')
      , isRegExp    =  require('core-js/modules/_is-regexp')
      , getFlags    =  require('core-js/modules/_flags')
      , RegExpProto = RegExp.prototype;
    
    var $RegExpStringIterator = function(regexp, string){
      this._r = regexp;
      this._s = string;
    };
    
     require('core-js/modules/_iter-create')($RegExpStringIterator, 'RegExp String', function next(){
      var match = this._r.exec(this._s);
      return {value: match, done: match === null};
    });
    
    $export($export.P, 'String', {
      matchAll: function matchAll(regexp){
        defined(this);
        if(!isRegExp(regexp))throw TypeError(regexp + ' is not a regexp!');
        var S     = String(this)
          , flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp)
          , rx    = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);
        rx.lastIndex = toLength(regexp.lastIndex);
        return new $RegExpStringIterator(rx, S);
      }
    });
  provide("core-js/modules/es7.string.match-all", module.exports);
}(global));

// pakmanager:core-js/modules/es7.symbol.async-iterator
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
   require('core-js/modules/_wks-define')('asyncIterator');
  provide("core-js/modules/es7.symbol.async-iterator", module.exports);
}(global));

// pakmanager:core-js/modules/es7.symbol.observable
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
   require('core-js/modules/_wks-define')('observable');
  provide("core-js/modules/es7.symbol.observable", module.exports);
}(global));

// pakmanager:core-js/modules/es7.object.get-own-property-descriptors
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // https://github.com/tc39/proposal-object-getownpropertydescriptors
    var $export        =  require('core-js/modules/_export')
      , ownKeys        =  require('core-js/modules/_own-keys')
      , toIObject      =  require('core-js/modules/_to-iobject')
      , gOPD           =  require('core-js/modules/_object-gopd')
      , createProperty =  require('core-js/modules/_create-property');
    
    $export($export.S, 'Object', {
      getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object){
        var O       = toIObject(object)
          , getDesc = gOPD.f
          , keys    = ownKeys(O)
          , result  = {}
          , i       = 0
          , key, D;
        while(keys.length > i)createProperty(result, key = keys[i++], getDesc(O, key));
        return result;
      }
    });
  provide("core-js/modules/es7.object.get-own-property-descriptors", module.exports);
}(global));

// pakmanager:core-js/modules/es7.object.values
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // https://github.com/tc39/proposal-object-values-entries
    var $export =  require('core-js/modules/_export')
      , $values =  require('core-js/modules/_object-to-array')(false);
    
    $export($export.S, 'Object', {
      values: function values(it){
        return $values(it);
      }
    });
  provide("core-js/modules/es7.object.values", module.exports);
}(global));

// pakmanager:core-js/modules/es7.object.entries
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // https://github.com/tc39/proposal-object-values-entries
    var $export  =  require('core-js/modules/_export')
      , $entries =  require('core-js/modules/_object-to-array')(true);
    
    $export($export.S, 'Object', {
      entries: function entries(it){
        return $entries(it);
      }
    });
  provide("core-js/modules/es7.object.entries", module.exports);
}(global));

// pakmanager:core-js/modules/es7.object.define-getter
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    var $export         =  require('core-js/modules/_export')
      , toObject        =  require('core-js/modules/_to-object')
      , aFunction       =  require('core-js/modules/_a-function')
      , $defineProperty =  require('core-js/modules/_object-dp');
    
    // B.2.2.2 Object.prototype.__defineGetter__(P, getter)
     require('core-js/modules/_descriptors') && $export($export.P +  require('core-js/modules/_object-forced-pam'), 'Object', {
      __defineGetter__: function __defineGetter__(P, getter){
        $defineProperty.f(toObject(this), P, {get: aFunction(getter), enumerable: true, configurable: true});
      }
    });
  provide("core-js/modules/es7.object.define-getter", module.exports);
}(global));

// pakmanager:core-js/modules/es7.object.define-setter
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    var $export         =  require('core-js/modules/_export')
      , toObject        =  require('core-js/modules/_to-object')
      , aFunction       =  require('core-js/modules/_a-function')
      , $defineProperty =  require('core-js/modules/_object-dp');
    
    // B.2.2.3 Object.prototype.__defineSetter__(P, setter)
     require('core-js/modules/_descriptors') && $export($export.P +  require('core-js/modules/_object-forced-pam'), 'Object', {
      __defineSetter__: function __defineSetter__(P, setter){
        $defineProperty.f(toObject(this), P, {set: aFunction(setter), enumerable: true, configurable: true});
      }
    });
  provide("core-js/modules/es7.object.define-setter", module.exports);
}(global));

// pakmanager:core-js/modules/es7.object.lookup-getter
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    var $export                  =  require('core-js/modules/_export')
      , toObject                 =  require('core-js/modules/_to-object')
      , toPrimitive              =  require('core-js/modules/_to-primitive')
      , getPrototypeOf           =  require('core-js/modules/_object-gpo')
      , getOwnPropertyDescriptor =  require('core-js/modules/_object-gopd').f;
    
    // B.2.2.4 Object.prototype.__lookupGetter__(P)
     require('core-js/modules/_descriptors') && $export($export.P +  require('core-js/modules/_object-forced-pam'), 'Object', {
      __lookupGetter__: function __lookupGetter__(P){
        var O = toObject(this)
          , K = toPrimitive(P, true)
          , D;
        do {
          if(D = getOwnPropertyDescriptor(O, K))return D.get;
        } while(O = getPrototypeOf(O));
      }
    });
  provide("core-js/modules/es7.object.lookup-getter", module.exports);
}(global));

// pakmanager:core-js/modules/es7.object.lookup-setter
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    var $export                  =  require('core-js/modules/_export')
      , toObject                 =  require('core-js/modules/_to-object')
      , toPrimitive              =  require('core-js/modules/_to-primitive')
      , getPrototypeOf           =  require('core-js/modules/_object-gpo')
      , getOwnPropertyDescriptor =  require('core-js/modules/_object-gopd').f;
    
    // B.2.2.5 Object.prototype.__lookupSetter__(P)
     require('core-js/modules/_descriptors') && $export($export.P +  require('core-js/modules/_object-forced-pam'), 'Object', {
      __lookupSetter__: function __lookupSetter__(P){
        var O = toObject(this)
          , K = toPrimitive(P, true)
          , D;
        do {
          if(D = getOwnPropertyDescriptor(O, K))return D.set;
        } while(O = getPrototypeOf(O));
      }
    });
  provide("core-js/modules/es7.object.lookup-setter", module.exports);
}(global));

// pakmanager:core-js/modules/es7.map.to-json
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // https://github.com/DavidBruant/Map-Set.prototype.toJSON
    var $export  =  require('core-js/modules/_export');
    
    $export($export.P + $export.R, 'Map', {toJSON:  require('core-js/modules/_collection-to-json')('Map')});
  provide("core-js/modules/es7.map.to-json", module.exports);
}(global));

// pakmanager:core-js/modules/es7.set.to-json
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // https://github.com/DavidBruant/Map-Set.prototype.toJSON
    var $export  =  require('core-js/modules/_export');
    
    $export($export.P + $export.R, 'Set', {toJSON:  require('core-js/modules/_collection-to-json')('Set')});
  provide("core-js/modules/es7.set.to-json", module.exports);
}(global));

// pakmanager:core-js/modules/es7.system.global
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // https://github.com/ljharb/proposal-global
    var $export =  require('core-js/modules/_export');
    
    $export($export.S, 'System', {global:  require('core-js/modules/_global')});
  provide("core-js/modules/es7.system.global", module.exports);
}(global));

// pakmanager:core-js/modules/es7.error.is-error
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // https://github.com/ljharb/proposal-is-error
    var $export =  require('core-js/modules/_export')
      , cof     =  require('core-js/modules/_cof');
    
    $export($export.S, 'Error', {
      isError: function isError(it){
        return cof(it) === 'Error';
      }
    });
  provide("core-js/modules/es7.error.is-error", module.exports);
}(global));

// pakmanager:core-js/modules/es7.math.iaddh
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // https://gist.github.com/BrendanEich/4294d5c212a6d2254703
    var $export =  require('core-js/modules/_export');
    
    $export($export.S, 'Math', {
      iaddh: function iaddh(x0, x1, y0, y1){
        var $x0 = x0 >>> 0
          , $x1 = x1 >>> 0
          , $y0 = y0 >>> 0;
        return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;
      }
    });
  provide("core-js/modules/es7.math.iaddh", module.exports);
}(global));

// pakmanager:core-js/modules/es7.math.isubh
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // https://gist.github.com/BrendanEich/4294d5c212a6d2254703
    var $export =  require('core-js/modules/_export');
    
    $export($export.S, 'Math', {
      isubh: function isubh(x0, x1, y0, y1){
        var $x0 = x0 >>> 0
          , $x1 = x1 >>> 0
          , $y0 = y0 >>> 0;
        return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;
      }
    });
  provide("core-js/modules/es7.math.isubh", module.exports);
}(global));

// pakmanager:core-js/modules/es7.math.imulh
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // https://gist.github.com/BrendanEich/4294d5c212a6d2254703
    var $export =  require('core-js/modules/_export');
    
    $export($export.S, 'Math', {
      imulh: function imulh(u, v){
        var UINT16 = 0xffff
          , $u = +u
          , $v = +v
          , u0 = $u & UINT16
          , v0 = $v & UINT16
          , u1 = $u >> 16
          , v1 = $v >> 16
          , t  = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
        return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);
      }
    });
  provide("core-js/modules/es7.math.imulh", module.exports);
}(global));

// pakmanager:core-js/modules/es7.math.umulh
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // https://gist.github.com/BrendanEich/4294d5c212a6d2254703
    var $export =  require('core-js/modules/_export');
    
    $export($export.S, 'Math', {
      umulh: function umulh(u, v){
        var UINT16 = 0xffff
          , $u = +u
          , $v = +v
          , u0 = $u & UINT16
          , v0 = $v & UINT16
          , u1 = $u >>> 16
          , v1 = $v >>> 16
          , t  = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
        return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);
      }
    });
  provide("core-js/modules/es7.math.umulh", module.exports);
}(global));

// pakmanager:core-js/modules/es7.reflect.define-metadata
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var metadata                  =  require('core-js/modules/_metadata')
      , anObject                  =  require('core-js/modules/_an-object')
      , toMetaKey                 = metadata.key
      , ordinaryDefineOwnMetadata = metadata.set;
    
    metadata.exp({defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey){
      ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
    }});
  provide("core-js/modules/es7.reflect.define-metadata", module.exports);
}(global));

// pakmanager:core-js/modules/es7.reflect.delete-metadata
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var metadata               =  require('core-js/modules/_metadata')
      , anObject               =  require('core-js/modules/_an-object')
      , toMetaKey              = metadata.key
      , getOrCreateMetadataMap = metadata.map
      , store                  = metadata.store;
    
    metadata.exp({deleteMetadata: function deleteMetadata(metadataKey, target /*, targetKey */){
      var targetKey   = arguments.length < 3 ? undefined : toMetaKey(arguments[2])
        , metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
      if(metadataMap === undefined || !metadataMap['delete'](metadataKey))return false;
      if(metadataMap.size)return true;
      var targetMetadata = store.get(target);
      targetMetadata['delete'](targetKey);
      return !!targetMetadata.size || store['delete'](target);
    }});
  provide("core-js/modules/es7.reflect.delete-metadata", module.exports);
}(global));

// pakmanager:core-js/modules/es7.reflect.get-metadata
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var metadata               =  require('core-js/modules/_metadata')
      , anObject               =  require('core-js/modules/_an-object')
      , getPrototypeOf         =  require('core-js/modules/_object-gpo')
      , ordinaryHasOwnMetadata = metadata.has
      , ordinaryGetOwnMetadata = metadata.get
      , toMetaKey              = metadata.key;
    
    var ordinaryGetMetadata = function(MetadataKey, O, P){
      var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
      if(hasOwn)return ordinaryGetOwnMetadata(MetadataKey, O, P);
      var parent = getPrototypeOf(O);
      return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
    };
    
    metadata.exp({getMetadata: function getMetadata(metadataKey, target /*, targetKey */){
      return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
    }});
  provide("core-js/modules/es7.reflect.get-metadata", module.exports);
}(global));

// pakmanager:core-js/modules/es7.reflect.get-metadata-keys
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var Set                     =  require('core-js/modules/es6.set')
      , from                    =  require('core-js/modules/_array-from-iterable')
      , metadata                =  require('core-js/modules/_metadata')
      , anObject                =  require('core-js/modules/_an-object')
      , getPrototypeOf          =  require('core-js/modules/_object-gpo')
      , ordinaryOwnMetadataKeys = metadata.keys
      , toMetaKey               = metadata.key;
    
    var ordinaryMetadataKeys = function(O, P){
      var oKeys  = ordinaryOwnMetadataKeys(O, P)
        , parent = getPrototypeOf(O);
      if(parent === null)return oKeys;
      var pKeys  = ordinaryMetadataKeys(parent, P);
      return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
    };
    
    metadata.exp({getMetadataKeys: function getMetadataKeys(target /*, targetKey */){
      return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
    }});
  provide("core-js/modules/es7.reflect.get-metadata-keys", module.exports);
}(global));

// pakmanager:core-js/modules/es7.reflect.get-own-metadata
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var metadata               =  require('core-js/modules/_metadata')
      , anObject               =  require('core-js/modules/_an-object')
      , ordinaryGetOwnMetadata = metadata.get
      , toMetaKey              = metadata.key;
    
    metadata.exp({getOwnMetadata: function getOwnMetadata(metadataKey, target /*, targetKey */){
      return ordinaryGetOwnMetadata(metadataKey, anObject(target)
        , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
    }});
  provide("core-js/modules/es7.reflect.get-own-metadata", module.exports);
}(global));

// pakmanager:core-js/modules/es7.reflect.get-own-metadata-keys
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var metadata                =  require('core-js/modules/_metadata')
      , anObject                =  require('core-js/modules/_an-object')
      , ordinaryOwnMetadataKeys = metadata.keys
      , toMetaKey               = metadata.key;
    
    metadata.exp({getOwnMetadataKeys: function getOwnMetadataKeys(target /*, targetKey */){
      return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
    }});
  provide("core-js/modules/es7.reflect.get-own-metadata-keys", module.exports);
}(global));

// pakmanager:core-js/modules/es7.reflect.has-metadata
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var metadata               =  require('core-js/modules/_metadata')
      , anObject               =  require('core-js/modules/_an-object')
      , getPrototypeOf         =  require('core-js/modules/_object-gpo')
      , ordinaryHasOwnMetadata = metadata.has
      , toMetaKey              = metadata.key;
    
    var ordinaryHasMetadata = function(MetadataKey, O, P){
      var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
      if(hasOwn)return true;
      var parent = getPrototypeOf(O);
      return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
    };
    
    metadata.exp({hasMetadata: function hasMetadata(metadataKey, target /*, targetKey */){
      return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
    }});
  provide("core-js/modules/es7.reflect.has-metadata", module.exports);
}(global));

// pakmanager:core-js/modules/es7.reflect.has-own-metadata
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var metadata               =  require('core-js/modules/_metadata')
      , anObject               =  require('core-js/modules/_an-object')
      , ordinaryHasOwnMetadata = metadata.has
      , toMetaKey              = metadata.key;
    
    metadata.exp({hasOwnMetadata: function hasOwnMetadata(metadataKey, target /*, targetKey */){
      return ordinaryHasOwnMetadata(metadataKey, anObject(target)
        , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
    }});
  provide("core-js/modules/es7.reflect.has-own-metadata", module.exports);
}(global));

// pakmanager:core-js/modules/es7.reflect.metadata
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var metadata                  =  require('core-js/modules/_metadata')
      , anObject                  =  require('core-js/modules/_an-object')
      , aFunction                 =  require('core-js/modules/_a-function')
      , toMetaKey                 = metadata.key
      , ordinaryDefineOwnMetadata = metadata.set;
    
    metadata.exp({metadata: function metadata(metadataKey, metadataValue){
      return function decorator(target, targetKey){
        ordinaryDefineOwnMetadata(
          metadataKey, metadataValue,
          (targetKey !== undefined ? anObject : aFunction)(target),
          toMetaKey(targetKey)
        );
      };
    }});
  provide("core-js/modules/es7.reflect.metadata", module.exports);
}(global));

// pakmanager:core-js/modules/es7.asap
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask
    var $export   =  require('core-js/modules/_export')
      , microtask =  require('core-js/modules/_microtask')()
      , process   =  require('core-js/modules/_global').process
      , isNode    =  require('core-js/modules/_cof')(process) == 'process';
    
    $export($export.G, {
      asap: function asap(fn){
        var domain = isNode && process.domain;
        microtask(domain ? domain.bind(fn) : fn);
      }
    });
  provide("core-js/modules/es7.asap", module.exports);
}(global));

// pakmanager:core-js/modules/es7.observable
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    // https://github.com/zenparsing/es-observable
    var $export     =  require('core-js/modules/_export')
      , global      =  require('core-js/modules/_global')
      , core        =  require('core-js/modules/_core')
      , microtask   =  require('core-js/modules/_microtask')()
      , OBSERVABLE  =  require('core-js/modules/_wks')('observable')
      , aFunction   =  require('core-js/modules/_a-function')
      , anObject    =  require('core-js/modules/_an-object')
      , anInstance  =  require('core-js/modules/_an-instance')
      , redefineAll =  require('core-js/modules/_redefine-all')
      , hide        =  require('core-js/modules/_hide')
      , forOf       =  require('core-js/modules/_for-of')
      , RETURN      = forOf.RETURN;
    
    var getMethod = function(fn){
      return fn == null ? undefined : aFunction(fn);
    };
    
    var cleanupSubscription = function(subscription){
      var cleanup = subscription._c;
      if(cleanup){
        subscription._c = undefined;
        cleanup();
      }
    };
    
    var subscriptionClosed = function(subscription){
      return subscription._o === undefined;
    };
    
    var closeSubscription = function(subscription){
      if(!subscriptionClosed(subscription)){
        subscription._o = undefined;
        cleanupSubscription(subscription);
      }
    };
    
    var Subscription = function(observer, subscriber){
      anObject(observer);
      this._c = undefined;
      this._o = observer;
      observer = new SubscriptionObserver(this);
      try {
        var cleanup      = subscriber(observer)
          , subscription = cleanup;
        if(cleanup != null){
          if(typeof cleanup.unsubscribe === 'function')cleanup = function(){ subscription.unsubscribe(); };
          else aFunction(cleanup);
          this._c = cleanup;
        }
      } catch(e){
        observer.error(e);
        return;
      } if(subscriptionClosed(this))cleanupSubscription(this);
    };
    
    Subscription.prototype = redefineAll({}, {
      unsubscribe: function unsubscribe(){ closeSubscription(this); }
    });
    
    var SubscriptionObserver = function(subscription){
      this._s = subscription;
    };
    
    SubscriptionObserver.prototype = redefineAll({}, {
      next: function next(value){
        var subscription = this._s;
        if(!subscriptionClosed(subscription)){
          var observer = subscription._o;
          try {
            var m = getMethod(observer.next);
            if(m)return m.call(observer, value);
          } catch(e){
            try {
              closeSubscription(subscription);
            } finally {
              throw e;
            }
          }
        }
      },
      error: function error(value){
        var subscription = this._s;
        if(subscriptionClosed(subscription))throw value;
        var observer = subscription._o;
        subscription._o = undefined;
        try {
          var m = getMethod(observer.error);
          if(!m)throw value;
          value = m.call(observer, value);
        } catch(e){
          try {
            cleanupSubscription(subscription);
          } finally {
            throw e;
          }
        } cleanupSubscription(subscription);
        return value;
      },
      complete: function complete(value){
        var subscription = this._s;
        if(!subscriptionClosed(subscription)){
          var observer = subscription._o;
          subscription._o = undefined;
          try {
            var m = getMethod(observer.complete);
            value = m ? m.call(observer, value) : undefined;
          } catch(e){
            try {
              cleanupSubscription(subscription);
            } finally {
              throw e;
            }
          } cleanupSubscription(subscription);
          return value;
        }
      }
    });
    
    var $Observable = function Observable(subscriber){
      anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);
    };
    
    redefineAll($Observable.prototype, {
      subscribe: function subscribe(observer){
        return new Subscription(observer, this._f);
      },
      forEach: function forEach(fn){
        var that = this;
        return new (core.Promise || global.Promise)(function(resolve, reject){
          aFunction(fn);
          var subscription = that.subscribe({
            next : function(value){
              try {
                return fn(value);
              } catch(e){
                reject(e);
                subscription.unsubscribe();
              }
            },
            error: reject,
            complete: resolve
          });
        });
      }
    });
    
    redefineAll($Observable, {
      from: function from(x){
        var C = typeof this === 'function' ? this : $Observable;
        var method = getMethod(anObject(x)[OBSERVABLE]);
        if(method){
          var observable = anObject(method.call(x));
          return observable.constructor === C ? observable : new C(function(observer){
            return observable.subscribe(observer);
          });
        }
        return new C(function(observer){
          var done = false;
          microtask(function(){
            if(!done){
              try {
                if(forOf(x, false, function(it){
                  observer.next(it);
                  if(done)return RETURN;
                }) === RETURN)return;
              } catch(e){
                if(done)throw e;
                observer.error(e);
                return;
              } observer.complete();
            }
          });
          return function(){ done = true; };
        });
      },
      of: function of(){
        for(var i = 0, l = arguments.length, items = Array(l); i < l;)items[i] = arguments[i++];
        return new (typeof this === 'function' ? this : $Observable)(function(observer){
          var done = false;
          microtask(function(){
            if(!done){
              for(var i = 0; i < items.length; ++i){
                observer.next(items[i]);
                if(done)return;
              } observer.complete();
            }
          });
          return function(){ done = true; };
        });
      }
    });
    
    hide($Observable.prototype, OBSERVABLE, function(){ return this; });
    
    $export($export.G, {Observable: $Observable});
    
     require('core-js/modules/_set-species')('Observable');
  provide("core-js/modules/es7.observable", module.exports);
}(global));

// pakmanager:core-js/modules/web.timers
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // ie9- setTimeout & setInterval additional parameters fix
    var global     =  require('core-js/modules/_global')
      , $export    =  require('core-js/modules/_export')
      , invoke     =  require('core-js/modules/_invoke')
      , partial    =  require('core-js/modules/_partial')
      , navigator  = global.navigator
      , MSIE       = !!navigator && /MSIE .\./.test(navigator.userAgent); // <- dirty ie9- check
    var wrap = function(set){
      return MSIE ? function(fn, time /*, ...args */){
        return set(invoke(
          partial,
          [].slice.call(arguments, 2),
          typeof fn == 'function' ? fn : Function(fn)
        ), time);
      } : set;
    };
    $export($export.G + $export.B + $export.F * MSIE, {
      setTimeout:  wrap(global.setTimeout),
      setInterval: wrap(global.setInterval)
    });
  provide("core-js/modules/web.timers", module.exports);
}(global));

// pakmanager:core-js/modules/web.immediate
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var $export =  require('core-js/modules/_export')
      , $task   =  require('core-js/modules/_task');
    $export($export.G + $export.B, {
      setImmediate:   $task.set,
      clearImmediate: $task.clear
    });
  provide("core-js/modules/web.immediate", module.exports);
}(global));

// pakmanager:core-js/modules/web.dom.iterable
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var $iterators    =  require('core-js/modules/es6.array.iterator')
      , redefine      =  require('core-js/modules/_redefine')
      , global        =  require('core-js/modules/_global')
      , hide          =  require('core-js/modules/_hide')
      , Iterators     =  require('core-js/modules/_iterators')
      , wks           =  require('core-js/modules/_wks')
      , ITERATOR      = wks('iterator')
      , TO_STRING_TAG = wks('toStringTag')
      , ArrayValues   = Iterators.Array;
    
    for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
      var NAME       = collections[i]
        , Collection = global[NAME]
        , proto      = Collection && Collection.prototype
        , key;
      if(proto){
        if(!proto[ITERATOR])hide(proto, ITERATOR, ArrayValues);
        if(!proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
        Iterators[NAME] = ArrayValues;
        for(key in $iterators)if(!proto[key])redefine(proto, key, $iterators[key], true);
      }
    }
  provide("core-js/modules/web.dom.iterable", module.exports);
}(global));

// pakmanager:core-js/modules/_object-define
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var dP        =  require('core-js/modules/_object-dp')
      , gOPD      =  require('core-js/modules/_object-gopd')
      , ownKeys   =  require('core-js/modules/_own-keys')
      , toIObject =  require('core-js/modules/_to-iobject');
    
    module.exports = function define(target, mixin){
      var keys   = ownKeys(toIObject(mixin))
        , length = keys.length
        , i = 0, key;
      while(length > i)dP.f(target, key = keys[i++], gOPD.f(mixin, key));
      return target;
    };
  provide("core-js/modules/_object-define", module.exports);
}(global));

// pakmanager:core-js/modules/_replacer
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  module.exports = function(regExp, replace){
      var replacer = replace === Object(replace) ? function(part){
        return replace[part];
      } : replace;
      return function(it){
        return String(it).replace(regExp, replacer);
      };
    };
  provide("core-js/modules/_replacer", module.exports);
}(global));

// pakmanager:core-js/shim
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
   require('core-js/modules/es6.symbol');
     require('core-js/modules/es6.object.create');
     require('core-js/modules/es6.object.define-property');
     require('core-js/modules/es6.object.define-properties');
     require('core-js/modules/es6.object.get-own-property-descriptor');
     require('core-js/modules/es6.object.get-prototype-of');
     require('core-js/modules/es6.object.keys');
     require('core-js/modules/es6.object.get-own-property-names');
     require('core-js/modules/es6.object.freeze');
     require('core-js/modules/es6.object.seal');
     require('core-js/modules/es6.object.prevent-extensions');
     require('core-js/modules/es6.object.is-frozen');
     require('core-js/modules/es6.object.is-sealed');
     require('core-js/modules/es6.object.is-extensible');
     require('core-js/modules/es6.object.assign');
     require('core-js/modules/es6.object.is');
     require('core-js/modules/es6.object.set-prototype-of');
     require('core-js/modules/es6.object.to-string');
     require('core-js/modules/es6.function.bind');
     require('core-js/modules/es6.function.name');
     require('core-js/modules/es6.function.has-instance');
     require('core-js/modules/es6.parse-int');
     require('core-js/modules/es6.parse-float');
     require('core-js/modules/es6.number.constructor');
     require('core-js/modules/es6.number.to-fixed');
     require('core-js/modules/es6.number.to-precision');
     require('core-js/modules/es6.number.epsilon');
     require('core-js/modules/es6.number.is-finite');
     require('core-js/modules/es6.number.is-integer');
     require('core-js/modules/es6.number.is-nan');
     require('core-js/modules/es6.number.is-safe-integer');
     require('core-js/modules/es6.number.max-safe-integer');
     require('core-js/modules/es6.number.min-safe-integer');
     require('core-js/modules/es6.number.parse-float');
     require('core-js/modules/es6.number.parse-int');
     require('core-js/modules/es6.math.acosh');
     require('core-js/modules/es6.math.asinh');
     require('core-js/modules/es6.math.atanh');
     require('core-js/modules/es6.math.cbrt');
     require('core-js/modules/es6.math.clz32');
     require('core-js/modules/es6.math.cosh');
     require('core-js/modules/es6.math.expm1');
     require('core-js/modules/es6.math.fround');
     require('core-js/modules/es6.math.hypot');
     require('core-js/modules/es6.math.imul');
     require('core-js/modules/es6.math.log10');
     require('core-js/modules/es6.math.log1p');
     require('core-js/modules/es6.math.log2');
     require('core-js/modules/es6.math.sign');
     require('core-js/modules/es6.math.sinh');
     require('core-js/modules/es6.math.tanh');
     require('core-js/modules/es6.math.trunc');
     require('core-js/modules/es6.string.from-code-point');
     require('core-js/modules/es6.string.raw');
     require('core-js/modules/es6.string.trim');
     require('core-js/modules/es6.string.iterator');
     require('core-js/modules/es6.string.code-point-at');
     require('core-js/modules/es6.string.ends-with');
     require('core-js/modules/es6.string.includes');
     require('core-js/modules/es6.string.repeat');
     require('core-js/modules/es6.string.starts-with');
     require('core-js/modules/es6.string.anchor');
     require('core-js/modules/es6.string.big');
     require('core-js/modules/es6.string.blink');
     require('core-js/modules/es6.string.bold');
     require('core-js/modules/es6.string.fixed');
     require('core-js/modules/es6.string.fontcolor');
     require('core-js/modules/es6.string.fontsize');
     require('core-js/modules/es6.string.italics');
     require('core-js/modules/es6.string.link');
     require('core-js/modules/es6.string.small');
     require('core-js/modules/es6.string.strike');
     require('core-js/modules/es6.string.sub');
     require('core-js/modules/es6.string.sup');
     require('core-js/modules/es6.date.now');
     require('core-js/modules/es6.date.to-json');
     require('core-js/modules/es6.date.to-iso-string');
     require('core-js/modules/es6.date.to-string');
     require('core-js/modules/es6.date.to-primitive');
     require('core-js/modules/es6.array.is-array');
     require('core-js/modules/es6.array.from');
     require('core-js/modules/es6.array.of');
     require('core-js/modules/es6.array.join');
     require('core-js/modules/es6.array.slice');
     require('core-js/modules/es6.array.sort');
     require('core-js/modules/es6.array.for-each');
     require('core-js/modules/es6.array.map');
     require('core-js/modules/es6.array.filter');
     require('core-js/modules/es6.array.some');
     require('core-js/modules/es6.array.every');
     require('core-js/modules/es6.array.reduce');
     require('core-js/modules/es6.array.reduce-right');
     require('core-js/modules/es6.array.index-of');
     require('core-js/modules/es6.array.last-index-of');
     require('core-js/modules/es6.array.copy-within');
     require('core-js/modules/es6.array.fill');
     require('core-js/modules/es6.array.find');
     require('core-js/modules/es6.array.find-index');
     require('core-js/modules/es6.array.species');
     require('core-js/modules/es6.array.iterator');
     require('core-js/modules/es6.regexp.constructor');
     require('core-js/modules/es6.regexp.to-string');
     require('core-js/modules/es6.regexp.flags');
     require('core-js/modules/es6.regexp.match');
     require('core-js/modules/es6.regexp.replace');
     require('core-js/modules/es6.regexp.search');
     require('core-js/modules/es6.regexp.split');
     require('core-js/modules/es6.promise');
     require('core-js/modules/es6.map');
     require('core-js/modules/es6.set');
     require('core-js/modules/es6.weak-map');
     require('core-js/modules/es6.weak-set');
     require('core-js/modules/es6.typed.array-buffer');
     require('core-js/modules/es6.typed.data-view');
     require('core-js/modules/es6.typed.int8-array');
     require('core-js/modules/es6.typed.uint8-array');
     require('core-js/modules/es6.typed.uint8-clamped-array');
     require('core-js/modules/es6.typed.int16-array');
     require('core-js/modules/es6.typed.uint16-array');
     require('core-js/modules/es6.typed.int32-array');
     require('core-js/modules/es6.typed.uint32-array');
     require('core-js/modules/es6.typed.float32-array');
     require('core-js/modules/es6.typed.float64-array');
     require('core-js/modules/es6.reflect.apply');
     require('core-js/modules/es6.reflect.construct');
     require('core-js/modules/es6.reflect.define-property');
     require('core-js/modules/es6.reflect.delete-property');
     require('core-js/modules/es6.reflect.enumerate');
     require('core-js/modules/es6.reflect.get');
     require('core-js/modules/es6.reflect.get-own-property-descriptor');
     require('core-js/modules/es6.reflect.get-prototype-of');
     require('core-js/modules/es6.reflect.has');
     require('core-js/modules/es6.reflect.is-extensible');
     require('core-js/modules/es6.reflect.own-keys');
     require('core-js/modules/es6.reflect.prevent-extensions');
     require('core-js/modules/es6.reflect.set');
     require('core-js/modules/es6.reflect.set-prototype-of');
     require('core-js/modules/es7.array.includes');
     require('core-js/modules/es7.string.at');
     require('core-js/modules/es7.string.pad-start');
     require('core-js/modules/es7.string.pad-end');
     require('core-js/modules/es7.string.trim-left');
     require('core-js/modules/es7.string.trim-right');
     require('core-js/modules/es7.string.match-all');
     require('core-js/modules/es7.symbol.async-iterator');
     require('core-js/modules/es7.symbol.observable');
     require('core-js/modules/es7.object.get-own-property-descriptors');
     require('core-js/modules/es7.object.values');
     require('core-js/modules/es7.object.entries');
     require('core-js/modules/es7.object.define-getter');
     require('core-js/modules/es7.object.define-setter');
     require('core-js/modules/es7.object.lookup-getter');
     require('core-js/modules/es7.object.lookup-setter');
     require('core-js/modules/es7.map.to-json');
     require('core-js/modules/es7.set.to-json');
     require('core-js/modules/es7.system.global');
     require('core-js/modules/es7.error.is-error');
     require('core-js/modules/es7.math.iaddh');
     require('core-js/modules/es7.math.isubh');
     require('core-js/modules/es7.math.imulh');
     require('core-js/modules/es7.math.umulh');
     require('core-js/modules/es7.reflect.define-metadata');
     require('core-js/modules/es7.reflect.delete-metadata');
     require('core-js/modules/es7.reflect.get-metadata');
     require('core-js/modules/es7.reflect.get-metadata-keys');
     require('core-js/modules/es7.reflect.get-own-metadata');
     require('core-js/modules/es7.reflect.get-own-metadata-keys');
     require('core-js/modules/es7.reflect.has-metadata');
     require('core-js/modules/es7.reflect.has-own-metadata');
     require('core-js/modules/es7.reflect.metadata');
     require('core-js/modules/es7.asap');
     require('core-js/modules/es7.observable');
     require('core-js/modules/web.timers');
     require('core-js/modules/web.immediate');
     require('core-js/modules/web.dom.iterable');
    module.exports =  require('core-js/modules/_core');
  provide("core-js/shim", module.exports);
}(global));

// pakmanager:core-js/modules/core.dict
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    var ctx            =  require('core-js/modules/_ctx')
      , $export        =  require('core-js/modules/_export')
      , createDesc     =  require('core-js/modules/_property-desc')
      , assign         =  require('core-js/modules/_object-assign')
      , create         =  require('core-js/modules/_object-create')
      , getPrototypeOf =  require('core-js/modules/_object-gpo')
      , getKeys        =  require('core-js/modules/_object-keys')
      , dP             =  require('core-js/modules/_object-dp')
      , keyOf          =  require('core-js/modules/_keyof')
      , aFunction      =  require('core-js/modules/_a-function')
      , forOf          =  require('core-js/modules/_for-of')
      , isIterable     =  require('core-js/modules/core.is-iterable')
      , $iterCreate    =  require('core-js/modules/_iter-create')
      , step           =  require('core-js/modules/_iter-step')
      , isObject       =  require('core-js/modules/_is-object')
      , toIObject      =  require('core-js/modules/_to-iobject')
      , DESCRIPTORS    =  require('core-js/modules/_descriptors')
      , has            =  require('core-js/modules/_has');
    
    // 0 -> Dict.forEach
    // 1 -> Dict.map
    // 2 -> Dict.filter
    // 3 -> Dict.some
    // 4 -> Dict.every
    // 5 -> Dict.find
    // 6 -> Dict.findKey
    // 7 -> Dict.mapPairs
    var createDictMethod = function(TYPE){
      var IS_MAP   = TYPE == 1
        , IS_EVERY = TYPE == 4;
      return function(object, callbackfn, that /* = undefined */){
        var f      = ctx(callbackfn, that, 3)
          , O      = toIObject(object)
          , result = IS_MAP || TYPE == 7 || TYPE == 2
              ? new (typeof this == 'function' ? this : Dict) : undefined
          , key, val, res;
        for(key in O)if(has(O, key)){
          val = O[key];
          res = f(val, key, object);
          if(TYPE){
            if(IS_MAP)result[key] = res;            // map
            else if(res)switch(TYPE){
              case 2: result[key] = val; break;     // filter
              case 3: return true;                  // some
              case 5: return val;                   // find
              case 6: return key;                   // findKey
              case 7: result[res[0]] = res[1];      // mapPairs
            } else if(IS_EVERY)return false;        // every
          }
        }
        return TYPE == 3 || IS_EVERY ? IS_EVERY : result;
      };
    };
    var findKey = createDictMethod(6);
    
    var createDictIter = function(kind){
      return function(it){
        return new DictIterator(it, kind);
      };
    };
    var DictIterator = function(iterated, kind){
      this._t = toIObject(iterated); // target
      this._a = getKeys(iterated);   // keys
      this._i = 0;                   // next index
      this._k = kind;                // kind
    };
    $iterCreate(DictIterator, 'Dict', function(){
      var that = this
        , O    = that._t
        , keys = that._a
        , kind = that._k
        , key;
      do {
        if(that._i >= keys.length){
          that._t = undefined;
          return step(1);
        }
      } while(!has(O, key = keys[that._i++]));
      if(kind == 'keys'  )return step(0, key);
      if(kind == 'values')return step(0, O[key]);
      return step(0, [key, O[key]]);
    });
    
    function Dict(iterable){
      var dict = create(null);
      if(iterable != undefined){
        if(isIterable(iterable)){
          forOf(iterable, true, function(key, value){
            dict[key] = value;
          });
        } else assign(dict, iterable);
      }
      return dict;
    }
    Dict.prototype = null;
    
    function reduce(object, mapfn, init){
      aFunction(mapfn);
      var O      = toIObject(object)
        , keys   = getKeys(O)
        , length = keys.length
        , i      = 0
        , memo, key;
      if(arguments.length < 3){
        if(!length)throw TypeError('Reduce of empty object with no initial value');
        memo = O[keys[i++]];
      } else memo = Object(init);
      while(length > i)if(has(O, key = keys[i++])){
        memo = mapfn(memo, O[key], key, object);
      }
      return memo;
    }
    
    function includes(object, el){
      return (el == el ? keyOf(object, el) : findKey(object, function(it){
        return it != it;
      })) !== undefined;
    }
    
    function get(object, key){
      if(has(object, key))return object[key];
    }
    function set(object, key, value){
      if(DESCRIPTORS && key in Object)dP.f(object, key, createDesc(0, value));
      else object[key] = value;
      return object;
    }
    
    function isDict(it){
      return isObject(it) && getPrototypeOf(it) === Dict.prototype;
    }
    
    $export($export.G + $export.F, {Dict: Dict});
    
    $export($export.S, 'Dict', {
      keys:     createDictIter('keys'),
      values:   createDictIter('values'),
      entries:  createDictIter('entries'),
      forEach:  createDictMethod(0),
      map:      createDictMethod(1),
      filter:   createDictMethod(2),
      some:     createDictMethod(3),
      every:    createDictMethod(4),
      find:     createDictMethod(5),
      findKey:  findKey,
      mapPairs: createDictMethod(7),
      reduce:   reduce,
      keyOf:    keyOf,
      includes: includes,
      has:      has,
      get:      get,
      set:      set,
      isDict:   isDict
    });
  provide("core-js/modules/core.dict", module.exports);
}(global));

// pakmanager:core-js/modules/core.get-iterator
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var anObject =  require('core-js/modules/_an-object')
      , get      =  require('core-js/modules/core.get-iterator-method');
    module.exports =  require('core-js/modules/_core').getIterator = function(it){
      var iterFn = get(it);
      if(typeof iterFn != 'function')throw TypeError(it + ' is not iterable!');
      return anObject(iterFn.call(it));
    };
  provide("core-js/modules/core.get-iterator", module.exports);
}(global));

// pakmanager:core-js/modules/core.delay
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var global  =  require('core-js/modules/_global')
      , core    =  require('core-js/modules/_core')
      , $export =  require('core-js/modules/_export')
      , partial =  require('core-js/modules/_partial');
    // https://esdiscuss.org/topic/promise-returning-delay-function
    $export($export.G + $export.F, {
      delay: function delay(time){
        return new (core.Promise || global.Promise)(function(resolve){
          setTimeout(partial.call(resolve, true), time);
        });
      }
    });
  provide("core-js/modules/core.delay", module.exports);
}(global));

// pakmanager:core-js/modules/core.function.part
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var path    =  require('core-js/modules/_path')
      , $export =  require('core-js/modules/_export');
    
    // Placeholder
     require('core-js/modules/_core')._ = path._ = path._ || {};
    
    $export($export.P + $export.F, 'Function', {part:  require('core-js/modules/_partial')});
  provide("core-js/modules/core.function.part", module.exports);
}(global));

// pakmanager:core-js/modules/core.object.is-object
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var $export =  require('core-js/modules/_export');
    
    $export($export.S + $export.F, 'Object', {isObject:  require('core-js/modules/_is-object')});
  provide("core-js/modules/core.object.is-object", module.exports);
}(global));

// pakmanager:core-js/modules/core.object.classof
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var $export =  require('core-js/modules/_export');
    
    $export($export.S + $export.F, 'Object', {classof:  require('core-js/modules/_classof')});
  provide("core-js/modules/core.object.classof", module.exports);
}(global));

// pakmanager:core-js/modules/core.object.define
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var $export =  require('core-js/modules/_export')
      , define  =  require('core-js/modules/_object-define');
    
    $export($export.S + $export.F, 'Object', {define: define});
  provide("core-js/modules/core.object.define", module.exports);
}(global));

// pakmanager:core-js/modules/core.object.make
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var $export =  require('core-js/modules/_export')
      , define  =  require('core-js/modules/_object-define')
      , create  =  require('core-js/modules/_object-create');
    
    $export($export.S + $export.F, 'Object', {
      make: function(proto, mixin){
        return define(create(proto), mixin);
      }
    });
  provide("core-js/modules/core.object.make", module.exports);
}(global));

// pakmanager:core-js/modules/core.number.iterator
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
     require('core-js/modules/_iter-define')(Number, 'Number', function(iterated){
      this._l = +iterated;
      this._i = 0;
    }, function(){
      var i    = this._i++
        , done = !(i < this._l);
      return {done: done, value: done ? undefined : i};
    });
  provide("core-js/modules/core.number.iterator", module.exports);
}(global));

// pakmanager:core-js/modules/core.regexp.escape
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // https://github.com/benjamingr/RexExp.escape
    var $export =  require('core-js/modules/_export')
      , $re     =  require('core-js/modules/_replacer')(/[\\^$*+?.()|[\]{}]/g, '\\$&');
    
    $export($export.S, 'RegExp', {escape: function escape(it){ return $re(it); }});
    
  provide("core-js/modules/core.regexp.escape", module.exports);
}(global));

// pakmanager:core-js/modules/core.string.escape-html
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    var $export =  require('core-js/modules/_export');
    var $re =  require('core-js/modules/_replacer')(/[&<>"']/g, {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&apos;'
    });
    
    $export($export.P + $export.F, 'String', {escapeHTML: function escapeHTML(){ return $re(this); }});
  provide("core-js/modules/core.string.escape-html", module.exports);
}(global));

// pakmanager:core-js/modules/core.string.unescape-html
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    var $export =  require('core-js/modules/_export');
    var $re =  require('core-js/modules/_replacer')(/&(?:amp|lt|gt|quot|apos);/g, {
      '&amp;':  '&',
      '&lt;':   '<',
      '&gt;':   '>',
      '&quot;': '"',
      '&apos;': "'"
    });
    
    $export($export.P + $export.F, 'String', {unescapeHTML:  function unescapeHTML(){ return $re(this); }});
  provide("core-js/modules/core.string.unescape-html", module.exports);
}(global));

// pakmanager:core-js
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
   require('core-js/shim');
     require('core-js/modules/core.dict');
     require('core-js/modules/core.get-iterator-method');
     require('core-js/modules/core.get-iterator');
     require('core-js/modules/core.is-iterable');
     require('core-js/modules/core.delay');
     require('core-js/modules/core.function.part');
     require('core-js/modules/core.object.is-object');
     require('core-js/modules/core.object.classof');
     require('core-js/modules/core.object.define');
     require('core-js/modules/core.object.make');
     require('core-js/modules/core.number.iterator');
     require('core-js/modules/core.regexp.escape');
     require('core-js/modules/core.string.escape-html');
     require('core-js/modules/core.string.unescape-html');
    module.exports =  require('core-js/modules/_core');
  provide("core-js", module.exports);
}(global));

// pakmanager:immutable
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  /**
     *  Copyright (c) 2014-2015, Facebook, Inc.
     *  All rights reserved.
     *
     *  This source code is licensed under the BSD-style license found in the
     *  LICENSE file in the root directory of this source tree. An additional grant
     *  of patent rights can be found in the PATENTS file in the same directory.
     */
    
    (function (global, factory) {
      typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
      typeof define === 'function' && define.amd ? define(factory) :
      (global.Immutable = factory());
    }(this, function () { 'use strict';var SLICE$0 = Array.prototype.slice;
    
      function createClass(ctor, superClass) {
        if (superClass) {
          ctor.prototype = Object.create(superClass.prototype);
        }
        ctor.prototype.constructor = ctor;
      }
    
      function Iterable(value) {
          return isIterable(value) ? value : Seq(value);
        }
    
    
      createClass(KeyedIterable, Iterable);
        function KeyedIterable(value) {
          return isKeyed(value) ? value : KeyedSeq(value);
        }
    
    
      createClass(IndexedIterable, Iterable);
        function IndexedIterable(value) {
          return isIndexed(value) ? value : IndexedSeq(value);
        }
    
    
      createClass(SetIterable, Iterable);
        function SetIterable(value) {
          return isIterable(value) && !isAssociative(value) ? value : SetSeq(value);
        }
    
    
    
      function isIterable(maybeIterable) {
        return !!(maybeIterable && maybeIterable[IS_ITERABLE_SENTINEL]);
      }
    
      function isKeyed(maybeKeyed) {
        return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL]);
      }
    
      function isIndexed(maybeIndexed) {
        return !!(maybeIndexed && maybeIndexed[IS_INDEXED_SENTINEL]);
      }
    
      function isAssociative(maybeAssociative) {
        return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);
      }
    
      function isOrdered(maybeOrdered) {
        return !!(maybeOrdered && maybeOrdered[IS_ORDERED_SENTINEL]);
      }
    
      Iterable.isIterable = isIterable;
      Iterable.isKeyed = isKeyed;
      Iterable.isIndexed = isIndexed;
      Iterable.isAssociative = isAssociative;
      Iterable.isOrdered = isOrdered;
    
      Iterable.Keyed = KeyedIterable;
      Iterable.Indexed = IndexedIterable;
      Iterable.Set = SetIterable;
    
    
      var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';
      var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';
      var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';
      var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';
    
      // Used for setting prototype methods that IE8 chokes on.
      var DELETE = 'delete';
    
      // Constants describing the size of trie nodes.
      var SHIFT = 5; // Resulted in best performance after ______?
      var SIZE = 1 << SHIFT;
      var MASK = SIZE - 1;
    
      // A consistent shared value representing "not set" which equals nothing other
      // than itself, and nothing that could be provided externally.
      var NOT_SET = {};
    
      // Boolean references, Rough equivalent of `bool &`.
      var CHANGE_LENGTH = { value: false };
      var DID_ALTER = { value: false };
    
      function MakeRef(ref) {
        ref.value = false;
        return ref;
      }
    
      function SetRef(ref) {
        ref && (ref.value = true);
      }
    
      // A function which returns a value representing an "owner" for transient writes
      // to tries. The return value will only ever equal itself, and will not equal
      // the return of any subsequent call of this function.
      function OwnerID() {}
    
      // http://jsperf.com/copy-array-inline
      function arrCopy(arr, offset) {
        offset = offset || 0;
        var len = Math.max(0, arr.length - offset);
        var newArr = new Array(len);
        for (var ii = 0; ii < len; ii++) {
          newArr[ii] = arr[ii + offset];
        }
        return newArr;
      }
    
      function ensureSize(iter) {
        if (iter.size === undefined) {
          iter.size = iter.__iterate(returnTrue);
        }
        return iter.size;
      }
    
      function wrapIndex(iter, index) {
        // This implements "is array index" which the ECMAString spec defines as:
        //
        //     A String property name P is an array index if and only if
        //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal
        //     to 2^32−1.
        //
        // http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects
        if (typeof index !== 'number') {
          var uint32Index = index >>> 0; // N >>> 0 is shorthand for ToUint32
          if ('' + uint32Index !== index || uint32Index === 4294967295) {
            return NaN;
          }
          index = uint32Index;
        }
        return index < 0 ? ensureSize(iter) + index : index;
      }
    
      function returnTrue() {
        return true;
      }
    
      function wholeSlice(begin, end, size) {
        return (begin === 0 || (size !== undefined && begin <= -size)) &&
          (end === undefined || (size !== undefined && end >= size));
      }
    
      function resolveBegin(begin, size) {
        return resolveIndex(begin, size, 0);
      }
    
      function resolveEnd(end, size) {
        return resolveIndex(end, size, size);
      }
    
      function resolveIndex(index, size, defaultIndex) {
        return index === undefined ?
          defaultIndex :
          index < 0 ?
            Math.max(0, size + index) :
            size === undefined ?
              index :
              Math.min(size, index);
      }
    
      /* global Symbol */
    
      var ITERATE_KEYS = 0;
      var ITERATE_VALUES = 1;
      var ITERATE_ENTRIES = 2;
    
      var REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = '@@iterator';
    
      var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;
    
    
      function Iterator(next) {
          this.next = next;
        }
    
        Iterator.prototype.toString = function() {
          return '[Iterator]';
        };
    
    
      Iterator.KEYS = ITERATE_KEYS;
      Iterator.VALUES = ITERATE_VALUES;
      Iterator.ENTRIES = ITERATE_ENTRIES;
    
      Iterator.prototype.inspect =
      Iterator.prototype.toSource = function () { return this.toString(); }
      Iterator.prototype[ITERATOR_SYMBOL] = function () {
        return this;
      };
    
    
      function iteratorValue(type, k, v, iteratorResult) {
        var value = type === 0 ? k : type === 1 ? v : [k, v];
        iteratorResult ? (iteratorResult.value = value) : (iteratorResult = {
          value: value, done: false
        });
        return iteratorResult;
      }
    
      function iteratorDone() {
        return { value: undefined, done: true };
      }
    
      function hasIterator(maybeIterable) {
        return !!getIteratorFn(maybeIterable);
      }
    
      function isIterator(maybeIterator) {
        return maybeIterator && typeof maybeIterator.next === 'function';
      }
    
      function getIterator(iterable) {
        var iteratorFn = getIteratorFn(iterable);
        return iteratorFn && iteratorFn.call(iterable);
      }
    
      function getIteratorFn(iterable) {
        var iteratorFn = iterable && (
          (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL]) ||
          iterable[FAUX_ITERATOR_SYMBOL]
        );
        if (typeof iteratorFn === 'function') {
          return iteratorFn;
        }
      }
    
      function isArrayLike(value) {
        return value && typeof value.length === 'number';
      }
    
      createClass(Seq, Iterable);
        function Seq(value) {
          return value === null || value === undefined ? emptySequence() :
            isIterable(value) ? value.toSeq() : seqFromValue(value);
        }
    
        Seq.of = function(/*...values*/) {
          return Seq(arguments);
        };
    
        Seq.prototype.toSeq = function() {
          return this;
        };
    
        Seq.prototype.toString = function() {
          return this.__toString('Seq {', '}');
        };
    
        Seq.prototype.cacheResult = function() {
          if (!this._cache && this.__iterateUncached) {
            this._cache = this.entrySeq().toArray();
            this.size = this._cache.length;
          }
          return this;
        };
    
        // abstract __iterateUncached(fn, reverse)
    
        Seq.prototype.__iterate = function(fn, reverse) {
          return seqIterate(this, fn, reverse, true);
        };
    
        // abstract __iteratorUncached(type, reverse)
    
        Seq.prototype.__iterator = function(type, reverse) {
          return seqIterator(this, type, reverse, true);
        };
    
    
    
      createClass(KeyedSeq, Seq);
        function KeyedSeq(value) {
          return value === null || value === undefined ?
            emptySequence().toKeyedSeq() :
            isIterable(value) ?
              (isKeyed(value) ? value.toSeq() : value.fromEntrySeq()) :
              keyedSeqFromValue(value);
        }
    
        KeyedSeq.prototype.toKeyedSeq = function() {
          return this;
        };
    
    
    
      createClass(IndexedSeq, Seq);
        function IndexedSeq(value) {
          return value === null || value === undefined ? emptySequence() :
            !isIterable(value) ? indexedSeqFromValue(value) :
            isKeyed(value) ? value.entrySeq() : value.toIndexedSeq();
        }
    
        IndexedSeq.of = function(/*...values*/) {
          return IndexedSeq(arguments);
        };
    
        IndexedSeq.prototype.toIndexedSeq = function() {
          return this;
        };
    
        IndexedSeq.prototype.toString = function() {
          return this.__toString('Seq [', ']');
        };
    
        IndexedSeq.prototype.__iterate = function(fn, reverse) {
          return seqIterate(this, fn, reverse, false);
        };
    
        IndexedSeq.prototype.__iterator = function(type, reverse) {
          return seqIterator(this, type, reverse, false);
        };
    
    
    
      createClass(SetSeq, Seq);
        function SetSeq(value) {
          return (
            value === null || value === undefined ? emptySequence() :
            !isIterable(value) ? indexedSeqFromValue(value) :
            isKeyed(value) ? value.entrySeq() : value
          ).toSetSeq();
        }
    
        SetSeq.of = function(/*...values*/) {
          return SetSeq(arguments);
        };
    
        SetSeq.prototype.toSetSeq = function() {
          return this;
        };
    
    
    
      Seq.isSeq = isSeq;
      Seq.Keyed = KeyedSeq;
      Seq.Set = SetSeq;
      Seq.Indexed = IndexedSeq;
    
      var IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';
    
      Seq.prototype[IS_SEQ_SENTINEL] = true;
    
    
    
      createClass(ArraySeq, IndexedSeq);
        function ArraySeq(array) {
          this._array = array;
          this.size = array.length;
        }
    
        ArraySeq.prototype.get = function(index, notSetValue) {
          return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;
        };
    
        ArraySeq.prototype.__iterate = function(fn, reverse) {
          var array = this._array;
          var maxIndex = array.length - 1;
          for (var ii = 0; ii <= maxIndex; ii++) {
            if (fn(array[reverse ? maxIndex - ii : ii], ii, this) === false) {
              return ii + 1;
            }
          }
          return ii;
        };
    
        ArraySeq.prototype.__iterator = function(type, reverse) {
          var array = this._array;
          var maxIndex = array.length - 1;
          var ii = 0;
          return new Iterator(function() 
            {return ii > maxIndex ?
              iteratorDone() :
              iteratorValue(type, ii, array[reverse ? maxIndex - ii++ : ii++])}
          );
        };
    
    
    
      createClass(ObjectSeq, KeyedSeq);
        function ObjectSeq(object) {
          var keys = Object.keys(object);
          this._object = object;
          this._keys = keys;
          this.size = keys.length;
        }
    
        ObjectSeq.prototype.get = function(key, notSetValue) {
          if (notSetValue !== undefined && !this.has(key)) {
            return notSetValue;
          }
          return this._object[key];
        };
    
        ObjectSeq.prototype.has = function(key) {
          return this._object.hasOwnProperty(key);
        };
    
        ObjectSeq.prototype.__iterate = function(fn, reverse) {
          var object = this._object;
          var keys = this._keys;
          var maxIndex = keys.length - 1;
          for (var ii = 0; ii <= maxIndex; ii++) {
            var key = keys[reverse ? maxIndex - ii : ii];
            if (fn(object[key], key, this) === false) {
              return ii + 1;
            }
          }
          return ii;
        };
    
        ObjectSeq.prototype.__iterator = function(type, reverse) {
          var object = this._object;
          var keys = this._keys;
          var maxIndex = keys.length - 1;
          var ii = 0;
          return new Iterator(function()  {
            var key = keys[reverse ? maxIndex - ii : ii];
            return ii++ > maxIndex ?
              iteratorDone() :
              iteratorValue(type, key, object[key]);
          });
        };
    
      ObjectSeq.prototype[IS_ORDERED_SENTINEL] = true;
    
    
      createClass(IterableSeq, IndexedSeq);
        function IterableSeq(iterable) {
          this._iterable = iterable;
          this.size = iterable.length || iterable.size;
        }
    
        IterableSeq.prototype.__iterateUncached = function(fn, reverse) {
          if (reverse) {
            return this.cacheResult().__iterate(fn, reverse);
          }
          var iterable = this._iterable;
          var iterator = getIterator(iterable);
          var iterations = 0;
          if (isIterator(iterator)) {
            var step;
            while (!(step = iterator.next()).done) {
              if (fn(step.value, iterations++, this) === false) {
                break;
              }
            }
          }
          return iterations;
        };
    
        IterableSeq.prototype.__iteratorUncached = function(type, reverse) {
          if (reverse) {
            return this.cacheResult().__iterator(type, reverse);
          }
          var iterable = this._iterable;
          var iterator = getIterator(iterable);
          if (!isIterator(iterator)) {
            return new Iterator(iteratorDone);
          }
          var iterations = 0;
          return new Iterator(function()  {
            var step = iterator.next();
            return step.done ? step : iteratorValue(type, iterations++, step.value);
          });
        };
    
    
    
      createClass(IteratorSeq, IndexedSeq);
        function IteratorSeq(iterator) {
          this._iterator = iterator;
          this._iteratorCache = [];
        }
    
        IteratorSeq.prototype.__iterateUncached = function(fn, reverse) {
          if (reverse) {
            return this.cacheResult().__iterate(fn, reverse);
          }
          var iterator = this._iterator;
          var cache = this._iteratorCache;
          var iterations = 0;
          while (iterations < cache.length) {
            if (fn(cache[iterations], iterations++, this) === false) {
              return iterations;
            }
          }
          var step;
          while (!(step = iterator.next()).done) {
            var val = step.value;
            cache[iterations] = val;
            if (fn(val, iterations++, this) === false) {
              break;
            }
          }
          return iterations;
        };
    
        IteratorSeq.prototype.__iteratorUncached = function(type, reverse) {
          if (reverse) {
            return this.cacheResult().__iterator(type, reverse);
          }
          var iterator = this._iterator;
          var cache = this._iteratorCache;
          var iterations = 0;
          return new Iterator(function()  {
            if (iterations >= cache.length) {
              var step = iterator.next();
              if (step.done) {
                return step;
              }
              cache[iterations] = step.value;
            }
            return iteratorValue(type, iterations, cache[iterations++]);
          });
        };
    
    
    
    
      // # pragma Helper functions
    
      function isSeq(maybeSeq) {
        return !!(maybeSeq && maybeSeq[IS_SEQ_SENTINEL]);
      }
    
      var EMPTY_SEQ;
    
      function emptySequence() {
        return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));
      }
    
      function keyedSeqFromValue(value) {
        var seq =
          Array.isArray(value) ? new ArraySeq(value).fromEntrySeq() :
          isIterator(value) ? new IteratorSeq(value).fromEntrySeq() :
          hasIterator(value) ? new IterableSeq(value).fromEntrySeq() :
          typeof value === 'object' ? new ObjectSeq(value) :
          undefined;
        if (!seq) {
          throw new TypeError(
            'Expected Array or iterable object of [k, v] entries, '+
            'or keyed object: ' + value
          );
        }
        return seq;
      }
    
      function indexedSeqFromValue(value) {
        var seq = maybeIndexedSeqFromValue(value);
        if (!seq) {
          throw new TypeError(
            'Expected Array or iterable object of values: ' + value
          );
        }
        return seq;
      }
    
      function seqFromValue(value) {
        var seq = maybeIndexedSeqFromValue(value) ||
          (typeof value === 'object' && new ObjectSeq(value));
        if (!seq) {
          throw new TypeError(
            'Expected Array or iterable object of values, or keyed object: ' + value
          );
        }
        return seq;
      }
    
      function maybeIndexedSeqFromValue(value) {
        return (
          isArrayLike(value) ? new ArraySeq(value) :
          isIterator(value) ? new IteratorSeq(value) :
          hasIterator(value) ? new IterableSeq(value) :
          undefined
        );
      }
    
      function seqIterate(seq, fn, reverse, useKeys) {
        var cache = seq._cache;
        if (cache) {
          var maxIndex = cache.length - 1;
          for (var ii = 0; ii <= maxIndex; ii++) {
            var entry = cache[reverse ? maxIndex - ii : ii];
            if (fn(entry[1], useKeys ? entry[0] : ii, seq) === false) {
              return ii + 1;
            }
          }
          return ii;
        }
        return seq.__iterateUncached(fn, reverse);
      }
    
      function seqIterator(seq, type, reverse, useKeys) {
        var cache = seq._cache;
        if (cache) {
          var maxIndex = cache.length - 1;
          var ii = 0;
          return new Iterator(function()  {
            var entry = cache[reverse ? maxIndex - ii : ii];
            return ii++ > maxIndex ?
              iteratorDone() :
              iteratorValue(type, useKeys ? entry[0] : ii - 1, entry[1]);
          });
        }
        return seq.__iteratorUncached(type, reverse);
      }
    
      function fromJS(json, converter) {
        return converter ?
          fromJSWith(converter, json, '', {'': json}) :
          fromJSDefault(json);
      }
    
      function fromJSWith(converter, json, key, parentJSON) {
        if (Array.isArray(json)) {
          return converter.call(parentJSON, key, IndexedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));
        }
        if (isPlainObj(json)) {
          return converter.call(parentJSON, key, KeyedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));
        }
        return json;
      }
    
      function fromJSDefault(json) {
        if (Array.isArray(json)) {
          return IndexedSeq(json).map(fromJSDefault).toList();
        }
        if (isPlainObj(json)) {
          return KeyedSeq(json).map(fromJSDefault).toMap();
        }
        return json;
      }
    
      function isPlainObj(value) {
        return value && (value.constructor === Object || value.constructor === undefined);
      }
    
      /**
       * An extension of the "same-value" algorithm as [described for use by ES6 Map
       * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)
       *
       * NaN is considered the same as NaN, however -0 and 0 are considered the same
       * value, which is different from the algorithm described by
       * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).
       *
       * This is extended further to allow Objects to describe the values they
       * represent, by way of `valueOf` or `equals` (and `hashCode`).
       *
       * Note: because of this extension, the key equality of Immutable.Map and the
       * value equality of Immutable.Set will differ from ES6 Map and Set.
       *
       * ### Defining custom values
       *
       * The easiest way to describe the value an object represents is by implementing
       * `valueOf`. For example, `Date` represents a value by returning a unix
       * timestamp for `valueOf`:
       *
       *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...
       *     var date2 = new Date(1234567890000);
       *     date1.valueOf(); // 1234567890000
       *     assert( date1 !== date2 );
       *     assert( Immutable.is( date1, date2 ) );
       *
       * Note: overriding `valueOf` may have other implications if you use this object
       * where JavaScript expects a primitive, such as implicit string coercion.
       *
       * For more complex types, especially collections, implementing `valueOf` may
       * not be performant. An alternative is to implement `equals` and `hashCode`.
       *
       * `equals` takes another object, presumably of similar type, and returns true
       * if the it is equal. Equality is symmetrical, so the same result should be
       * returned if this and the argument are flipped.
       *
       *     assert( a.equals(b) === b.equals(a) );
       *
       * `hashCode` returns a 32bit integer number representing the object which will
       * be used to determine how to store the value object in a Map or Set. You must
       * provide both or neither methods, one must not exist without the other.
       *
       * Also, an important relationship between these methods must be upheld: if two
       * values are equal, they *must* return the same hashCode. If the values are not
       * equal, they might have the same hashCode; this is called a hash collision,
       * and while undesirable for performance reasons, it is acceptable.
       *
       *     if (a.equals(b)) {
       *       assert( a.hashCode() === b.hashCode() );
       *     }
       *
       * All Immutable collections implement `equals` and `hashCode`.
       *
       */
      function is(valueA, valueB) {
        if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {
          return true;
        }
        if (!valueA || !valueB) {
          return false;
        }
        if (typeof valueA.valueOf === 'function' &&
            typeof valueB.valueOf === 'function') {
          valueA = valueA.valueOf();
          valueB = valueB.valueOf();
          if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {
            return true;
          }
          if (!valueA || !valueB) {
            return false;
          }
        }
        if (typeof valueA.equals === 'function' &&
            typeof valueB.equals === 'function' &&
            valueA.equals(valueB)) {
          return true;
        }
        return false;
      }
    
      function deepEqual(a, b) {
        if (a === b) {
          return true;
        }
    
        if (
          !isIterable(b) ||
          a.size !== undefined && b.size !== undefined && a.size !== b.size ||
          a.__hash !== undefined && b.__hash !== undefined && a.__hash !== b.__hash ||
          isKeyed(a) !== isKeyed(b) ||
          isIndexed(a) !== isIndexed(b) ||
          isOrdered(a) !== isOrdered(b)
        ) {
          return false;
        }
    
        if (a.size === 0 && b.size === 0) {
          return true;
        }
    
        var notAssociative = !isAssociative(a);
    
        if (isOrdered(a)) {
          var entries = a.entries();
          return b.every(function(v, k)  {
            var entry = entries.next().value;
            return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));
          }) && entries.next().done;
        }
    
        var flipped = false;
    
        if (a.size === undefined) {
          if (b.size === undefined) {
            if (typeof a.cacheResult === 'function') {
              a.cacheResult();
            }
          } else {
            flipped = true;
            var _ = a;
            a = b;
            b = _;
          }
        }
    
        var allEqual = true;
        var bSize = b.__iterate(function(v, k)  {
          if (notAssociative ? !a.has(v) :
              flipped ? !is(v, a.get(k, NOT_SET)) : !is(a.get(k, NOT_SET), v)) {
            allEqual = false;
            return false;
          }
        });
    
        return allEqual && a.size === bSize;
      }
    
      createClass(Repeat, IndexedSeq);
    
        function Repeat(value, times) {
          if (!(this instanceof Repeat)) {
            return new Repeat(value, times);
          }
          this._value = value;
          this.size = times === undefined ? Infinity : Math.max(0, times);
          if (this.size === 0) {
            if (EMPTY_REPEAT) {
              return EMPTY_REPEAT;
            }
            EMPTY_REPEAT = this;
          }
        }
    
        Repeat.prototype.toString = function() {
          if (this.size === 0) {
            return 'Repeat []';
          }
          return 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';
        };
    
        Repeat.prototype.get = function(index, notSetValue) {
          return this.has(index) ? this._value : notSetValue;
        };
    
        Repeat.prototype.includes = function(searchValue) {
          return is(this._value, searchValue);
        };
    
        Repeat.prototype.slice = function(begin, end) {
          var size = this.size;
          return wholeSlice(begin, end, size) ? this :
            new Repeat(this._value, resolveEnd(end, size) - resolveBegin(begin, size));
        };
    
        Repeat.prototype.reverse = function() {
          return this;
        };
    
        Repeat.prototype.indexOf = function(searchValue) {
          if (is(this._value, searchValue)) {
            return 0;
          }
          return -1;
        };
    
        Repeat.prototype.lastIndexOf = function(searchValue) {
          if (is(this._value, searchValue)) {
            return this.size;
          }
          return -1;
        };
    
        Repeat.prototype.__iterate = function(fn, reverse) {
          for (var ii = 0; ii < this.size; ii++) {
            if (fn(this._value, ii, this) === false) {
              return ii + 1;
            }
          }
          return ii;
        };
    
        Repeat.prototype.__iterator = function(type, reverse) {var this$0 = this;
          var ii = 0;
          return new Iterator(function() 
            {return ii < this$0.size ? iteratorValue(type, ii++, this$0._value) : iteratorDone()}
          );
        };
    
        Repeat.prototype.equals = function(other) {
          return other instanceof Repeat ?
            is(this._value, other._value) :
            deepEqual(other);
        };
    
    
      var EMPTY_REPEAT;
    
      function invariant(condition, error) {
        if (!condition) throw new Error(error);
      }
    
      createClass(Range, IndexedSeq);
    
        function Range(start, end, step) {
          if (!(this instanceof Range)) {
            return new Range(start, end, step);
          }
          invariant(step !== 0, 'Cannot step a Range by 0');
          start = start || 0;
          if (end === undefined) {
            end = Infinity;
          }
          step = step === undefined ? 1 : Math.abs(step);
          if (end < start) {
            step = -step;
          }
          this._start = start;
          this._end = end;
          this._step = step;
          this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);
          if (this.size === 0) {
            if (EMPTY_RANGE) {
              return EMPTY_RANGE;
            }
            EMPTY_RANGE = this;
          }
        }
    
        Range.prototype.toString = function() {
          if (this.size === 0) {
            return 'Range []';
          }
          return 'Range [ ' +
            this._start + '...' + this._end +
            (this._step !== 1 ? ' by ' + this._step : '') +
          ' ]';
        };
    
        Range.prototype.get = function(index, notSetValue) {
          return this.has(index) ?
            this._start + wrapIndex(this, index) * this._step :
            notSetValue;
        };
    
        Range.prototype.includes = function(searchValue) {
          var possibleIndex = (searchValue - this._start) / this._step;
          return possibleIndex >= 0 &&
            possibleIndex < this.size &&
            possibleIndex === Math.floor(possibleIndex);
        };
    
        Range.prototype.slice = function(begin, end) {
          if (wholeSlice(begin, end, this.size)) {
            return this;
          }
          begin = resolveBegin(begin, this.size);
          end = resolveEnd(end, this.size);
          if (end <= begin) {
            return new Range(0, 0);
          }
          return new Range(this.get(begin, this._end), this.get(end, this._end), this._step);
        };
    
        Range.prototype.indexOf = function(searchValue) {
          var offsetValue = searchValue - this._start;
          if (offsetValue % this._step === 0) {
            var index = offsetValue / this._step;
            if (index >= 0 && index < this.size) {
              return index
            }
          }
          return -1;
        };
    
        Range.prototype.lastIndexOf = function(searchValue) {
          return this.indexOf(searchValue);
        };
    
        Range.prototype.__iterate = function(fn, reverse) {
          var maxIndex = this.size - 1;
          var step = this._step;
          var value = reverse ? this._start + maxIndex * step : this._start;
          for (var ii = 0; ii <= maxIndex; ii++) {
            if (fn(value, ii, this) === false) {
              return ii + 1;
            }
            value += reverse ? -step : step;
          }
          return ii;
        };
    
        Range.prototype.__iterator = function(type, reverse) {
          var maxIndex = this.size - 1;
          var step = this._step;
          var value = reverse ? this._start + maxIndex * step : this._start;
          var ii = 0;
          return new Iterator(function()  {
            var v = value;
            value += reverse ? -step : step;
            return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii++, v);
          });
        };
    
        Range.prototype.equals = function(other) {
          return other instanceof Range ?
            this._start === other._start &&
            this._end === other._end &&
            this._step === other._step :
            deepEqual(this, other);
        };
    
    
      var EMPTY_RANGE;
    
      createClass(Collection, Iterable);
        function Collection() {
          throw TypeError('Abstract');
        }
    
    
      createClass(KeyedCollection, Collection);function KeyedCollection() {}
    
      createClass(IndexedCollection, Collection);function IndexedCollection() {}
    
      createClass(SetCollection, Collection);function SetCollection() {}
    
    
      Collection.Keyed = KeyedCollection;
      Collection.Indexed = IndexedCollection;
      Collection.Set = SetCollection;
    
      var imul =
        typeof Math.imul === 'function' && Math.imul(0xffffffff, 2) === -2 ?
        Math.imul :
        function imul(a, b) {
          a = a | 0; // int
          b = b | 0; // int
          var c = a & 0xffff;
          var d = b & 0xffff;
          // Shift by 0 fixes the sign on the high part.
          return (c * d) + ((((a >>> 16) * d + c * (b >>> 16)) << 16) >>> 0) | 0; // int
        };
    
      // v8 has an optimization for storing 31-bit signed numbers.
      // Values which have either 00 or 11 as the high order bits qualify.
      // This function drops the highest order bit in a signed number, maintaining
      // the sign bit.
      function smi(i32) {
        return ((i32 >>> 1) & 0x40000000) | (i32 & 0xBFFFFFFF);
      }
    
      function hash(o) {
        if (o === false || o === null || o === undefined) {
          return 0;
        }
        if (typeof o.valueOf === 'function') {
          o = o.valueOf();
          if (o === false || o === null || o === undefined) {
            return 0;
          }
        }
        if (o === true) {
          return 1;
        }
        var type = typeof o;
        if (type === 'number') {
          if (o !== o || o === Infinity) {
            return 0;
          }
          var h = o | 0;
          if (h !== o) {
            h ^= o * 0xFFFFFFFF;
          }
          while (o > 0xFFFFFFFF) {
            o /= 0xFFFFFFFF;
            h ^= o;
          }
          return smi(h);
        }
        if (type === 'string') {
          return o.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(o) : hashString(o);
        }
        if (typeof o.hashCode === 'function') {
          return o.hashCode();
        }
        if (type === 'object') {
          return hashJSObj(o);
        }
        if (typeof o.toString === 'function') {
          return hashString(o.toString());
        }
        throw new Error('Value type ' + type + ' cannot be hashed.');
      }
    
      function cachedHashString(string) {
        var hash = stringHashCache[string];
        if (hash === undefined) {
          hash = hashString(string);
          if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {
            STRING_HASH_CACHE_SIZE = 0;
            stringHashCache = {};
          }
          STRING_HASH_CACHE_SIZE++;
          stringHashCache[string] = hash;
        }
        return hash;
      }
    
      // http://jsperf.com/hashing-strings
      function hashString(string) {
        // This is the hash from JVM
        // The hash code for a string is computed as
        // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],
        // where s[i] is the ith character of the string and n is the length of
        // the string. We "mod" the result to make it between 0 (inclusive) and 2^31
        // (exclusive) by dropping high bits.
        var hash = 0;
        for (var ii = 0; ii < string.length; ii++) {
          hash = 31 * hash + string.charCodeAt(ii) | 0;
        }
        return smi(hash);
      }
    
      function hashJSObj(obj) {
        var hash;
        if (usingWeakMap) {
          hash = weakMap.get(obj);
          if (hash !== undefined) {
            return hash;
          }
        }
    
        hash = obj[UID_HASH_KEY];
        if (hash !== undefined) {
          return hash;
        }
    
        if (!canDefineProperty) {
          hash = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];
          if (hash !== undefined) {
            return hash;
          }
    
          hash = getIENodeHash(obj);
          if (hash !== undefined) {
            return hash;
          }
        }
    
        hash = ++objHashUID;
        if (objHashUID & 0x40000000) {
          objHashUID = 0;
        }
    
        if (usingWeakMap) {
          weakMap.set(obj, hash);
        } else if (isExtensible !== undefined && isExtensible(obj) === false) {
          throw new Error('Non-extensible objects are not allowed as keys.');
        } else if (canDefineProperty) {
          Object.defineProperty(obj, UID_HASH_KEY, {
            'enumerable': false,
            'configurable': false,
            'writable': false,
            'value': hash
          });
        } else if (obj.propertyIsEnumerable !== undefined &&
                   obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {
          // Since we can't define a non-enumerable property on the object
          // we'll hijack one of the less-used non-enumerable properties to
          // save our hash on it. Since this is a function it will not show up in
          // `JSON.stringify` which is what we want.
          obj.propertyIsEnumerable = function() {
            return this.constructor.prototype.propertyIsEnumerable.apply(this, arguments);
          };
          obj.propertyIsEnumerable[UID_HASH_KEY] = hash;
        } else if (obj.nodeType !== undefined) {
          // At this point we couldn't get the IE `uniqueID` to use as a hash
          // and we couldn't use a non-enumerable property to exploit the
          // dontEnum bug so we simply add the `UID_HASH_KEY` on the node
          // itself.
          obj[UID_HASH_KEY] = hash;
        } else {
          throw new Error('Unable to set a non-enumerable property on object.');
        }
    
        return hash;
      }
    
      // Get references to ES5 object methods.
      var isExtensible = Object.isExtensible;
    
      // True if Object.defineProperty works as expected. IE8 fails this test.
      var canDefineProperty = (function() {
        try {
          Object.defineProperty({}, '@', {});
          return true;
        } catch (e) {
          return false;
        }
      }());
    
      // IE has a `uniqueID` property on DOM nodes. We can construct the hash from it
      // and avoid memory leaks from the IE cloneNode bug.
      function getIENodeHash(node) {
        if (node && node.nodeType > 0) {
          switch (node.nodeType) {
            case 1: // Element
              return node.uniqueID;
            case 9: // Document
              return node.documentElement && node.documentElement.uniqueID;
          }
        }
      }
    
      // If possible, use a WeakMap.
      var usingWeakMap = typeof WeakMap === 'function';
      var weakMap;
      if (usingWeakMap) {
        weakMap = new WeakMap();
      }
    
      var objHashUID = 0;
    
      var UID_HASH_KEY = '__immutablehash__';
      if (typeof Symbol === 'function') {
        UID_HASH_KEY = Symbol(UID_HASH_KEY);
      }
    
      var STRING_HASH_CACHE_MIN_STRLEN = 16;
      var STRING_HASH_CACHE_MAX_SIZE = 255;
      var STRING_HASH_CACHE_SIZE = 0;
      var stringHashCache = {};
    
      function assertNotInfinite(size) {
        invariant(
          size !== Infinity,
          'Cannot perform this action with an infinite size.'
        );
      }
    
      createClass(Map, KeyedCollection);
    
        // @pragma Construction
    
        function Map(value) {
          return value === null || value === undefined ? emptyMap() :
            isMap(value) && !isOrdered(value) ? value :
            emptyMap().withMutations(function(map ) {
              var iter = KeyedIterable(value);
              assertNotInfinite(iter.size);
              iter.forEach(function(v, k)  {return map.set(k, v)});
            });
        }
    
        Map.of = function() {var keyValues = SLICE$0.call(arguments, 0);
          return emptyMap().withMutations(function(map ) {
            for (var i = 0; i < keyValues.length; i += 2) {
              if (i + 1 >= keyValues.length) {
                throw new Error('Missing value for key: ' + keyValues[i]);
              }
              map.set(keyValues[i], keyValues[i + 1]);
            }
          });
        };
    
        Map.prototype.toString = function() {
          return this.__toString('Map {', '}');
        };
    
        // @pragma Access
    
        Map.prototype.get = function(k, notSetValue) {
          return this._root ?
            this._root.get(0, undefined, k, notSetValue) :
            notSetValue;
        };
    
        // @pragma Modification
    
        Map.prototype.set = function(k, v) {
          return updateMap(this, k, v);
        };
    
        Map.prototype.setIn = function(keyPath, v) {
          return this.updateIn(keyPath, NOT_SET, function()  {return v});
        };
    
        Map.prototype.remove = function(k) {
          return updateMap(this, k, NOT_SET);
        };
    
        Map.prototype.deleteIn = function(keyPath) {
          return this.updateIn(keyPath, function()  {return NOT_SET});
        };
    
        Map.prototype.update = function(k, notSetValue, updater) {
          return arguments.length === 1 ?
            k(this) :
            this.updateIn([k], notSetValue, updater);
        };
    
        Map.prototype.updateIn = function(keyPath, notSetValue, updater) {
          if (!updater) {
            updater = notSetValue;
            notSetValue = undefined;
          }
          var updatedValue = updateInDeepMap(
            this,
            forceIterator(keyPath),
            notSetValue,
            updater
          );
          return updatedValue === NOT_SET ? undefined : updatedValue;
        };
    
        Map.prototype.clear = function() {
          if (this.size === 0) {
            return this;
          }
          if (this.__ownerID) {
            this.size = 0;
            this._root = null;
            this.__hash = undefined;
            this.__altered = true;
            return this;
          }
          return emptyMap();
        };
    
        // @pragma Composition
    
        Map.prototype.merge = function(/*...iters*/) {
          return mergeIntoMapWith(this, undefined, arguments);
        };
    
        Map.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
          return mergeIntoMapWith(this, merger, iters);
        };
    
        Map.prototype.mergeIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);
          return this.updateIn(
            keyPath,
            emptyMap(),
            function(m ) {return typeof m.merge === 'function' ?
              m.merge.apply(m, iters) :
              iters[iters.length - 1]}
          );
        };
    
        Map.prototype.mergeDeep = function(/*...iters*/) {
          return mergeIntoMapWith(this, deepMerger, arguments);
        };
    
        Map.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
          return mergeIntoMapWith(this, deepMergerWith(merger), iters);
        };
    
        Map.prototype.mergeDeepIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);
          return this.updateIn(
            keyPath,
            emptyMap(),
            function(m ) {return typeof m.mergeDeep === 'function' ?
              m.mergeDeep.apply(m, iters) :
              iters[iters.length - 1]}
          );
        };
    
        Map.prototype.sort = function(comparator) {
          // Late binding
          return OrderedMap(sortFactory(this, comparator));
        };
    
        Map.prototype.sortBy = function(mapper, comparator) {
          // Late binding
          return OrderedMap(sortFactory(this, comparator, mapper));
        };
    
        // @pragma Mutability
    
        Map.prototype.withMutations = function(fn) {
          var mutable = this.asMutable();
          fn(mutable);
          return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;
        };
    
        Map.prototype.asMutable = function() {
          return this.__ownerID ? this : this.__ensureOwner(new OwnerID());
        };
    
        Map.prototype.asImmutable = function() {
          return this.__ensureOwner();
        };
    
        Map.prototype.wasAltered = function() {
          return this.__altered;
        };
    
        Map.prototype.__iterator = function(type, reverse) {
          return new MapIterator(this, type, reverse);
        };
    
        Map.prototype.__iterate = function(fn, reverse) {var this$0 = this;
          var iterations = 0;
          this._root && this._root.iterate(function(entry ) {
            iterations++;
            return fn(entry[1], entry[0], this$0);
          }, reverse);
          return iterations;
        };
    
        Map.prototype.__ensureOwner = function(ownerID) {
          if (ownerID === this.__ownerID) {
            return this;
          }
          if (!ownerID) {
            this.__ownerID = ownerID;
            this.__altered = false;
            return this;
          }
          return makeMap(this.size, this._root, ownerID, this.__hash);
        };
    
    
      function isMap(maybeMap) {
        return !!(maybeMap && maybeMap[IS_MAP_SENTINEL]);
      }
    
      Map.isMap = isMap;
    
      var IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';
    
      var MapPrototype = Map.prototype;
      MapPrototype[IS_MAP_SENTINEL] = true;
      MapPrototype[DELETE] = MapPrototype.remove;
      MapPrototype.removeIn = MapPrototype.deleteIn;
    
    
      // #pragma Trie Nodes
    
    
    
        function ArrayMapNode(ownerID, entries) {
          this.ownerID = ownerID;
          this.entries = entries;
        }
    
        ArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {
          var entries = this.entries;
          for (var ii = 0, len = entries.length; ii < len; ii++) {
            if (is(key, entries[ii][0])) {
              return entries[ii][1];
            }
          }
          return notSetValue;
        };
    
        ArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
          var removed = value === NOT_SET;
    
          var entries = this.entries;
          var idx = 0;
          for (var len = entries.length; idx < len; idx++) {
            if (is(key, entries[idx][0])) {
              break;
            }
          }
          var exists = idx < len;
    
          if (exists ? entries[idx][1] === value : removed) {
            return this;
          }
    
          SetRef(didAlter);
          (removed || !exists) && SetRef(didChangeSize);
    
          if (removed && entries.length === 1) {
            return; // undefined
          }
    
          if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {
            return createNodes(ownerID, entries, key, value);
          }
    
          var isEditable = ownerID && ownerID === this.ownerID;
          var newEntries = isEditable ? entries : arrCopy(entries);
    
          if (exists) {
            if (removed) {
              idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());
            } else {
              newEntries[idx] = [key, value];
            }
          } else {
            newEntries.push([key, value]);
          }
    
          if (isEditable) {
            this.entries = newEntries;
            return this;
          }
    
          return new ArrayMapNode(ownerID, newEntries);
        };
    
    
    
    
        function BitmapIndexedNode(ownerID, bitmap, nodes) {
          this.ownerID = ownerID;
          this.bitmap = bitmap;
          this.nodes = nodes;
        }
    
        BitmapIndexedNode.prototype.get = function(shift, keyHash, key, notSetValue) {
          if (keyHash === undefined) {
            keyHash = hash(key);
          }
          var bit = (1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK));
          var bitmap = this.bitmap;
          return (bitmap & bit) === 0 ? notSetValue :
            this.nodes[popCount(bitmap & (bit - 1))].get(shift + SHIFT, keyHash, key, notSetValue);
        };
    
        BitmapIndexedNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
          if (keyHash === undefined) {
            keyHash = hash(key);
          }
          var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
          var bit = 1 << keyHashFrag;
          var bitmap = this.bitmap;
          var exists = (bitmap & bit) !== 0;
    
          if (!exists && value === NOT_SET) {
            return this;
          }
    
          var idx = popCount(bitmap & (bit - 1));
          var nodes = this.nodes;
          var node = exists ? nodes[idx] : undefined;
          var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);
    
          if (newNode === node) {
            return this;
          }
    
          if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {
            return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);
          }
    
          if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {
            return nodes[idx ^ 1];
          }
    
          if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {
            return newNode;
          }
    
          var isEditable = ownerID && ownerID === this.ownerID;
          var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;
          var newNodes = exists ? newNode ?
            setIn(nodes, idx, newNode, isEditable) :
            spliceOut(nodes, idx, isEditable) :
            spliceIn(nodes, idx, newNode, isEditable);
    
          if (isEditable) {
            this.bitmap = newBitmap;
            this.nodes = newNodes;
            return this;
          }
    
          return new BitmapIndexedNode(ownerID, newBitmap, newNodes);
        };
    
    
    
    
        function HashArrayMapNode(ownerID, count, nodes) {
          this.ownerID = ownerID;
          this.count = count;
          this.nodes = nodes;
        }
    
        HashArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {
          if (keyHash === undefined) {
            keyHash = hash(key);
          }
          var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
          var node = this.nodes[idx];
          return node ? node.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;
        };
    
        HashArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
          if (keyHash === undefined) {
            keyHash = hash(key);
          }
          var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
          var removed = value === NOT_SET;
          var nodes = this.nodes;
          var node = nodes[idx];
    
          if (removed && !node) {
            return this;
          }
    
          var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);
          if (newNode === node) {
            return this;
          }
    
          var newCount = this.count;
          if (!node) {
            newCount++;
          } else if (!newNode) {
            newCount--;
            if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {
              return packNodes(ownerID, nodes, newCount, idx);
            }
          }
    
          var isEditable = ownerID && ownerID === this.ownerID;
          var newNodes = setIn(nodes, idx, newNode, isEditable);
    
          if (isEditable) {
            this.count = newCount;
            this.nodes = newNodes;
            return this;
          }
    
          return new HashArrayMapNode(ownerID, newCount, newNodes);
        };
    
    
    
    
        function HashCollisionNode(ownerID, keyHash, entries) {
          this.ownerID = ownerID;
          this.keyHash = keyHash;
          this.entries = entries;
        }
    
        HashCollisionNode.prototype.get = function(shift, keyHash, key, notSetValue) {
          var entries = this.entries;
          for (var ii = 0, len = entries.length; ii < len; ii++) {
            if (is(key, entries[ii][0])) {
              return entries[ii][1];
            }
          }
          return notSetValue;
        };
    
        HashCollisionNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
          if (keyHash === undefined) {
            keyHash = hash(key);
          }
    
          var removed = value === NOT_SET;
    
          if (keyHash !== this.keyHash) {
            if (removed) {
              return this;
            }
            SetRef(didAlter);
            SetRef(didChangeSize);
            return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);
          }
    
          var entries = this.entries;
          var idx = 0;
          for (var len = entries.length; idx < len; idx++) {
            if (is(key, entries[idx][0])) {
              break;
            }
          }
          var exists = idx < len;
    
          if (exists ? entries[idx][1] === value : removed) {
            return this;
          }
    
          SetRef(didAlter);
          (removed || !exists) && SetRef(didChangeSize);
    
          if (removed && len === 2) {
            return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);
          }
    
          var isEditable = ownerID && ownerID === this.ownerID;
          var newEntries = isEditable ? entries : arrCopy(entries);
    
          if (exists) {
            if (removed) {
              idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());
            } else {
              newEntries[idx] = [key, value];
            }
          } else {
            newEntries.push([key, value]);
          }
    
          if (isEditable) {
            this.entries = newEntries;
            return this;
          }
    
          return new HashCollisionNode(ownerID, this.keyHash, newEntries);
        };
    
    
    
    
        function ValueNode(ownerID, keyHash, entry) {
          this.ownerID = ownerID;
          this.keyHash = keyHash;
          this.entry = entry;
        }
    
        ValueNode.prototype.get = function(shift, keyHash, key, notSetValue) {
          return is(key, this.entry[0]) ? this.entry[1] : notSetValue;
        };
    
        ValueNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
          var removed = value === NOT_SET;
          var keyMatch = is(key, this.entry[0]);
          if (keyMatch ? value === this.entry[1] : removed) {
            return this;
          }
    
          SetRef(didAlter);
    
          if (removed) {
            SetRef(didChangeSize);
            return; // undefined
          }
    
          if (keyMatch) {
            if (ownerID && ownerID === this.ownerID) {
              this.entry[1] = value;
              return this;
            }
            return new ValueNode(ownerID, this.keyHash, [key, value]);
          }
    
          SetRef(didChangeSize);
          return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);
        };
    
    
    
      // #pragma Iterators
    
      ArrayMapNode.prototype.iterate =
      HashCollisionNode.prototype.iterate = function (fn, reverse) {
        var entries = this.entries;
        for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {
          if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {
            return false;
          }
        }
      }
    
      BitmapIndexedNode.prototype.iterate =
      HashArrayMapNode.prototype.iterate = function (fn, reverse) {
        var nodes = this.nodes;
        for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {
          var node = nodes[reverse ? maxIndex - ii : ii];
          if (node && node.iterate(fn, reverse) === false) {
            return false;
          }
        }
      }
    
      ValueNode.prototype.iterate = function (fn, reverse) {
        return fn(this.entry);
      }
    
      createClass(MapIterator, Iterator);
    
        function MapIterator(map, type, reverse) {
          this._type = type;
          this._reverse = reverse;
          this._stack = map._root && mapIteratorFrame(map._root);
        }
    
        MapIterator.prototype.next = function() {
          var type = this._type;
          var stack = this._stack;
          while (stack) {
            var node = stack.node;
            var index = stack.index++;
            var maxIndex;
            if (node.entry) {
              if (index === 0) {
                return mapIteratorValue(type, node.entry);
              }
            } else if (node.entries) {
              maxIndex = node.entries.length - 1;
              if (index <= maxIndex) {
                return mapIteratorValue(type, node.entries[this._reverse ? maxIndex - index : index]);
              }
            } else {
              maxIndex = node.nodes.length - 1;
              if (index <= maxIndex) {
                var subNode = node.nodes[this._reverse ? maxIndex - index : index];
                if (subNode) {
                  if (subNode.entry) {
                    return mapIteratorValue(type, subNode.entry);
                  }
                  stack = this._stack = mapIteratorFrame(subNode, stack);
                }
                continue;
              }
            }
            stack = this._stack = this._stack.__prev;
          }
          return iteratorDone();
        };
    
    
      function mapIteratorValue(type, entry) {
        return iteratorValue(type, entry[0], entry[1]);
      }
    
      function mapIteratorFrame(node, prev) {
        return {
          node: node,
          index: 0,
          __prev: prev
        };
      }
    
      function makeMap(size, root, ownerID, hash) {
        var map = Object.create(MapPrototype);
        map.size = size;
        map._root = root;
        map.__ownerID = ownerID;
        map.__hash = hash;
        map.__altered = false;
        return map;
      }
    
      var EMPTY_MAP;
      function emptyMap() {
        return EMPTY_MAP || (EMPTY_MAP = makeMap(0));
      }
    
      function updateMap(map, k, v) {
        var newRoot;
        var newSize;
        if (!map._root) {
          if (v === NOT_SET) {
            return map;
          }
          newSize = 1;
          newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);
        } else {
          var didChangeSize = MakeRef(CHANGE_LENGTH);
          var didAlter = MakeRef(DID_ALTER);
          newRoot = updateNode(map._root, map.__ownerID, 0, undefined, k, v, didChangeSize, didAlter);
          if (!didAlter.value) {
            return map;
          }
          newSize = map.size + (didChangeSize.value ? v === NOT_SET ? -1 : 1 : 0);
        }
        if (map.__ownerID) {
          map.size = newSize;
          map._root = newRoot;
          map.__hash = undefined;
          map.__altered = true;
          return map;
        }
        return newRoot ? makeMap(newSize, newRoot) : emptyMap();
      }
    
      function updateNode(node, ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
        if (!node) {
          if (value === NOT_SET) {
            return node;
          }
          SetRef(didAlter);
          SetRef(didChangeSize);
          return new ValueNode(ownerID, keyHash, [key, value]);
        }
        return node.update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter);
      }
    
      function isLeafNode(node) {
        return node.constructor === ValueNode || node.constructor === HashCollisionNode;
      }
    
      function mergeIntoNode(node, ownerID, shift, keyHash, entry) {
        if (node.keyHash === keyHash) {
          return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);
        }
    
        var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;
        var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
    
        var newNode;
        var nodes = idx1 === idx2 ?
          [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)] :
          ((newNode = new ValueNode(ownerID, keyHash, entry)), idx1 < idx2 ? [node, newNode] : [newNode, node]);
    
        return new BitmapIndexedNode(ownerID, (1 << idx1) | (1 << idx2), nodes);
      }
    
      function createNodes(ownerID, entries, key, value) {
        if (!ownerID) {
          ownerID = new OwnerID();
        }
        var node = new ValueNode(ownerID, hash(key), [key, value]);
        for (var ii = 0; ii < entries.length; ii++) {
          var entry = entries[ii];
          node = node.update(ownerID, 0, undefined, entry[0], entry[1]);
        }
        return node;
      }
    
      function packNodes(ownerID, nodes, count, excluding) {
        var bitmap = 0;
        var packedII = 0;
        var packedNodes = new Array(count);
        for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {
          var node = nodes[ii];
          if (node !== undefined && ii !== excluding) {
            bitmap |= bit;
            packedNodes[packedII++] = node;
          }
        }
        return new BitmapIndexedNode(ownerID, bitmap, packedNodes);
      }
    
      function expandNodes(ownerID, nodes, bitmap, including, node) {
        var count = 0;
        var expandedNodes = new Array(SIZE);
        for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {
          expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;
        }
        expandedNodes[including] = node;
        return new HashArrayMapNode(ownerID, count + 1, expandedNodes);
      }
    
      function mergeIntoMapWith(map, merger, iterables) {
        var iters = [];
        for (var ii = 0; ii < iterables.length; ii++) {
          var value = iterables[ii];
          var iter = KeyedIterable(value);
          if (!isIterable(value)) {
            iter = iter.map(function(v ) {return fromJS(v)});
          }
          iters.push(iter);
        }
        return mergeIntoCollectionWith(map, merger, iters);
      }
    
      function deepMerger(existing, value, key) {
        return existing && existing.mergeDeep && isIterable(value) ?
          existing.mergeDeep(value) :
          is(existing, value) ? existing : value;
      }
    
      function deepMergerWith(merger) {
        return function(existing, value, key)  {
          if (existing && existing.mergeDeepWith && isIterable(value)) {
            return existing.mergeDeepWith(merger, value);
          }
          var nextValue = merger(existing, value, key);
          return is(existing, nextValue) ? existing : nextValue;
        };
      }
    
      function mergeIntoCollectionWith(collection, merger, iters) {
        iters = iters.filter(function(x ) {return x.size !== 0});
        if (iters.length === 0) {
          return collection;
        }
        if (collection.size === 0 && !collection.__ownerID && iters.length === 1) {
          return collection.constructor(iters[0]);
        }
        return collection.withMutations(function(collection ) {
          var mergeIntoMap = merger ?
            function(value, key)  {
              collection.update(key, NOT_SET, function(existing )
                {return existing === NOT_SET ? value : merger(existing, value, key)}
              );
            } :
            function(value, key)  {
              collection.set(key, value);
            }
          for (var ii = 0; ii < iters.length; ii++) {
            iters[ii].forEach(mergeIntoMap);
          }
        });
      }
    
      function updateInDeepMap(existing, keyPathIter, notSetValue, updater) {
        var isNotSet = existing === NOT_SET;
        var step = keyPathIter.next();
        if (step.done) {
          var existingValue = isNotSet ? notSetValue : existing;
          var newValue = updater(existingValue);
          return newValue === existingValue ? existing : newValue;
        }
        invariant(
          isNotSet || (existing && existing.set),
          'invalid keyPath'
        );
        var key = step.value;
        var nextExisting = isNotSet ? NOT_SET : existing.get(key, NOT_SET);
        var nextUpdated = updateInDeepMap(
          nextExisting,
          keyPathIter,
          notSetValue,
          updater
        );
        return nextUpdated === nextExisting ? existing :
          nextUpdated === NOT_SET ? existing.remove(key) :
          (isNotSet ? emptyMap() : existing).set(key, nextUpdated);
      }
    
      function popCount(x) {
        x = x - ((x >> 1) & 0x55555555);
        x = (x & 0x33333333) + ((x >> 2) & 0x33333333);
        x = (x + (x >> 4)) & 0x0f0f0f0f;
        x = x + (x >> 8);
        x = x + (x >> 16);
        return x & 0x7f;
      }
    
      function setIn(array, idx, val, canEdit) {
        var newArray = canEdit ? array : arrCopy(array);
        newArray[idx] = val;
        return newArray;
      }
    
      function spliceIn(array, idx, val, canEdit) {
        var newLen = array.length + 1;
        if (canEdit && idx + 1 === newLen) {
          array[idx] = val;
          return array;
        }
        var newArray = new Array(newLen);
        var after = 0;
        for (var ii = 0; ii < newLen; ii++) {
          if (ii === idx) {
            newArray[ii] = val;
            after = -1;
          } else {
            newArray[ii] = array[ii + after];
          }
        }
        return newArray;
      }
    
      function spliceOut(array, idx, canEdit) {
        var newLen = array.length - 1;
        if (canEdit && idx === newLen) {
          array.pop();
          return array;
        }
        var newArray = new Array(newLen);
        var after = 0;
        for (var ii = 0; ii < newLen; ii++) {
          if (ii === idx) {
            after = 1;
          }
          newArray[ii] = array[ii + after];
        }
        return newArray;
      }
    
      var MAX_ARRAY_MAP_SIZE = SIZE / 4;
      var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;
      var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;
    
      createClass(List, IndexedCollection);
    
        // @pragma Construction
    
        function List(value) {
          var empty = emptyList();
          if (value === null || value === undefined) {
            return empty;
          }
          if (isList(value)) {
            return value;
          }
          var iter = IndexedIterable(value);
          var size = iter.size;
          if (size === 0) {
            return empty;
          }
          assertNotInfinite(size);
          if (size > 0 && size < SIZE) {
            return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));
          }
          return empty.withMutations(function(list ) {
            list.setSize(size);
            iter.forEach(function(v, i)  {return list.set(i, v)});
          });
        }
    
        List.of = function(/*...values*/) {
          return this(arguments);
        };
    
        List.prototype.toString = function() {
          return this.__toString('List [', ']');
        };
    
        // @pragma Access
    
        List.prototype.get = function(index, notSetValue) {
          index = wrapIndex(this, index);
          if (index >= 0 && index < this.size) {
            index += this._origin;
            var node = listNodeFor(this, index);
            return node && node.array[index & MASK];
          }
          return notSetValue;
        };
    
        // @pragma Modification
    
        List.prototype.set = function(index, value) {
          return updateList(this, index, value);
        };
    
        List.prototype.remove = function(index) {
          return !this.has(index) ? this :
            index === 0 ? this.shift() :
            index === this.size - 1 ? this.pop() :
            this.splice(index, 1);
        };
    
        List.prototype.insert = function(index, value) {
          return this.splice(index, 0, value);
        };
    
        List.prototype.clear = function() {
          if (this.size === 0) {
            return this;
          }
          if (this.__ownerID) {
            this.size = this._origin = this._capacity = 0;
            this._level = SHIFT;
            this._root = this._tail = null;
            this.__hash = undefined;
            this.__altered = true;
            return this;
          }
          return emptyList();
        };
    
        List.prototype.push = function(/*...values*/) {
          var values = arguments;
          var oldSize = this.size;
          return this.withMutations(function(list ) {
            setListBounds(list, 0, oldSize + values.length);
            for (var ii = 0; ii < values.length; ii++) {
              list.set(oldSize + ii, values[ii]);
            }
          });
        };
    
        List.prototype.pop = function() {
          return setListBounds(this, 0, -1);
        };
    
        List.prototype.unshift = function(/*...values*/) {
          var values = arguments;
          return this.withMutations(function(list ) {
            setListBounds(list, -values.length);
            for (var ii = 0; ii < values.length; ii++) {
              list.set(ii, values[ii]);
            }
          });
        };
    
        List.prototype.shift = function() {
          return setListBounds(this, 1);
        };
    
        // @pragma Composition
    
        List.prototype.merge = function(/*...iters*/) {
          return mergeIntoListWith(this, undefined, arguments);
        };
    
        List.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
          return mergeIntoListWith(this, merger, iters);
        };
    
        List.prototype.mergeDeep = function(/*...iters*/) {
          return mergeIntoListWith(this, deepMerger, arguments);
        };
    
        List.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
          return mergeIntoListWith(this, deepMergerWith(merger), iters);
        };
    
        List.prototype.setSize = function(size) {
          return setListBounds(this, 0, size);
        };
    
        // @pragma Iteration
    
        List.prototype.slice = function(begin, end) {
          var size = this.size;
          if (wholeSlice(begin, end, size)) {
            return this;
          }
          return setListBounds(
            this,
            resolveBegin(begin, size),
            resolveEnd(end, size)
          );
        };
    
        List.prototype.__iterator = function(type, reverse) {
          var index = 0;
          var values = iterateList(this, reverse);
          return new Iterator(function()  {
            var value = values();
            return value === DONE ?
              iteratorDone() :
              iteratorValue(type, index++, value);
          });
        };
    
        List.prototype.__iterate = function(fn, reverse) {
          var index = 0;
          var values = iterateList(this, reverse);
          var value;
          while ((value = values()) !== DONE) {
            if (fn(value, index++, this) === false) {
              break;
            }
          }
          return index;
        };
    
        List.prototype.__ensureOwner = function(ownerID) {
          if (ownerID === this.__ownerID) {
            return this;
          }
          if (!ownerID) {
            this.__ownerID = ownerID;
            return this;
          }
          return makeList(this._origin, this._capacity, this._level, this._root, this._tail, ownerID, this.__hash);
        };
    
    
      function isList(maybeList) {
        return !!(maybeList && maybeList[IS_LIST_SENTINEL]);
      }
    
      List.isList = isList;
    
      var IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';
    
      var ListPrototype = List.prototype;
      ListPrototype[IS_LIST_SENTINEL] = true;
      ListPrototype[DELETE] = ListPrototype.remove;
      ListPrototype.setIn = MapPrototype.setIn;
      ListPrototype.deleteIn =
      ListPrototype.removeIn = MapPrototype.removeIn;
      ListPrototype.update = MapPrototype.update;
      ListPrototype.updateIn = MapPrototype.updateIn;
      ListPrototype.mergeIn = MapPrototype.mergeIn;
      ListPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;
      ListPrototype.withMutations = MapPrototype.withMutations;
      ListPrototype.asMutable = MapPrototype.asMutable;
      ListPrototype.asImmutable = MapPrototype.asImmutable;
      ListPrototype.wasAltered = MapPrototype.wasAltered;
    
    
    
        function VNode(array, ownerID) {
          this.array = array;
          this.ownerID = ownerID;
        }
    
        // TODO: seems like these methods are very similar
    
        VNode.prototype.removeBefore = function(ownerID, level, index) {
          if (index === level ? 1 << level : 0 || this.array.length === 0) {
            return this;
          }
          var originIndex = (index >>> level) & MASK;
          if (originIndex >= this.array.length) {
            return new VNode([], ownerID);
          }
          var removingFirst = originIndex === 0;
          var newChild;
          if (level > 0) {
            var oldChild = this.array[originIndex];
            newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);
            if (newChild === oldChild && removingFirst) {
              return this;
            }
          }
          if (removingFirst && !newChild) {
            return this;
          }
          var editable = editableVNode(this, ownerID);
          if (!removingFirst) {
            for (var ii = 0; ii < originIndex; ii++) {
              editable.array[ii] = undefined;
            }
          }
          if (newChild) {
            editable.array[originIndex] = newChild;
          }
          return editable;
        };
    
        VNode.prototype.removeAfter = function(ownerID, level, index) {
          if (index === (level ? 1 << level : 0) || this.array.length === 0) {
            return this;
          }
          var sizeIndex = ((index - 1) >>> level) & MASK;
          if (sizeIndex >= this.array.length) {
            return this;
          }
    
          var newChild;
          if (level > 0) {
            var oldChild = this.array[sizeIndex];
            newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);
            if (newChild === oldChild && sizeIndex === this.array.length - 1) {
              return this;
            }
          }
    
          var editable = editableVNode(this, ownerID);
          editable.array.splice(sizeIndex + 1);
          if (newChild) {
            editable.array[sizeIndex] = newChild;
          }
          return editable;
        };
    
    
    
      var DONE = {};
    
      function iterateList(list, reverse) {
        var left = list._origin;
        var right = list._capacity;
        var tailPos = getTailOffset(right);
        var tail = list._tail;
    
        return iterateNodeOrLeaf(list._root, list._level, 0);
    
        function iterateNodeOrLeaf(node, level, offset) {
          return level === 0 ?
            iterateLeaf(node, offset) :
            iterateNode(node, level, offset);
        }
    
        function iterateLeaf(node, offset) {
          var array = offset === tailPos ? tail && tail.array : node && node.array;
          var from = offset > left ? 0 : left - offset;
          var to = right - offset;
          if (to > SIZE) {
            to = SIZE;
          }
          return function()  {
            if (from === to) {
              return DONE;
            }
            var idx = reverse ? --to : from++;
            return array && array[idx];
          };
        }
    
        function iterateNode(node, level, offset) {
          var values;
          var array = node && node.array;
          var from = offset > left ? 0 : (left - offset) >> level;
          var to = ((right - offset) >> level) + 1;
          if (to > SIZE) {
            to = SIZE;
          }
          return function()  {
            do {
              if (values) {
                var value = values();
                if (value !== DONE) {
                  return value;
                }
                values = null;
              }
              if (from === to) {
                return DONE;
              }
              var idx = reverse ? --to : from++;
              values = iterateNodeOrLeaf(
                array && array[idx], level - SHIFT, offset + (idx << level)
              );
            } while (true);
          };
        }
      }
    
      function makeList(origin, capacity, level, root, tail, ownerID, hash) {
        var list = Object.create(ListPrototype);
        list.size = capacity - origin;
        list._origin = origin;
        list._capacity = capacity;
        list._level = level;
        list._root = root;
        list._tail = tail;
        list.__ownerID = ownerID;
        list.__hash = hash;
        list.__altered = false;
        return list;
      }
    
      var EMPTY_LIST;
      function emptyList() {
        return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));
      }
    
      function updateList(list, index, value) {
        index = wrapIndex(list, index);
    
        if (index !== index) {
          return list;
        }
    
        if (index >= list.size || index < 0) {
          return list.withMutations(function(list ) {
            index < 0 ?
              setListBounds(list, index).set(0, value) :
              setListBounds(list, 0, index + 1).set(index, value)
          });
        }
    
        index += list._origin;
    
        var newTail = list._tail;
        var newRoot = list._root;
        var didAlter = MakeRef(DID_ALTER);
        if (index >= getTailOffset(list._capacity)) {
          newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);
        } else {
          newRoot = updateVNode(newRoot, list.__ownerID, list._level, index, value, didAlter);
        }
    
        if (!didAlter.value) {
          return list;
        }
    
        if (list.__ownerID) {
          list._root = newRoot;
          list._tail = newTail;
          list.__hash = undefined;
          list.__altered = true;
          return list;
        }
        return makeList(list._origin, list._capacity, list._level, newRoot, newTail);
      }
    
      function updateVNode(node, ownerID, level, index, value, didAlter) {
        var idx = (index >>> level) & MASK;
        var nodeHas = node && idx < node.array.length;
        if (!nodeHas && value === undefined) {
          return node;
        }
    
        var newNode;
    
        if (level > 0) {
          var lowerNode = node && node.array[idx];
          var newLowerNode = updateVNode(lowerNode, ownerID, level - SHIFT, index, value, didAlter);
          if (newLowerNode === lowerNode) {
            return node;
          }
          newNode = editableVNode(node, ownerID);
          newNode.array[idx] = newLowerNode;
          return newNode;
        }
    
        if (nodeHas && node.array[idx] === value) {
          return node;
        }
    
        SetRef(didAlter);
    
        newNode = editableVNode(node, ownerID);
        if (value === undefined && idx === newNode.array.length - 1) {
          newNode.array.pop();
        } else {
          newNode.array[idx] = value;
        }
        return newNode;
      }
    
      function editableVNode(node, ownerID) {
        if (ownerID && node && ownerID === node.ownerID) {
          return node;
        }
        return new VNode(node ? node.array.slice() : [], ownerID);
      }
    
      function listNodeFor(list, rawIndex) {
        if (rawIndex >= getTailOffset(list._capacity)) {
          return list._tail;
        }
        if (rawIndex < 1 << (list._level + SHIFT)) {
          var node = list._root;
          var level = list._level;
          while (node && level > 0) {
            node = node.array[(rawIndex >>> level) & MASK];
            level -= SHIFT;
          }
          return node;
        }
      }
    
      function setListBounds(list, begin, end) {
        // Sanitize begin & end using this shorthand for ToInt32(argument)
        // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32
        if (begin !== undefined) {
          begin = begin | 0;
        }
        if (end !== undefined) {
          end = end | 0;
        }
        var owner = list.__ownerID || new OwnerID();
        var oldOrigin = list._origin;
        var oldCapacity = list._capacity;
        var newOrigin = oldOrigin + begin;
        var newCapacity = end === undefined ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;
        if (newOrigin === oldOrigin && newCapacity === oldCapacity) {
          return list;
        }
    
        // If it's going to end after it starts, it's empty.
        if (newOrigin >= newCapacity) {
          return list.clear();
        }
    
        var newLevel = list._level;
        var newRoot = list._root;
    
        // New origin might need creating a higher root.
        var offsetShift = 0;
        while (newOrigin + offsetShift < 0) {
          newRoot = new VNode(newRoot && newRoot.array.length ? [undefined, newRoot] : [], owner);
          newLevel += SHIFT;
          offsetShift += 1 << newLevel;
        }
        if (offsetShift) {
          newOrigin += offsetShift;
          oldOrigin += offsetShift;
          newCapacity += offsetShift;
          oldCapacity += offsetShift;
        }
    
        var oldTailOffset = getTailOffset(oldCapacity);
        var newTailOffset = getTailOffset(newCapacity);
    
        // New size might need creating a higher root.
        while (newTailOffset >= 1 << (newLevel + SHIFT)) {
          newRoot = new VNode(newRoot && newRoot.array.length ? [newRoot] : [], owner);
          newLevel += SHIFT;
        }
    
        // Locate or create the new tail.
        var oldTail = list._tail;
        var newTail = newTailOffset < oldTailOffset ?
          listNodeFor(list, newCapacity - 1) :
          newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;
    
        // Merge Tail into tree.
        if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {
          newRoot = editableVNode(newRoot, owner);
          var node = newRoot;
          for (var level = newLevel; level > SHIFT; level -= SHIFT) {
            var idx = (oldTailOffset >>> level) & MASK;
            node = node.array[idx] = editableVNode(node.array[idx], owner);
          }
          node.array[(oldTailOffset >>> SHIFT) & MASK] = oldTail;
        }
    
        // If the size has been reduced, there's a chance the tail needs to be trimmed.
        if (newCapacity < oldCapacity) {
          newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);
        }
    
        // If the new origin is within the tail, then we do not need a root.
        if (newOrigin >= newTailOffset) {
          newOrigin -= newTailOffset;
          newCapacity -= newTailOffset;
          newLevel = SHIFT;
          newRoot = null;
          newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);
    
        // Otherwise, if the root has been trimmed, garbage collect.
        } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {
          offsetShift = 0;
    
          // Identify the new top root node of the subtree of the old root.
          while (newRoot) {
            var beginIndex = (newOrigin >>> newLevel) & MASK;
            if (beginIndex !== (newTailOffset >>> newLevel) & MASK) {
              break;
            }
            if (beginIndex) {
              offsetShift += (1 << newLevel) * beginIndex;
            }
            newLevel -= SHIFT;
            newRoot = newRoot.array[beginIndex];
          }
    
          // Trim the new sides of the new root.
          if (newRoot && newOrigin > oldOrigin) {
            newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);
          }
          if (newRoot && newTailOffset < oldTailOffset) {
            newRoot = newRoot.removeAfter(owner, newLevel, newTailOffset - offsetShift);
          }
          if (offsetShift) {
            newOrigin -= offsetShift;
            newCapacity -= offsetShift;
          }
        }
    
        if (list.__ownerID) {
          list.size = newCapacity - newOrigin;
          list._origin = newOrigin;
          list._capacity = newCapacity;
          list._level = newLevel;
          list._root = newRoot;
          list._tail = newTail;
          list.__hash = undefined;
          list.__altered = true;
          return list;
        }
        return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);
      }
    
      function mergeIntoListWith(list, merger, iterables) {
        var iters = [];
        var maxSize = 0;
        for (var ii = 0; ii < iterables.length; ii++) {
          var value = iterables[ii];
          var iter = IndexedIterable(value);
          if (iter.size > maxSize) {
            maxSize = iter.size;
          }
          if (!isIterable(value)) {
            iter = iter.map(function(v ) {return fromJS(v)});
          }
          iters.push(iter);
        }
        if (maxSize > list.size) {
          list = list.setSize(maxSize);
        }
        return mergeIntoCollectionWith(list, merger, iters);
      }
    
      function getTailOffset(size) {
        return size < SIZE ? 0 : (((size - 1) >>> SHIFT) << SHIFT);
      }
    
      createClass(OrderedMap, Map);
    
        // @pragma Construction
    
        function OrderedMap(value) {
          return value === null || value === undefined ? emptyOrderedMap() :
            isOrderedMap(value) ? value :
            emptyOrderedMap().withMutations(function(map ) {
              var iter = KeyedIterable(value);
              assertNotInfinite(iter.size);
              iter.forEach(function(v, k)  {return map.set(k, v)});
            });
        }
    
        OrderedMap.of = function(/*...values*/) {
          return this(arguments);
        };
    
        OrderedMap.prototype.toString = function() {
          return this.__toString('OrderedMap {', '}');
        };
    
        // @pragma Access
    
        OrderedMap.prototype.get = function(k, notSetValue) {
          var index = this._map.get(k);
          return index !== undefined ? this._list.get(index)[1] : notSetValue;
        };
    
        // @pragma Modification
    
        OrderedMap.prototype.clear = function() {
          if (this.size === 0) {
            return this;
          }
          if (this.__ownerID) {
            this.size = 0;
            this._map.clear();
            this._list.clear();
            return this;
          }
          return emptyOrderedMap();
        };
    
        OrderedMap.prototype.set = function(k, v) {
          return updateOrderedMap(this, k, v);
        };
    
        OrderedMap.prototype.remove = function(k) {
          return updateOrderedMap(this, k, NOT_SET);
        };
    
        OrderedMap.prototype.wasAltered = function() {
          return this._map.wasAltered() || this._list.wasAltered();
        };
    
        OrderedMap.prototype.__iterate = function(fn, reverse) {var this$0 = this;
          return this._list.__iterate(
            function(entry ) {return entry && fn(entry[1], entry[0], this$0)},
            reverse
          );
        };
    
        OrderedMap.prototype.__iterator = function(type, reverse) {
          return this._list.fromEntrySeq().__iterator(type, reverse);
        };
    
        OrderedMap.prototype.__ensureOwner = function(ownerID) {
          if (ownerID === this.__ownerID) {
            return this;
          }
          var newMap = this._map.__ensureOwner(ownerID);
          var newList = this._list.__ensureOwner(ownerID);
          if (!ownerID) {
            this.__ownerID = ownerID;
            this._map = newMap;
            this._list = newList;
            return this;
          }
          return makeOrderedMap(newMap, newList, ownerID, this.__hash);
        };
    
    
      function isOrderedMap(maybeOrderedMap) {
        return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);
      }
    
      OrderedMap.isOrderedMap = isOrderedMap;
    
      OrderedMap.prototype[IS_ORDERED_SENTINEL] = true;
      OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;
    
    
    
      function makeOrderedMap(map, list, ownerID, hash) {
        var omap = Object.create(OrderedMap.prototype);
        omap.size = map ? map.size : 0;
        omap._map = map;
        omap._list = list;
        omap.__ownerID = ownerID;
        omap.__hash = hash;
        return omap;
      }
    
      var EMPTY_ORDERED_MAP;
      function emptyOrderedMap() {
        return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));
      }
    
      function updateOrderedMap(omap, k, v) {
        var map = omap._map;
        var list = omap._list;
        var i = map.get(k);
        var has = i !== undefined;
        var newMap;
        var newList;
        if (v === NOT_SET) { // removed
          if (!has) {
            return omap;
          }
          if (list.size >= SIZE && list.size >= map.size * 2) {
            newList = list.filter(function(entry, idx)  {return entry !== undefined && i !== idx});
            newMap = newList.toKeyedSeq().map(function(entry ) {return entry[0]}).flip().toMap();
            if (omap.__ownerID) {
              newMap.__ownerID = newList.__ownerID = omap.__ownerID;
            }
          } else {
            newMap = map.remove(k);
            newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);
          }
        } else {
          if (has) {
            if (v === list.get(i)[1]) {
              return omap;
            }
            newMap = map;
            newList = list.set(i, [k, v]);
          } else {
            newMap = map.set(k, list.size);
            newList = list.set(list.size, [k, v]);
          }
        }
        if (omap.__ownerID) {
          omap.size = newMap.size;
          omap._map = newMap;
          omap._list = newList;
          omap.__hash = undefined;
          return omap;
        }
        return makeOrderedMap(newMap, newList);
      }
    
      createClass(ToKeyedSequence, KeyedSeq);
        function ToKeyedSequence(indexed, useKeys) {
          this._iter = indexed;
          this._useKeys = useKeys;
          this.size = indexed.size;
        }
    
        ToKeyedSequence.prototype.get = function(key, notSetValue) {
          return this._iter.get(key, notSetValue);
        };
    
        ToKeyedSequence.prototype.has = function(key) {
          return this._iter.has(key);
        };
    
        ToKeyedSequence.prototype.valueSeq = function() {
          return this._iter.valueSeq();
        };
    
        ToKeyedSequence.prototype.reverse = function() {var this$0 = this;
          var reversedSequence = reverseFactory(this, true);
          if (!this._useKeys) {
            reversedSequence.valueSeq = function()  {return this$0._iter.toSeq().reverse()};
          }
          return reversedSequence;
        };
    
        ToKeyedSequence.prototype.map = function(mapper, context) {var this$0 = this;
          var mappedSequence = mapFactory(this, mapper, context);
          if (!this._useKeys) {
            mappedSequence.valueSeq = function()  {return this$0._iter.toSeq().map(mapper, context)};
          }
          return mappedSequence;
        };
    
        ToKeyedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;
          var ii;
          return this._iter.__iterate(
            this._useKeys ?
              function(v, k)  {return fn(v, k, this$0)} :
              ((ii = reverse ? resolveSize(this) : 0),
                function(v ) {return fn(v, reverse ? --ii : ii++, this$0)}),
            reverse
          );
        };
    
        ToKeyedSequence.prototype.__iterator = function(type, reverse) {
          if (this._useKeys) {
            return this._iter.__iterator(type, reverse);
          }
          var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
          var ii = reverse ? resolveSize(this) : 0;
          return new Iterator(function()  {
            var step = iterator.next();
            return step.done ? step :
              iteratorValue(type, reverse ? --ii : ii++, step.value, step);
          });
        };
    
      ToKeyedSequence.prototype[IS_ORDERED_SENTINEL] = true;
    
    
      createClass(ToIndexedSequence, IndexedSeq);
        function ToIndexedSequence(iter) {
          this._iter = iter;
          this.size = iter.size;
        }
    
        ToIndexedSequence.prototype.includes = function(value) {
          return this._iter.includes(value);
        };
    
        ToIndexedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;
          var iterations = 0;
          return this._iter.__iterate(function(v ) {return fn(v, iterations++, this$0)}, reverse);
        };
    
        ToIndexedSequence.prototype.__iterator = function(type, reverse) {
          var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
          var iterations = 0;
          return new Iterator(function()  {
            var step = iterator.next();
            return step.done ? step :
              iteratorValue(type, iterations++, step.value, step)
          });
        };
    
    
    
      createClass(ToSetSequence, SetSeq);
        function ToSetSequence(iter) {
          this._iter = iter;
          this.size = iter.size;
        }
    
        ToSetSequence.prototype.has = function(key) {
          return this._iter.includes(key);
        };
    
        ToSetSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;
          return this._iter.__iterate(function(v ) {return fn(v, v, this$0)}, reverse);
        };
    
        ToSetSequence.prototype.__iterator = function(type, reverse) {
          var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
          return new Iterator(function()  {
            var step = iterator.next();
            return step.done ? step :
              iteratorValue(type, step.value, step.value, step);
          });
        };
    
    
    
      createClass(FromEntriesSequence, KeyedSeq);
        function FromEntriesSequence(entries) {
          this._iter = entries;
          this.size = entries.size;
        }
    
        FromEntriesSequence.prototype.entrySeq = function() {
          return this._iter.toSeq();
        };
    
        FromEntriesSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;
          return this._iter.__iterate(function(entry ) {
            // Check if entry exists first so array access doesn't throw for holes
            // in the parent iteration.
            if (entry) {
              validateEntry(entry);
              var indexedIterable = isIterable(entry);
              return fn(
                indexedIterable ? entry.get(1) : entry[1],
                indexedIterable ? entry.get(0) : entry[0],
                this$0
              );
            }
          }, reverse);
        };
    
        FromEntriesSequence.prototype.__iterator = function(type, reverse) {
          var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
          return new Iterator(function()  {
            while (true) {
              var step = iterator.next();
              if (step.done) {
                return step;
              }
              var entry = step.value;
              // Check if entry exists first so array access doesn't throw for holes
              // in the parent iteration.
              if (entry) {
                validateEntry(entry);
                var indexedIterable = isIterable(entry);
                return iteratorValue(
                  type,
                  indexedIterable ? entry.get(0) : entry[0],
                  indexedIterable ? entry.get(1) : entry[1],
                  step
                );
              }
            }
          });
        };
    
    
      ToIndexedSequence.prototype.cacheResult =
      ToKeyedSequence.prototype.cacheResult =
      ToSetSequence.prototype.cacheResult =
      FromEntriesSequence.prototype.cacheResult =
        cacheResultThrough;
    
    
      function flipFactory(iterable) {
        var flipSequence = makeSequence(iterable);
        flipSequence._iter = iterable;
        flipSequence.size = iterable.size;
        flipSequence.flip = function()  {return iterable};
        flipSequence.reverse = function () {
          var reversedSequence = iterable.reverse.apply(this); // super.reverse()
          reversedSequence.flip = function()  {return iterable.reverse()};
          return reversedSequence;
        };
        flipSequence.has = function(key ) {return iterable.includes(key)};
        flipSequence.includes = function(key ) {return iterable.has(key)};
        flipSequence.cacheResult = cacheResultThrough;
        flipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;
          return iterable.__iterate(function(v, k)  {return fn(k, v, this$0) !== false}, reverse);
        }
        flipSequence.__iteratorUncached = function(type, reverse) {
          if (type === ITERATE_ENTRIES) {
            var iterator = iterable.__iterator(type, reverse);
            return new Iterator(function()  {
              var step = iterator.next();
              if (!step.done) {
                var k = step.value[0];
                step.value[0] = step.value[1];
                step.value[1] = k;
              }
              return step;
            });
          }
          return iterable.__iterator(
            type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,
            reverse
          );
        }
        return flipSequence;
      }
    
    
      function mapFactory(iterable, mapper, context) {
        var mappedSequence = makeSequence(iterable);
        mappedSequence.size = iterable.size;
        mappedSequence.has = function(key ) {return iterable.has(key)};
        mappedSequence.get = function(key, notSetValue)  {
          var v = iterable.get(key, NOT_SET);
          return v === NOT_SET ?
            notSetValue :
            mapper.call(context, v, key, iterable);
        };
        mappedSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;
          return iterable.__iterate(
            function(v, k, c)  {return fn(mapper.call(context, v, k, c), k, this$0) !== false},
            reverse
          );
        }
        mappedSequence.__iteratorUncached = function (type, reverse) {
          var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
          return new Iterator(function()  {
            var step = iterator.next();
            if (step.done) {
              return step;
            }
            var entry = step.value;
            var key = entry[0];
            return iteratorValue(
              type,
              key,
              mapper.call(context, entry[1], key, iterable),
              step
            );
          });
        }
        return mappedSequence;
      }
    
    
      function reverseFactory(iterable, useKeys) {
        var reversedSequence = makeSequence(iterable);
        reversedSequence._iter = iterable;
        reversedSequence.size = iterable.size;
        reversedSequence.reverse = function()  {return iterable};
        if (iterable.flip) {
          reversedSequence.flip = function () {
            var flipSequence = flipFactory(iterable);
            flipSequence.reverse = function()  {return iterable.flip()};
            return flipSequence;
          };
        }
        reversedSequence.get = function(key, notSetValue) 
          {return iterable.get(useKeys ? key : -1 - key, notSetValue)};
        reversedSequence.has = function(key )
          {return iterable.has(useKeys ? key : -1 - key)};
        reversedSequence.includes = function(value ) {return iterable.includes(value)};
        reversedSequence.cacheResult = cacheResultThrough;
        reversedSequence.__iterate = function (fn, reverse) {var this$0 = this;
          return iterable.__iterate(function(v, k)  {return fn(v, k, this$0)}, !reverse);
        };
        reversedSequence.__iterator =
          function(type, reverse)  {return iterable.__iterator(type, !reverse)};
        return reversedSequence;
      }
    
    
      function filterFactory(iterable, predicate, context, useKeys) {
        var filterSequence = makeSequence(iterable);
        if (useKeys) {
          filterSequence.has = function(key ) {
            var v = iterable.get(key, NOT_SET);
            return v !== NOT_SET && !!predicate.call(context, v, key, iterable);
          };
          filterSequence.get = function(key, notSetValue)  {
            var v = iterable.get(key, NOT_SET);
            return v !== NOT_SET && predicate.call(context, v, key, iterable) ?
              v : notSetValue;
          };
        }
        filterSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;
          var iterations = 0;
          iterable.__iterate(function(v, k, c)  {
            if (predicate.call(context, v, k, c)) {
              iterations++;
              return fn(v, useKeys ? k : iterations - 1, this$0);
            }
          }, reverse);
          return iterations;
        };
        filterSequence.__iteratorUncached = function (type, reverse) {
          var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
          var iterations = 0;
          return new Iterator(function()  {
            while (true) {
              var step = iterator.next();
              if (step.done) {
                return step;
              }
              var entry = step.value;
              var key = entry[0];
              var value = entry[1];
              if (predicate.call(context, value, key, iterable)) {
                return iteratorValue(type, useKeys ? key : iterations++, value, step);
              }
            }
          });
        }
        return filterSequence;
      }
    
    
      function countByFactory(iterable, grouper, context) {
        var groups = Map().asMutable();
        iterable.__iterate(function(v, k)  {
          groups.update(
            grouper.call(context, v, k, iterable),
            0,
            function(a ) {return a + 1}
          );
        });
        return groups.asImmutable();
      }
    
    
      function groupByFactory(iterable, grouper, context) {
        var isKeyedIter = isKeyed(iterable);
        var groups = (isOrdered(iterable) ? OrderedMap() : Map()).asMutable();
        iterable.__iterate(function(v, k)  {
          groups.update(
            grouper.call(context, v, k, iterable),
            function(a ) {return (a = a || [], a.push(isKeyedIter ? [k, v] : v), a)}
          );
        });
        var coerce = iterableClass(iterable);
        return groups.map(function(arr ) {return reify(iterable, coerce(arr))});
      }
    
    
      function sliceFactory(iterable, begin, end, useKeys) {
        var originalSize = iterable.size;
    
        // Sanitize begin & end using this shorthand for ToInt32(argument)
        // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32
        if (begin !== undefined) {
          begin = begin | 0;
        }
        if (end !== undefined) {
          if (end === Infinity) {
            end = originalSize;
          } else {
            end = end | 0;
          }
        }
    
        if (wholeSlice(begin, end, originalSize)) {
          return iterable;
        }
    
        var resolvedBegin = resolveBegin(begin, originalSize);
        var resolvedEnd = resolveEnd(end, originalSize);
    
        // begin or end will be NaN if they were provided as negative numbers and
        // this iterable's size is unknown. In that case, cache first so there is
        // a known size and these do not resolve to NaN.
        if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {
          return sliceFactory(iterable.toSeq().cacheResult(), begin, end, useKeys);
        }
    
        // Note: resolvedEnd is undefined when the original sequence's length is
        // unknown and this slice did not supply an end and should contain all
        // elements after resolvedBegin.
        // In that case, resolvedSize will be NaN and sliceSize will remain undefined.
        var resolvedSize = resolvedEnd - resolvedBegin;
        var sliceSize;
        if (resolvedSize === resolvedSize) {
          sliceSize = resolvedSize < 0 ? 0 : resolvedSize;
        }
    
        var sliceSeq = makeSequence(iterable);
    
        // If iterable.size is undefined, the size of the realized sliceSeq is
        // unknown at this point unless the number of items to slice is 0
        sliceSeq.size = sliceSize === 0 ? sliceSize : iterable.size && sliceSize || undefined;
    
        if (!useKeys && isSeq(iterable) && sliceSize >= 0) {
          sliceSeq.get = function (index, notSetValue) {
            index = wrapIndex(this, index);
            return index >= 0 && index < sliceSize ?
              iterable.get(index + resolvedBegin, notSetValue) :
              notSetValue;
          }
        }
    
        sliceSeq.__iterateUncached = function(fn, reverse) {var this$0 = this;
          if (sliceSize === 0) {
            return 0;
          }
          if (reverse) {
            return this.cacheResult().__iterate(fn, reverse);
          }
          var skipped = 0;
          var isSkipping = true;
          var iterations = 0;
          iterable.__iterate(function(v, k)  {
            if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {
              iterations++;
              return fn(v, useKeys ? k : iterations - 1, this$0) !== false &&
                     iterations !== sliceSize;
            }
          });
          return iterations;
        };
    
        sliceSeq.__iteratorUncached = function(type, reverse) {
          if (sliceSize !== 0 && reverse) {
            return this.cacheResult().__iterator(type, reverse);
          }
          // Don't bother instantiating parent iterator if taking 0.
          var iterator = sliceSize !== 0 && iterable.__iterator(type, reverse);
          var skipped = 0;
          var iterations = 0;
          return new Iterator(function()  {
            while (skipped++ < resolvedBegin) {
              iterator.next();
            }
            if (++iterations > sliceSize) {
              return iteratorDone();
            }
            var step = iterator.next();
            if (useKeys || type === ITERATE_VALUES) {
              return step;
            } else if (type === ITERATE_KEYS) {
              return iteratorValue(type, iterations - 1, undefined, step);
            } else {
              return iteratorValue(type, iterations - 1, step.value[1], step);
            }
          });
        }
    
        return sliceSeq;
      }
    
    
      function takeWhileFactory(iterable, predicate, context) {
        var takeSequence = makeSequence(iterable);
        takeSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;
          if (reverse) {
            return this.cacheResult().__iterate(fn, reverse);
          }
          var iterations = 0;
          iterable.__iterate(function(v, k, c) 
            {return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$0)}
          );
          return iterations;
        };
        takeSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;
          if (reverse) {
            return this.cacheResult().__iterator(type, reverse);
          }
          var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
          var iterating = true;
          return new Iterator(function()  {
            if (!iterating) {
              return iteratorDone();
            }
            var step = iterator.next();
            if (step.done) {
              return step;
            }
            var entry = step.value;
            var k = entry[0];
            var v = entry[1];
            if (!predicate.call(context, v, k, this$0)) {
              iterating = false;
              return iteratorDone();
            }
            return type === ITERATE_ENTRIES ? step :
              iteratorValue(type, k, v, step);
          });
        };
        return takeSequence;
      }
    
    
      function skipWhileFactory(iterable, predicate, context, useKeys) {
        var skipSequence = makeSequence(iterable);
        skipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;
          if (reverse) {
            return this.cacheResult().__iterate(fn, reverse);
          }
          var isSkipping = true;
          var iterations = 0;
          iterable.__iterate(function(v, k, c)  {
            if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {
              iterations++;
              return fn(v, useKeys ? k : iterations - 1, this$0);
            }
          });
          return iterations;
        };
        skipSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;
          if (reverse) {
            return this.cacheResult().__iterator(type, reverse);
          }
          var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
          var skipping = true;
          var iterations = 0;
          return new Iterator(function()  {
            var step, k, v;
            do {
              step = iterator.next();
              if (step.done) {
                if (useKeys || type === ITERATE_VALUES) {
                  return step;
                } else if (type === ITERATE_KEYS) {
                  return iteratorValue(type, iterations++, undefined, step);
                } else {
                  return iteratorValue(type, iterations++, step.value[1], step);
                }
              }
              var entry = step.value;
              k = entry[0];
              v = entry[1];
              skipping && (skipping = predicate.call(context, v, k, this$0));
            } while (skipping);
            return type === ITERATE_ENTRIES ? step :
              iteratorValue(type, k, v, step);
          });
        };
        return skipSequence;
      }
    
    
      function concatFactory(iterable, values) {
        var isKeyedIterable = isKeyed(iterable);
        var iters = [iterable].concat(values).map(function(v ) {
          if (!isIterable(v)) {
            v = isKeyedIterable ?
              keyedSeqFromValue(v) :
              indexedSeqFromValue(Array.isArray(v) ? v : [v]);
          } else if (isKeyedIterable) {
            v = KeyedIterable(v);
          }
          return v;
        }).filter(function(v ) {return v.size !== 0});
    
        if (iters.length === 0) {
          return iterable;
        }
    
        if (iters.length === 1) {
          var singleton = iters[0];
          if (singleton === iterable ||
              isKeyedIterable && isKeyed(singleton) ||
              isIndexed(iterable) && isIndexed(singleton)) {
            return singleton;
          }
        }
    
        var concatSeq = new ArraySeq(iters);
        if (isKeyedIterable) {
          concatSeq = concatSeq.toKeyedSeq();
        } else if (!isIndexed(iterable)) {
          concatSeq = concatSeq.toSetSeq();
        }
        concatSeq = concatSeq.flatten(true);
        concatSeq.size = iters.reduce(
          function(sum, seq)  {
            if (sum !== undefined) {
              var size = seq.size;
              if (size !== undefined) {
                return sum + size;
              }
            }
          },
          0
        );
        return concatSeq;
      }
    
    
      function flattenFactory(iterable, depth, useKeys) {
        var flatSequence = makeSequence(iterable);
        flatSequence.__iterateUncached = function(fn, reverse) {
          var iterations = 0;
          var stopped = false;
          function flatDeep(iter, currentDepth) {var this$0 = this;
            iter.__iterate(function(v, k)  {
              if ((!depth || currentDepth < depth) && isIterable(v)) {
                flatDeep(v, currentDepth + 1);
              } else if (fn(v, useKeys ? k : iterations++, this$0) === false) {
                stopped = true;
              }
              return !stopped;
            }, reverse);
          }
          flatDeep(iterable, 0);
          return iterations;
        }
        flatSequence.__iteratorUncached = function(type, reverse) {
          var iterator = iterable.__iterator(type, reverse);
          var stack = [];
          var iterations = 0;
          return new Iterator(function()  {
            while (iterator) {
              var step = iterator.next();
              if (step.done !== false) {
                iterator = stack.pop();
                continue;
              }
              var v = step.value;
              if (type === ITERATE_ENTRIES) {
                v = v[1];
              }
              if ((!depth || stack.length < depth) && isIterable(v)) {
                stack.push(iterator);
                iterator = v.__iterator(type, reverse);
              } else {
                return useKeys ? step : iteratorValue(type, iterations++, v, step);
              }
            }
            return iteratorDone();
          });
        }
        return flatSequence;
      }
    
    
      function flatMapFactory(iterable, mapper, context) {
        var coerce = iterableClass(iterable);
        return iterable.toSeq().map(
          function(v, k)  {return coerce(mapper.call(context, v, k, iterable))}
        ).flatten(true);
      }
    
    
      function interposeFactory(iterable, separator) {
        var interposedSequence = makeSequence(iterable);
        interposedSequence.size = iterable.size && iterable.size * 2 -1;
        interposedSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;
          var iterations = 0;
          iterable.__iterate(function(v, k) 
            {return (!iterations || fn(separator, iterations++, this$0) !== false) &&
            fn(v, iterations++, this$0) !== false},
            reverse
          );
          return iterations;
        };
        interposedSequence.__iteratorUncached = function(type, reverse) {
          var iterator = iterable.__iterator(ITERATE_VALUES, reverse);
          var iterations = 0;
          var step;
          return new Iterator(function()  {
            if (!step || iterations % 2) {
              step = iterator.next();
              if (step.done) {
                return step;
              }
            }
            return iterations % 2 ?
              iteratorValue(type, iterations++, separator) :
              iteratorValue(type, iterations++, step.value, step);
          });
        };
        return interposedSequence;
      }
    
    
      function sortFactory(iterable, comparator, mapper) {
        if (!comparator) {
          comparator = defaultComparator;
        }
        var isKeyedIterable = isKeyed(iterable);
        var index = 0;
        var entries = iterable.toSeq().map(
          function(v, k)  {return [k, v, index++, mapper ? mapper(v, k, iterable) : v]}
        ).toArray();
        entries.sort(function(a, b)  {return comparator(a[3], b[3]) || a[2] - b[2]}).forEach(
          isKeyedIterable ?
          function(v, i)  { entries[i].length = 2; } :
          function(v, i)  { entries[i] = v[1]; }
        );
        return isKeyedIterable ? KeyedSeq(entries) :
          isIndexed(iterable) ? IndexedSeq(entries) :
          SetSeq(entries);
      }
    
    
      function maxFactory(iterable, comparator, mapper) {
        if (!comparator) {
          comparator = defaultComparator;
        }
        if (mapper) {
          var entry = iterable.toSeq()
            .map(function(v, k)  {return [v, mapper(v, k, iterable)]})
            .reduce(function(a, b)  {return maxCompare(comparator, a[1], b[1]) ? b : a});
          return entry && entry[0];
        } else {
          return iterable.reduce(function(a, b)  {return maxCompare(comparator, a, b) ? b : a});
        }
      }
    
      function maxCompare(comparator, a, b) {
        var comp = comparator(b, a);
        // b is considered the new max if the comparator declares them equal, but
        // they are not equal and b is in fact a nullish value.
        return (comp === 0 && b !== a && (b === undefined || b === null || b !== b)) || comp > 0;
      }
    
    
      function zipWithFactory(keyIter, zipper, iters) {
        var zipSequence = makeSequence(keyIter);
        zipSequence.size = new ArraySeq(iters).map(function(i ) {return i.size}).min();
        // Note: this a generic base implementation of __iterate in terms of
        // __iterator which may be more generically useful in the future.
        zipSequence.__iterate = function(fn, reverse) {
          /* generic:
          var iterator = this.__iterator(ITERATE_ENTRIES, reverse);
          var step;
          var iterations = 0;
          while (!(step = iterator.next()).done) {
            iterations++;
            if (fn(step.value[1], step.value[0], this) === false) {
              break;
            }
          }
          return iterations;
          */
          // indexed:
          var iterator = this.__iterator(ITERATE_VALUES, reverse);
          var step;
          var iterations = 0;
          while (!(step = iterator.next()).done) {
            if (fn(step.value, iterations++, this) === false) {
              break;
            }
          }
          return iterations;
        };
        zipSequence.__iteratorUncached = function(type, reverse) {
          var iterators = iters.map(function(i )
            {return (i = Iterable(i), getIterator(reverse ? i.reverse() : i))}
          );
          var iterations = 0;
          var isDone = false;
          return new Iterator(function()  {
            var steps;
            if (!isDone) {
              steps = iterators.map(function(i ) {return i.next()});
              isDone = steps.some(function(s ) {return s.done});
            }
            if (isDone) {
              return iteratorDone();
            }
            return iteratorValue(
              type,
              iterations++,
              zipper.apply(null, steps.map(function(s ) {return s.value}))
            );
          });
        };
        return zipSequence
      }
    
    
      // #pragma Helper Functions
    
      function reify(iter, seq) {
        return isSeq(iter) ? seq : iter.constructor(seq);
      }
    
      function validateEntry(entry) {
        if (entry !== Object(entry)) {
          throw new TypeError('Expected [K, V] tuple: ' + entry);
        }
      }
    
      function resolveSize(iter) {
        assertNotInfinite(iter.size);
        return ensureSize(iter);
      }
    
      function iterableClass(iterable) {
        return isKeyed(iterable) ? KeyedIterable :
          isIndexed(iterable) ? IndexedIterable :
          SetIterable;
      }
    
      function makeSequence(iterable) {
        return Object.create(
          (
            isKeyed(iterable) ? KeyedSeq :
            isIndexed(iterable) ? IndexedSeq :
            SetSeq
          ).prototype
        );
      }
    
      function cacheResultThrough() {
        if (this._iter.cacheResult) {
          this._iter.cacheResult();
          this.size = this._iter.size;
          return this;
        } else {
          return Seq.prototype.cacheResult.call(this);
        }
      }
    
      function defaultComparator(a, b) {
        return a > b ? 1 : a < b ? -1 : 0;
      }
    
      function forceIterator(keyPath) {
        var iter = getIterator(keyPath);
        if (!iter) {
          // Array might not be iterable in this environment, so we need a fallback
          // to our wrapped type.
          if (!isArrayLike(keyPath)) {
            throw new TypeError('Expected iterable or array-like: ' + keyPath);
          }
          iter = getIterator(Iterable(keyPath));
        }
        return iter;
      }
    
      createClass(Record, KeyedCollection);
    
        function Record(defaultValues, name) {
          var hasInitialized;
    
          var RecordType = function Record(values) {
            if (values instanceof RecordType) {
              return values;
            }
            if (!(this instanceof RecordType)) {
              return new RecordType(values);
            }
            if (!hasInitialized) {
              hasInitialized = true;
              var keys = Object.keys(defaultValues);
              setProps(RecordTypePrototype, keys);
              RecordTypePrototype.size = keys.length;
              RecordTypePrototype._name = name;
              RecordTypePrototype._keys = keys;
              RecordTypePrototype._defaultValues = defaultValues;
            }
            this._map = Map(values);
          };
    
          var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);
          RecordTypePrototype.constructor = RecordType;
    
          return RecordType;
        }
    
        Record.prototype.toString = function() {
          return this.__toString(recordName(this) + ' {', '}');
        };
    
        // @pragma Access
    
        Record.prototype.has = function(k) {
          return this._defaultValues.hasOwnProperty(k);
        };
    
        Record.prototype.get = function(k, notSetValue) {
          if (!this.has(k)) {
            return notSetValue;
          }
          var defaultVal = this._defaultValues[k];
          return this._map ? this._map.get(k, defaultVal) : defaultVal;
        };
    
        // @pragma Modification
    
        Record.prototype.clear = function() {
          if (this.__ownerID) {
            this._map && this._map.clear();
            return this;
          }
          var RecordType = this.constructor;
          return RecordType._empty || (RecordType._empty = makeRecord(this, emptyMap()));
        };
    
        Record.prototype.set = function(k, v) {
          if (!this.has(k)) {
            throw new Error('Cannot set unknown key "' + k + '" on ' + recordName(this));
          }
          if (this._map && !this._map.has(k)) {
            var defaultVal = this._defaultValues[k];
            if (v === defaultVal) {
              return this;
            }
          }
          var newMap = this._map && this._map.set(k, v);
          if (this.__ownerID || newMap === this._map) {
            return this;
          }
          return makeRecord(this, newMap);
        };
    
        Record.prototype.remove = function(k) {
          if (!this.has(k)) {
            return this;
          }
          var newMap = this._map && this._map.remove(k);
          if (this.__ownerID || newMap === this._map) {
            return this;
          }
          return makeRecord(this, newMap);
        };
    
        Record.prototype.wasAltered = function() {
          return this._map.wasAltered();
        };
    
        Record.prototype.__iterator = function(type, reverse) {var this$0 = this;
          return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterator(type, reverse);
        };
    
        Record.prototype.__iterate = function(fn, reverse) {var this$0 = this;
          return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterate(fn, reverse);
        };
    
        Record.prototype.__ensureOwner = function(ownerID) {
          if (ownerID === this.__ownerID) {
            return this;
          }
          var newMap = this._map && this._map.__ensureOwner(ownerID);
          if (!ownerID) {
            this.__ownerID = ownerID;
            this._map = newMap;
            return this;
          }
          return makeRecord(this, newMap, ownerID);
        };
    
    
      var RecordPrototype = Record.prototype;
      RecordPrototype[DELETE] = RecordPrototype.remove;
      RecordPrototype.deleteIn =
      RecordPrototype.removeIn = MapPrototype.removeIn;
      RecordPrototype.merge = MapPrototype.merge;
      RecordPrototype.mergeWith = MapPrototype.mergeWith;
      RecordPrototype.mergeIn = MapPrototype.mergeIn;
      RecordPrototype.mergeDeep = MapPrototype.mergeDeep;
      RecordPrototype.mergeDeepWith = MapPrototype.mergeDeepWith;
      RecordPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;
      RecordPrototype.setIn = MapPrototype.setIn;
      RecordPrototype.update = MapPrototype.update;
      RecordPrototype.updateIn = MapPrototype.updateIn;
      RecordPrototype.withMutations = MapPrototype.withMutations;
      RecordPrototype.asMutable = MapPrototype.asMutable;
      RecordPrototype.asImmutable = MapPrototype.asImmutable;
    
    
      function makeRecord(likeRecord, map, ownerID) {
        var record = Object.create(Object.getPrototypeOf(likeRecord));
        record._map = map;
        record.__ownerID = ownerID;
        return record;
      }
    
      function recordName(record) {
        return record._name || record.constructor.name || 'Record';
      }
    
      function setProps(prototype, names) {
        try {
          names.forEach(setProp.bind(undefined, prototype));
        } catch (error) {
          // Object.defineProperty failed. Probably IE8.
        }
      }
    
      function setProp(prototype, name) {
        Object.defineProperty(prototype, name, {
          get: function() {
            return this.get(name);
          },
          set: function(value) {
            invariant(this.__ownerID, 'Cannot set on an immutable record.');
            this.set(name, value);
          }
        });
      }
    
      createClass(Set, SetCollection);
    
        // @pragma Construction
    
        function Set(value) {
          return value === null || value === undefined ? emptySet() :
            isSet(value) && !isOrdered(value) ? value :
            emptySet().withMutations(function(set ) {
              var iter = SetIterable(value);
              assertNotInfinite(iter.size);
              iter.forEach(function(v ) {return set.add(v)});
            });
        }
    
        Set.of = function(/*...values*/) {
          return this(arguments);
        };
    
        Set.fromKeys = function(value) {
          return this(KeyedIterable(value).keySeq());
        };
    
        Set.prototype.toString = function() {
          return this.__toString('Set {', '}');
        };
    
        // @pragma Access
    
        Set.prototype.has = function(value) {
          return this._map.has(value);
        };
    
        // @pragma Modification
    
        Set.prototype.add = function(value) {
          return updateSet(this, this._map.set(value, true));
        };
    
        Set.prototype.remove = function(value) {
          return updateSet(this, this._map.remove(value));
        };
    
        Set.prototype.clear = function() {
          return updateSet(this, this._map.clear());
        };
    
        // @pragma Composition
    
        Set.prototype.union = function() {var iters = SLICE$0.call(arguments, 0);
          iters = iters.filter(function(x ) {return x.size !== 0});
          if (iters.length === 0) {
            return this;
          }
          if (this.size === 0 && !this.__ownerID && iters.length === 1) {
            return this.constructor(iters[0]);
          }
          return this.withMutations(function(set ) {
            for (var ii = 0; ii < iters.length; ii++) {
              SetIterable(iters[ii]).forEach(function(value ) {return set.add(value)});
            }
          });
        };
    
        Set.prototype.intersect = function() {var iters = SLICE$0.call(arguments, 0);
          if (iters.length === 0) {
            return this;
          }
          iters = iters.map(function(iter ) {return SetIterable(iter)});
          var originalSet = this;
          return this.withMutations(function(set ) {
            originalSet.forEach(function(value ) {
              if (!iters.every(function(iter ) {return iter.includes(value)})) {
                set.remove(value);
              }
            });
          });
        };
    
        Set.prototype.subtract = function() {var iters = SLICE$0.call(arguments, 0);
          if (iters.length === 0) {
            return this;
          }
          iters = iters.map(function(iter ) {return SetIterable(iter)});
          var originalSet = this;
          return this.withMutations(function(set ) {
            originalSet.forEach(function(value ) {
              if (iters.some(function(iter ) {return iter.includes(value)})) {
                set.remove(value);
              }
            });
          });
        };
    
        Set.prototype.merge = function() {
          return this.union.apply(this, arguments);
        };
    
        Set.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
          return this.union.apply(this, iters);
        };
    
        Set.prototype.sort = function(comparator) {
          // Late binding
          return OrderedSet(sortFactory(this, comparator));
        };
    
        Set.prototype.sortBy = function(mapper, comparator) {
          // Late binding
          return OrderedSet(sortFactory(this, comparator, mapper));
        };
    
        Set.prototype.wasAltered = function() {
          return this._map.wasAltered();
        };
    
        Set.prototype.__iterate = function(fn, reverse) {var this$0 = this;
          return this._map.__iterate(function(_, k)  {return fn(k, k, this$0)}, reverse);
        };
    
        Set.prototype.__iterator = function(type, reverse) {
          return this._map.map(function(_, k)  {return k}).__iterator(type, reverse);
        };
    
        Set.prototype.__ensureOwner = function(ownerID) {
          if (ownerID === this.__ownerID) {
            return this;
          }
          var newMap = this._map.__ensureOwner(ownerID);
          if (!ownerID) {
            this.__ownerID = ownerID;
            this._map = newMap;
            return this;
          }
          return this.__make(newMap, ownerID);
        };
    
    
      function isSet(maybeSet) {
        return !!(maybeSet && maybeSet[IS_SET_SENTINEL]);
      }
    
      Set.isSet = isSet;
    
      var IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';
    
      var SetPrototype = Set.prototype;
      SetPrototype[IS_SET_SENTINEL] = true;
      SetPrototype[DELETE] = SetPrototype.remove;
      SetPrototype.mergeDeep = SetPrototype.merge;
      SetPrototype.mergeDeepWith = SetPrototype.mergeWith;
      SetPrototype.withMutations = MapPrototype.withMutations;
      SetPrototype.asMutable = MapPrototype.asMutable;
      SetPrototype.asImmutable = MapPrototype.asImmutable;
    
      SetPrototype.__empty = emptySet;
      SetPrototype.__make = makeSet;
    
      function updateSet(set, newMap) {
        if (set.__ownerID) {
          set.size = newMap.size;
          set._map = newMap;
          return set;
        }
        return newMap === set._map ? set :
          newMap.size === 0 ? set.__empty() :
          set.__make(newMap);
      }
    
      function makeSet(map, ownerID) {
        var set = Object.create(SetPrototype);
        set.size = map ? map.size : 0;
        set._map = map;
        set.__ownerID = ownerID;
        return set;
      }
    
      var EMPTY_SET;
      function emptySet() {
        return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));
      }
    
      createClass(OrderedSet, Set);
    
        // @pragma Construction
    
        function OrderedSet(value) {
          return value === null || value === undefined ? emptyOrderedSet() :
            isOrderedSet(value) ? value :
            emptyOrderedSet().withMutations(function(set ) {
              var iter = SetIterable(value);
              assertNotInfinite(iter.size);
              iter.forEach(function(v ) {return set.add(v)});
            });
        }
    
        OrderedSet.of = function(/*...values*/) {
          return this(arguments);
        };
    
        OrderedSet.fromKeys = function(value) {
          return this(KeyedIterable(value).keySeq());
        };
    
        OrderedSet.prototype.toString = function() {
          return this.__toString('OrderedSet {', '}');
        };
    
    
      function isOrderedSet(maybeOrderedSet) {
        return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);
      }
    
      OrderedSet.isOrderedSet = isOrderedSet;
    
      var OrderedSetPrototype = OrderedSet.prototype;
      OrderedSetPrototype[IS_ORDERED_SENTINEL] = true;
    
      OrderedSetPrototype.__empty = emptyOrderedSet;
      OrderedSetPrototype.__make = makeOrderedSet;
    
      function makeOrderedSet(map, ownerID) {
        var set = Object.create(OrderedSetPrototype);
        set.size = map ? map.size : 0;
        set._map = map;
        set.__ownerID = ownerID;
        return set;
      }
    
      var EMPTY_ORDERED_SET;
      function emptyOrderedSet() {
        return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));
      }
    
      createClass(Stack, IndexedCollection);
    
        // @pragma Construction
    
        function Stack(value) {
          return value === null || value === undefined ? emptyStack() :
            isStack(value) ? value :
            emptyStack().unshiftAll(value);
        }
    
        Stack.of = function(/*...values*/) {
          return this(arguments);
        };
    
        Stack.prototype.toString = function() {
          return this.__toString('Stack [', ']');
        };
    
        // @pragma Access
    
        Stack.prototype.get = function(index, notSetValue) {
          var head = this._head;
          index = wrapIndex(this, index);
          while (head && index--) {
            head = head.next;
          }
          return head ? head.value : notSetValue;
        };
    
        Stack.prototype.peek = function() {
          return this._head && this._head.value;
        };
    
        // @pragma Modification
    
        Stack.prototype.push = function(/*...values*/) {
          if (arguments.length === 0) {
            return this;
          }
          var newSize = this.size + arguments.length;
          var head = this._head;
          for (var ii = arguments.length - 1; ii >= 0; ii--) {
            head = {
              value: arguments[ii],
              next: head
            };
          }
          if (this.__ownerID) {
            this.size = newSize;
            this._head = head;
            this.__hash = undefined;
            this.__altered = true;
            return this;
          }
          return makeStack(newSize, head);
        };
    
        Stack.prototype.pushAll = function(iter) {
          iter = IndexedIterable(iter);
          if (iter.size === 0) {
            return this;
          }
          assertNotInfinite(iter.size);
          var newSize = this.size;
          var head = this._head;
          iter.reverse().forEach(function(value ) {
            newSize++;
            head = {
              value: value,
              next: head
            };
          });
          if (this.__ownerID) {
            this.size = newSize;
            this._head = head;
            this.__hash = undefined;
            this.__altered = true;
            return this;
          }
          return makeStack(newSize, head);
        };
    
        Stack.prototype.pop = function() {
          return this.slice(1);
        };
    
        Stack.prototype.unshift = function(/*...values*/) {
          return this.push.apply(this, arguments);
        };
    
        Stack.prototype.unshiftAll = function(iter) {
          return this.pushAll(iter);
        };
    
        Stack.prototype.shift = function() {
          return this.pop.apply(this, arguments);
        };
    
        Stack.prototype.clear = function() {
          if (this.size === 0) {
            return this;
          }
          if (this.__ownerID) {
            this.size = 0;
            this._head = undefined;
            this.__hash = undefined;
            this.__altered = true;
            return this;
          }
          return emptyStack();
        };
    
        Stack.prototype.slice = function(begin, end) {
          if (wholeSlice(begin, end, this.size)) {
            return this;
          }
          var resolvedBegin = resolveBegin(begin, this.size);
          var resolvedEnd = resolveEnd(end, this.size);
          if (resolvedEnd !== this.size) {
            // super.slice(begin, end);
            return IndexedCollection.prototype.slice.call(this, begin, end);
          }
          var newSize = this.size - resolvedBegin;
          var head = this._head;
          while (resolvedBegin--) {
            head = head.next;
          }
          if (this.__ownerID) {
            this.size = newSize;
            this._head = head;
            this.__hash = undefined;
            this.__altered = true;
            return this;
          }
          return makeStack(newSize, head);
        };
    
        // @pragma Mutability
    
        Stack.prototype.__ensureOwner = function(ownerID) {
          if (ownerID === this.__ownerID) {
            return this;
          }
          if (!ownerID) {
            this.__ownerID = ownerID;
            this.__altered = false;
            return this;
          }
          return makeStack(this.size, this._head, ownerID, this.__hash);
        };
    
        // @pragma Iteration
    
        Stack.prototype.__iterate = function(fn, reverse) {
          if (reverse) {
            return this.reverse().__iterate(fn);
          }
          var iterations = 0;
          var node = this._head;
          while (node) {
            if (fn(node.value, iterations++, this) === false) {
              break;
            }
            node = node.next;
          }
          return iterations;
        };
    
        Stack.prototype.__iterator = function(type, reverse) {
          if (reverse) {
            return this.reverse().__iterator(type);
          }
          var iterations = 0;
          var node = this._head;
          return new Iterator(function()  {
            if (node) {
              var value = node.value;
              node = node.next;
              return iteratorValue(type, iterations++, value);
            }
            return iteratorDone();
          });
        };
    
    
      function isStack(maybeStack) {
        return !!(maybeStack && maybeStack[IS_STACK_SENTINEL]);
      }
    
      Stack.isStack = isStack;
    
      var IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';
    
      var StackPrototype = Stack.prototype;
      StackPrototype[IS_STACK_SENTINEL] = true;
      StackPrototype.withMutations = MapPrototype.withMutations;
      StackPrototype.asMutable = MapPrototype.asMutable;
      StackPrototype.asImmutable = MapPrototype.asImmutable;
      StackPrototype.wasAltered = MapPrototype.wasAltered;
    
    
      function makeStack(size, head, ownerID, hash) {
        var map = Object.create(StackPrototype);
        map.size = size;
        map._head = head;
        map.__ownerID = ownerID;
        map.__hash = hash;
        map.__altered = false;
        return map;
      }
    
      var EMPTY_STACK;
      function emptyStack() {
        return EMPTY_STACK || (EMPTY_STACK = makeStack(0));
      }
    
      /**
       * Contributes additional methods to a constructor
       */
      function mixin(ctor, methods) {
        var keyCopier = function(key ) { ctor.prototype[key] = methods[key]; };
        Object.keys(methods).forEach(keyCopier);
        Object.getOwnPropertySymbols &&
          Object.getOwnPropertySymbols(methods).forEach(keyCopier);
        return ctor;
      }
    
      Iterable.Iterator = Iterator;
    
      mixin(Iterable, {
    
        // ### Conversion to other types
    
        toArray: function() {
          assertNotInfinite(this.size);
          var array = new Array(this.size || 0);
          this.valueSeq().__iterate(function(v, i)  { array[i] = v; });
          return array;
        },
    
        toIndexedSeq: function() {
          return new ToIndexedSequence(this);
        },
    
        toJS: function() {
          return this.toSeq().map(
            function(value ) {return value && typeof value.toJS === 'function' ? value.toJS() : value}
          ).__toJS();
        },
    
        toJSON: function() {
          return this.toSeq().map(
            function(value ) {return value && typeof value.toJSON === 'function' ? value.toJSON() : value}
          ).__toJS();
        },
    
        toKeyedSeq: function() {
          return new ToKeyedSequence(this, true);
        },
    
        toMap: function() {
          // Use Late Binding here to solve the circular dependency.
          return Map(this.toKeyedSeq());
        },
    
        toObject: function() {
          assertNotInfinite(this.size);
          var object = {};
          this.__iterate(function(v, k)  { object[k] = v; });
          return object;
        },
    
        toOrderedMap: function() {
          // Use Late Binding here to solve the circular dependency.
          return OrderedMap(this.toKeyedSeq());
        },
    
        toOrderedSet: function() {
          // Use Late Binding here to solve the circular dependency.
          return OrderedSet(isKeyed(this) ? this.valueSeq() : this);
        },
    
        toSet: function() {
          // Use Late Binding here to solve the circular dependency.
          return Set(isKeyed(this) ? this.valueSeq() : this);
        },
    
        toSetSeq: function() {
          return new ToSetSequence(this);
        },
    
        toSeq: function() {
          return isIndexed(this) ? this.toIndexedSeq() :
            isKeyed(this) ? this.toKeyedSeq() :
            this.toSetSeq();
        },
    
        toStack: function() {
          // Use Late Binding here to solve the circular dependency.
          return Stack(isKeyed(this) ? this.valueSeq() : this);
        },
    
        toList: function() {
          // Use Late Binding here to solve the circular dependency.
          return List(isKeyed(this) ? this.valueSeq() : this);
        },
    
    
        // ### Common JavaScript methods and properties
    
        toString: function() {
          return '[Iterable]';
        },
    
        __toString: function(head, tail) {
          if (this.size === 0) {
            return head + tail;
          }
          return head + ' ' + this.toSeq().map(this.__toStringMapper).join(', ') + ' ' + tail;
        },
    
    
        // ### ES6 Collection methods (ES6 Array and Map)
    
        concat: function() {var values = SLICE$0.call(arguments, 0);
          return reify(this, concatFactory(this, values));
        },
    
        includes: function(searchValue) {
          return this.some(function(value ) {return is(value, searchValue)});
        },
    
        entries: function() {
          return this.__iterator(ITERATE_ENTRIES);
        },
    
        every: function(predicate, context) {
          assertNotInfinite(this.size);
          var returnValue = true;
          this.__iterate(function(v, k, c)  {
            if (!predicate.call(context, v, k, c)) {
              returnValue = false;
              return false;
            }
          });
          return returnValue;
        },
    
        filter: function(predicate, context) {
          return reify(this, filterFactory(this, predicate, context, true));
        },
    
        find: function(predicate, context, notSetValue) {
          var entry = this.findEntry(predicate, context);
          return entry ? entry[1] : notSetValue;
        },
    
        forEach: function(sideEffect, context) {
          assertNotInfinite(this.size);
          return this.__iterate(context ? sideEffect.bind(context) : sideEffect);
        },
    
        join: function(separator) {
          assertNotInfinite(this.size);
          separator = separator !== undefined ? '' + separator : ',';
          var joined = '';
          var isFirst = true;
          this.__iterate(function(v ) {
            isFirst ? (isFirst = false) : (joined += separator);
            joined += v !== null && v !== undefined ? v.toString() : '';
          });
          return joined;
        },
    
        keys: function() {
          return this.__iterator(ITERATE_KEYS);
        },
    
        map: function(mapper, context) {
          return reify(this, mapFactory(this, mapper, context));
        },
    
        reduce: function(reducer, initialReduction, context) {
          assertNotInfinite(this.size);
          var reduction;
          var useFirst;
          if (arguments.length < 2) {
            useFirst = true;
          } else {
            reduction = initialReduction;
          }
          this.__iterate(function(v, k, c)  {
            if (useFirst) {
              useFirst = false;
              reduction = v;
            } else {
              reduction = reducer.call(context, reduction, v, k, c);
            }
          });
          return reduction;
        },
    
        reduceRight: function(reducer, initialReduction, context) {
          var reversed = this.toKeyedSeq().reverse();
          return reversed.reduce.apply(reversed, arguments);
        },
    
        reverse: function() {
          return reify(this, reverseFactory(this, true));
        },
    
        slice: function(begin, end) {
          return reify(this, sliceFactory(this, begin, end, true));
        },
    
        some: function(predicate, context) {
          return !this.every(not(predicate), context);
        },
    
        sort: function(comparator) {
          return reify(this, sortFactory(this, comparator));
        },
    
        values: function() {
          return this.__iterator(ITERATE_VALUES);
        },
    
    
        // ### More sequential methods
    
        butLast: function() {
          return this.slice(0, -1);
        },
    
        isEmpty: function() {
          return this.size !== undefined ? this.size === 0 : !this.some(function()  {return true});
        },
    
        count: function(predicate, context) {
          return ensureSize(
            predicate ? this.toSeq().filter(predicate, context) : this
          );
        },
    
        countBy: function(grouper, context) {
          return countByFactory(this, grouper, context);
        },
    
        equals: function(other) {
          return deepEqual(this, other);
        },
    
        entrySeq: function() {
          var iterable = this;
          if (iterable._cache) {
            // We cache as an entries array, so we can just return the cache!
            return new ArraySeq(iterable._cache);
          }
          var entriesSequence = iterable.toSeq().map(entryMapper).toIndexedSeq();
          entriesSequence.fromEntrySeq = function()  {return iterable.toSeq()};
          return entriesSequence;
        },
    
        filterNot: function(predicate, context) {
          return this.filter(not(predicate), context);
        },
    
        findEntry: function(predicate, context, notSetValue) {
          var found = notSetValue;
          this.__iterate(function(v, k, c)  {
            if (predicate.call(context, v, k, c)) {
              found = [k, v];
              return false;
            }
          });
          return found;
        },
    
        findKey: function(predicate, context) {
          var entry = this.findEntry(predicate, context);
          return entry && entry[0];
        },
    
        findLast: function(predicate, context, notSetValue) {
          return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);
        },
    
        findLastEntry: function(predicate, context, notSetValue) {
          return this.toKeyedSeq().reverse().findEntry(predicate, context, notSetValue);
        },
    
        findLastKey: function(predicate, context) {
          return this.toKeyedSeq().reverse().findKey(predicate, context);
        },
    
        first: function() {
          return this.find(returnTrue);
        },
    
        flatMap: function(mapper, context) {
          return reify(this, flatMapFactory(this, mapper, context));
        },
    
        flatten: function(depth) {
          return reify(this, flattenFactory(this, depth, true));
        },
    
        fromEntrySeq: function() {
          return new FromEntriesSequence(this);
        },
    
        get: function(searchKey, notSetValue) {
          return this.find(function(_, key)  {return is(key, searchKey)}, undefined, notSetValue);
        },
    
        getIn: function(searchKeyPath, notSetValue) {
          var nested = this;
          // Note: in an ES6 environment, we would prefer:
          // for (var key of searchKeyPath) {
          var iter = forceIterator(searchKeyPath);
          var step;
          while (!(step = iter.next()).done) {
            var key = step.value;
            nested = nested && nested.get ? nested.get(key, NOT_SET) : NOT_SET;
            if (nested === NOT_SET) {
              return notSetValue;
            }
          }
          return nested;
        },
    
        groupBy: function(grouper, context) {
          return groupByFactory(this, grouper, context);
        },
    
        has: function(searchKey) {
          return this.get(searchKey, NOT_SET) !== NOT_SET;
        },
    
        hasIn: function(searchKeyPath) {
          return this.getIn(searchKeyPath, NOT_SET) !== NOT_SET;
        },
    
        isSubset: function(iter) {
          iter = typeof iter.includes === 'function' ? iter : Iterable(iter);
          return this.every(function(value ) {return iter.includes(value)});
        },
    
        isSuperset: function(iter) {
          iter = typeof iter.isSubset === 'function' ? iter : Iterable(iter);
          return iter.isSubset(this);
        },
    
        keyOf: function(searchValue) {
          return this.findKey(function(value ) {return is(value, searchValue)});
        },
    
        keySeq: function() {
          return this.toSeq().map(keyMapper).toIndexedSeq();
        },
    
        last: function() {
          return this.toSeq().reverse().first();
        },
    
        lastKeyOf: function(searchValue) {
          return this.toKeyedSeq().reverse().keyOf(searchValue);
        },
    
        max: function(comparator) {
          return maxFactory(this, comparator);
        },
    
        maxBy: function(mapper, comparator) {
          return maxFactory(this, comparator, mapper);
        },
    
        min: function(comparator) {
          return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator);
        },
    
        minBy: function(mapper, comparator) {
          return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator, mapper);
        },
    
        rest: function() {
          return this.slice(1);
        },
    
        skip: function(amount) {
          return this.slice(Math.max(0, amount));
        },
    
        skipLast: function(amount) {
          return reify(this, this.toSeq().reverse().skip(amount).reverse());
        },
    
        skipWhile: function(predicate, context) {
          return reify(this, skipWhileFactory(this, predicate, context, true));
        },
    
        skipUntil: function(predicate, context) {
          return this.skipWhile(not(predicate), context);
        },
    
        sortBy: function(mapper, comparator) {
          return reify(this, sortFactory(this, comparator, mapper));
        },
    
        take: function(amount) {
          return this.slice(0, Math.max(0, amount));
        },
    
        takeLast: function(amount) {
          return reify(this, this.toSeq().reverse().take(amount).reverse());
        },
    
        takeWhile: function(predicate, context) {
          return reify(this, takeWhileFactory(this, predicate, context));
        },
    
        takeUntil: function(predicate, context) {
          return this.takeWhile(not(predicate), context);
        },
    
        valueSeq: function() {
          return this.toIndexedSeq();
        },
    
    
        // ### Hashable Object
    
        hashCode: function() {
          return this.__hash || (this.__hash = hashIterable(this));
        }
    
    
        // ### Internal
    
        // abstract __iterate(fn, reverse)
    
        // abstract __iterator(type, reverse)
      });
    
      // var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';
      // var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';
      // var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';
      // var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';
    
      var IterablePrototype = Iterable.prototype;
      IterablePrototype[IS_ITERABLE_SENTINEL] = true;
      IterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.values;
      IterablePrototype.__toJS = IterablePrototype.toArray;
      IterablePrototype.__toStringMapper = quoteString;
      IterablePrototype.inspect =
      IterablePrototype.toSource = function() { return this.toString(); };
      IterablePrototype.chain = IterablePrototype.flatMap;
      IterablePrototype.contains = IterablePrototype.includes;
    
      mixin(KeyedIterable, {
    
        // ### More sequential methods
    
        flip: function() {
          return reify(this, flipFactory(this));
        },
    
        mapEntries: function(mapper, context) {var this$0 = this;
          var iterations = 0;
          return reify(this,
            this.toSeq().map(
              function(v, k)  {return mapper.call(context, [k, v], iterations++, this$0)}
            ).fromEntrySeq()
          );
        },
    
        mapKeys: function(mapper, context) {var this$0 = this;
          return reify(this,
            this.toSeq().flip().map(
              function(k, v)  {return mapper.call(context, k, v, this$0)}
            ).flip()
          );
        }
    
      });
    
      var KeyedIterablePrototype = KeyedIterable.prototype;
      KeyedIterablePrototype[IS_KEYED_SENTINEL] = true;
      KeyedIterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.entries;
      KeyedIterablePrototype.__toJS = IterablePrototype.toObject;
      KeyedIterablePrototype.__toStringMapper = function(v, k)  {return JSON.stringify(k) + ': ' + quoteString(v)};
    
    
    
      mixin(IndexedIterable, {
    
        // ### Conversion to other types
    
        toKeyedSeq: function() {
          return new ToKeyedSequence(this, false);
        },
    
    
        // ### ES6 Collection methods (ES6 Array and Map)
    
        filter: function(predicate, context) {
          return reify(this, filterFactory(this, predicate, context, false));
        },
    
        findIndex: function(predicate, context) {
          var entry = this.findEntry(predicate, context);
          return entry ? entry[0] : -1;
        },
    
        indexOf: function(searchValue) {
          var key = this.keyOf(searchValue);
          return key === undefined ? -1 : key;
        },
    
        lastIndexOf: function(searchValue) {
          var key = this.lastKeyOf(searchValue);
          return key === undefined ? -1 : key;
        },
    
        reverse: function() {
          return reify(this, reverseFactory(this, false));
        },
    
        slice: function(begin, end) {
          return reify(this, sliceFactory(this, begin, end, false));
        },
    
        splice: function(index, removeNum /*, ...values*/) {
          var numArgs = arguments.length;
          removeNum = Math.max(removeNum | 0, 0);
          if (numArgs === 0 || (numArgs === 2 && !removeNum)) {
            return this;
          }
          // If index is negative, it should resolve relative to the size of the
          // collection. However size may be expensive to compute if not cached, so
          // only call count() if the number is in fact negative.
          index = resolveBegin(index, index < 0 ? this.count() : this.size);
          var spliced = this.slice(0, index);
          return reify(
            this,
            numArgs === 1 ?
              spliced :
              spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))
          );
        },
    
    
        // ### More collection methods
    
        findLastIndex: function(predicate, context) {
          var entry = this.findLastEntry(predicate, context);
          return entry ? entry[0] : -1;
        },
    
        first: function() {
          return this.get(0);
        },
    
        flatten: function(depth) {
          return reify(this, flattenFactory(this, depth, false));
        },
    
        get: function(index, notSetValue) {
          index = wrapIndex(this, index);
          return (index < 0 || (this.size === Infinity ||
              (this.size !== undefined && index > this.size))) ?
            notSetValue :
            this.find(function(_, key)  {return key === index}, undefined, notSetValue);
        },
    
        has: function(index) {
          index = wrapIndex(this, index);
          return index >= 0 && (this.size !== undefined ?
            this.size === Infinity || index < this.size :
            this.indexOf(index) !== -1
          );
        },
    
        interpose: function(separator) {
          return reify(this, interposeFactory(this, separator));
        },
    
        interleave: function(/*...iterables*/) {
          var iterables = [this].concat(arrCopy(arguments));
          var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, iterables);
          var interleaved = zipped.flatten(true);
          if (zipped.size) {
            interleaved.size = zipped.size * iterables.length;
          }
          return reify(this, interleaved);
        },
    
        keySeq: function() {
          return Range(0, this.size);
        },
    
        last: function() {
          return this.get(-1);
        },
    
        skipWhile: function(predicate, context) {
          return reify(this, skipWhileFactory(this, predicate, context, false));
        },
    
        zip: function(/*, ...iterables */) {
          var iterables = [this].concat(arrCopy(arguments));
          return reify(this, zipWithFactory(this, defaultZipper, iterables));
        },
    
        zipWith: function(zipper/*, ...iterables */) {
          var iterables = arrCopy(arguments);
          iterables[0] = this;
          return reify(this, zipWithFactory(this, zipper, iterables));
        }
    
      });
    
      IndexedIterable.prototype[IS_INDEXED_SENTINEL] = true;
      IndexedIterable.prototype[IS_ORDERED_SENTINEL] = true;
    
    
    
      mixin(SetIterable, {
    
        // ### ES6 Collection methods (ES6 Array and Map)
    
        get: function(value, notSetValue) {
          return this.has(value) ? value : notSetValue;
        },
    
        includes: function(value) {
          return this.has(value);
        },
    
    
        // ### More sequential methods
    
        keySeq: function() {
          return this.valueSeq();
        }
    
      });
    
      SetIterable.prototype.has = IterablePrototype.includes;
      SetIterable.prototype.contains = SetIterable.prototype.includes;
    
    
      // Mixin subclasses
    
      mixin(KeyedSeq, KeyedIterable.prototype);
      mixin(IndexedSeq, IndexedIterable.prototype);
      mixin(SetSeq, SetIterable.prototype);
    
      mixin(KeyedCollection, KeyedIterable.prototype);
      mixin(IndexedCollection, IndexedIterable.prototype);
      mixin(SetCollection, SetIterable.prototype);
    
    
      // #pragma Helper functions
    
      function keyMapper(v, k) {
        return k;
      }
    
      function entryMapper(v, k) {
        return [k, v];
      }
    
      function not(predicate) {
        return function() {
          return !predicate.apply(this, arguments);
        }
      }
    
      function neg(predicate) {
        return function() {
          return -predicate.apply(this, arguments);
        }
      }
    
      function quoteString(value) {
        return typeof value === 'string' ? JSON.stringify(value) : String(value);
      }
    
      function defaultZipper() {
        return arrCopy(arguments);
      }
    
      function defaultNegComparator(a, b) {
        return a < b ? 1 : a > b ? -1 : 0;
      }
    
      function hashIterable(iterable) {
        if (iterable.size === Infinity) {
          return 0;
        }
        var ordered = isOrdered(iterable);
        var keyed = isKeyed(iterable);
        var h = ordered ? 1 : 0;
        var size = iterable.__iterate(
          keyed ?
            ordered ?
              function(v, k)  { h = 31 * h + hashMerge(hash(v), hash(k)) | 0; } :
              function(v, k)  { h = h + hashMerge(hash(v), hash(k)) | 0; } :
            ordered ?
              function(v ) { h = 31 * h + hash(v) | 0; } :
              function(v ) { h = h + hash(v) | 0; }
        );
        return murmurHashOfSize(size, h);
      }
    
      function murmurHashOfSize(size, h) {
        h = imul(h, 0xCC9E2D51);
        h = imul(h << 15 | h >>> -15, 0x1B873593);
        h = imul(h << 13 | h >>> -13, 5);
        h = (h + 0xE6546B64 | 0) ^ size;
        h = imul(h ^ h >>> 16, 0x85EBCA6B);
        h = imul(h ^ h >>> 13, 0xC2B2AE35);
        h = smi(h ^ h >>> 16);
        return h;
      }
    
      function hashMerge(a, b) {
        return a ^ b + 0x9E3779B9 + (a << 6) + (a >> 2) | 0; // int
      }
    
      var Immutable = {
    
        Iterable: Iterable,
    
        Seq: Seq,
        Collection: Collection,
        Map: Map,
        OrderedMap: OrderedMap,
        List: List,
        Stack: Stack,
        Set: Set,
        OrderedSet: OrderedSet,
    
        Record: Record,
        Range: Range,
        Repeat: Repeat,
    
        is: is,
        fromJS: fromJS
    
      };
    
      return Immutable;
    
    }));
  provide("immutable", module.exports);
}(global));

// pakmanager:isomorphic-fetch
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  "use strict";
    
    var realFetch = require('node-fetch');
    module.exports = function(url, options) {
    	if (/^\/\//.test(url)) {
    		url = 'https:' + url;
    	}
    	return realFetch.call(this, url, options);
    };
    
    if (!global.fetch) {
    	global.fetch = module.exports;
    	global.Response = realFetch.Response;
    	global.Headers = realFetch.Headers;
    	global.Request = realFetch.Request;
    }
    
  provide("isomorphic-fetch", module.exports);
}(global));

// pakmanager:promise/lib/core.js
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    var asap = require('asap/raw');
    
    function noop() {}
    
    // States:
    //
    // 0 - pending
    // 1 - fulfilled with _value
    // 2 - rejected with _value
    // 3 - adopted the state of another promise, _value
    //
    // once the state is no longer pending (0) it is immutable
    
    // All `_` prefixed properties will be reduced to `_{random number}`
    // at build time to obfuscate them and discourage their use.
    // We don't use symbols or Object.defineProperty to fully hide them
    // because the performance isn't good enough.
    
    
    // to avoid using try/catch inside critical functions, we
    // extract them to here.
    var LAST_ERROR = null;
    var IS_ERROR = {};
    function getThen(obj) {
      try {
        return obj.then;
      } catch (ex) {
        LAST_ERROR = ex;
        return IS_ERROR;
      }
    }
    
    function tryCallOne(fn, a) {
      try {
        return fn(a);
      } catch (ex) {
        LAST_ERROR = ex;
        return IS_ERROR;
      }
    }
    function tryCallTwo(fn, a, b) {
      try {
        fn(a, b);
      } catch (ex) {
        LAST_ERROR = ex;
        return IS_ERROR;
      }
    }
    
    module.exports = Promise;
    
    function Promise(fn) {
      if (typeof this !== 'object') {
        throw new TypeError('Promises must be constructed via new');
      }
      if (typeof fn !== 'function') {
        throw new TypeError('not a function');
      }
      this._45 = 0;
      this._81 = 0;
      this._65 = null;
      this._54 = null;
      if (fn === noop) return;
      doResolve(fn, this);
    }
    Promise._10 = null;
    Promise._97 = null;
    Promise._61 = noop;
    
    Promise.prototype.then = function(onFulfilled, onRejected) {
      if (this.constructor !== Promise) {
        return safeThen(this, onFulfilled, onRejected);
      }
      var res = new Promise(noop);
      handle(this, new Handler(onFulfilled, onRejected, res));
      return res;
    };
    
    function safeThen(self, onFulfilled, onRejected) {
      return new self.constructor(function (resolve, reject) {
        var res = new Promise(noop);
        res.then(resolve, reject);
        handle(self, new Handler(onFulfilled, onRejected, res));
      });
    };
    function handle(self, deferred) {
      while (self._81 === 3) {
        self = self._65;
      }
      if (Promise._10) {
        Promise._10(self);
      }
      if (self._81 === 0) {
        if (self._45 === 0) {
          self._45 = 1;
          self._54 = deferred;
          return;
        }
        if (self._45 === 1) {
          self._45 = 2;
          self._54 = [self._54, deferred];
          return;
        }
        self._54.push(deferred);
        return;
      }
      handleResolved(self, deferred);
    }
    
    function handleResolved(self, deferred) {
      asap(function() {
        var cb = self._81 === 1 ? deferred.onFulfilled : deferred.onRejected;
        if (cb === null) {
          if (self._81 === 1) {
            resolve(deferred.promise, self._65);
          } else {
            reject(deferred.promise, self._65);
          }
          return;
        }
        var ret = tryCallOne(cb, self._65);
        if (ret === IS_ERROR) {
          reject(deferred.promise, LAST_ERROR);
        } else {
          resolve(deferred.promise, ret);
        }
      });
    }
    function resolve(self, newValue) {
      // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
      if (newValue === self) {
        return reject(
          self,
          new TypeError('A promise cannot be resolved with itself.')
        );
      }
      if (
        newValue &&
        (typeof newValue === 'object' || typeof newValue === 'function')
      ) {
        var then = getThen(newValue);
        if (then === IS_ERROR) {
          return reject(self, LAST_ERROR);
        }
        if (
          then === self.then &&
          newValue instanceof Promise
        ) {
          self._81 = 3;
          self._65 = newValue;
          finale(self);
          return;
        } else if (typeof then === 'function') {
          doResolve(then.bind(newValue), self);
          return;
        }
      }
      self._81 = 1;
      self._65 = newValue;
      finale(self);
    }
    
    function reject(self, newValue) {
      self._81 = 2;
      self._65 = newValue;
      if (Promise._97) {
        Promise._97(self, newValue);
      }
      finale(self);
    }
    function finale(self) {
      if (self._45 === 1) {
        handle(self, self._54);
        self._54 = null;
      }
      if (self._45 === 2) {
        for (var i = 0; i < self._54.length; i++) {
          handle(self, self._54[i]);
        }
        self._54 = null;
      }
    }
    
    function Handler(onFulfilled, onRejected, promise){
      this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
      this.onRejected = typeof onRejected === 'function' ? onRejected : null;
      this.promise = promise;
    }
    
    /**
     * Take a potentially misbehaving resolver function and make sure
     * onFulfilled and onRejected are only called once.
     *
     * Makes no guarantees about asynchrony.
     */
    function doResolve(fn, promise) {
      var done = false;
      var res = tryCallTwo(fn, function (value) {
        if (done) return;
        done = true;
        resolve(promise, value);
      }, function (reason) {
        if (done) return;
        done = true;
        reject(promise, reason);
      })
      if (!done && res === IS_ERROR) {
        done = true;
        reject(promise, LAST_ERROR);
      }
    }
    
  provide("promise/lib/core.js", module.exports);
}(global));

// pakmanager:promise/lib/done.js
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    var Promise =  require('promise/lib/core.js');
    
    module.exports = Promise;
    Promise.prototype.done = function (onFulfilled, onRejected) {
      var self = arguments.length ? this.then.apply(this, arguments) : this;
      self.then(null, function (err) {
        setTimeout(function () {
          throw err;
        }, 0);
      });
    };
    
  provide("promise/lib/done.js", module.exports);
}(global));

// pakmanager:promise/lib/finally.js
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    var Promise =  require('promise/lib/core.js');
    
    module.exports = Promise;
    Promise.prototype['finally'] = function (f) {
      return this.then(function (value) {
        return Promise.resolve(f()).then(function () {
          return value;
        });
      }, function (err) {
        return Promise.resolve(f()).then(function () {
          throw err;
        });
      });
    };
    
  provide("promise/lib/finally.js", module.exports);
}(global));

// pakmanager:promise/lib/es6-extensions.js
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    //This file contains the ES6 extensions to the core Promises/A+ API
    
    var Promise =  require('promise/lib/core.js');
    
    module.exports = Promise;
    
    /* Static Functions */
    
    var TRUE = valuePromise(true);
    var FALSE = valuePromise(false);
    var NULL = valuePromise(null);
    var UNDEFINED = valuePromise(undefined);
    var ZERO = valuePromise(0);
    var EMPTYSTRING = valuePromise('');
    
    function valuePromise(value) {
      var p = new Promise(Promise._61);
      p._81 = 1;
      p._65 = value;
      return p;
    }
    Promise.resolve = function (value) {
      if (value instanceof Promise) return value;
    
      if (value === null) return NULL;
      if (value === undefined) return UNDEFINED;
      if (value === true) return TRUE;
      if (value === false) return FALSE;
      if (value === 0) return ZERO;
      if (value === '') return EMPTYSTRING;
    
      if (typeof value === 'object' || typeof value === 'function') {
        try {
          var then = value.then;
          if (typeof then === 'function') {
            return new Promise(then.bind(value));
          }
        } catch (ex) {
          return new Promise(function (resolve, reject) {
            reject(ex);
          });
        }
      }
      return valuePromise(value);
    };
    
    Promise.all = function (arr) {
      var args = Array.prototype.slice.call(arr);
    
      return new Promise(function (resolve, reject) {
        if (args.length === 0) return resolve([]);
        var remaining = args.length;
        function res(i, val) {
          if (val && (typeof val === 'object' || typeof val === 'function')) {
            if (val instanceof Promise && val.then === Promise.prototype.then) {
              while (val._81 === 3) {
                val = val._65;
              }
              if (val._81 === 1) return res(i, val._65);
              if (val._81 === 2) reject(val._65);
              val.then(function (val) {
                res(i, val);
              }, reject);
              return;
            } else {
              var then = val.then;
              if (typeof then === 'function') {
                var p = new Promise(then.bind(val));
                p.then(function (val) {
                  res(i, val);
                }, reject);
                return;
              }
            }
          }
          args[i] = val;
          if (--remaining === 0) {
            resolve(args);
          }
        }
        for (var i = 0; i < args.length; i++) {
          res(i, args[i]);
        }
      });
    };
    
    Promise.reject = function (value) {
      return new Promise(function (resolve, reject) {
        reject(value);
      });
    };
    
    Promise.race = function (values) {
      return new Promise(function (resolve, reject) {
        values.forEach(function(value){
          Promise.resolve(value).then(resolve, reject);
        });
      });
    };
    
    /* Prototype Methods */
    
    Promise.prototype['catch'] = function (onRejected) {
      return this.then(null, onRejected);
    };
    
  provide("promise/lib/es6-extensions.js", module.exports);
}(global));

// pakmanager:promise/lib/node-extensions.js
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    // This file contains then/promise specific extensions that are only useful
    // for node.js interop
    
    var Promise =  require('promise/lib/core.js');
    var asap = require('asap');
    
    module.exports = Promise;
    
    /* Static Functions */
    
    Promise.denodeify = function (fn, argumentCount) {
      if (
        typeof argumentCount === 'number' && argumentCount !== Infinity
      ) {
        return denodeifyWithCount(fn, argumentCount);
      } else {
        return denodeifyWithoutCount(fn);
      }
    }
    
    var callbackFn = (
      'function (err, res) {' +
      'if (err) { rj(err); } else { rs(res); }' +
      '}'
    );
    function denodeifyWithCount(fn, argumentCount) {
      var args = [];
      for (var i = 0; i < argumentCount; i++) {
        args.push('a' + i);
      }
      var body = [
        'return function (' + args.join(',') + ') {',
        'var self = this;',
        'return new Promise(function (rs, rj) {',
        'var res = fn.call(',
        ['self'].concat(args).concat([callbackFn]).join(','),
        ');',
        'if (res &&',
        '(typeof res === "object" || typeof res === "function") &&',
        'typeof res.then === "function"',
        ') {rs(res);}',
        '});',
        '};'
      ].join('');
      return Function(['Promise', 'fn'], body)(Promise, fn);
    }
    function denodeifyWithoutCount(fn) {
      var fnLength = Math.max(fn.length - 1, 3);
      var args = [];
      for (var i = 0; i < fnLength; i++) {
        args.push('a' + i);
      }
      var body = [
        'return function (' + args.join(',') + ') {',
        'var self = this;',
        'var args;',
        'var argLength = arguments.length;',
        'if (arguments.length > ' + fnLength + ') {',
        'args = new Array(arguments.length + 1);',
        'for (var i = 0; i < arguments.length; i++) {',
        'args[i] = arguments[i];',
        '}',
        '}',
        'return new Promise(function (rs, rj) {',
        'var cb = ' + callbackFn + ';',
        'var res;',
        'switch (argLength) {',
        args.concat(['extra']).map(function (_, index) {
          return (
            'case ' + (index) + ':' +
            'res = fn.call(' + ['self'].concat(args.slice(0, index)).concat('cb').join(',') + ');' +
            'break;'
          );
        }).join(''),
        'default:',
        'args[argLength] = cb;',
        'res = fn.apply(self, args);',
        '}',
        
        'if (res &&',
        '(typeof res === "object" || typeof res === "function") &&',
        'typeof res.then === "function"',
        ') {rs(res);}',
        '});',
        '};'
      ].join('');
    
      return Function(
        ['Promise', 'fn'],
        body
      )(Promise, fn);
    }
    
    Promise.nodeify = function (fn) {
      return function () {
        var args = Array.prototype.slice.call(arguments);
        var callback =
          typeof args[args.length - 1] === 'function' ? args.pop() : null;
        var ctx = this;
        try {
          return fn.apply(this, arguments).nodeify(callback, ctx);
        } catch (ex) {
          if (callback === null || typeof callback == 'undefined') {
            return new Promise(function (resolve, reject) {
              reject(ex);
            });
          } else {
            asap(function () {
              callback.call(ctx, ex);
            })
          }
        }
      }
    }
    
    Promise.prototype.nodeify = function (callback, ctx) {
      if (typeof callback != 'function') return this;
    
      this.then(function (value) {
        asap(function () {
          callback.call(ctx, null, value);
        });
      }, function (err) {
        asap(function () {
          callback.call(ctx, err);
        });
      });
    }
    
  provide("promise/lib/node-extensions.js", module.exports);
}(global));

// pakmanager:promise/lib/synchronous.js
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    var Promise =  require('promise/lib/core.js');
    
    module.exports = Promise;
    Promise.enableSynchronous = function () {
      Promise.prototype.isPending = function() {
        return this.getState() == 0;
      };
    
      Promise.prototype.isFulfilled = function() {
        return this.getState() == 1;
      };
    
      Promise.prototype.isRejected = function() {
        return this.getState() == 2;
      };
    
      Promise.prototype.getValue = function () {
        if (this._81 === 3) {
          return this._65.getValue();
        }
    
        if (!this.isFulfilled()) {
          throw new Error('Cannot get a value of an unfulfilled promise.');
        }
    
        return this._65;
      };
    
      Promise.prototype.getReason = function () {
        if (this._81 === 3) {
          return this._65.getReason();
        }
    
        if (!this.isRejected()) {
          throw new Error('Cannot get a rejection reason of a non-rejected promise.');
        }
    
        return this._65;
      };
    
      Promise.prototype.getState = function () {
        if (this._81 === 3) {
          return this._65.getState();
        }
        if (this._81 === -1 || this._81 === -2) {
          return 0;
        }
    
        return this._81;
      };
    };
    
    Promise.disableSynchronous = function() {
      Promise.prototype.isPending = undefined;
      Promise.prototype.isFulfilled = undefined;
      Promise.prototype.isRejected = undefined;
      Promise.prototype.getValue = undefined;
      Promise.prototype.getReason = undefined;
      Promise.prototype.getState = undefined;
    };
    
  provide("promise/lib/synchronous.js", module.exports);
}(global));

// pakmanager:promise/lib
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    module.exports =  require('promise/lib/core.js');
     require('promise/lib/done.js');
     require('promise/lib/finally.js');
     require('promise/lib/es6-extensions.js');
     require('promise/lib/node-extensions.js');
     require('promise/lib/synchronous.js');
    
  provide("promise/lib", module.exports);
}(global));

// pakmanager:promise
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    module.exports =  require('promise/lib')
    
  provide("promise", module.exports);
}(global));

// pakmanager:ua-parser-js
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  /**
     * UAParser.js v0.7.10
     * Lightweight JavaScript-based User-Agent string parser
     * https://github.com/faisalman/ua-parser-js
     *
     * Copyright © 2012-2015 Faisal Salman <fyzlman@gmail.com>
     * Dual licensed under GPLv2 & MIT
     */
    
    (function (window, undefined) {
    
        'use strict';
    
        //////////////
        // Constants
        /////////////
    
    
        var LIBVERSION  = '0.7.10',
            EMPTY       = '',
            UNKNOWN     = '?',
            FUNC_TYPE   = 'function',
            UNDEF_TYPE  = 'undefined',
            OBJ_TYPE    = 'object',
            STR_TYPE    = 'string',
            MAJOR       = 'major', // deprecated
            MODEL       = 'model',
            NAME        = 'name',
            TYPE        = 'type',
            VENDOR      = 'vendor',
            VERSION     = 'version',
            ARCHITECTURE= 'architecture',
            CONSOLE     = 'console',
            MOBILE      = 'mobile',
            TABLET      = 'tablet',
            SMARTTV     = 'smarttv',
            WEARABLE    = 'wearable',
            EMBEDDED    = 'embedded';
    
    
        ///////////
        // Helper
        //////////
    
    
        var util = {
            extend : function (regexes, extensions) {
                for (var i in extensions) {
                    if ("browser cpu device engine os".indexOf(i) !== -1 && extensions[i].length % 2 === 0) {
                        regexes[i] = extensions[i].concat(regexes[i]);
                    }
                }
                return regexes;
            },
            has : function (str1, str2) {
              if (typeof str1 === "string") {
                return str2.toLowerCase().indexOf(str1.toLowerCase()) !== -1;
              } else {
                return false;
              }
            },
            lowerize : function (str) {
                return str.toLowerCase();
            },
            major : function (version) {
                return typeof(version) === STR_TYPE ? version.split(".")[0] : undefined;
            }
        };
    
    
        ///////////////
        // Map helper
        //////////////
    
    
        var mapper = {
    
            rgx : function () {
    
                var result, i = 0, j, k, p, q, matches, match, args = arguments;
    
                // loop through all regexes maps
                while (i < args.length && !matches) {
    
                    var regex = args[i],       // even sequence (0,2,4,..)
                        props = args[i + 1];   // odd sequence (1,3,5,..)
    
                    // construct object barebones
                    if (typeof result === UNDEF_TYPE) {
                        result = {};
                        for (p in props) {
                            if (props.hasOwnProperty(p)){
                                q = props[p];
                                if (typeof q === OBJ_TYPE) {
                                    result[q[0]] = undefined;
                                } else {
                                    result[q] = undefined;
                                }
                            }
                        }
                    }
    
                    // try matching uastring with regexes
                    j = k = 0;
                    while (j < regex.length && !matches) {
                        matches = regex[j++].exec(this.getUA());
                        if (!!matches) {
                            for (p = 0; p < props.length; p++) {
                                match = matches[++k];
                                q = props[p];
                                // check if given property is actually array
                                if (typeof q === OBJ_TYPE && q.length > 0) {
                                    if (q.length == 2) {
                                        if (typeof q[1] == FUNC_TYPE) {
                                            // assign modified match
                                            result[q[0]] = q[1].call(this, match);
                                        } else {
                                            // assign given value, ignore regex match
                                            result[q[0]] = q[1];
                                        }
                                    } else if (q.length == 3) {
                                        // check whether function or regex
                                        if (typeof q[1] === FUNC_TYPE && !(q[1].exec && q[1].test)) {
                                            // call function (usually string mapper)
                                            result[q[0]] = match ? q[1].call(this, match, q[2]) : undefined;
                                        } else {
                                            // sanitize match using given regex
                                            result[q[0]] = match ? match.replace(q[1], q[2]) : undefined;
                                        }
                                    } else if (q.length == 4) {
                                            result[q[0]] = match ? q[3].call(this, match.replace(q[1], q[2])) : undefined;
                                    }
                                } else {
                                    result[q] = match ? match : undefined;
                                }
                            }
                        }
                    }
                    i += 2;
                }
                return result;
            },
    
            str : function (str, map) {
    
                for (var i in map) {
                    // check if array
                    if (typeof map[i] === OBJ_TYPE && map[i].length > 0) {
                        for (var j = 0; j < map[i].length; j++) {
                            if (util.has(map[i][j], str)) {
                                return (i === UNKNOWN) ? undefined : i;
                            }
                        }
                    } else if (util.has(map[i], str)) {
                        return (i === UNKNOWN) ? undefined : i;
                    }
                }
                return str;
            }
        };
    
    
        ///////////////
        // String map
        //////////////
    
    
        var maps = {
    
            browser : {
                oldsafari : {
                    version : {
                        '1.0'   : '/8',
                        '1.2'   : '/1',
                        '1.3'   : '/3',
                        '2.0'   : '/412',
                        '2.0.2' : '/416',
                        '2.0.3' : '/417',
                        '2.0.4' : '/419',
                        '?'     : '/'
                    }
                }
            },
    
            device : {
                amazon : {
                    model : {
                        'Fire Phone' : ['SD', 'KF']
                    }
                },
                sprint : {
                    model : {
                        'Evo Shift 4G' : '7373KT'
                    },
                    vendor : {
                        'HTC'       : 'APA',
                        'Sprint'    : 'Sprint'
                    }
                }
            },
    
            os : {
                windows : {
                    version : {
                        'ME'        : '4.90',
                        'NT 3.11'   : 'NT3.51',
                        'NT 4.0'    : 'NT4.0',
                        '2000'      : 'NT 5.0',
                        'XP'        : ['NT 5.1', 'NT 5.2'],
                        'Vista'     : 'NT 6.0',
                        '7'         : 'NT 6.1',
                        '8'         : 'NT 6.2',
                        '8.1'       : 'NT 6.3',
                        '10'        : ['NT 6.4', 'NT 10.0'],
                        'RT'        : 'ARM'
                    }
                }
            }
        };
    
    
        //////////////
        // Regex map
        /////////////
    
    
        var regexes = {
    
            browser : [[
    
                // Presto based
                /(opera\smini)\/([\w\.-]+)/i,                                       // Opera Mini
                /(opera\s[mobiletab]+).+version\/([\w\.-]+)/i,                      // Opera Mobi/Tablet
                /(opera).+version\/([\w\.]+)/i,                                     // Opera > 9.80
                /(opera)[\/\s]+([\w\.]+)/i                                          // Opera < 9.80
    
                ], [NAME, VERSION], [
    
                /\s(opr)\/([\w\.]+)/i                                               // Opera Webkit
                ], [[NAME, 'Opera'], VERSION], [
    
                // Mixed
                /(kindle)\/([\w\.]+)/i,                                             // Kindle
                /(lunascape|maxthon|netfront|jasmine|blazer)[\/\s]?([\w\.]+)*/i,
                                                                                    // Lunascape/Maxthon/Netfront/Jasmine/Blazer
    
                // Trident based
                /(avant\s|iemobile|slim|baidu)(?:browser)?[\/\s]?([\w\.]*)/i,
                                                                                    // Avant/IEMobile/SlimBrowser/Baidu
                /(?:ms|\()(ie)\s([\w\.]+)/i,                                        // Internet Explorer
    
                // Webkit/KHTML based
                /(rekonq)\/([\w\.]+)*/i,                                            // Rekonq
                /(chromium|flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs)\/([\w\.-]+)/i
                                                                                    // Chromium/Flock/RockMelt/Midori/Epiphany/Silk/Skyfire/Bolt/Iron/Iridium/PhantomJS
                ], [NAME, VERSION], [
    
                /(trident).+rv[:\s]([\w\.]+).+like\sgecko/i                         // IE11
                ], [[NAME, 'IE'], VERSION], [
    
                /(edge)\/((\d+)?[\w\.]+)/i                                          // Microsoft Edge
                ], [NAME, VERSION], [
    
                /(yabrowser)\/([\w\.]+)/i                                           // Yandex
                ], [[NAME, 'Yandex'], VERSION], [
    
                /(comodo_dragon)\/([\w\.]+)/i                                       // Comodo Dragon
                ], [[NAME, /_/g, ' '], VERSION], [
    
                /(chrome|omniweb|arora|[tizenoka]{5}\s?browser)\/v?([\w\.]+)/i,
                                                                                    // Chrome/OmniWeb/Arora/Tizen/Nokia
                /(qqbrowser)[\/\s]?([\w\.]+)/i
                                                                                    // QQBrowser
                ], [NAME, VERSION], [
    
                /(uc\s?browser)[\/\s]?([\w\.]+)/i,
                /ucweb.+(ucbrowser)[\/\s]?([\w\.]+)/i,
                /JUC.+(ucweb)[\/\s]?([\w\.]+)/i
                                                                                    // UCBrowser
                ], [[NAME, 'UCBrowser'], VERSION], [
    
                /(dolfin)\/([\w\.]+)/i                                              // Dolphin
                ], [[NAME, 'Dolphin'], VERSION], [
    
                /((?:android.+)crmo|crios)\/([\w\.]+)/i                             // Chrome for Android/iOS
                ], [[NAME, 'Chrome'], VERSION], [
    
                /XiaoMi\/MiuiBrowser\/([\w\.]+)/i                                   // MIUI Browser
                ], [VERSION, [NAME, 'MIUI Browser']], [
    
                /android.+version\/([\w\.]+)\s+(?:mobile\s?safari|safari)/i         // Android Browser
                ], [VERSION, [NAME, 'Android Browser']], [
    
                /FBAV\/([\w\.]+);/i                                                 // Facebook App for iOS
                ], [VERSION, [NAME, 'Facebook']], [
    
                /fxios\/([\w\.-]+)/i                                                // Firefox for iOS
                ], [VERSION, [NAME, 'Firefox']], [
    
                /version\/([\w\.]+).+?mobile\/\w+\s(safari)/i                       // Mobile Safari
                ], [VERSION, [NAME, 'Mobile Safari']], [
    
                /version\/([\w\.]+).+?(mobile\s?safari|safari)/i                    // Safari & Safari Mobile
                ], [VERSION, NAME], [
    
                /webkit.+?(mobile\s?safari|safari)(\/[\w\.]+)/i                     // Safari < 3.0
                ], [NAME, [VERSION, mapper.str, maps.browser.oldsafari.version]], [
    
                /(konqueror)\/([\w\.]+)/i,                                          // Konqueror
                /(webkit|khtml)\/([\w\.]+)/i
                ], [NAME, VERSION], [
    
                // Gecko based
                /(navigator|netscape)\/([\w\.-]+)/i                                 // Netscape
                ], [[NAME, 'Netscape'], VERSION], [
                /(swiftfox)/i,                                                      // Swiftfox
                /(icedragon|iceweasel|camino|chimera|fennec|maemo\sbrowser|minimo|conkeror)[\/\s]?([\w\.\+]+)/i,
                                                                                    // IceDragon/Iceweasel/Camino/Chimera/Fennec/Maemo/Minimo/Conkeror
                /(firefox|seamonkey|k-meleon|icecat|iceape|firebird|phoenix)\/([\w\.-]+)/i,
                                                                                    // Firefox/SeaMonkey/K-Meleon/IceCat/IceApe/Firebird/Phoenix
                /(mozilla)\/([\w\.]+).+rv\:.+gecko\/\d+/i,                          // Mozilla
    
                // Other
                /(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir)[\/\s]?([\w\.]+)/i,
                                                                                    // Polaris/Lynx/Dillo/iCab/Doris/Amaya/w3m/NetSurf/Sleipnir
                /(links)\s\(([\w\.]+)/i,                                            // Links
                /(gobrowser)\/?([\w\.]+)*/i,                                        // GoBrowser
                /(ice\s?browser)\/v?([\w\._]+)/i,                                   // ICE Browser
                /(mosaic)[\/\s]([\w\.]+)/i                                          // Mosaic
                ], [NAME, VERSION]
    
                /* /////////////////////
                // Media players BEGIN
                ////////////////////////
    
                , [
    
                /(apple(?:coremedia|))\/((\d+)[\w\._]+)/i,                          // Generic Apple CoreMedia
                /(coremedia) v((\d+)[\w\._]+)/i
                ], [NAME, VERSION], [
    
                /(aqualung|lyssna|bsplayer)\/((\d+)?[\w\.-]+)/i                     // Aqualung/Lyssna/BSPlayer
                ], [NAME, VERSION], [
    
                /(ares|ossproxy)\s((\d+)[\w\.-]+)/i                                 // Ares/OSSProxy
                ], [NAME, VERSION], [
    
                /(audacious|audimusicstream|amarok|bass|core|dalvik|gnomemplayer|music on console|nsplayer|psp-internetradioplayer|videos)\/((\d+)[\w\.-]+)/i,
                                                                                    // Audacious/AudiMusicStream/Amarok/BASS/OpenCORE/Dalvik/GnomeMplayer/MoC
                                                                                    // NSPlayer/PSP-InternetRadioPlayer/Videos
                /(clementine|music player daemon)\s((\d+)[\w\.-]+)/i,               // Clementine/MPD
                /(lg player|nexplayer)\s((\d+)[\d\.]+)/i,
                /player\/(nexplayer|lg player)\s((\d+)[\w\.-]+)/i                   // NexPlayer/LG Player
                ], [NAME, VERSION], [
                /(nexplayer)\s((\d+)[\w\.-]+)/i                                     // Nexplayer
                ], [NAME, VERSION], [
    
                /(flrp)\/((\d+)[\w\.-]+)/i                                          // Flip Player
                ], [[NAME, 'Flip Player'], VERSION], [
    
                /(fstream|nativehost|queryseekspider|ia-archiver|facebookexternalhit)/i
                                                                                    // FStream/NativeHost/QuerySeekSpider/IA Archiver/facebookexternalhit
                ], [NAME], [
    
                /(gstreamer) souphttpsrc (?:\([^\)]+\)){0,1} libsoup\/((\d+)[\w\.-]+)/i
                                                                                    // Gstreamer
                ], [NAME, VERSION], [
    
                /(htc streaming player)\s[\w_]+\s\/\s((\d+)[\d\.]+)/i,              // HTC Streaming Player
                /(java|python-urllib|python-requests|wget|libcurl)\/((\d+)[\w\.-_]+)/i,
                                                                                    // Java/urllib/requests/wget/cURL
                /(lavf)((\d+)[\d\.]+)/i                                             // Lavf (FFMPEG)
                ], [NAME, VERSION], [
    
                /(htc_one_s)\/((\d+)[\d\.]+)/i                                      // HTC One S
                ], [[NAME, /_/g, ' '], VERSION], [
    
                /(mplayer)(?:\s|\/)(?:(?:sherpya-){0,1}svn)(?:-|\s)(r\d+(?:-\d+[\w\.-]+){0,1})/i
                                                                                    // MPlayer SVN
                ], [NAME, VERSION], [
    
                /(mplayer)(?:\s|\/|[unkow-]+)((\d+)[\w\.-]+)/i                      // MPlayer
                ], [NAME, VERSION], [
    
                /(mplayer)/i,                                                       // MPlayer (no other info)
                /(yourmuze)/i,                                                      // YourMuze
                /(media player classic|nero showtime)/i                             // Media Player Classic/Nero ShowTime
                ], [NAME], [
    
                /(nero (?:home|scout))\/((\d+)[\w\.-]+)/i                           // Nero Home/Nero Scout
                ], [NAME, VERSION], [
    
                /(nokia\d+)\/((\d+)[\w\.-]+)/i                                      // Nokia
                ], [NAME, VERSION], [
    
                /\s(songbird)\/((\d+)[\w\.-]+)/i                                    // Songbird/Philips-Songbird
                ], [NAME, VERSION], [
    
                /(winamp)3 version ((\d+)[\w\.-]+)/i,                               // Winamp
                /(winamp)\s((\d+)[\w\.-]+)/i,
                /(winamp)mpeg\/((\d+)[\w\.-]+)/i
                ], [NAME, VERSION], [
    
                /(ocms-bot|tapinradio|tunein radio|unknown|winamp|inlight radio)/i  // OCMS-bot/tap in radio/tunein/unknown/winamp (no other info)
                                                                                    // inlight radio
                ], [NAME], [
    
                /(quicktime|rma|radioapp|radioclientapplication|soundtap|totem|stagefright|streamium)\/((\d+)[\w\.-]+)/i
                                                                                    // QuickTime/RealMedia/RadioApp/RadioClientApplication/
                                                                                    // SoundTap/Totem/Stagefright/Streamium
                ], [NAME, VERSION], [
    
                /(smp)((\d+)[\d\.]+)/i                                              // SMP
                ], [NAME, VERSION], [
    
                /(vlc) media player - version ((\d+)[\w\.]+)/i,                     // VLC Videolan
                /(vlc)\/((\d+)[\w\.-]+)/i,
                /(xbmc|gvfs|xine|xmms|irapp)\/((\d+)[\w\.-]+)/i,                    // XBMC/gvfs/Xine/XMMS/irapp
                /(foobar2000)\/((\d+)[\d\.]+)/i,                                    // Foobar2000
                /(itunes)\/((\d+)[\d\.]+)/i                                         // iTunes
                ], [NAME, VERSION], [
    
                /(wmplayer)\/((\d+)[\w\.-]+)/i,                                     // Windows Media Player
                /(windows-media-player)\/((\d+)[\w\.-]+)/i
                ], [[NAME, /-/g, ' '], VERSION], [
    
                /windows\/((\d+)[\w\.-]+) upnp\/[\d\.]+ dlnadoc\/[\d\.]+ (home media server)/i
                                                                                    // Windows Media Server
                ], [VERSION, [NAME, 'Windows']], [
    
                /(com\.riseupradioalarm)\/((\d+)[\d\.]*)/i                          // RiseUP Radio Alarm
                ], [NAME, VERSION], [
    
                /(rad.io)\s((\d+)[\d\.]+)/i,                                        // Rad.io
                /(radio.(?:de|at|fr))\s((\d+)[\d\.]+)/i
                ], [[NAME, 'rad.io'], VERSION]
    
                //////////////////////
                // Media players END
                ////////////////////*/
    
            ],
    
            cpu : [[
    
                /(?:(amd|x(?:(?:86|64)[_-])?|wow|win)64)[;\)]/i                     // AMD64
                ], [[ARCHITECTURE, 'amd64']], [
    
                /(ia32(?=;))/i                                                      // IA32 (quicktime)
                ], [[ARCHITECTURE, util.lowerize]], [
    
                /((?:i[346]|x)86)[;\)]/i                                            // IA32
                ], [[ARCHITECTURE, 'ia32']], [
    
                // PocketPC mistakenly identified as PowerPC
                /windows\s(ce|mobile);\sppc;/i
                ], [[ARCHITECTURE, 'arm']], [
    
                /((?:ppc|powerpc)(?:64)?)(?:\smac|;|\))/i                           // PowerPC
                ], [[ARCHITECTURE, /ower/, '', util.lowerize]], [
    
                /(sun4\w)[;\)]/i                                                    // SPARC
                ], [[ARCHITECTURE, 'sparc']], [
    
                /((?:avr32|ia64(?=;))|68k(?=\))|arm(?:64|(?=v\d+;))|(?=atmel\s)avr|(?:irix|mips|sparc)(?:64)?(?=;)|pa-risc)/i
                                                                                    // IA64, 68K, ARM/64, AVR/32, IRIX/64, MIPS/64, SPARC/64, PA-RISC
                ], [[ARCHITECTURE, util.lowerize]]
            ],
    
            device : [[
    
                /\((ipad|playbook);[\w\s\);-]+(rim|apple)/i                         // iPad/PlayBook
                ], [MODEL, VENDOR, [TYPE, TABLET]], [
    
                /applecoremedia\/[\w\.]+ \((ipad)/                                  // iPad
                ], [MODEL, [VENDOR, 'Apple'], [TYPE, TABLET]], [
    
                /(apple\s{0,1}tv)/i                                                 // Apple TV
                ], [[MODEL, 'Apple TV'], [VENDOR, 'Apple']], [
    
                /(archos)\s(gamepad2?)/i,                                           // Archos
                /(hp).+(touchpad)/i,                                                // HP TouchPad
                /(kindle)\/([\w\.]+)/i,                                             // Kindle
                /\s(nook)[\w\s]+build\/(\w+)/i,                                     // Nook
                /(dell)\s(strea[kpr\s\d]*[\dko])/i                                  // Dell Streak
                ], [VENDOR, MODEL, [TYPE, TABLET]], [
    
                /(kf[A-z]+)\sbuild\/[\w\.]+.*silk\//i                               // Kindle Fire HD
                ], [MODEL, [VENDOR, 'Amazon'], [TYPE, TABLET]], [
                /(sd|kf)[0349hijorstuw]+\sbuild\/[\w\.]+.*silk\//i                  // Fire Phone
                ], [[MODEL, mapper.str, maps.device.amazon.model], [VENDOR, 'Amazon'], [TYPE, MOBILE]], [
    
                /\((ip[honed|\s\w*]+);.+(apple)/i                                   // iPod/iPhone
                ], [MODEL, VENDOR, [TYPE, MOBILE]], [
                /\((ip[honed|\s\w*]+);/i                                            // iPod/iPhone
                ], [MODEL, [VENDOR, 'Apple'], [TYPE, MOBILE]], [
    
                /(blackberry)[\s-]?(\w+)/i,                                         // BlackBerry
                /(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|huawei|meizu|motorola|polytron)[\s_-]?([\w-]+)*/i,
                                                                                    // BenQ/Palm/Sony-Ericsson/Acer/Asus/Dell/Huawei/Meizu/Motorola/Polytron
                /(hp)\s([\w\s]+\w)/i,                                               // HP iPAQ
                /(asus)-?(\w+)/i                                                    // Asus
                ], [VENDOR, MODEL, [TYPE, MOBILE]], [
                /\(bb10;\s(\w+)/i                                                   // BlackBerry 10
                ], [MODEL, [VENDOR, 'BlackBerry'], [TYPE, MOBILE]], [
                                                                                    // Asus Tablets
                /android.+(transfo[prime\s]{4,10}\s\w+|eeepc|slider\s\w+|nexus 7)/i
                ], [MODEL, [VENDOR, 'Asus'], [TYPE, TABLET]], [
    
                /(sony)\s(tablet\s[ps])\sbuild\//i,                                  // Sony
                /(sony)?(?:sgp.+)\sbuild\//i
                ], [[VENDOR, 'Sony'], [MODEL, 'Xperia Tablet'], [TYPE, TABLET]], [
                /(?:sony)?(?:(?:(?:c|d)\d{4})|(?:so[-l].+))\sbuild\//i
                ], [[VENDOR, 'Sony'], [MODEL, 'Xperia Phone'], [TYPE, MOBILE]], [
    
                /\s(ouya)\s/i,                                                      // Ouya
                /(nintendo)\s([wids3u]+)/i                                          // Nintendo
                ], [VENDOR, MODEL, [TYPE, CONSOLE]], [
    
                /android.+;\s(shield)\sbuild/i                                      // Nvidia
                ], [MODEL, [VENDOR, 'Nvidia'], [TYPE, CONSOLE]], [
    
                /(playstation\s[34portablevi]+)/i                                   // Playstation
                ], [MODEL, [VENDOR, 'Sony'], [TYPE, CONSOLE]], [
    
                /(sprint\s(\w+))/i                                                  // Sprint Phones
                ], [[VENDOR, mapper.str, maps.device.sprint.vendor], [MODEL, mapper.str, maps.device.sprint.model], [TYPE, MOBILE]], [
    
                /(lenovo)\s?(S(?:5000|6000)+(?:[-][\w+]))/i                         // Lenovo tablets
                ], [VENDOR, MODEL, [TYPE, TABLET]], [
    
                /(htc)[;_\s-]+([\w\s]+(?=\))|\w+)*/i,                               // HTC
                /(zte)-(\w+)*/i,                                                    // ZTE
                /(alcatel|geeksphone|huawei|lenovo|nexian|panasonic|(?=;\s)sony)[_\s-]?([\w-]+)*/i
                                                                                    // Alcatel/GeeksPhone/Huawei/Lenovo/Nexian/Panasonic/Sony
                ], [VENDOR, [MODEL, /_/g, ' '], [TYPE, MOBILE]], [
                    
                /(nexus\s9)/i                                                       // HTC Nexus 9
                ], [MODEL, [VENDOR, 'HTC'], [TYPE, TABLET]], [
    
                /[\s\(;](xbox(?:\sone)?)[\s\);]/i                                   // Microsoft Xbox
                ], [MODEL, [VENDOR, 'Microsoft'], [TYPE, CONSOLE]], [
                /(kin\.[onetw]{3})/i                                                // Microsoft Kin
                ], [[MODEL, /\./g, ' '], [VENDOR, 'Microsoft'], [TYPE, MOBILE]], [
    
                                                                                    // Motorola
                /\s(milestone|droid(?:[2-4x]|\s(?:bionic|x2|pro|razr))?(:?\s4g)?)[\w\s]+build\//i,
                /mot[\s-]?(\w+)*/i,
                /(XT\d{3,4}) build\//i,
                /(nexus\s[6])/i
                ], [MODEL, [VENDOR, 'Motorola'], [TYPE, MOBILE]], [
                /android.+\s(mz60\d|xoom[\s2]{0,2})\sbuild\//i
                ], [MODEL, [VENDOR, 'Motorola'], [TYPE, TABLET]], [
    
                /android.+((sch-i[89]0\d|shw-m380s|gt-p\d{4}|gt-n8000|sgh-t8[56]9|nexus 10))/i,
                /((SM-T\w+))/i
                ], [[VENDOR, 'Samsung'], MODEL, [TYPE, TABLET]], [                  // Samsung
                /((s[cgp]h-\w+|gt-\w+|galaxy\snexus|sm-n900))/i,
                /(sam[sung]*)[\s-]*(\w+-?[\w-]*)*/i,
                /sec-((sgh\w+))/i
                ], [[VENDOR, 'Samsung'], MODEL, [TYPE, MOBILE]], [
                /(samsung);smarttv/i
                ], [VENDOR, MODEL, [TYPE, SMARTTV]], [
    
                /\(dtv[\);].+(aquos)/i                                              // Sharp
                ], [MODEL, [VENDOR, 'Sharp'], [TYPE, SMARTTV]], [
                /sie-(\w+)*/i                                                       // Siemens
                ], [MODEL, [VENDOR, 'Siemens'], [TYPE, MOBILE]], [
    
                /(maemo|nokia).*(n900|lumia\s\d+)/i,                                // Nokia
                /(nokia)[\s_-]?([\w-]+)*/i
                ], [[VENDOR, 'Nokia'], MODEL, [TYPE, MOBILE]], [
    
                /android\s3\.[\s\w;-]{10}(a\d{3})/i                                 // Acer
                ], [MODEL, [VENDOR, 'Acer'], [TYPE, TABLET]], [
    
                /android\s3\.[\s\w;-]{10}(lg?)-([06cv9]{3,4})/i                     // LG Tablet
                ], [[VENDOR, 'LG'], MODEL, [TYPE, TABLET]], [
                /(lg) netcast\.tv/i                                                 // LG SmartTV
                ], [VENDOR, MODEL, [TYPE, SMARTTV]], [
                /(nexus\s[45])/i,                                                   // LG
                /lg[e;\s\/-]+(\w+)*/i
                ], [MODEL, [VENDOR, 'LG'], [TYPE, MOBILE]], [
    
                /android.+(ideatab[a-z0-9\-\s]+)/i                                  // Lenovo
                ], [MODEL, [VENDOR, 'Lenovo'], [TYPE, TABLET]], [
    
                /linux;.+((jolla));/i                                               // Jolla
                ], [VENDOR, MODEL, [TYPE, MOBILE]], [
    
                /((pebble))app\/[\d\.]+\s/i                                         // Pebble
                ], [VENDOR, MODEL, [TYPE, WEARABLE]], [
    
                /android.+;\s(glass)\s\d/i                                          // Google Glass
                ], [MODEL, [VENDOR, 'Google'], [TYPE, WEARABLE]], [
    
                /android.+(\w+)\s+build\/hm\1/i,                                        // Xiaomi Hongmi 'numeric' models
                /android.+(hm[\s\-_]*note?[\s_]*(?:\d\w)?)\s+build/i,                   // Xiaomi Hongmi
                /android.+(mi[\s\-_]*(?:one|one[\s_]plus)?[\s_]*(?:\d\w)?)\s+build/i    // Xiaomi Mi
                ], [[MODEL, /_/g, ' '], [VENDOR, 'Xiaomi'], [TYPE, MOBILE]], [
    
                /\s(tablet)[;\/\s]/i,                                               // Unidentifiable Tablet
                /\s(mobile)[;\/\s]/i                                                // Unidentifiable Mobile
                ], [[TYPE, util.lowerize], VENDOR, MODEL]
    
                /*//////////////////////////
                // TODO: move to string map
                ////////////////////////////
    
                /(C6603)/i                                                          // Sony Xperia Z C6603
                ], [[MODEL, 'Xperia Z C6603'], [VENDOR, 'Sony'], [TYPE, MOBILE]], [
                /(C6903)/i                                                          // Sony Xperia Z 1
                ], [[MODEL, 'Xperia Z 1'], [VENDOR, 'Sony'], [TYPE, MOBILE]], [
    
                /(SM-G900[F|H])/i                                                   // Samsung Galaxy S5
                ], [[MODEL, 'Galaxy S5'], [VENDOR, 'Samsung'], [TYPE, MOBILE]], [
                /(SM-G7102)/i                                                       // Samsung Galaxy Grand 2
                ], [[MODEL, 'Galaxy Grand 2'], [VENDOR, 'Samsung'], [TYPE, MOBILE]], [
                /(SM-G530H)/i                                                       // Samsung Galaxy Grand Prime
                ], [[MODEL, 'Galaxy Grand Prime'], [VENDOR, 'Samsung'], [TYPE, MOBILE]], [
                /(SM-G313HZ)/i                                                      // Samsung Galaxy V
                ], [[MODEL, 'Galaxy V'], [VENDOR, 'Samsung'], [TYPE, MOBILE]], [
                /(SM-T805)/i                                                        // Samsung Galaxy Tab S 10.5
                ], [[MODEL, 'Galaxy Tab S 10.5'], [VENDOR, 'Samsung'], [TYPE, TABLET]], [
                /(SM-G800F)/i                                                       // Samsung Galaxy S5 Mini
                ], [[MODEL, 'Galaxy S5 Mini'], [VENDOR, 'Samsung'], [TYPE, MOBILE]], [
                /(SM-T311)/i                                                        // Samsung Galaxy Tab 3 8.0
                ], [[MODEL, 'Galaxy Tab 3 8.0'], [VENDOR, 'Samsung'], [TYPE, TABLET]], [
    
                /(R1001)/i                                                          // Oppo R1001
                ], [MODEL, [VENDOR, 'OPPO'], [TYPE, MOBILE]], [
                /(X9006)/i                                                          // Oppo Find 7a
                ], [[MODEL, 'Find 7a'], [VENDOR, 'Oppo'], [TYPE, MOBILE]], [
                /(R2001)/i                                                          // Oppo YOYO R2001
                ], [[MODEL, 'Yoyo R2001'], [VENDOR, 'Oppo'], [TYPE, MOBILE]], [
                /(R815)/i                                                           // Oppo Clover R815
                ], [[MODEL, 'Clover R815'], [VENDOR, 'Oppo'], [TYPE, MOBILE]], [
                 /(U707)/i                                                          // Oppo Find Way S
                ], [[MODEL, 'Find Way S'], [VENDOR, 'Oppo'], [TYPE, MOBILE]], [
    
                /(T3C)/i                                                            // Advan Vandroid T3C
                ], [MODEL, [VENDOR, 'Advan'], [TYPE, TABLET]], [
                /(ADVAN T1J\+)/i                                                    // Advan Vandroid T1J+
                ], [[MODEL, 'Vandroid T1J+'], [VENDOR, 'Advan'], [TYPE, TABLET]], [
                /(ADVAN S4A)/i                                                      // Advan Vandroid S4A
                ], [[MODEL, 'Vandroid S4A'], [VENDOR, 'Advan'], [TYPE, MOBILE]], [
    
                /(V972M)/i                                                          // ZTE V972M
                ], [MODEL, [VENDOR, 'ZTE'], [TYPE, MOBILE]], [
    
                /(i-mobile)\s(IQ\s[\d\.]+)/i                                        // i-mobile IQ
                ], [VENDOR, MODEL, [TYPE, MOBILE]], [
                /(IQ6.3)/i                                                          // i-mobile IQ IQ 6.3
                ], [[MODEL, 'IQ 6.3'], [VENDOR, 'i-mobile'], [TYPE, MOBILE]], [
                /(i-mobile)\s(i-style\s[\d\.]+)/i                                   // i-mobile i-STYLE
                ], [VENDOR, MODEL, [TYPE, MOBILE]], [
                /(i-STYLE2.1)/i                                                     // i-mobile i-STYLE 2.1
                ], [[MODEL, 'i-STYLE 2.1'], [VENDOR, 'i-mobile'], [TYPE, MOBILE]], [
                
                /(mobiistar touch LAI 512)/i                                        // mobiistar touch LAI 512
                ], [[MODEL, 'Touch LAI 512'], [VENDOR, 'mobiistar'], [TYPE, MOBILE]], [
    
                /////////////
                // END TODO
                ///////////*/
    
            ],
    
            engine : [[
    
                /windows.+\sedge\/([\w\.]+)/i                                       // EdgeHTML
                ], [VERSION, [NAME, 'EdgeHTML']], [
    
                /(presto)\/([\w\.]+)/i,                                             // Presto
                /(webkit|trident|netfront|netsurf|amaya|lynx|w3m)\/([\w\.]+)/i,     // WebKit/Trident/NetFront/NetSurf/Amaya/Lynx/w3m
                /(khtml|tasman|links)[\/\s]\(?([\w\.]+)/i,                          // KHTML/Tasman/Links
                /(icab)[\/\s]([23]\.[\d\.]+)/i                                      // iCab
                ], [NAME, VERSION], [
    
                /rv\:([\w\.]+).*(gecko)/i                                           // Gecko
                ], [VERSION, NAME]
            ],
    
            os : [[
    
                // Windows based
                /microsoft\s(windows)\s(vista|xp)/i                                 // Windows (iTunes)
                ], [NAME, VERSION], [
                /(windows)\snt\s6\.2;\s(arm)/i,                                     // Windows RT
                /(windows\sphone(?:\sos)*|windows\smobile|windows)[\s\/]?([ntce\d\.\s]+\w)/i
                ], [NAME, [VERSION, mapper.str, maps.os.windows.version]], [
                /(win(?=3|9|n)|win\s9x\s)([nt\d\.]+)/i
                ], [[NAME, 'Windows'], [VERSION, mapper.str, maps.os.windows.version]], [
    
                // Mobile/Embedded OS
                /\((bb)(10);/i                                                      // BlackBerry 10
                ], [[NAME, 'BlackBerry'], VERSION], [
                /(blackberry)\w*\/?([\w\.]+)*/i,                                    // Blackberry
                /(tizen)[\/\s]([\w\.]+)/i,                                          // Tizen
                /(android|webos|palm\sos|qnx|bada|rim\stablet\sos|meego|contiki)[\/\s-]?([\w\.]+)*/i,
                                                                                    // Android/WebOS/Palm/QNX/Bada/RIM/MeeGo/Contiki
                /linux;.+(sailfish);/i                                              // Sailfish OS
                ], [NAME, VERSION], [
                /(symbian\s?os|symbos|s60(?=;))[\/\s-]?([\w\.]+)*/i                 // Symbian
                ], [[NAME, 'Symbian'], VERSION], [
                /\((series40);/i                                                    // Series 40
                ], [NAME], [
                /mozilla.+\(mobile;.+gecko.+firefox/i                               // Firefox OS
                ], [[NAME, 'Firefox OS'], VERSION], [
    
                // Console
                /(nintendo|playstation)\s([wids34portablevu]+)/i,                   // Nintendo/Playstation
    
                // GNU/Linux based
                /(mint)[\/\s\(]?(\w+)*/i,                                           // Mint
                /(mageia|vectorlinux)[;\s]/i,                                       // Mageia/VectorLinux
                /(joli|[kxln]?ubuntu|debian|[open]*suse|gentoo|(?=\s)arch|slackware|fedora|mandriva|centos|pclinuxos|redhat|zenwalk|linpus)[\/\s-]?([\w\.-]+)*/i,
                                                                                    // Joli/Ubuntu/Debian/SUSE/Gentoo/Arch/Slackware
                                                                                    // Fedora/Mandriva/CentOS/PCLinuxOS/RedHat/Zenwalk/Linpus
                /(hurd|linux)\s?([\w\.]+)*/i,                                       // Hurd/Linux
                /(gnu)\s?([\w\.]+)*/i                                               // GNU
                ], [NAME, VERSION], [
    
                /(cros)\s[\w]+\s([\w\.]+\w)/i                                       // Chromium OS
                ], [[NAME, 'Chromium OS'], VERSION],[
    
                // Solaris
                /(sunos)\s?([\w\.]+\d)*/i                                           // Solaris
                ], [[NAME, 'Solaris'], VERSION], [
    
                // BSD based
                /\s([frentopc-]{0,4}bsd|dragonfly)\s?([\w\.]+)*/i                   // FreeBSD/NetBSD/OpenBSD/PC-BSD/DragonFly
                ], [NAME, VERSION],[
    
                /(ip[honead]+)(?:.*os\s([\w]+)*\slike\smac|;\sopera)/i              // iOS
                ], [[NAME, 'iOS'], [VERSION, /_/g, '.']], [
    
                /(mac\sos\sx)\s?([\w\s\.]+\w)*/i,
                /(macintosh|mac(?=_powerpc)\s)/i                                    // Mac OS
                ], [[NAME, 'Mac OS'], [VERSION, /_/g, '.']], [
    
                // Other
                /((?:open)?solaris)[\/\s-]?([\w\.]+)*/i,                            // Solaris
                /(haiku)\s(\w+)/i,                                                  // Haiku
                /(aix)\s((\d)(?=\.|\)|\s)[\w\.]*)*/i,                               // AIX
                /(plan\s9|minix|beos|os\/2|amigaos|morphos|risc\sos|openvms)/i,
                                                                                    // Plan9/Minix/BeOS/OS2/AmigaOS/MorphOS/RISCOS/OpenVMS
                /(unix)\s?([\w\.]+)*/i                                              // UNIX
                ], [NAME, VERSION]
            ]
        };
    
    
        /////////////////
        // Constructor
        ////////////////
    
    
        var UAParser = function (uastring, extensions) {
    
            if (!(this instanceof UAParser)) {
                return new UAParser(uastring, extensions).getResult();
            }
    
            var ua = uastring || ((window && window.navigator && window.navigator.userAgent) ? window.navigator.userAgent : EMPTY);
            var rgxmap = extensions ? util.extend(regexes, extensions) : regexes;
    
            this.getBrowser = function () {
                var browser = mapper.rgx.apply(this, rgxmap.browser);
                browser.major = util.major(browser.version);
                return browser;
            };
            this.getCPU = function () {
                return mapper.rgx.apply(this, rgxmap.cpu);
            };
            this.getDevice = function () {
                return mapper.rgx.apply(this, rgxmap.device);
            };
            this.getEngine = function () {
                return mapper.rgx.apply(this, rgxmap.engine);
            };
            this.getOS = function () {
                return mapper.rgx.apply(this, rgxmap.os);
            };
            this.getResult = function() {
                return {
                    ua      : this.getUA(),
                    browser : this.getBrowser(),
                    engine  : this.getEngine(),
                    os      : this.getOS(),
                    device  : this.getDevice(),
                    cpu     : this.getCPU()
                };
            };
            this.getUA = function () {
                return ua;
            };
            this.setUA = function (uastring) {
                ua = uastring;
                return this;
            };
            this.setUA(ua);
            return this;
        };
    
        UAParser.VERSION = LIBVERSION;
        UAParser.BROWSER = {
            NAME    : NAME,
            MAJOR   : MAJOR, // deprecated
            VERSION : VERSION
        };
        UAParser.CPU = {
            ARCHITECTURE : ARCHITECTURE
        };
        UAParser.DEVICE = {
            MODEL   : MODEL,
            VENDOR  : VENDOR,
            TYPE    : TYPE,
            CONSOLE : CONSOLE,
            MOBILE  : MOBILE,
            SMARTTV : SMARTTV,
            TABLET  : TABLET,
            WEARABLE: WEARABLE,
            EMBEDDED: EMBEDDED
        };
        UAParser.ENGINE = {
            NAME    : NAME,
            VERSION : VERSION
        };
        UAParser.OS = {
            NAME    : NAME,
            VERSION : VERSION
        };
    
    
        ///////////
        // Export
        //////////
    
    
        // check js environment
        if (typeof(exports) !== UNDEF_TYPE) {
            // nodejs env
            if (typeof module !== UNDEF_TYPE && module.exports) {
                exports = module.exports = UAParser;
            }
            exports.UAParser = UAParser;
        } else {
            // requirejs env (optional)
            if (typeof(define) === FUNC_TYPE && define.amd) {
                define(function () {
                    return UAParser;
                });
            } else {
                // browser env
                window.UAParser = UAParser;
            }
        }
    
        // jQuery/Zepto specific (optional)
        // Note: 
        //   In AMD env the global scope should be kept clean, but jQuery is an exception.
        //   jQuery always exports to global scope, unless jQuery.noConflict(true) is used,
        //   and we should catch that.
        var $ = window.jQuery || window.Zepto;
        if (typeof $ !== UNDEF_TYPE) {
            var parser = new UAParser();
            $.ua = parser.getResult();
            $.ua.get = function() {
                return parser.getUA();
            };
            $.ua.set = function (uastring) {
                parser.setUA(uastring);
                var result = parser.getResult();
                for (var prop in result) {
                    $.ua[prop] = result[prop];
                }
            };
        }
    
    })(typeof window === 'object' ? window : this);
    
  provide("ua-parser-js", module.exports);
}(global));

// pakmanager:deep-equal/lib/keys.js
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  exports = module.exports = typeof Object.keys === 'function'
      ? Object.keys : shim;
    
    exports.shim = shim;
    function shim (obj) {
      var keys = [];
      for (var key in obj) keys.push(key);
      return keys;
    }
    
  provide("deep-equal/lib/keys.js", module.exports);
}(global));

// pakmanager:deep-equal/lib/is_arguments.js
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var supportsArgumentsClass = (function(){
      return Object.prototype.toString.call(arguments)
    })() == '[object Arguments]';
    
    exports = module.exports = supportsArgumentsClass ? supported : unsupported;
    
    exports.supported = supported;
    function supported(object) {
      return Object.prototype.toString.call(object) == '[object Arguments]';
    };
    
    exports.unsupported = unsupported;
    function unsupported(object){
      return object &&
        typeof object == 'object' &&
        typeof object.length == 'number' &&
        Object.prototype.hasOwnProperty.call(object, 'callee') &&
        !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||
        false;
    };
    
  provide("deep-equal/lib/is_arguments.js", module.exports);
}(global));

// pakmanager:deep-equal
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  var pSlice = Array.prototype.slice;
    var objectKeys =  require('deep-equal/lib/keys.js');
    var isArguments =  require('deep-equal/lib/is_arguments.js');
    
    var deepEqual = module.exports = function (actual, expected, opts) {
      if (!opts) opts = {};
      // 7.1. All identical values are equivalent, as determined by ===.
      if (actual === expected) {
        return true;
    
      } else if (actual instanceof Date && expected instanceof Date) {
        return actual.getTime() === expected.getTime();
    
      // 7.3. Other pairs that do not both pass typeof value == 'object',
      // equivalence is determined by ==.
      } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {
        return opts.strict ? actual === expected : actual == expected;
    
      // 7.4. For all other Object pairs, including Array objects, equivalence is
      // determined by having the same number of owned properties (as verified
      // with Object.prototype.hasOwnProperty.call), the same set of keys
      // (although not necessarily the same order), equivalent values for every
      // corresponding key, and an identical 'prototype' property. Note: this
      // accounts for both named and indexed properties on Arrays.
      } else {
        return objEquiv(actual, expected, opts);
      }
    }
    
    function isUndefinedOrNull(value) {
      return value === null || value === undefined;
    }
    
    function isBuffer (x) {
      if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;
      if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
        return false;
      }
      if (x.length > 0 && typeof x[0] !== 'number') return false;
      return true;
    }
    
    function objEquiv(a, b, opts) {
      var i, key;
      if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
        return false;
      // an identical 'prototype' property.
      if (a.prototype !== b.prototype) return false;
      //~~~I've managed to break Object.keys through screwy arguments passing.
      //   Converting to array solves the problem.
      if (isArguments(a)) {
        if (!isArguments(b)) {
          return false;
        }
        a = pSlice.call(a);
        b = pSlice.call(b);
        return deepEqual(a, b, opts);
      }
      if (isBuffer(a)) {
        if (!isBuffer(b)) {
          return false;
        }
        if (a.length !== b.length) return false;
        for (i = 0; i < a.length; i++) {
          if (a[i] !== b[i]) return false;
        }
        return true;
      }
      try {
        var ka = objectKeys(a),
            kb = objectKeys(b);
      } catch (e) {//happens when one is a string literal and the other isn't
        return false;
      }
      // having the same number of owned properties (keys incorporates
      // hasOwnProperty)
      if (ka.length != kb.length)
        return false;
      //the same set of keys (although not necessarily the same order),
      ka.sort();
      kb.sort();
      //~~~cheap key test
      for (i = ka.length - 1; i >= 0; i--) {
        if (ka[i] != kb[i])
          return false;
      }
      //equivalent values for every corresponding key, and
      //~~~possibly expensive deep test
      for (i = ka.length - 1; i >= 0; i--) {
        key = ka[i];
        if (!deepEqual(a[key], b[key], opts)) return false;
      }
      return typeof a === typeof b;
    }
    
  provide("deep-equal", module.exports);
}(global));

// pakmanager:invariant
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     */
    
    'use strict';
    
    /**
     * Use invariant() to assert state which your program assumes to be true.
     *
     * Provide sprintf-style format (only %s is supported) and arguments
     * to provide information about what broke and what you were
     * expecting.
     *
     * The invariant message will be stripped in production, but the invariant
     * will remain to ensure logic does not differ in production.
     */
    
    var NODE_ENV = process.env.NODE_ENV;
    
    var invariant = function(condition, format, a, b, c, d, e, f) {
      if (NODE_ENV !== 'production') {
        if (format === undefined) {
          throw new Error('invariant requires an error message argument');
        }
      }
    
      if (!condition) {
        var error;
        if (format === undefined) {
          error = new Error(
            'Minified exception occurred; use the non-minified dev environment ' +
            'for the full error message and additional helpful warnings.'
          );
        } else {
          var args = [a, b, c, d, e, f];
          var argIndex = 0;
          error = new Error(
            format.replace(/%s/g, function() { return args[argIndex++]; })
          );
          error.name = 'Invariant Violation';
        }
    
        error.framesToPop = 1; // we don't care about invariant's own frame
        throw error;
      }
    };
    
    module.exports = invariant;
    
  provide("invariant", module.exports);
}(global));

// pakmanager:query-string
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    var strictUriEncode = require('strict-uri-encode');
    var objectAssign = require('object-assign');
    
    function encode(value, opts) {
    	if (opts.encode) {
    		return opts.strict ? strictUriEncode(value) : encodeURIComponent(value);
    	}
    
    	return value;
    }
    
    exports.extract = function (str) {
    	return str.split('?')[1] || '';
    };
    
    exports.parse = function (str) {
    	// Create an object with no prototype
    	// https://github.com/sindresorhus/query-string/issues/47
    	var ret = Object.create(null);
    
    	if (typeof str !== 'string') {
    		return ret;
    	}
    
    	str = str.trim().replace(/^(\?|#|&)/, '');
    
    	if (!str) {
    		return ret;
    	}
    
    	str.split('&').forEach(function (param) {
    		var parts = param.replace(/\+/g, ' ').split('=');
    		// Firefox (pre 40) decodes `%3D` to `=`
    		// https://github.com/sindresorhus/query-string/pull/37
    		var key = parts.shift();
    		var val = parts.length > 0 ? parts.join('=') : undefined;
    
    		key = decodeURIComponent(key);
    
    		// missing `=` should be `null`:
    		// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
    		val = val === undefined ? null : decodeURIComponent(val);
    
    		if (ret[key] === undefined) {
    			ret[key] = val;
    		} else if (Array.isArray(ret[key])) {
    			ret[key].push(val);
    		} else {
    			ret[key] = [ret[key], val];
    		}
    	});
    
    	return ret;
    };
    
    exports.stringify = function (obj, opts) {
    	var defaults = {
    		encode: true,
    		strict: true
    	};
    
    	opts = objectAssign(defaults, opts);
    
    	return obj ? Object.keys(obj).sort().map(function (key) {
    		var val = obj[key];
    
    		if (val === undefined) {
    			return '';
    		}
    
    		if (val === null) {
    			return encode(key, opts);
    		}
    
    		if (Array.isArray(val)) {
    			var result = [];
    
    			val.slice().forEach(function (val2) {
    				if (val2 === undefined) {
    					return;
    				}
    
    				if (val2 === null) {
    					result.push(encode(key, opts));
    				} else {
    					result.push(encode(key, opts) + '=' + encode(val2, opts));
    				}
    			});
    
    			return result.join('&');
    		}
    
    		return encode(key, opts) + '=' + encode(val, opts);
    	}).filter(function (x) {
    		return x.length > 0;
    	}).join('&') : '';
    };
    
  provide("query-string", module.exports);
}(global));

// pakmanager:warning
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  /**
     * Copyright 2014-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     */
    
    'use strict';
    
    /**
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */
    
    var __DEV__ = process.env.NODE_ENV !== 'production';
    
    var warning = function() {};
    
    if (__DEV__) {
      warning = function(condition, format, args) {
        var len = arguments.length;
        args = new Array(len > 2 ? len - 2 : 0);
        for (var key = 2; key < len; key++) {
          args[key - 2] = arguments[key];
        }
        if (format === undefined) {
          throw new Error(
            '`warning(condition, format, ...args)` requires a warning ' +
            'message argument'
          );
        }
    
        if (format.length < 10 || (/^[s\W]*$/).test(format)) {
          throw new Error(
            'The warning format should be able to uniquely identify this ' +
            'warning. Please, use a more descriptive format than: ' + format
          );
        }
    
        if (!condition) {
          var argIndex = 0;
          var message = 'Warning: ' +
            format.replace(/%s/g, function() {
              return args[argIndex++];
            });
          if (typeof console !== 'undefined') {
            console.error(message);
          }
          try {
            // This error was thrown as a convenience so that you can use this stack
            // to find the callsite that caused this warning to fire.
            throw new Error(message);
          } catch(x) {}
        }
      };
    }
    
    module.exports = warning;
    
  provide("warning", module.exports);
}(global));

// pakmanager:regenerator-runtime/runtime
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  /**
     * Copyright (c) 2014, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
     * additional grant of patent rights can be found in the PATENTS file in
     * the same directory.
     */
    
    !(function(global) {
      "use strict";
    
      var hasOwn = Object.prototype.hasOwnProperty;
      var undefined; // More compressible than void 0.
      var $Symbol = typeof Symbol === "function" ? Symbol : {};
      var iteratorSymbol = $Symbol.iterator || "@@iterator";
      var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
    
      var inModule = typeof module === "object";
      var runtime = global.regeneratorRuntime;
      if (runtime) {
        if (inModule) {
          // If regeneratorRuntime is defined globally and we're in a module,
          // make the exports object identical to regeneratorRuntime.
          module.exports = runtime;
        }
        // Don't bother evaluating the rest of this file if the runtime was
        // already defined globally.
        return;
      }
    
      // Define the runtime globally (as expected by generated code) as either
      // module.exports (if we're in a module) or a new, empty object.
      runtime = global.regeneratorRuntime = inModule ? module.exports : {};
    
      function wrap(innerFn, outerFn, self, tryLocsList) {
        // If outerFn provided, then outerFn.prototype instanceof Generator.
        var generator = Object.create((outerFn || Generator).prototype);
        var context = new Context(tryLocsList || []);
    
        // The ._invoke method unifies the implementations of the .next,
        // .throw, and .return methods.
        generator._invoke = makeInvokeMethod(innerFn, self, context);
    
        return generator;
      }
      runtime.wrap = wrap;
    
      // Try/catch helper to minimize deoptimizations. Returns a completion
      // record like context.tryEntries[i].completion. This interface could
      // have been (and was previously) designed to take a closure to be
      // invoked without arguments, but in all the cases we care about we
      // already have an existing method we want to call, so there's no need
      // to create a new function object. We can even get away with assuming
      // the method takes exactly one argument, since that happens to be true
      // in every case, so we don't have to touch the arguments object. The
      // only additional allocation required is the completion record, which
      // has a stable shape and so hopefully should be cheap to allocate.
      function tryCatch(fn, obj, arg) {
        try {
          return { type: "normal", arg: fn.call(obj, arg) };
        } catch (err) {
          return { type: "throw", arg: err };
        }
      }
    
      var GenStateSuspendedStart = "suspendedStart";
      var GenStateSuspendedYield = "suspendedYield";
      var GenStateExecuting = "executing";
      var GenStateCompleted = "completed";
    
      // Returning this object from the innerFn has the same effect as
      // breaking out of the dispatch switch statement.
      var ContinueSentinel = {};
    
      // Dummy constructor functions that we use as the .constructor and
      // .constructor.prototype properties for functions that return Generator
      // objects. For full spec compliance, you may wish to configure your
      // minifier not to mangle the names of these two functions.
      function Generator() {}
      function GeneratorFunction() {}
      function GeneratorFunctionPrototype() {}
    
      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;
      GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
      GeneratorFunctionPrototype.constructor = GeneratorFunction;
      GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";
    
      // Helper for defining the .next, .throw, and .return methods of the
      // Iterator interface in terms of a single ._invoke method.
      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function(method) {
          prototype[method] = function(arg) {
            return this._invoke(method, arg);
          };
        });
      }
    
      runtime.isGeneratorFunction = function(genFun) {
        var ctor = typeof genFun === "function" && genFun.constructor;
        return ctor
          ? ctor === GeneratorFunction ||
            // For the native GeneratorFunction constructor, the best we can
            // do is to check its .name property.
            (ctor.displayName || ctor.name) === "GeneratorFunction"
          : false;
      };
    
      runtime.mark = function(genFun) {
        if (Object.setPrototypeOf) {
          Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
        } else {
          genFun.__proto__ = GeneratorFunctionPrototype;
          if (!(toStringTagSymbol in genFun)) {
            genFun[toStringTagSymbol] = "GeneratorFunction";
          }
        }
        genFun.prototype = Object.create(Gp);
        return genFun;
      };
    
      // Within the body of any async function, `await x` is transformed to
      // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
      // `value instanceof AwaitArgument` to determine if the yielded value is
      // meant to be awaited. Some may consider the name of this method too
      // cutesy, but they are curmudgeons.
      runtime.awrap = function(arg) {
        return new AwaitArgument(arg);
      };
    
      function AwaitArgument(arg) {
        this.arg = arg;
      }
    
      function AsyncIterator(generator) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);
          if (record.type === "throw") {
            reject(record.arg);
          } else {
            var result = record.arg;
            var value = result.value;
            if (value instanceof AwaitArgument) {
              return Promise.resolve(value.arg).then(function(value) {
                invoke("next", value, resolve, reject);
              }, function(err) {
                invoke("throw", err, resolve, reject);
              });
            }
    
            return Promise.resolve(value).then(function(unwrapped) {
              // When a yielded Promise is resolved, its final value becomes
              // the .value of the Promise<{value,done}> result for the
              // current iteration. If the Promise is rejected, however, the
              // result for this iteration will be rejected with the same
              // reason. Note that rejections of yielded Promises are not
              // thrown back into the generator function, as is the case
              // when an awaited Promise is rejected. This difference in
              // behavior between yield and await is important, because it
              // allows the consumer to decide what to do with the yielded
              // rejection (swallow it and continue, manually .throw it back
              // into the generator, abandon iteration, whatever). With
              // await, by contrast, there is no opportunity to examine the
              // rejection reason outside the generator function, so the
              // only option is to throw it from the await expression, and
              // let the generator function handle the exception.
              result.value = unwrapped;
              resolve(result);
            }, reject);
          }
        }
    
        if (typeof process === "object" && process.domain) {
          invoke = process.domain.bind(invoke);
        }
    
        var previousPromise;
    
        function enqueue(method, arg) {
          function callInvokeWithMethodAndArg() {
            return new Promise(function(resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }
    
          return previousPromise =
            // If enqueue has been called before, then we want to wait until
            // all previous Promises have been resolved before calling invoke,
            // so that results are always delivered in the correct order. If
            // enqueue has not been called before, then it is important to
            // call invoke immediately, without waiting on a callback to fire,
            // so that the async generator function has the opportunity to do
            // any necessary setup in a predictable way. This predictability
            // is why the Promise constructor synchronously invokes its
            // executor callback, and why async functions synchronously
            // execute code before the first await. Since we implement simple
            // async functions in terms of async generators, it is especially
            // important to get this right, even though it requires care.
            previousPromise ? previousPromise.then(
              callInvokeWithMethodAndArg,
              // Avoid propagating failures to Promises returned by later
              // invocations of the iterator.
              callInvokeWithMethodAndArg
            ) : callInvokeWithMethodAndArg();
        }
    
        // Define the unified helper method that is used to implement .next,
        // .throw, and .return (see defineIteratorMethods).
        this._invoke = enqueue;
      }
    
      defineIteratorMethods(AsyncIterator.prototype);
    
      // Note that simple async functions are implemented on top of
      // AsyncIterator objects; they just return a Promise for the value of
      // the final result produced by the iterator.
      runtime.async = function(innerFn, outerFn, self, tryLocsList) {
        var iter = new AsyncIterator(
          wrap(innerFn, outerFn, self, tryLocsList)
        );
    
        return runtime.isGeneratorFunction(outerFn)
          ? iter // If outerFn is a generator, return the full iterator.
          : iter.next().then(function(result) {
              return result.done ? result.value : iter.next();
            });
      };
    
      function makeInvokeMethod(innerFn, self, context) {
        var state = GenStateSuspendedStart;
    
        return function invoke(method, arg) {
          if (state === GenStateExecuting) {
            throw new Error("Generator is already running");
          }
    
          if (state === GenStateCompleted) {
            if (method === "throw") {
              throw arg;
            }
    
            // Be forgiving, per 25.3.3.3.3 of the spec:
            // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
            return doneResult();
          }
    
          while (true) {
            var delegate = context.delegate;
            if (delegate) {
              if (method === "return" ||
                  (method === "throw" && delegate.iterator[method] === undefined)) {
                // A return or throw (when the delegate iterator has no throw
                // method) always terminates the yield* loop.
                context.delegate = null;
    
                // If the delegate iterator has a return method, give it a
                // chance to clean up.
                var returnMethod = delegate.iterator["return"];
                if (returnMethod) {
                  var record = tryCatch(returnMethod, delegate.iterator, arg);
                  if (record.type === "throw") {
                    // If the return method threw an exception, let that
                    // exception prevail over the original return or throw.
                    method = "throw";
                    arg = record.arg;
                    continue;
                  }
                }
    
                if (method === "return") {
                  // Continue with the outer return, now that the delegate
                  // iterator has been terminated.
                  continue;
                }
              }
    
              var record = tryCatch(
                delegate.iterator[method],
                delegate.iterator,
                arg
              );
    
              if (record.type === "throw") {
                context.delegate = null;
    
                // Like returning generator.throw(uncaught), but without the
                // overhead of an extra function call.
                method = "throw";
                arg = record.arg;
                continue;
              }
    
              // Delegate generator ran and handled its own exceptions so
              // regardless of what the method was, we continue as if it is
              // "next" with an undefined arg.
              method = "next";
              arg = undefined;
    
              var info = record.arg;
              if (info.done) {
                context[delegate.resultName] = info.value;
                context.next = delegate.nextLoc;
              } else {
                state = GenStateSuspendedYield;
                return info;
              }
    
              context.delegate = null;
            }
    
            if (method === "next") {
              // Setting context._sent for legacy support of Babel's
              // function.sent implementation.
              context.sent = context._sent = arg;
    
            } else if (method === "throw") {
              if (state === GenStateSuspendedStart) {
                state = GenStateCompleted;
                throw arg;
              }
    
              if (context.dispatchException(arg)) {
                // If the dispatched exception was caught by a catch block,
                // then let that catch block handle the exception normally.
                method = "next";
                arg = undefined;
              }
    
            } else if (method === "return") {
              context.abrupt("return", arg);
            }
    
            state = GenStateExecuting;
    
            var record = tryCatch(innerFn, self, context);
            if (record.type === "normal") {
              // If an exception is thrown from innerFn, we leave state ===
              // GenStateExecuting and loop back for another invocation.
              state = context.done
                ? GenStateCompleted
                : GenStateSuspendedYield;
    
              var info = {
                value: record.arg,
                done: context.done
              };
    
              if (record.arg === ContinueSentinel) {
                if (context.delegate && method === "next") {
                  // Deliberately forget the last sent value so that we don't
                  // accidentally pass it on to the delegate.
                  arg = undefined;
                }
              } else {
                return info;
              }
    
            } else if (record.type === "throw") {
              state = GenStateCompleted;
              // Dispatch the exception by looping back around to the
              // context.dispatchException(arg) call above.
              method = "throw";
              arg = record.arg;
            }
          }
        };
      }
    
      // Define Generator.prototype.{next,throw,return} in terms of the
      // unified ._invoke helper method.
      defineIteratorMethods(Gp);
    
      Gp[iteratorSymbol] = function() {
        return this;
      };
    
      Gp[toStringTagSymbol] = "Generator";
    
      Gp.toString = function() {
        return "[object Generator]";
      };
    
      function pushTryEntry(locs) {
        var entry = { tryLoc: locs[0] };
    
        if (1 in locs) {
          entry.catchLoc = locs[1];
        }
    
        if (2 in locs) {
          entry.finallyLoc = locs[2];
          entry.afterLoc = locs[3];
        }
    
        this.tryEntries.push(entry);
      }
    
      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal";
        delete record.arg;
        entry.completion = record;
      }
    
      function Context(tryLocsList) {
        // The root entry object (effectively a try statement without a catch
        // or a finally block) gives us a place to store values thrown from
        // locations where there is no enclosing try statement.
        this.tryEntries = [{ tryLoc: "root" }];
        tryLocsList.forEach(pushTryEntry, this);
        this.reset(true);
      }
    
      runtime.keys = function(object) {
        var keys = [];
        for (var key in object) {
          keys.push(key);
        }
        keys.reverse();
    
        // Rather than returning an object with a next method, we keep
        // things simple and return the next function itself.
        return function next() {
          while (keys.length) {
            var key = keys.pop();
            if (key in object) {
              next.value = key;
              next.done = false;
              return next;
            }
          }
    
          // To avoid creating an additional object, we just hang the .value
          // and .done properties off the next function object itself. This
          // also ensures that the minifier will not anonymize the function.
          next.done = true;
          return next;
        };
      };
    
      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) {
            return iteratorMethod.call(iterable);
          }
    
          if (typeof iterable.next === "function") {
            return iterable;
          }
    
          if (!isNaN(iterable.length)) {
            var i = -1, next = function next() {
              while (++i < iterable.length) {
                if (hasOwn.call(iterable, i)) {
                  next.value = iterable[i];
                  next.done = false;
                  return next;
                }
              }
    
              next.value = undefined;
              next.done = true;
    
              return next;
            };
    
            return next.next = next;
          }
        }
    
        // Return an iterator with no values.
        return { next: doneResult };
      }
      runtime.values = values;
    
      function doneResult() {
        return { value: undefined, done: true };
      }
    
      Context.prototype = {
        constructor: Context,
    
        reset: function(skipTempReset) {
          this.prev = 0;
          this.next = 0;
          // Resetting context._sent for legacy support of Babel's
          // function.sent implementation.
          this.sent = this._sent = undefined;
          this.done = false;
          this.delegate = null;
    
          this.tryEntries.forEach(resetTryEntry);
    
          if (!skipTempReset) {
            for (var name in this) {
              // Not sure about the optimal order of these conditions:
              if (name.charAt(0) === "t" &&
                  hasOwn.call(this, name) &&
                  !isNaN(+name.slice(1))) {
                this[name] = undefined;
              }
            }
          }
        },
    
        stop: function() {
          this.done = true;
    
          var rootEntry = this.tryEntries[0];
          var rootRecord = rootEntry.completion;
          if (rootRecord.type === "throw") {
            throw rootRecord.arg;
          }
    
          return this.rval;
        },
    
        dispatchException: function(exception) {
          if (this.done) {
            throw exception;
          }
    
          var context = this;
          function handle(loc, caught) {
            record.type = "throw";
            record.arg = exception;
            context.next = loc;
            return !!caught;
          }
    
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            var record = entry.completion;
    
            if (entry.tryLoc === "root") {
              // Exception thrown outside of any try block that could handle
              // it, so set the completion value of the entire function to
              // throw the exception.
              return handle("end");
            }
    
            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc");
              var hasFinally = hasOwn.call(entry, "finallyLoc");
    
              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                } else if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
    
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                }
    
              } else if (hasFinally) {
                if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
    
              } else {
                throw new Error("try statement without catch or finally");
              }
            }
          }
        },
    
        abrupt: function(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.tryLoc <= this.prev &&
                hasOwn.call(entry, "finallyLoc") &&
                this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }
    
          if (finallyEntry &&
              (type === "break" ||
               type === "continue") &&
              finallyEntry.tryLoc <= arg &&
              arg <= finallyEntry.finallyLoc) {
            // Ignore the finally entry if control is not jumping to a
            // location outside the try/catch block.
            finallyEntry = null;
          }
    
          var record = finallyEntry ? finallyEntry.completion : {};
          record.type = type;
          record.arg = arg;
    
          if (finallyEntry) {
            this.next = finallyEntry.finallyLoc;
          } else {
            this.complete(record);
          }
    
          return ContinueSentinel;
        },
    
        complete: function(record, afterLoc) {
          if (record.type === "throw") {
            throw record.arg;
          }
    
          if (record.type === "break" ||
              record.type === "continue") {
            this.next = record.arg;
          } else if (record.type === "return") {
            this.rval = record.arg;
            this.next = "end";
          } else if (record.type === "normal" && afterLoc) {
            this.next = afterLoc;
          }
        },
    
        finish: function(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) {
              this.complete(entry.completion, entry.afterLoc);
              resetTryEntry(entry);
              return ContinueSentinel;
            }
          }
        },
    
        "catch": function(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;
              if (record.type === "throw") {
                var thrown = record.arg;
                resetTryEntry(entry);
              }
              return thrown;
            }
          }
    
          // The context.catch method must only be called with a location
          // argument that corresponds to a known catch block.
          throw new Error("illegal catch attempt");
        },
    
        delegateYield: function(iterable, resultName, nextLoc) {
          this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          };
    
          return ContinueSentinel;
        }
      };
    })(
      // Among the various tricks for obtaining a reference to the global
      // object, this seems to be the most reliable technique that does not
      // use indirect eval (which violates Content Security Policy).
      typeof global === "object" ? global :
      typeof window === "object" ? window :
      typeof self === "object" ? self : this
    );
    
  provide("regenerator-runtime/runtime", module.exports);
}(global));

// pakmanager:regenerator-runtime
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  // This method of obtaining a reference to the global object needs to be
    // kept identical to the way it is obtained in runtime.js
    var g =
      typeof global === "object" ? global :
      typeof window === "object" ? window :
      typeof self === "object" ? self : this;
    
    // Use `getOwnPropertyNames` because not all browsers support calling
    // `hasOwnProperty` on the global `self` object in a worker. See #183.
    var hadRuntime = g.regeneratorRuntime &&
      Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;
    
    // Save the old regeneratorRuntime in case it needs to be restored later.
    var oldRuntime = hadRuntime && g.regeneratorRuntime;
    
    // Force reevalutation of runtime.js.
    g.regeneratorRuntime = undefined;
    
    module.exports =  require('regenerator-runtime/runtime');
    
    if (hadRuntime) {
      // Restore the original runtime.
      g.regeneratorRuntime = oldRuntime;
    } else {
      // Remove the global property added by runtime.js.
      try {
        delete g.regeneratorRuntime;
      } catch(e) {
        g.regeneratorRuntime = undefined;
      }
    }
    
  provide("regenerator-runtime", module.exports);
}(global));

// pakmanager:fbjs
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  /**
     * Copyright (c) 2013-present, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     */
    
    'use strict';
    
    throw new Error('The fbjs package should not be required without a full path.');
    
  provide("fbjs", module.exports);
}(global));

// pakmanager:history/lib/Actions
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  /**
     * Indicates that navigation was caused by a call to history.push.
     */
    'use strict';
    
    exports.__esModule = true;
    var PUSH = 'PUSH';
    
    exports.PUSH = PUSH;
    /**
     * Indicates that navigation was caused by a call to history.replace.
     */
    var REPLACE = 'REPLACE';
    
    exports.REPLACE = REPLACE;
    /**
     * Indicates that navigation was caused by some other action such
     * as using a browser's back/forward buttons and/or manually manipulating
     * the URL in a browser's location bar. This is the default.
     *
     * See https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate
     * for more information.
     */
    var POP = 'POP';
    
    exports.POP = POP;
    exports['default'] = {
      PUSH: PUSH,
      REPLACE: REPLACE,
      POP: POP
    };
  provide("history/lib/Actions", module.exports);
}(global));

// pakmanager:history/lib/PathUtils
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    exports.extractPath = extractPath;
    exports.parsePath = parsePath;
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
    
    var _warning = require('warning');
    
    var _warning2 = _interopRequireDefault(_warning);
    
    function extractPath(string) {
      var match = string.match(/^https?:\/\/[^\/]*/);
    
      if (match == null) return string;
    
      return string.substring(match[0].length);
    }
    
    function parsePath(path) {
      var pathname = extractPath(path);
      var search = '';
      var hash = '';
    
      process.env.NODE_ENV !== 'production' ? _warning2['default'](path === pathname, 'A path must be pathname + search + hash only, not a fully qualified URL like "%s"', path) : undefined;
    
      var hashIndex = pathname.indexOf('#');
      if (hashIndex !== -1) {
        hash = pathname.substring(hashIndex);
        pathname = pathname.substring(0, hashIndex);
      }
    
      var searchIndex = pathname.indexOf('?');
      if (searchIndex !== -1) {
        search = pathname.substring(searchIndex);
        pathname = pathname.substring(0, searchIndex);
      }
    
      if (pathname === '') pathname = '/';
    
      return {
        pathname: pathname,
        search: search,
        hash: hash
      };
    }
  provide("history/lib/PathUtils", module.exports);
}(global));

// pakmanager:history/lib/AsyncUtils
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  "use strict";
    
    exports.__esModule = true;
    var _slice = Array.prototype.slice;
    exports.loopAsync = loopAsync;
    
    function loopAsync(turns, work, callback) {
      var currentTurn = 0,
          isDone = false;
      var sync = false,
          hasNext = false,
          doneArgs = undefined;
    
      function done() {
        isDone = true;
        if (sync) {
          // Iterate instead of recursing if possible.
          doneArgs = [].concat(_slice.call(arguments));
          return;
        }
    
        callback.apply(this, arguments);
      }
    
      function next() {
        if (isDone) {
          return;
        }
    
        hasNext = true;
        if (sync) {
          // Iterate instead of recursing if possible.
          return;
        }
    
        sync = true;
    
        while (!isDone && currentTurn < turns && hasNext) {
          hasNext = false;
          work.call(this, currentTurn++, next, done);
        }
    
        sync = false;
    
        if (isDone) {
          // This means the loop finished synchronously.
          callback.apply(this, doneArgs);
          return;
        }
    
        if (currentTurn >= turns && hasNext) {
          isDone = true;
          callback();
        }
      }
    
      next();
    }
  provide("history/lib/AsyncUtils", module.exports);
}(global));

// pakmanager:history/lib/createLocation
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    
    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
    
    var _warning = require('warning');
    
    var _warning2 = _interopRequireDefault(_warning);
    
    var _Actions =  require('history/lib/Actions');
    
    var _PathUtils =  require('history/lib/PathUtils');
    
    function createLocation() {
      var location = arguments.length <= 0 || arguments[0] === undefined ? '/' : arguments[0];
      var action = arguments.length <= 1 || arguments[1] === undefined ? _Actions.POP : arguments[1];
      var key = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];
    
      var _fourthArg = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];
    
      if (typeof location === 'string') location = _PathUtils.parsePath(location);
    
      if (typeof action === 'object') {
        process.env.NODE_ENV !== 'production' ? _warning2['default'](false, 'The state (2nd) argument to createLocation is deprecated; use a ' + 'location descriptor instead') : undefined;
    
        location = _extends({}, location, { state: action });
    
        action = key || _Actions.POP;
        key = _fourthArg;
      }
    
      var pathname = location.pathname || '/';
      var search = location.search || '';
      var hash = location.hash || '';
      var state = location.state || null;
    
      return {
        pathname: pathname,
        search: search,
        hash: hash,
        state: state,
        action: action,
        key: key
      };
    }
    
    exports['default'] = createLocation;
    module.exports = exports['default'];
  provide("history/lib/createLocation", module.exports);
}(global));

// pakmanager:history/lib/runTransitionHook
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
    
    var _warning = require('warning');
    
    var _warning2 = _interopRequireDefault(_warning);
    
    function runTransitionHook(hook, location, callback) {
      var result = hook(location, callback);
    
      if (hook.length < 2) {
        // Assume the hook runs synchronously and automatically
        // call the callback with the return value.
        callback(result);
      } else {
        process.env.NODE_ENV !== 'production' ? _warning2['default'](result === undefined, 'You should not "return" in a transition hook with a callback argument; call the callback instead') : undefined;
      }
    }
    
    exports['default'] = runTransitionHook;
    module.exports = exports['default'];
  provide("history/lib/runTransitionHook", module.exports);
}(global));

// pakmanager:history/lib/deprecate
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
    
    var _warning = require('warning');
    
    var _warning2 = _interopRequireDefault(_warning);
    
    function deprecate(fn, message) {
      return function () {
        process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] ' + message) : undefined;
        return fn.apply(this, arguments);
      };
    }
    
    exports['default'] = deprecate;
    module.exports = exports['default'];
  provide("history/lib/deprecate", module.exports);
}(global));

// pakmanager:history/lib/ExecutionEnvironment
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
    exports.canUseDOM = canUseDOM;
  provide("history/lib/ExecutionEnvironment", module.exports);
}(global));

// pakmanager:history/lib/DOMUtils
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    exports.addEventListener = addEventListener;
    exports.removeEventListener = removeEventListener;
    exports.getHashPath = getHashPath;
    exports.replaceHashPath = replaceHashPath;
    exports.getWindowPath = getWindowPath;
    exports.go = go;
    exports.getUserConfirmation = getUserConfirmation;
    exports.supportsHistory = supportsHistory;
    exports.supportsGoWithoutReloadUsingHash = supportsGoWithoutReloadUsingHash;
    
    function addEventListener(node, event, listener) {
      if (node.addEventListener) {
        node.addEventListener(event, listener, false);
      } else {
        node.attachEvent('on' + event, listener);
      }
    }
    
    function removeEventListener(node, event, listener) {
      if (node.removeEventListener) {
        node.removeEventListener(event, listener, false);
      } else {
        node.detachEvent('on' + event, listener);
      }
    }
    
    function getHashPath() {
      // We can't use window.location.hash here because it's not
      // consistent across browsers - Firefox will pre-decode it!
      return window.location.href.split('#')[1] || '';
    }
    
    function replaceHashPath(path) {
      window.location.replace(window.location.pathname + window.location.search + '#' + path);
    }
    
    function getWindowPath() {
      return window.location.pathname + window.location.search + window.location.hash;
    }
    
    function go(n) {
      if (n) window.history.go(n);
    }
    
    function getUserConfirmation(message, callback) {
      callback(window.confirm(message));
    }
    
    /**
     * Returns true if the HTML5 history API is supported. Taken from Modernizr.
     *
     * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
     * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
     * changed to avoid false negatives for Windows Phones: https://github.com/rackt/react-router/issues/586
     */
    
    function supportsHistory() {
      var ua = navigator.userAgent;
      if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) {
        return false;
      }
      return window.history && 'pushState' in window.history;
    }
    
    /**
     * Returns false if using go(n) with hash history causes a full page reload.
     */
    
    function supportsGoWithoutReloadUsingHash() {
      var ua = navigator.userAgent;
      return ua.indexOf('Firefox') === -1;
    }
  provide("history/lib/DOMUtils", module.exports);
}(global));

// pakmanager:history/lib/createHistory
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    
    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
    
    var _warning = require('warning');
    
    var _warning2 = _interopRequireDefault(_warning);
    
    var _deepEqual = require('deep-equal');
    
    var _deepEqual2 = _interopRequireDefault(_deepEqual);
    
    var _PathUtils =  require('history/lib/PathUtils');
    
    var _AsyncUtils =  require('history/lib/AsyncUtils');
    
    var _Actions =  require('history/lib/Actions');
    
    var _createLocation2 =  require('history/lib/createLocation');
    
    var _createLocation3 = _interopRequireDefault(_createLocation2);
    
    var _runTransitionHook =  require('history/lib/runTransitionHook');
    
    var _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);
    
    var _deprecate =  require('history/lib/deprecate');
    
    var _deprecate2 = _interopRequireDefault(_deprecate);
    
    function createRandomKey(length) {
      return Math.random().toString(36).substr(2, length);
    }
    
    function locationsAreEqual(a, b) {
      return a.pathname === b.pathname && a.search === b.search &&
      //a.action === b.action && // Different action !== location change.
      a.key === b.key && _deepEqual2['default'](a.state, b.state);
    }
    
    var DefaultKeyLength = 6;
    
    function createHistory() {
      var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
      var getCurrentLocation = options.getCurrentLocation;
      var finishTransition = options.finishTransition;
      var saveState = options.saveState;
      var go = options.go;
      var getUserConfirmation = options.getUserConfirmation;
      var keyLength = options.keyLength;
    
      if (typeof keyLength !== 'number') keyLength = DefaultKeyLength;
    
      var transitionHooks = [];
    
      function listenBefore(hook) {
        transitionHooks.push(hook);
    
        return function () {
          transitionHooks = transitionHooks.filter(function (item) {
            return item !== hook;
          });
        };
      }
    
      var allKeys = [];
      var changeListeners = [];
      var location = undefined;
    
      function getCurrent() {
        if (pendingLocation && pendingLocation.action === _Actions.POP) {
          return allKeys.indexOf(pendingLocation.key);
        } else if (location) {
          return allKeys.indexOf(location.key);
        } else {
          return -1;
        }
      }
    
      function updateLocation(newLocation) {
        var current = getCurrent();
    
        location = newLocation;
    
        if (location.action === _Actions.PUSH) {
          allKeys = [].concat(allKeys.slice(0, current + 1), [location.key]);
        } else if (location.action === _Actions.REPLACE) {
          allKeys[current] = location.key;
        }
    
        changeListeners.forEach(function (listener) {
          listener(location);
        });
      }
    
      function listen(listener) {
        changeListeners.push(listener);
    
        if (location) {
          listener(location);
        } else {
          var _location = getCurrentLocation();
          allKeys = [_location.key];
          updateLocation(_location);
        }
    
        return function () {
          changeListeners = changeListeners.filter(function (item) {
            return item !== listener;
          });
        };
      }
    
      function confirmTransitionTo(location, callback) {
        _AsyncUtils.loopAsync(transitionHooks.length, function (index, next, done) {
          _runTransitionHook2['default'](transitionHooks[index], location, function (result) {
            if (result != null) {
              done(result);
            } else {
              next();
            }
          });
        }, function (message) {
          if (getUserConfirmation && typeof message === 'string') {
            getUserConfirmation(message, function (ok) {
              callback(ok !== false);
            });
          } else {
            callback(message !== false);
          }
        });
      }
    
      var pendingLocation = undefined;
    
      function transitionTo(nextLocation) {
        if (location && locationsAreEqual(location, nextLocation)) return; // Nothing to do.
    
        pendingLocation = nextLocation;
    
        confirmTransitionTo(nextLocation, function (ok) {
          if (pendingLocation !== nextLocation) return; // Transition was interrupted.
    
          if (ok) {
            // treat PUSH to current path like REPLACE to be consistent with browsers
            if (nextLocation.action === _Actions.PUSH) {
              var prevPath = createPath(location);
              var nextPath = createPath(nextLocation);
    
              if (nextPath === prevPath && _deepEqual2['default'](location.state, nextLocation.state)) nextLocation.action = _Actions.REPLACE;
            }
    
            if (finishTransition(nextLocation) !== false) updateLocation(nextLocation);
          } else if (location && nextLocation.action === _Actions.POP) {
            var prevIndex = allKeys.indexOf(location.key);
            var nextIndex = allKeys.indexOf(nextLocation.key);
    
            if (prevIndex !== -1 && nextIndex !== -1) go(prevIndex - nextIndex); // Restore the URL.
          }
        });
      }
    
      function push(location) {
        transitionTo(createLocation(location, _Actions.PUSH, createKey()));
      }
    
      function replace(location) {
        transitionTo(createLocation(location, _Actions.REPLACE, createKey()));
      }
    
      function goBack() {
        go(-1);
      }
    
      function goForward() {
        go(1);
      }
    
      function createKey() {
        return createRandomKey(keyLength);
      }
    
      function createPath(location) {
        if (location == null || typeof location === 'string') return location;
    
        var pathname = location.pathname;
        var search = location.search;
        var hash = location.hash;
    
        var result = pathname;
    
        if (search) result += search;
    
        if (hash) result += hash;
    
        return result;
      }
    
      function createHref(location) {
        return createPath(location);
      }
    
      function createLocation(location, action) {
        var key = arguments.length <= 2 || arguments[2] === undefined ? createKey() : arguments[2];
    
        if (typeof action === 'object') {
          process.env.NODE_ENV !== 'production' ? _warning2['default'](false, 'The state (2nd) argument to history.createLocation is deprecated; use a ' + 'location descriptor instead') : undefined;
    
          if (typeof location === 'string') location = _PathUtils.parsePath(location);
    
          location = _extends({}, location, { state: action });
    
          action = key;
          key = arguments[3] || createKey();
        }
    
        return _createLocation3['default'](location, action, key);
      }
    
      // deprecated
      function setState(state) {
        if (location) {
          updateLocationState(location, state);
          updateLocation(location);
        } else {
          updateLocationState(getCurrentLocation(), state);
        }
      }
    
      function updateLocationState(location, state) {
        location.state = _extends({}, location.state, state);
        saveState(location.key, location.state);
      }
    
      // deprecated
      function registerTransitionHook(hook) {
        if (transitionHooks.indexOf(hook) === -1) transitionHooks.push(hook);
      }
    
      // deprecated
      function unregisterTransitionHook(hook) {
        transitionHooks = transitionHooks.filter(function (item) {
          return item !== hook;
        });
      }
    
      // deprecated
      function pushState(state, path) {
        if (typeof path === 'string') path = _PathUtils.parsePath(path);
    
        push(_extends({ state: state }, path));
      }
    
      // deprecated
      function replaceState(state, path) {
        if (typeof path === 'string') path = _PathUtils.parsePath(path);
    
        replace(_extends({ state: state }, path));
      }
    
      return {
        listenBefore: listenBefore,
        listen: listen,
        transitionTo: transitionTo,
        push: push,
        replace: replace,
        go: go,
        goBack: goBack,
        goForward: goForward,
        createKey: createKey,
        createPath: createPath,
        createHref: createHref,
        createLocation: createLocation,
    
        setState: _deprecate2['default'](setState, 'setState is deprecated; use location.key to save state instead'),
        registerTransitionHook: _deprecate2['default'](registerTransitionHook, 'registerTransitionHook is deprecated; use listenBefore instead'),
        unregisterTransitionHook: _deprecate2['default'](unregisterTransitionHook, 'unregisterTransitionHook is deprecated; use the callback returned from listenBefore instead'),
        pushState: _deprecate2['default'](pushState, 'pushState is deprecated; use push instead'),
        replaceState: _deprecate2['default'](replaceState, 'replaceState is deprecated; use replace instead')
      };
    }
    
    exports['default'] = createHistory;
    module.exports = exports['default'];
  provide("history/lib/createHistory", module.exports);
}(global));

// pakmanager:history/lib/DOMStateStorage
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  /*eslint-disable no-empty */
    'use strict';
    
    exports.__esModule = true;
    exports.saveState = saveState;
    exports.readState = readState;
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
    
    var _warning = require('warning');
    
    var _warning2 = _interopRequireDefault(_warning);
    
    var KeyPrefix = '@@History/';
    var QuotaExceededErrors = ['QuotaExceededError', 'QUOTA_EXCEEDED_ERR'];
    
    var SecurityError = 'SecurityError';
    
    function createKey(key) {
      return KeyPrefix + key;
    }
    
    function saveState(key, state) {
      try {
        if (state == null) {
          window.sessionStorage.removeItem(createKey(key));
        } else {
          window.sessionStorage.setItem(createKey(key), JSON.stringify(state));
        }
      } catch (error) {
        if (error.name === SecurityError) {
          // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any
          // attempt to access window.sessionStorage.
          process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to save state; sessionStorage is not available due to security settings') : undefined;
    
          return;
        }
    
        if (QuotaExceededErrors.indexOf(error.name) >= 0 && window.sessionStorage.length === 0) {
          // Safari "private mode" throws QuotaExceededError.
          process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to save state; sessionStorage is not available in Safari private mode') : undefined;
    
          return;
        }
    
        throw error;
      }
    }
    
    function readState(key) {
      var json = undefined;
      try {
        json = window.sessionStorage.getItem(createKey(key));
      } catch (error) {
        if (error.name === SecurityError) {
          // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any
          // attempt to access window.sessionStorage.
          process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to read state; sessionStorage is not available due to security settings') : undefined;
    
          return null;
        }
      }
    
      if (json) {
        try {
          return JSON.parse(json);
        } catch (error) {
          // Ignore invalid JSON.
        }
      }
    
      return null;
    }
  provide("history/lib/DOMStateStorage", module.exports);
}(global));

// pakmanager:history/lib/createDOMHistory
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    
    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
    
    var _invariant = require('invariant');
    
    var _invariant2 = _interopRequireDefault(_invariant);
    
    var _ExecutionEnvironment =  require('history/lib/ExecutionEnvironment');
    
    var _DOMUtils =  require('history/lib/DOMUtils');
    
    var _createHistory =  require('history/lib/createHistory');
    
    var _createHistory2 = _interopRequireDefault(_createHistory);
    
    function createDOMHistory(options) {
      var history = _createHistory2['default'](_extends({
        getUserConfirmation: _DOMUtils.getUserConfirmation
      }, options, {
        go: _DOMUtils.go
      }));
    
      function listen(listener) {
        !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'DOM history needs a DOM') : _invariant2['default'](false) : undefined;
    
        return history.listen(listener);
      }
    
      return _extends({}, history, {
        listen: listen
      });
    }
    
    exports['default'] = createDOMHistory;
    module.exports = exports['default'];
  provide("history/lib/createDOMHistory", module.exports);
}(global));

// pakmanager:history/lib/useBeforeUnload
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    
    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
    
    var _warning = require('warning');
    
    var _warning2 = _interopRequireDefault(_warning);
    
    var _ExecutionEnvironment =  require('history/lib/ExecutionEnvironment');
    
    var _DOMUtils =  require('history/lib/DOMUtils');
    
    var _deprecate =  require('history/lib/deprecate');
    
    var _deprecate2 = _interopRequireDefault(_deprecate);
    
    function startBeforeUnloadListener(getBeforeUnloadPromptMessage) {
      function listener(event) {
        var message = getBeforeUnloadPromptMessage();
    
        if (typeof message === 'string') {
          (event || window.event).returnValue = message;
          return message;
        }
      }
    
      _DOMUtils.addEventListener(window, 'beforeunload', listener);
    
      return function () {
        _DOMUtils.removeEventListener(window, 'beforeunload', listener);
      };
    }
    
    /**
     * Returns a new createHistory function that can be used to create
     * history objects that know how to use the beforeunload event in web
     * browsers to cancel navigation.
     */
    function useBeforeUnload(createHistory) {
      return function (options) {
        var history = createHistory(options);
    
        var stopBeforeUnloadListener = undefined;
        var beforeUnloadHooks = [];
    
        function getBeforeUnloadPromptMessage() {
          var message = undefined;
    
          for (var i = 0, len = beforeUnloadHooks.length; message == null && i < len; ++i) {
            message = beforeUnloadHooks[i].call();
          }return message;
        }
    
        function listenBeforeUnload(hook) {
          beforeUnloadHooks.push(hook);
    
          if (beforeUnloadHooks.length === 1) {
            if (_ExecutionEnvironment.canUseDOM) {
              stopBeforeUnloadListener = startBeforeUnloadListener(getBeforeUnloadPromptMessage);
            } else {
              process.env.NODE_ENV !== 'production' ? _warning2['default'](false, 'listenBeforeUnload only works in DOM environments') : undefined;
            }
          }
    
          return function () {
            beforeUnloadHooks = beforeUnloadHooks.filter(function (item) {
              return item !== hook;
            });
    
            if (beforeUnloadHooks.length === 0 && stopBeforeUnloadListener) {
              stopBeforeUnloadListener();
              stopBeforeUnloadListener = null;
            }
          };
        }
    
        // deprecated
        function registerBeforeUnloadHook(hook) {
          if (_ExecutionEnvironment.canUseDOM && beforeUnloadHooks.indexOf(hook) === -1) {
            beforeUnloadHooks.push(hook);
    
            if (beforeUnloadHooks.length === 1) stopBeforeUnloadListener = startBeforeUnloadListener(getBeforeUnloadPromptMessage);
          }
        }
    
        // deprecated
        function unregisterBeforeUnloadHook(hook) {
          if (beforeUnloadHooks.length > 0) {
            beforeUnloadHooks = beforeUnloadHooks.filter(function (item) {
              return item !== hook;
            });
    
            if (beforeUnloadHooks.length === 0) stopBeforeUnloadListener();
          }
        }
    
        return _extends({}, history, {
          listenBeforeUnload: listenBeforeUnload,
    
          registerBeforeUnloadHook: _deprecate2['default'](registerBeforeUnloadHook, 'registerBeforeUnloadHook is deprecated; use listenBeforeUnload instead'),
          unregisterBeforeUnloadHook: _deprecate2['default'](unregisterBeforeUnloadHook, 'unregisterBeforeUnloadHook is deprecated; use the callback returned from listenBeforeUnload instead')
        });
      };
    }
    
    exports['default'] = useBeforeUnload;
    module.exports = exports['default'];
  provide("history/lib/useBeforeUnload", module.exports);
}(global));

// pakmanager:history/lib/useQueries
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    
    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
    
    var _warning = require('warning');
    
    var _warning2 = _interopRequireDefault(_warning);
    
    var _queryString = require('query-string');
    
    var _runTransitionHook =  require('history/lib/runTransitionHook');
    
    var _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);
    
    var _PathUtils =  require('history/lib/PathUtils');
    
    var _deprecate =  require('history/lib/deprecate');
    
    var _deprecate2 = _interopRequireDefault(_deprecate);
    
    var SEARCH_BASE_KEY = '$searchBase';
    
    function defaultStringifyQuery(query) {
      return _queryString.stringify(query).replace(/%20/g, '+');
    }
    
    var defaultParseQueryString = _queryString.parse;
    
    function isNestedObject(object) {
      for (var p in object) {
        if (Object.prototype.hasOwnProperty.call(object, p) && typeof object[p] === 'object' && !Array.isArray(object[p]) && object[p] !== null) return true;
      }return false;
    }
    
    /**
     * Returns a new createHistory function that may be used to create
     * history objects that know how to handle URL queries.
     */
    function useQueries(createHistory) {
      return function () {
        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    
        var history = createHistory(options);
    
        var stringifyQuery = options.stringifyQuery;
        var parseQueryString = options.parseQueryString;
    
        if (typeof stringifyQuery !== 'function') stringifyQuery = defaultStringifyQuery;
    
        if (typeof parseQueryString !== 'function') parseQueryString = defaultParseQueryString;
    
        function addQuery(location) {
          if (location.query == null) {
            var search = location.search;
    
            location.query = parseQueryString(search.substring(1));
            location[SEARCH_BASE_KEY] = { search: search, searchBase: '' };
          }
    
          // TODO: Instead of all the book-keeping here, this should just strip the
          // stringified query from the search.
    
          return location;
        }
    
        function appendQuery(location, query) {
          var _extends2;
    
          var searchBaseSpec = location[SEARCH_BASE_KEY];
          var queryString = query ? stringifyQuery(query) : '';
          if (!searchBaseSpec && !queryString) {
            return location;
          }
    
          process.env.NODE_ENV !== 'production' ? _warning2['default'](stringifyQuery !== defaultStringifyQuery || !isNestedObject(query), 'useQueries does not stringify nested query objects by default; ' + 'use a custom stringifyQuery function') : undefined;
    
          if (typeof location === 'string') location = _PathUtils.parsePath(location);
    
          var searchBase = undefined;
          if (searchBaseSpec && location.search === searchBaseSpec.search) {
            searchBase = searchBaseSpec.searchBase;
          } else {
            searchBase = location.search || '';
          }
    
          var search = searchBase;
          if (queryString) {
            search += (search ? '&' : '?') + queryString;
          }
    
          return _extends({}, location, (_extends2 = {
            search: search
          }, _extends2[SEARCH_BASE_KEY] = { search: search, searchBase: searchBase }, _extends2));
        }
    
        // Override all read methods with query-aware versions.
        function listenBefore(hook) {
          return history.listenBefore(function (location, callback) {
            _runTransitionHook2['default'](hook, addQuery(location), callback);
          });
        }
    
        function listen(listener) {
          return history.listen(function (location) {
            listener(addQuery(location));
          });
        }
    
        // Override all write methods with query-aware versions.
        function push(location) {
          history.push(appendQuery(location, location.query));
        }
    
        function replace(location) {
          history.replace(appendQuery(location, location.query));
        }
    
        function createPath(location, query) {
          process.env.NODE_ENV !== 'production' ? _warning2['default'](!query, 'the query argument to createPath is deprecated; use a location descriptor instead') : undefined;
    
          return history.createPath(appendQuery(location, query || location.query));
        }
    
        function createHref(location, query) {
          process.env.NODE_ENV !== 'production' ? _warning2['default'](!query, 'the query argument to createHref is deprecated; use a location descriptor instead') : undefined;
    
          return history.createHref(appendQuery(location, query || location.query));
        }
    
        function createLocation(location) {
          for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
    
          var fullLocation = history.createLocation.apply(history, [appendQuery(location, location.query)].concat(args));
          if (location.query) {
            fullLocation.query = location.query;
          }
          return addQuery(fullLocation);
        }
    
        // deprecated
        function pushState(state, path, query) {
          if (typeof path === 'string') path = _PathUtils.parsePath(path);
    
          push(_extends({ state: state }, path, { query: query }));
        }
    
        // deprecated
        function replaceState(state, path, query) {
          if (typeof path === 'string') path = _PathUtils.parsePath(path);
    
          replace(_extends({ state: state }, path, { query: query }));
        }
    
        return _extends({}, history, {
          listenBefore: listenBefore,
          listen: listen,
          push: push,
          replace: replace,
          createPath: createPath,
          createHref: createHref,
          createLocation: createLocation,
    
          pushState: _deprecate2['default'](pushState, 'pushState is deprecated; use push instead'),
          replaceState: _deprecate2['default'](replaceState, 'replaceState is deprecated; use replace instead')
        });
      };
    }
    
    exports['default'] = useQueries;
    module.exports = exports['default'];
  provide("history/lib/useQueries", module.exports);
}(global));

// pakmanager:history/lib/createBrowserHistory
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    
    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
    
    var _invariant = require('invariant');
    
    var _invariant2 = _interopRequireDefault(_invariant);
    
    var _Actions =  require('history/lib/Actions');
    
    var _PathUtils =  require('history/lib/PathUtils');
    
    var _ExecutionEnvironment =  require('history/lib/ExecutionEnvironment');
    
    var _DOMUtils =  require('history/lib/DOMUtils');
    
    var _DOMStateStorage =  require('history/lib/DOMStateStorage');
    
    var _createDOMHistory =  require('history/lib/createDOMHistory');
    
    var _createDOMHistory2 = _interopRequireDefault(_createDOMHistory);
    
    /**
     * Creates and returns a history object that uses HTML5's history API
     * (pushState, replaceState, and the popstate event) to manage history.
     * This is the recommended method of managing history in browsers because
     * it provides the cleanest URLs.
     *
     * Note: In browsers that do not support the HTML5 history API full
     * page reloads will be used to preserve URLs.
     */
    function createBrowserHistory() {
      var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    
      !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Browser history needs a DOM') : _invariant2['default'](false) : undefined;
    
      var forceRefresh = options.forceRefresh;
    
      var isSupported = _DOMUtils.supportsHistory();
      var useRefresh = !isSupported || forceRefresh;
    
      function getCurrentLocation(historyState) {
        try {
          historyState = historyState || window.history.state || {};
        } catch (e) {
          historyState = {};
        }
    
        var path = _DOMUtils.getWindowPath();
        var _historyState = historyState;
        var key = _historyState.key;
    
        var state = undefined;
        if (key) {
          state = _DOMStateStorage.readState(key);
        } else {
          state = null;
          key = history.createKey();
    
          if (isSupported) window.history.replaceState(_extends({}, historyState, { key: key }), null);
        }
    
        var location = _PathUtils.parsePath(path);
    
        return history.createLocation(_extends({}, location, { state: state }), undefined, key);
      }
    
      function startPopStateListener(_ref) {
        var transitionTo = _ref.transitionTo;
    
        function popStateListener(event) {
          if (event.state === undefined) return; // Ignore extraneous popstate events in WebKit.
    
          transitionTo(getCurrentLocation(event.state));
        }
    
        _DOMUtils.addEventListener(window, 'popstate', popStateListener);
    
        return function () {
          _DOMUtils.removeEventListener(window, 'popstate', popStateListener);
        };
      }
    
      function finishTransition(location) {
        var basename = location.basename;
        var pathname = location.pathname;
        var search = location.search;
        var hash = location.hash;
        var state = location.state;
        var action = location.action;
        var key = location.key;
    
        if (action === _Actions.POP) return; // Nothing to do.
    
        _DOMStateStorage.saveState(key, state);
    
        var path = (basename || '') + pathname + search + hash;
        var historyState = {
          key: key
        };
    
        if (action === _Actions.PUSH) {
          if (useRefresh) {
            window.location.href = path;
            return false; // Prevent location update.
          } else {
              window.history.pushState(historyState, null, path);
            }
        } else {
          // REPLACE
          if (useRefresh) {
            window.location.replace(path);
            return false; // Prevent location update.
          } else {
              window.history.replaceState(historyState, null, path);
            }
        }
      }
    
      var history = _createDOMHistory2['default'](_extends({}, options, {
        getCurrentLocation: getCurrentLocation,
        finishTransition: finishTransition,
        saveState: _DOMStateStorage.saveState
      }));
    
      var listenerCount = 0,
          stopPopStateListener = undefined;
    
      function listenBefore(listener) {
        if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);
    
        var unlisten = history.listenBefore(listener);
    
        return function () {
          unlisten();
    
          if (--listenerCount === 0) stopPopStateListener();
        };
      }
    
      function listen(listener) {
        if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);
    
        var unlisten = history.listen(listener);
    
        return function () {
          unlisten();
    
          if (--listenerCount === 0) stopPopStateListener();
        };
      }
    
      // deprecated
      function registerTransitionHook(hook) {
        if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);
    
        history.registerTransitionHook(hook);
      }
    
      // deprecated
      function unregisterTransitionHook(hook) {
        history.unregisterTransitionHook(hook);
    
        if (--listenerCount === 0) stopPopStateListener();
      }
    
      return _extends({}, history, {
        listenBefore: listenBefore,
        listen: listen,
        registerTransitionHook: registerTransitionHook,
        unregisterTransitionHook: unregisterTransitionHook
      });
    }
    
    exports['default'] = createBrowserHistory;
    module.exports = exports['default'];
  provide("history/lib/createBrowserHistory", module.exports);
}(global));

// pakmanager:history/lib/createHashHistory
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    
    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
    
    var _warning = require('warning');
    
    var _warning2 = _interopRequireDefault(_warning);
    
    var _invariant = require('invariant');
    
    var _invariant2 = _interopRequireDefault(_invariant);
    
    var _Actions =  require('history/lib/Actions');
    
    var _PathUtils =  require('history/lib/PathUtils');
    
    var _ExecutionEnvironment =  require('history/lib/ExecutionEnvironment');
    
    var _DOMUtils =  require('history/lib/DOMUtils');
    
    var _DOMStateStorage =  require('history/lib/DOMStateStorage');
    
    var _createDOMHistory =  require('history/lib/createDOMHistory');
    
    var _createDOMHistory2 = _interopRequireDefault(_createDOMHistory);
    
    function isAbsolutePath(path) {
      return typeof path === 'string' && path.charAt(0) === '/';
    }
    
    function ensureSlash() {
      var path = _DOMUtils.getHashPath();
    
      if (isAbsolutePath(path)) return true;
    
      _DOMUtils.replaceHashPath('/' + path);
    
      return false;
    }
    
    function addQueryStringValueToPath(path, key, value) {
      return path + (path.indexOf('?') === -1 ? '?' : '&') + (key + '=' + value);
    }
    
    function stripQueryStringValueFromPath(path, key) {
      return path.replace(new RegExp('[?&]?' + key + '=[a-zA-Z0-9]+'), '');
    }
    
    function getQueryStringValueFromPath(path, key) {
      var match = path.match(new RegExp('\\?.*?\\b' + key + '=(.+?)\\b'));
      return match && match[1];
    }
    
    var DefaultQueryKey = '_k';
    
    function createHashHistory() {
      var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    
      !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Hash history needs a DOM') : _invariant2['default'](false) : undefined;
    
      var queryKey = options.queryKey;
    
      if (queryKey === undefined || !!queryKey) queryKey = typeof queryKey === 'string' ? queryKey : DefaultQueryKey;
    
      function getCurrentLocation() {
        var path = _DOMUtils.getHashPath();
    
        var key = undefined,
            state = undefined;
        if (queryKey) {
          key = getQueryStringValueFromPath(path, queryKey);
          path = stripQueryStringValueFromPath(path, queryKey);
    
          if (key) {
            state = _DOMStateStorage.readState(key);
          } else {
            state = null;
            key = history.createKey();
            _DOMUtils.replaceHashPath(addQueryStringValueToPath(path, queryKey, key));
          }
        } else {
          key = state = null;
        }
    
        var location = _PathUtils.parsePath(path);
    
        return history.createLocation(_extends({}, location, { state: state }), undefined, key);
      }
    
      function startHashChangeListener(_ref) {
        var transitionTo = _ref.transitionTo;
    
        function hashChangeListener() {
          if (!ensureSlash()) return; // Always make sure hashes are preceeded with a /.
    
          transitionTo(getCurrentLocation());
        }
    
        ensureSlash();
        _DOMUtils.addEventListener(window, 'hashchange', hashChangeListener);
    
        return function () {
          _DOMUtils.removeEventListener(window, 'hashchange', hashChangeListener);
        };
      }
    
      function finishTransition(location) {
        var basename = location.basename;
        var pathname = location.pathname;
        var search = location.search;
        var state = location.state;
        var action = location.action;
        var key = location.key;
    
        if (action === _Actions.POP) return; // Nothing to do.
    
        var path = (basename || '') + pathname + search;
    
        if (queryKey) {
          path = addQueryStringValueToPath(path, queryKey, key);
          _DOMStateStorage.saveState(key, state);
        } else {
          // Drop key and state.
          location.key = location.state = null;
        }
    
        var currentHash = _DOMUtils.getHashPath();
    
        if (action === _Actions.PUSH) {
          if (currentHash !== path) {
            window.location.hash = path;
          } else {
            process.env.NODE_ENV !== 'production' ? _warning2['default'](false, 'You cannot PUSH the same path using hash history') : undefined;
          }
        } else if (currentHash !== path) {
          // REPLACE
          _DOMUtils.replaceHashPath(path);
        }
      }
    
      var history = _createDOMHistory2['default'](_extends({}, options, {
        getCurrentLocation: getCurrentLocation,
        finishTransition: finishTransition,
        saveState: _DOMStateStorage.saveState
      }));
    
      var listenerCount = 0,
          stopHashChangeListener = undefined;
    
      function listenBefore(listener) {
        if (++listenerCount === 1) stopHashChangeListener = startHashChangeListener(history);
    
        var unlisten = history.listenBefore(listener);
    
        return function () {
          unlisten();
    
          if (--listenerCount === 0) stopHashChangeListener();
        };
      }
    
      function listen(listener) {
        if (++listenerCount === 1) stopHashChangeListener = startHashChangeListener(history);
    
        var unlisten = history.listen(listener);
    
        return function () {
          unlisten();
    
          if (--listenerCount === 0) stopHashChangeListener();
        };
      }
    
      function push(location) {
        process.env.NODE_ENV !== 'production' ? _warning2['default'](queryKey || location.state == null, 'You cannot use state without a queryKey it will be dropped') : undefined;
    
        history.push(location);
      }
    
      function replace(location) {
        process.env.NODE_ENV !== 'production' ? _warning2['default'](queryKey || location.state == null, 'You cannot use state without a queryKey it will be dropped') : undefined;
    
        history.replace(location);
      }
    
      var goIsSupportedWithoutReload = _DOMUtils.supportsGoWithoutReloadUsingHash();
    
      function go(n) {
        process.env.NODE_ENV !== 'production' ? _warning2['default'](goIsSupportedWithoutReload, 'Hash history go(n) causes a full page reload in this browser') : undefined;
    
        history.go(n);
      }
    
      function createHref(path) {
        return '#' + history.createHref(path);
      }
    
      // deprecated
      function registerTransitionHook(hook) {
        if (++listenerCount === 1) stopHashChangeListener = startHashChangeListener(history);
    
        history.registerTransitionHook(hook);
      }
    
      // deprecated
      function unregisterTransitionHook(hook) {
        history.unregisterTransitionHook(hook);
    
        if (--listenerCount === 0) stopHashChangeListener();
      }
    
      // deprecated
      function pushState(state, path) {
        process.env.NODE_ENV !== 'production' ? _warning2['default'](queryKey || state == null, 'You cannot use state without a queryKey it will be dropped') : undefined;
    
        history.pushState(state, path);
      }
    
      // deprecated
      function replaceState(state, path) {
        process.env.NODE_ENV !== 'production' ? _warning2['default'](queryKey || state == null, 'You cannot use state without a queryKey it will be dropped') : undefined;
    
        history.replaceState(state, path);
      }
    
      return _extends({}, history, {
        listenBefore: listenBefore,
        listen: listen,
        push: push,
        replace: replace,
        go: go,
        createHref: createHref,
    
        registerTransitionHook: registerTransitionHook, // deprecated - warning is in createHistory
        unregisterTransitionHook: unregisterTransitionHook, // deprecated - warning is in createHistory
        pushState: pushState, // deprecated - warning is in createHistory
        replaceState: replaceState // deprecated - warning is in createHistory
      });
    }
    
    exports['default'] = createHashHistory;
    module.exports = exports['default'];
  provide("history/lib/createHashHistory", module.exports);
}(global));

// pakmanager:history/lib/createMemoryHistory
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    
    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
    
    var _warning = require('warning');
    
    var _warning2 = _interopRequireDefault(_warning);
    
    var _invariant = require('invariant');
    
    var _invariant2 = _interopRequireDefault(_invariant);
    
    var _PathUtils =  require('history/lib/PathUtils');
    
    var _Actions =  require('history/lib/Actions');
    
    var _createHistory =  require('history/lib/createHistory');
    
    var _createHistory2 = _interopRequireDefault(_createHistory);
    
    function createStateStorage(entries) {
      return entries.filter(function (entry) {
        return entry.state;
      }).reduce(function (memo, entry) {
        memo[entry.key] = entry.state;
        return memo;
      }, {});
    }
    
    function createMemoryHistory() {
      var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    
      if (Array.isArray(options)) {
        options = { entries: options };
      } else if (typeof options === 'string') {
        options = { entries: [options] };
      }
    
      var history = _createHistory2['default'](_extends({}, options, {
        getCurrentLocation: getCurrentLocation,
        finishTransition: finishTransition,
        saveState: saveState,
        go: go
      }));
    
      var _options = options;
      var entries = _options.entries;
      var current = _options.current;
    
      if (typeof entries === 'string') {
        entries = [entries];
      } else if (!Array.isArray(entries)) {
        entries = ['/'];
      }
    
      entries = entries.map(function (entry) {
        var key = history.createKey();
    
        if (typeof entry === 'string') return { pathname: entry, key: key };
    
        if (typeof entry === 'object' && entry) return _extends({}, entry, { key: key });
    
        !false ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Unable to create history entry from %s', entry) : _invariant2['default'](false) : undefined;
      });
    
      if (current == null) {
        current = entries.length - 1;
      } else {
        !(current >= 0 && current < entries.length) ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Current index must be >= 0 and < %s, was %s', entries.length, current) : _invariant2['default'](false) : undefined;
      }
    
      var storage = createStateStorage(entries);
    
      function saveState(key, state) {
        storage[key] = state;
      }
    
      function readState(key) {
        return storage[key];
      }
    
      function getCurrentLocation() {
        var entry = entries[current];
        var basename = entry.basename;
        var pathname = entry.pathname;
        var search = entry.search;
    
        var path = (basename || '') + pathname + (search || '');
    
        var key = undefined,
            state = undefined;
        if (entry.key) {
          key = entry.key;
          state = readState(key);
        } else {
          key = history.createKey();
          state = null;
          entry.key = key;
        }
    
        var location = _PathUtils.parsePath(path);
    
        return history.createLocation(_extends({}, location, { state: state }), undefined, key);
      }
    
      function canGo(n) {
        var index = current + n;
        return index >= 0 && index < entries.length;
      }
    
      function go(n) {
        if (n) {
          if (!canGo(n)) {
            process.env.NODE_ENV !== 'production' ? _warning2['default'](false, 'Cannot go(%s) there is not enough history', n) : undefined;
            return;
          }
    
          current += n;
    
          var currentLocation = getCurrentLocation();
    
          // change action to POP
          history.transitionTo(_extends({}, currentLocation, { action: _Actions.POP }));
        }
      }
    
      function finishTransition(location) {
        switch (location.action) {
          case _Actions.PUSH:
            current += 1;
    
            // if we are not on the top of stack
            // remove rest and push new
            if (current < entries.length) entries.splice(current);
    
            entries.push(location);
            saveState(location.key, location.state);
            break;
          case _Actions.REPLACE:
            entries[current] = location;
            saveState(location.key, location.state);
            break;
        }
      }
    
      return history;
    }
    
    exports['default'] = createMemoryHistory;
    module.exports = exports['default'];
  provide("history/lib/createMemoryHistory", module.exports);
}(global));

// pakmanager:history/lib/useBasename
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    
    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
    
    var _warning = require('warning');
    
    var _warning2 = _interopRequireDefault(_warning);
    
    var _ExecutionEnvironment =  require('history/lib/ExecutionEnvironment');
    
    var _PathUtils =  require('history/lib/PathUtils');
    
    var _runTransitionHook =  require('history/lib/runTransitionHook');
    
    var _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);
    
    var _deprecate =  require('history/lib/deprecate');
    
    var _deprecate2 = _interopRequireDefault(_deprecate);
    
    function useBasename(createHistory) {
      return function () {
        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    
        var history = createHistory(options);
    
        var basename = options.basename;
    
        var checkedBaseHref = false;
    
        function checkBaseHref() {
          if (checkedBaseHref) {
            return;
          }
    
          // Automatically use the value of <base href> in HTML
          // documents as basename if it's not explicitly given.
          if (basename == null && _ExecutionEnvironment.canUseDOM) {
            var base = document.getElementsByTagName('base')[0];
            var baseHref = base && base.getAttribute('href');
    
            if (baseHref != null) {
              basename = baseHref;
    
              process.env.NODE_ENV !== 'production' ? _warning2['default'](false, 'Automatically setting basename using <base href> is deprecated and will ' + 'be removed in the next major release. The semantics of <base href> are ' + 'subtly different from basename. Please pass the basename explicitly in ' + 'the options to createHistory') : undefined;
            }
          }
    
          checkedBaseHref = true;
        }
    
        function addBasename(location) {
          checkBaseHref();
    
          if (basename && location.basename == null) {
            if (location.pathname.indexOf(basename) === 0) {
              location.pathname = location.pathname.substring(basename.length);
              location.basename = basename;
    
              if (location.pathname === '') location.pathname = '/';
            } else {
              location.basename = '';
            }
          }
    
          return location;
        }
    
        function prependBasename(location) {
          checkBaseHref();
    
          if (!basename) return location;
    
          if (typeof location === 'string') location = _PathUtils.parsePath(location);
    
          var pname = location.pathname;
          var normalizedBasename = basename.slice(-1) === '/' ? basename : basename + '/';
          var normalizedPathname = pname.charAt(0) === '/' ? pname.slice(1) : pname;
          var pathname = normalizedBasename + normalizedPathname;
    
          return _extends({}, location, {
            pathname: pathname
          });
        }
    
        // Override all read methods with basename-aware versions.
        function listenBefore(hook) {
          return history.listenBefore(function (location, callback) {
            _runTransitionHook2['default'](hook, addBasename(location), callback);
          });
        }
    
        function listen(listener) {
          return history.listen(function (location) {
            listener(addBasename(location));
          });
        }
    
        // Override all write methods with basename-aware versions.
        function push(location) {
          history.push(prependBasename(location));
        }
    
        function replace(location) {
          history.replace(prependBasename(location));
        }
    
        function createPath(location) {
          return history.createPath(prependBasename(location));
        }
    
        function createHref(location) {
          return history.createHref(prependBasename(location));
        }
    
        function createLocation(location) {
          for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
    
          return addBasename(history.createLocation.apply(history, [prependBasename(location)].concat(args)));
        }
    
        // deprecated
        function pushState(state, path) {
          if (typeof path === 'string') path = _PathUtils.parsePath(path);
    
          push(_extends({ state: state }, path));
        }
    
        // deprecated
        function replaceState(state, path) {
          if (typeof path === 'string') path = _PathUtils.parsePath(path);
    
          replace(_extends({ state: state }, path));
        }
    
        return _extends({}, history, {
          listenBefore: listenBefore,
          listen: listen,
          push: push,
          replace: replace,
          createPath: createPath,
          createHref: createHref,
          createLocation: createLocation,
    
          pushState: _deprecate2['default'](pushState, 'pushState is deprecated; use push instead'),
          replaceState: _deprecate2['default'](replaceState, 'replaceState is deprecated; use replace instead')
        });
      };
    }
    
    exports['default'] = useBasename;
    module.exports = exports['default'];
  provide("history/lib/useBasename", module.exports);
}(global));

// pakmanager:history/lib/enableBeforeUnload
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
    
    var _deprecate =  require('history/lib/deprecate');
    
    var _deprecate2 = _interopRequireDefault(_deprecate);
    
    var _useBeforeUnload =  require('history/lib/useBeforeUnload');
    
    var _useBeforeUnload2 = _interopRequireDefault(_useBeforeUnload);
    
    exports['default'] = _deprecate2['default'](_useBeforeUnload2['default'], 'enableBeforeUnload is deprecated, use useBeforeUnload instead');
    module.exports = exports['default'];
  provide("history/lib/enableBeforeUnload", module.exports);
}(global));

// pakmanager:history/lib/enableQueries
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
    
    var _deprecate =  require('history/lib/deprecate');
    
    var _deprecate2 = _interopRequireDefault(_deprecate);
    
    var _useQueries =  require('history/lib/useQueries');
    
    var _useQueries2 = _interopRequireDefault(_useQueries);
    
    exports['default'] = _deprecate2['default'](_useQueries2['default'], 'enableQueries is deprecated, use useQueries instead');
    module.exports = exports['default'];
  provide("history/lib/enableQueries", module.exports);
}(global));

// pakmanager:hoist-non-react-statics
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  /**
     * Copyright 2015, Yahoo! Inc.
     * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
     */
    'use strict';
    
    var REACT_STATICS = {
        childContextTypes: true,
        contextTypes: true,
        defaultProps: true,
        displayName: true,
        getDefaultProps: true,
        mixins: true,
        propTypes: true,
        type: true
    };
    
    var KNOWN_STATICS = {
        name: true,
        length: true,
        prototype: true,
        caller: true,
        arguments: true,
        arity: true
    };
    
    var isGetOwnPropertySymbolsAvailable = typeof Object.getOwnPropertySymbols === 'function';
    
    module.exports = function hoistNonReactStatics(targetComponent, sourceComponent, customStatics) {
        if (typeof sourceComponent !== 'string') { // don't hoist over string (html) components
            var keys = Object.getOwnPropertyNames(sourceComponent);
    
            /* istanbul ignore else */
            if (isGetOwnPropertySymbolsAvailable) {
                keys = keys.concat(Object.getOwnPropertySymbols(sourceComponent));
            }
    
            for (var i = 0; i < keys.length; ++i) {
                if (!REACT_STATICS[keys[i]] && !KNOWN_STATICS[keys[i]] && (!customStatics || !customStatics[keys[i]])) {
                    try {
                        targetComponent[keys[i]] = sourceComponent[keys[i]];
                    } catch (error) {
    
                    }
                }
            }
        }
    
        return targetComponent;
    };
    
  provide("hoist-non-react-statics", module.exports);
}(global));

// pakmanager:react/lib/ReactInvalidSetStateWarningDevTool
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  /**
     * Copyright 2016-present, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactInvalidSetStateWarningDevTool
     */
    
    'use strict';
    
    var warning = require('fbjs/lib/warning');
    
    if (process.env.NODE_ENV !== 'production') {
      var processingChildContext = false;
    
      var warnInvalidSetState = function () {
        process.env.NODE_ENV !== 'production' ? warning(!processingChildContext, 'setState(...): Cannot call setState() inside getChildContext()') : void 0;
      };
    }
    
    var ReactInvalidSetStateWarningDevTool = {
      onBeginProcessingChildContext: function () {
        processingChildContext = true;
      },
      onEndProcessingChildContext: function () {
        processingChildContext = false;
      },
      onSetState: function () {
        warnInvalidSetState();
      }
    };
    
    module.exports = ReactInvalidSetStateWarningDevTool;
  provide("react/lib/ReactInvalidSetStateWarningDevTool", module.exports);
}(global));

// pakmanager:react/lib/ReactNativeOperationHistoryDevtool
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  /**
     * Copyright 2016-present, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactNativeOperationHistoryDevtool
     */
    
    'use strict';
    
    var history = [];
    
    var ReactNativeOperationHistoryDevtool = {
      onNativeOperation: function (debugID, type, payload) {
        history.push({
          instanceID: debugID,
          type: type,
          payload: payload
        });
      },
      clearHistory: function () {
        if (ReactNativeOperationHistoryDevtool._preventClearing) {
          // Should only be used for tests.
          return;
        }
    
        history = [];
      },
      getHistory: function () {
        return history;
      }
    };
    
    module.exports = ReactNativeOperationHistoryDevtool;
  provide("react/lib/ReactNativeOperationHistoryDevtool", module.exports);
}(global));

// pakmanager:react/lib/ReactComponentTreeDevtool
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  /**
     * Copyright 2016-present, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactComponentTreeDevtool
     */
    
    'use strict';
    
    var invariant = require('fbjs/lib/invariant');
    
    var tree = {};
    var rootIDs = [];
    
    function updateTree(id, update) {
      if (!tree[id]) {
        tree[id] = {
          parentID: null,
          ownerID: null,
          text: null,
          childIDs: [],
          displayName: 'Unknown',
          isMounted: false,
          updateCount: 0
        };
      }
      update(tree[id]);
    }
    
    function purgeDeep(id) {
      var item = tree[id];
      if (item) {
        var childIDs = item.childIDs;
    
        delete tree[id];
        childIDs.forEach(purgeDeep);
      }
    }
    
    var ReactComponentTreeDevtool = {
      onSetDisplayName: function (id, displayName) {
        updateTree(id, function (item) {
          return item.displayName = displayName;
        });
      },
      onSetChildren: function (id, nextChildIDs) {
        updateTree(id, function (item) {
          var prevChildIDs = item.childIDs;
          item.childIDs = nextChildIDs;
    
          nextChildIDs.forEach(function (nextChildID) {
            var nextChild = tree[nextChildID];
            !nextChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected devtool events to fire for the child ' + 'before its parent includes it in onSetChildren().') : invariant(false) : void 0;
            !(nextChild.displayName != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onSetDisplayName() to fire for the child ' + 'before its parent includes it in onSetChildren().') : invariant(false) : void 0;
            !(nextChild.childIDs != null || nextChild.text != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onSetChildren() or onSetText() to fire for the child ' + 'before its parent includes it in onSetChildren().') : invariant(false) : void 0;
            !nextChild.isMounted ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onMountComponent() to fire for the child ' + 'before its parent includes it in onSetChildren().') : invariant(false) : void 0;
    
            if (prevChildIDs.indexOf(nextChildID) === -1) {
              nextChild.parentID = id;
            }
          });
        });
      },
      onSetOwner: function (id, ownerID) {
        updateTree(id, function (item) {
          return item.ownerID = ownerID;
        });
      },
      onSetText: function (id, text) {
        updateTree(id, function (item) {
          return item.text = text;
        });
      },
      onMountComponent: function (id) {
        updateTree(id, function (item) {
          return item.isMounted = true;
        });
      },
      onMountRootComponent: function (id) {
        rootIDs.push(id);
      },
      onUpdateComponent: function (id) {
        updateTree(id, function (item) {
          return item.updateCount++;
        });
      },
      onUnmountComponent: function (id) {
        updateTree(id, function (item) {
          return item.isMounted = false;
        });
        rootIDs = rootIDs.filter(function (rootID) {
          return rootID !== id;
        });
      },
      purgeUnmountedComponents: function () {
        if (ReactComponentTreeDevtool._preventPurging) {
          // Should only be used for testing.
          return;
        }
    
        Object.keys(tree).filter(function (id) {
          return !tree[id].isMounted;
        }).forEach(purgeDeep);
      },
      isMounted: function (id) {
        var item = tree[id];
        return item ? item.isMounted : false;
      },
      getChildIDs: function (id) {
        var item = tree[id];
        return item ? item.childIDs : [];
      },
      getDisplayName: function (id) {
        var item = tree[id];
        return item ? item.displayName : 'Unknown';
      },
      getOwnerID: function (id) {
        var item = tree[id];
        return item ? item.ownerID : null;
      },
      getParentID: function (id) {
        var item = tree[id];
        return item ? item.parentID : null;
      },
      getText: function (id) {
        var item = tree[id];
        return item ? item.text : null;
      },
      getUpdateCount: function (id) {
        var item = tree[id];
        return item ? item.updateCount : 0;
      },
      getRootIDs: function () {
        return rootIDs;
      },
      getRegisteredIDs: function () {
        return Object.keys(tree);
      }
    };
    
    module.exports = ReactComponentTreeDevtool;
  provide("react/lib/ReactComponentTreeDevtool", module.exports);
}(global));

// pakmanager:react/lib/ReactCurrentOwner
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  /**
     * Copyright 2013-present, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactCurrentOwner
     */
    
    'use strict';
    
    /**
     * Keeps track of the current owner.
     *
     * The current owner is the component who should own any components that are
     * currently being constructed.
     */
    
    var ReactCurrentOwner = {
    
      /**
       * @internal
       * @type {ReactComponent}
       */
      current: null
    
    };
    
    module.exports = ReactCurrentOwner;
  provide("react/lib/ReactCurrentOwner", module.exports);
}(global));

// pakmanager:react/lib/canDefineProperty
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  /**
     * Copyright 2013-present, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule canDefineProperty
     */
    
    'use strict';
    
    var canDefineProperty = false;
    if (process.env.NODE_ENV !== 'production') {
      try {
        Object.defineProperty({}, 'x', { get: function () {} });
        canDefineProperty = true;
      } catch (x) {
        // IE will fail on defineProperty
      }
    }
    
    module.exports = canDefineProperty;
  provide("react/lib/canDefineProperty", module.exports);
}(global));

// pakmanager:react/lib/ReactDebugTool
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  /**
     * Copyright 2016-present, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactDebugTool
     */
    
    'use strict';
    
    var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
    
    var performanceNow = require('fbjs/lib/performanceNow');
    var warning = require('fbjs/lib/warning');
    
    var eventHandlers = [];
    var handlerDoesThrowForEvent = {};
    
    function emitEvent(handlerFunctionName, arg1, arg2, arg3, arg4, arg5) {
      if (process.env.NODE_ENV !== 'production') {
        eventHandlers.forEach(function (handler) {
          try {
            if (handler[handlerFunctionName]) {
              handler[handlerFunctionName](arg1, arg2, arg3, arg4, arg5);
            }
          } catch (e) {
            process.env.NODE_ENV !== 'production' ? warning(!handlerDoesThrowForEvent[handlerFunctionName], 'exception thrown by devtool while handling %s: %s', handlerFunctionName, e.message) : void 0;
            handlerDoesThrowForEvent[handlerFunctionName] = true;
          }
        });
      }
    }
    
    var isProfiling = false;
    var flushHistory = [];
    var currentFlushNesting = 0;
    var currentFlushMeasurements = null;
    var currentFlushStartTime = null;
    var currentTimerDebugID = null;
    var currentTimerStartTime = null;
    var currentTimerType = null;
    
    function clearHistory() {
      ReactComponentTreeDevtool.purgeUnmountedComponents();
      ReactNativeOperationHistoryDevtool.clearHistory();
    }
    
    function getTreeSnapshot(registeredIDs) {
      return registeredIDs.reduce(function (tree, id) {
        var ownerID = ReactComponentTreeDevtool.getOwnerID(id);
        var parentID = ReactComponentTreeDevtool.getParentID(id);
        tree[id] = {
          displayName: ReactComponentTreeDevtool.getDisplayName(id),
          text: ReactComponentTreeDevtool.getText(id),
          updateCount: ReactComponentTreeDevtool.getUpdateCount(id),
          childIDs: ReactComponentTreeDevtool.getChildIDs(id),
          // Text nodes don't have owners but this is close enough.
          ownerID: ownerID || ReactComponentTreeDevtool.getOwnerID(parentID),
          parentID: parentID
        };
        return tree;
      }, {});
    }
    
    function resetMeasurements() {
      if (process.env.NODE_ENV !== 'production') {
        var previousStartTime = currentFlushStartTime;
        var previousMeasurements = currentFlushMeasurements || [];
        var previousOperations = ReactNativeOperationHistoryDevtool.getHistory();
    
        if (!isProfiling || currentFlushNesting === 0) {
          currentFlushStartTime = null;
          currentFlushMeasurements = null;
          clearHistory();
          return;
        }
    
        if (previousMeasurements.length || previousOperations.length) {
          var registeredIDs = ReactComponentTreeDevtool.getRegisteredIDs();
          flushHistory.push({
            duration: performanceNow() - previousStartTime,
            measurements: previousMeasurements || [],
            operations: previousOperations || [],
            treeSnapshot: getTreeSnapshot(registeredIDs)
          });
        }
    
        clearHistory();
        currentFlushStartTime = performanceNow();
        currentFlushMeasurements = [];
      }
    }
    
    function checkDebugID(debugID) {
      process.env.NODE_ENV !== 'production' ? warning(debugID, 'ReactDebugTool: debugID may not be empty.') : void 0;
    }
    
    var ReactDebugTool = {
      addDevtool: function (devtool) {
        eventHandlers.push(devtool);
      },
      removeDevtool: function (devtool) {
        for (var i = 0; i < eventHandlers.length; i++) {
          if (eventHandlers[i] === devtool) {
            eventHandlers.splice(i, 1);
            i--;
          }
        }
      },
      beginProfiling: function () {
        if (process.env.NODE_ENV !== 'production') {
          if (isProfiling) {
            return;
          }
    
          isProfiling = true;
          flushHistory.length = 0;
          resetMeasurements();
        }
      },
      endProfiling: function () {
        if (process.env.NODE_ENV !== 'production') {
          if (!isProfiling) {
            return;
          }
    
          isProfiling = false;
          resetMeasurements();
        }
      },
      getFlushHistory: function () {
        if (process.env.NODE_ENV !== 'production') {
          return flushHistory;
        }
      },
      onBeginFlush: function () {
        if (process.env.NODE_ENV !== 'production') {
          currentFlushNesting++;
          resetMeasurements();
        }
        emitEvent('onBeginFlush');
      },
      onEndFlush: function () {
        if (process.env.NODE_ENV !== 'production') {
          resetMeasurements();
          currentFlushNesting--;
        }
        emitEvent('onEndFlush');
      },
      onBeginLifeCycleTimer: function (debugID, timerType) {
        checkDebugID(debugID);
        emitEvent('onBeginLifeCycleTimer', debugID, timerType);
        if (process.env.NODE_ENV !== 'production') {
          if (isProfiling && currentFlushNesting > 0) {
            process.env.NODE_ENV !== 'production' ? warning(!currentTimerType, 'There is an internal error in the React performance measurement code. ' + 'Did not expect %s timer to start while %s timer is still in ' + 'progress for %s instance.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
            currentTimerStartTime = performanceNow();
            currentTimerDebugID = debugID;
            currentTimerType = timerType;
          }
        }
      },
      onEndLifeCycleTimer: function (debugID, timerType) {
        checkDebugID(debugID);
        if (process.env.NODE_ENV !== 'production') {
          if (isProfiling && currentFlushNesting > 0) {
            process.env.NODE_ENV !== 'production' ? warning(currentTimerType === timerType, 'There is an internal error in the React performance measurement code. ' + 'We did not expect %s timer to stop while %s timer is still in ' + 'progress for %s instance. Please report this as a bug in React.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
            currentFlushMeasurements.push({
              timerType: timerType,
              instanceID: debugID,
              duration: performanceNow() - currentTimerStartTime
            });
            currentTimerStartTime = null;
            currentTimerDebugID = null;
            currentTimerType = null;
          }
        }
        emitEvent('onEndLifeCycleTimer', debugID, timerType);
      },
      onBeginReconcilerTimer: function (debugID, timerType) {
        checkDebugID(debugID);
        emitEvent('onBeginReconcilerTimer', debugID, timerType);
      },
      onEndReconcilerTimer: function (debugID, timerType) {
        checkDebugID(debugID);
        emitEvent('onEndReconcilerTimer', debugID, timerType);
      },
      onBeginProcessingChildContext: function () {
        emitEvent('onBeginProcessingChildContext');
      },
      onEndProcessingChildContext: function () {
        emitEvent('onEndProcessingChildContext');
      },
      onNativeOperation: function (debugID, type, payload) {
        checkDebugID(debugID);
        emitEvent('onNativeOperation', debugID, type, payload);
      },
      onSetState: function () {
        emitEvent('onSetState');
      },
      onSetDisplayName: function (debugID, displayName) {
        checkDebugID(debugID);
        emitEvent('onSetDisplayName', debugID, displayName);
      },
      onSetChildren: function (debugID, childDebugIDs) {
        checkDebugID(debugID);
        emitEvent('onSetChildren', debugID, childDebugIDs);
      },
      onSetOwner: function (debugID, ownerDebugID) {
        checkDebugID(debugID);
        emitEvent('onSetOwner', debugID, ownerDebugID);
      },
      onSetText: function (debugID, text) {
        checkDebugID(debugID);
        emitEvent('onSetText', debugID, text);
      },
      onMountRootComponent: function (debugID) {
        checkDebugID(debugID);
        emitEvent('onMountRootComponent', debugID);
      },
      onMountComponent: function (debugID) {
        checkDebugID(debugID);
        emitEvent('onMountComponent', debugID);
      },
      onUpdateComponent: function (debugID) {
        checkDebugID(debugID);
        emitEvent('onUpdateComponent', debugID);
      },
      onUnmountComponent: function (debugID) {
        checkDebugID(debugID);
        emitEvent('onUnmountComponent', debugID);
      }
    };
    
    if (process.env.NODE_ENV !== 'production') {
      var ReactInvalidSetStateWarningDevTool =  require('react/lib/ReactInvalidSetStateWarningDevTool');
      var ReactNativeOperationHistoryDevtool =  require('react/lib/ReactNativeOperationHistoryDevtool');
      var ReactComponentTreeDevtool =  require('react/lib/ReactComponentTreeDevtool');
      ReactDebugTool.addDevtool(ReactInvalidSetStateWarningDevTool);
      ReactDebugTool.addDevtool(ReactComponentTreeDevtool);
      ReactDebugTool.addDevtool(ReactNativeOperationHistoryDevtool);
      var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
      if (/[?&]react_perf\b/.test(url)) {
        ReactDebugTool.beginProfiling();
      }
    }
    
    module.exports = ReactDebugTool;
  provide("react/lib/ReactDebugTool", module.exports);
}(global));

// pakmanager:react/lib/ReactElement
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  /**
     * Copyright 2014-present, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactElement
     */
    
    'use strict';
    
    var _assign = require('object-assign');
    
    var ReactCurrentOwner =  require('react/lib/ReactCurrentOwner');
    
    var warning = require('fbjs/lib/warning');
    var canDefineProperty =  require('react/lib/canDefineProperty');
    
    // The Symbol used to tag the ReactElement type. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;
    
    var RESERVED_PROPS = {
      key: true,
      ref: true,
      __self: true,
      __source: true
    };
    
    var specialPropKeyWarningShown, specialPropRefWarningShown;
    
    /**
     * Factory method to create a new React element. This no longer adheres to
     * the class pattern, so do not use new to call it. Also, no instanceof check
     * will work. Instead test $$typeof field against Symbol.for('react.element') to check
     * if something is a React Element.
     *
     * @param {*} type
     * @param {*} key
     * @param {string|object} ref
     * @param {*} self A *temporary* helper to detect places where `this` is
     * different from the `owner` when React.createElement is called, so that we
     * can warn. We want to get rid of owner and replace string `ref`s with arrow
     * functions, and as long as `this` and owner are the same, there will be no
     * change in behavior.
     * @param {*} source An annotation object (added by a transpiler or otherwise)
     * indicating filename, line number, and/or other information.
     * @param {*} owner
     * @param {*} props
     * @internal
     */
    var ReactElement = function (type, key, ref, self, source, owner, props) {
      var element = {
        // This tag allow us to uniquely identify this as a React Element
        $$typeof: REACT_ELEMENT_TYPE,
    
        // Built-in properties that belong on the element
        type: type,
        key: key,
        ref: ref,
        props: props,
    
        // Record the component responsible for creating this element.
        _owner: owner
      };
    
      if (process.env.NODE_ENV !== 'production') {
        // The validation flag is currently mutative. We put it on
        // an external backing store so that we can freeze the whole object.
        // This can be replaced with a WeakMap once they are implemented in
        // commonly used development environments.
        element._store = {};
    
        // To make comparing ReactElements easier for testing purposes, we make
        // the validation flag non-enumerable (where possible, which should
        // include every environment we run tests in), so the test framework
        // ignores it.
        if (canDefineProperty) {
          Object.defineProperty(element._store, 'validated', {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
          });
          // self and source are DEV only properties.
          Object.defineProperty(element, '_self', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self
          });
          // Two elements created in two different places should be considered
          // equal for testing purposes and therefore we hide it from enumeration.
          Object.defineProperty(element, '_source', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
          });
        } else {
          element._store.validated = false;
          element._self = self;
          element._source = source;
        }
        if (Object.freeze) {
          Object.freeze(element.props);
          Object.freeze(element);
        }
      }
    
      return element;
    };
    
    /**
     * Create and return a new ReactElement of the given type.
     * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement
     */
    ReactElement.createElement = function (type, config, children) {
      var propName;
    
      // Reserved names are extracted
      var props = {};
    
      var key = null;
      var ref = null;
      var self = null;
      var source = null;
    
      if (config != null) {
        if (process.env.NODE_ENV !== 'production') {
          process.env.NODE_ENV !== 'production' ? warning(
          /* eslint-disable no-proto */
          config.__proto__ == null || config.__proto__ === Object.prototype,
          /* eslint-enable no-proto */
          'React.createElement(...): Expected props argument to be a plain object. ' + 'Properties defined in its prototype chain will be ignored.') : void 0;
          ref = !config.hasOwnProperty('ref') || Object.getOwnPropertyDescriptor(config, 'ref').get ? null : config.ref;
          key = !config.hasOwnProperty('key') || Object.getOwnPropertyDescriptor(config, 'key').get ? null : '' + config.key;
        } else {
          ref = config.ref === undefined ? null : config.ref;
          key = config.key === undefined ? null : '' + config.key;
        }
        self = config.__self === undefined ? null : config.__self;
        source = config.__source === undefined ? null : config.__source;
        // Remaining properties are added to a new props object
        for (propName in config) {
          if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
            props[propName] = config[propName];
          }
        }
      }
    
      // Children can be more than one argument, and those are transferred onto
      // the newly allocated props object.
      var childrenLength = arguments.length - 2;
      if (childrenLength === 1) {
        props.children = children;
      } else if (childrenLength > 1) {
        var childArray = Array(childrenLength);
        for (var i = 0; i < childrenLength; i++) {
          childArray[i] = arguments[i + 2];
        }
        props.children = childArray;
      }
    
      // Resolve default props
      if (type && type.defaultProps) {
        var defaultProps = type.defaultProps;
        for (propName in defaultProps) {
          if (props[propName] === undefined) {
            props[propName] = defaultProps[propName];
          }
        }
      }
      if (process.env.NODE_ENV !== 'production') {
        // Create dummy `key` and `ref` property to `props` to warn users
        // against its use
        if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
          if (!props.hasOwnProperty('key')) {
            Object.defineProperty(props, 'key', {
              get: function () {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  process.env.NODE_ENV !== 'production' ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', typeof type === 'function' && 'displayName' in type ? type.displayName : 'Element') : void 0;
                }
                return undefined;
              },
              configurable: true
            });
          }
          if (!props.hasOwnProperty('ref')) {
            Object.defineProperty(props, 'ref', {
              get: function () {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  process.env.NODE_ENV !== 'production' ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', typeof type === 'function' && 'displayName' in type ? type.displayName : 'Element') : void 0;
                }
                return undefined;
              },
              configurable: true
            });
          }
        }
      }
      return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    };
    
    /**
     * Return a function that produces ReactElements of a given type.
     * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory
     */
    ReactElement.createFactory = function (type) {
      var factory = ReactElement.createElement.bind(null, type);
      // Expose the type on the factory and the prototype so that it can be
      // easily accessed on elements. E.g. `<Foo />.type === Foo`.
      // This should not be named `constructor` since this may not be the function
      // that created the element, and it may not even be a constructor.
      // Legacy hook TODO: Warn if this is accessed
      factory.type = type;
      return factory;
    };
    
    ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
      var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
    
      return newElement;
    };
    
    /**
     * Clone and return a new ReactElement using element as the starting point.
     * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement
     */
    ReactElement.cloneElement = function (element, config, children) {
      var propName;
    
      // Original props are copied
      var props = _assign({}, element.props);
    
      // Reserved names are extracted
      var key = element.key;
      var ref = element.ref;
      // Self is preserved since the owner is preserved.
      var self = element._self;
      // Source is preserved since cloneElement is unlikely to be targeted by a
      // transpiler, and the original source is probably a better indicator of the
      // true owner.
      var source = element._source;
    
      // Owner will be preserved, unless ref is overridden
      var owner = element._owner;
    
      if (config != null) {
        if (process.env.NODE_ENV !== 'production') {
          process.env.NODE_ENV !== 'production' ? warning(
          /* eslint-disable no-proto */
          config.__proto__ == null || config.__proto__ === Object.prototype,
          /* eslint-enable no-proto */
          'React.cloneElement(...): Expected props argument to be a plain object. ' + 'Properties defined in its prototype chain will be ignored.') : void 0;
        }
        if (config.ref !== undefined) {
          // Silently steal the ref from the parent.
          ref = config.ref;
          owner = ReactCurrentOwner.current;
        }
        if (config.key !== undefined) {
          key = '' + config.key;
        }
        // Remaining properties override existing props
        var defaultProps;
        if (element.type && element.type.defaultProps) {
          defaultProps = element.type.defaultProps;
        }
        for (propName in config) {
          if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
            if (config[propName] === undefined && defaultProps !== undefined) {
              // Resolve default props
              props[propName] = defaultProps[propName];
            } else {
              props[propName] = config[propName];
            }
          }
        }
      }
    
      // Children can be more than one argument, and those are transferred onto
      // the newly allocated props object.
      var childrenLength = arguments.length - 2;
      if (childrenLength === 1) {
        props.children = children;
      } else if (childrenLength > 1) {
        var childArray = Array(childrenLength);
        for (var i = 0; i < childrenLength; i++) {
          childArray[i] = arguments[i + 2];
        }
        props.children = childArray;
      }
    
      return ReactElement(element.type, key, ref, self, source, owner, props);
    };
    
    /**
     * Verifies the object is a ReactElement.
     * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement
     * @param {?object} object
     * @return {boolean} True if `object` is a valid component.
     * @final
     */
    ReactElement.isValidElement = function (object) {
      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    };
    
    module.exports = ReactElement;
  provide("react/lib/ReactElement", module.exports);
}(global));

// pakmanager:react/lib/getIteratorFn
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  /**
     * Copyright 2013-present, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule getIteratorFn
     */
    
    'use strict';
    
    /* global Symbol */
    
    var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
    
    /**
     * Returns the iterator method function contained on the iterable object.
     *
     * Be sure to invoke the function with the iterable as context:
     *
     *     var iteratorFn = getIteratorFn(myIterable);
     *     if (iteratorFn) {
     *       var iterator = iteratorFn.call(myIterable);
     *       ...
     *     }
     *
     * @param {?object} maybeIterable
     * @return {?function}
     */
    function getIteratorFn(maybeIterable) {
      var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
      if (typeof iteratorFn === 'function') {
        return iteratorFn;
      }
    }
    
    module.exports = getIteratorFn;
  provide("react/lib/getIteratorFn", module.exports);
}(global));

// pakmanager:react/lib/KeyEscapeUtils
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  /**
     * Copyright 2013-present, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule KeyEscapeUtils
     */
    
    'use strict';
    
    /**
     * Escape and wrap key so it is safe to use as a reactid
     *
     * @param {*} key to be escaped.
     * @return {string} the escaped key.
     */
    
    function escape(key) {
      var escapeRegex = /[=:]/g;
      var escaperLookup = {
        '=': '=0',
        ':': '=2'
      };
      var escapedString = ('' + key).replace(escapeRegex, function (match) {
        return escaperLookup[match];
      });
    
      return '$' + escapedString;
    }
    
    /**
     * Unescape and unwrap key for human-readable display
     *
     * @param {string} key to unescape.
     * @return {string} the unescaped key.
     */
    function unescape(key) {
      var unescapeRegex = /(=0|=2)/g;
      var unescaperLookup = {
        '=0': '=',
        '=2': ':'
      };
      var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);
    
      return ('' + keySubstring).replace(unescapeRegex, function (match) {
        return unescaperLookup[match];
      });
    }
    
    var KeyEscapeUtils = {
      escape: escape,
      unescape: unescape
    };
    
    module.exports = KeyEscapeUtils;
  provide("react/lib/KeyEscapeUtils", module.exports);
}(global));

// pakmanager:react/lib/ReactNoopUpdateQueue
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  /**
     * Copyright 2015-present, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactNoopUpdateQueue
     */
    
    'use strict';
    
    var warning = require('fbjs/lib/warning');
    
    function warnTDZ(publicInstance, callerName) {
      if (process.env.NODE_ENV !== 'production') {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor && publicInstance.constructor.displayName || '') : void 0;
      }
    }
    
    /**
     * This is the abstract API for an update queue.
     */
    var ReactNoopUpdateQueue = {
    
      /**
       * Checks whether or not this composite component is mounted.
       * @param {ReactClass} publicInstance The instance we want to test.
       * @return {boolean} True if mounted, false otherwise.
       * @protected
       * @final
       */
      isMounted: function (publicInstance) {
        return false;
      },
    
      /**
       * Enqueue a callback that will be executed after all the pending updates
       * have processed.
       *
       * @param {ReactClass} publicInstance The instance to use as `this` context.
       * @param {?function} callback Called after state is updated.
       * @internal
       */
      enqueueCallback: function (publicInstance, callback) {},
    
      /**
       * Forces an update. This should only be invoked when it is known with
       * certainty that we are **not** in a DOM transaction.
       *
       * You may want to call this when you know that some deeper aspect of the
       * component's state has changed but `setState` was not called.
       *
       * This will not invoke `shouldComponentUpdate`, but it will invoke
       * `componentWillUpdate` and `componentDidUpdate`.
       *
       * @param {ReactClass} publicInstance The instance that should rerender.
       * @internal
       */
      enqueueForceUpdate: function (publicInstance) {
        warnTDZ(publicInstance, 'forceUpdate');
      },
    
      /**
       * Replaces all of the state. Always use this or `setState` to mutate state.
       * You should treat `this.state` as immutable.
       *
       * There is no guarantee that `this.state` will be immediately updated, so
       * accessing `this.state` after calling this method may return the old value.
       *
       * @param {ReactClass} publicInstance The instance that should rerender.
       * @param {object} completeState Next state.
       * @internal
       */
      enqueueReplaceState: function (publicInstance, completeState) {
        warnTDZ(publicInstance, 'replaceState');
      },
    
      /**
       * Sets a subset of the state. This only exists because _pendingState is
       * internal. This provides a merging strategy that is not available to deep
       * properties which is confusing. TODO: Expose pendingState or don't use it
       * during the merge.
       *
       * @param {ReactClass} publicInstance The instance that should rerender.
       * @param {object} partialState Next partial state to be merged with state.
       * @internal
       */
      enqueueSetState: function (publicInstance, partialState) {
        warnTDZ(publicInstance, 'setState');
      }
    };
    
    module.exports = ReactNoopUpdateQueue;
  provide("react/lib/ReactNoopUpdateQueue", module.exports);
}(global));

// pakmanager:react/lib/ReactInstrumentation
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  /**
     * Copyright 2016-present, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactInstrumentation
     */
    
    'use strict';
    
    var ReactDebugTool =  require('react/lib/ReactDebugTool');
    
    module.exports = { debugTool: ReactDebugTool };
  provide("react/lib/ReactInstrumentation", module.exports);
}(global));

// pakmanager:react/lib/ReactPropTypeLocations
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  /**
     * Copyright 2013-present, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactPropTypeLocations
     */
    
    'use strict';
    
    var keyMirror = require('fbjs/lib/keyMirror');
    
    var ReactPropTypeLocations = keyMirror({
      prop: null,
      context: null,
      childContext: null
    });
    
    module.exports = ReactPropTypeLocations;
  provide("react/lib/ReactPropTypeLocations", module.exports);
}(global));

// pakmanager:react/lib/ReactPropTypeLocationNames
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  /**
     * Copyright 2013-present, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactPropTypeLocationNames
     */
    
    'use strict';
    
    var ReactPropTypeLocationNames = {};
    
    if (process.env.NODE_ENV !== 'production') {
      ReactPropTypeLocationNames = {
        prop: 'prop',
        context: 'context',
        childContext: 'child context'
      };
    }
    
    module.exports = ReactPropTypeLocationNames;
  provide("react/lib/ReactPropTypeLocationNames", module.exports);
}(global));

// pakmanager:react/lib/PooledClass
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  /**
     * Copyright 2013-present, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule PooledClass
     */
    
    'use strict';
    
    var invariant = require('fbjs/lib/invariant');
    
    /**
     * Static poolers. Several custom versions for each potential number of
     * arguments. A completely generic pooler is easy to implement, but would
     * require accessing the `arguments` object. In each of these, `this` refers to
     * the Class itself, not an instance. If any others are needed, simply add them
     * here, or in their own files.
     */
    var oneArgumentPooler = function (copyFieldsFrom) {
      var Klass = this;
      if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        Klass.call(instance, copyFieldsFrom);
        return instance;
      } else {
        return new Klass(copyFieldsFrom);
      }
    };
    
    var twoArgumentPooler = function (a1, a2) {
      var Klass = this;
      if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        Klass.call(instance, a1, a2);
        return instance;
      } else {
        return new Klass(a1, a2);
      }
    };
    
    var threeArgumentPooler = function (a1, a2, a3) {
      var Klass = this;
      if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        Klass.call(instance, a1, a2, a3);
        return instance;
      } else {
        return new Klass(a1, a2, a3);
      }
    };
    
    var fourArgumentPooler = function (a1, a2, a3, a4) {
      var Klass = this;
      if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        Klass.call(instance, a1, a2, a3, a4);
        return instance;
      } else {
        return new Klass(a1, a2, a3, a4);
      }
    };
    
    var fiveArgumentPooler = function (a1, a2, a3, a4, a5) {
      var Klass = this;
      if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        Klass.call(instance, a1, a2, a3, a4, a5);
        return instance;
      } else {
        return new Klass(a1, a2, a3, a4, a5);
      }
    };
    
    var standardReleaser = function (instance) {
      var Klass = this;
      !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : invariant(false) : void 0;
      instance.destructor();
      if (Klass.instancePool.length < Klass.poolSize) {
        Klass.instancePool.push(instance);
      }
    };
    
    var DEFAULT_POOL_SIZE = 10;
    var DEFAULT_POOLER = oneArgumentPooler;
    
    /**
     * Augments `CopyConstructor` to be a poolable class, augmenting only the class
     * itself (statically) not adding any prototypical fields. Any CopyConstructor
     * you give this may have a `poolSize` property, and will look for a
     * prototypical `destructor` on instances (optional).
     *
     * @param {Function} CopyConstructor Constructor that can be used to reset.
     * @param {Function} pooler Customizable pooler.
     */
    var addPoolingTo = function (CopyConstructor, pooler) {
      var NewKlass = CopyConstructor;
      NewKlass.instancePool = [];
      NewKlass.getPooled = pooler || DEFAULT_POOLER;
      if (!NewKlass.poolSize) {
        NewKlass.poolSize = DEFAULT_POOL_SIZE;
      }
      NewKlass.release = standardReleaser;
      return NewKlass;
    };
    
    var PooledClass = {
      addPoolingTo: addPoolingTo,
      oneArgumentPooler: oneArgumentPooler,
      twoArgumentPooler: twoArgumentPooler,
      threeArgumentPooler: threeArgumentPooler,
      fourArgumentPooler: fourArgumentPooler,
      fiveArgumentPooler: fiveArgumentPooler
    };
    
    module.exports = PooledClass;
  provide("react/lib/PooledClass", module.exports);
}(global));

// pakmanager:react/lib/traverseAllChildren
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  /**
     * Copyright 2013-present, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule traverseAllChildren
     */
    
    'use strict';
    
    var ReactCurrentOwner =  require('react/lib/ReactCurrentOwner');
    var ReactElement =  require('react/lib/ReactElement');
    
    var getIteratorFn =  require('react/lib/getIteratorFn');
    var invariant = require('fbjs/lib/invariant');
    var KeyEscapeUtils =  require('react/lib/KeyEscapeUtils');
    var warning = require('fbjs/lib/warning');
    
    var SEPARATOR = '.';
    var SUBSEPARATOR = ':';
    
    /**
     * TODO: Test that a single child and an array with one item have the same key
     * pattern.
     */
    
    var didWarnAboutMaps = false;
    
    /**
     * Generate a key string that identifies a component within a set.
     *
     * @param {*} component A component that could contain a manual key.
     * @param {number} index Index that is used if a manual key is not provided.
     * @return {string}
     */
    function getComponentKey(component, index) {
      // Do some typechecking here since we call this blindly. We want to ensure
      // that we don't block potential future ES APIs.
      if (component && typeof component === 'object' && component.key != null) {
        // Explicit key
        return KeyEscapeUtils.escape(component.key);
      }
      // Implicit key determined by the index in the set
      return index.toString(36);
    }
    
    /**
     * @param {?*} children Children tree container.
     * @param {!string} nameSoFar Name of the key path so far.
     * @param {!function} callback Callback to invoke with each child found.
     * @param {?*} traverseContext Used to pass information throughout the traversal
     * process.
     * @return {!number} The number of children in this subtree.
     */
    function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
      var type = typeof children;
    
      if (type === 'undefined' || type === 'boolean') {
        // All of the above are perceived as null.
        children = null;
      }
    
      if (children === null || type === 'string' || type === 'number' || ReactElement.isValidElement(children)) {
        callback(traverseContext, children,
        // If it's the only child, treat the name as if it was wrapped in an array
        // so that it's consistent if the number of children grows.
        nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
        return 1;
      }
    
      var child;
      var nextName;
      var subtreeCount = 0; // Count of children found in the current subtree.
      var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
    
      if (Array.isArray(children)) {
        for (var i = 0; i < children.length; i++) {
          child = children[i];
          nextName = nextNamePrefix + getComponentKey(child, i);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        var iteratorFn = getIteratorFn(children);
        if (iteratorFn) {
          var iterator = iteratorFn.call(children);
          var step;
          if (iteratorFn !== children.entries) {
            var ii = 0;
            while (!(step = iterator.next()).done) {
              child = step.value;
              nextName = nextNamePrefix + getComponentKey(child, ii++);
              subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
            }
          } else {
            if (process.env.NODE_ENV !== 'production') {
              process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.') : void 0;
              didWarnAboutMaps = true;
            }
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                child = entry[1];
                nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
                subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
              }
            }
          }
        } else if (type === 'object') {
          var addendum = '';
          if (process.env.NODE_ENV !== 'production') {
            addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
            if (children._isReactElement) {
              addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
            }
            if (ReactCurrentOwner.current) {
              var name = ReactCurrentOwner.current.getName();
              if (name) {
                addendum += ' Check the render method of `' + name + '`.';
              }
            }
          }
          var childrenString = String(children);
          !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : invariant(false) : void 0;
        }
      }
    
      return subtreeCount;
    }
    
    /**
     * Traverses children that are typically specified as `props.children`, but
     * might also be specified through attributes:
     *
     * - `traverseAllChildren(this.props.children, ...)`
     * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
     *
     * The `traverseContext` is an optional argument that is passed through the
     * entire traversal. It can be used to store accumulations or anything else that
     * the callback might find relevant.
     *
     * @param {?*} children Children tree object.
     * @param {!function} callback To invoke upon traversing each child.
     * @param {?*} traverseContext Context for traversal.
     * @return {!number} The number of children in this subtree.
     */
    function traverseAllChildren(children, callback, traverseContext) {
      if (children == null) {
        return 0;
      }
    
      return traverseAllChildrenImpl(children, '', callback, traverseContext);
    }
    
    module.exports = traverseAllChildren;
  provide("react/lib/traverseAllChildren", module.exports);
}(global));

// pakmanager:react/lib/ReactComponent
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  /**
     * Copyright 2013-present, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactComponent
     */
    
    'use strict';
    
    var ReactNoopUpdateQueue =  require('react/lib/ReactNoopUpdateQueue');
    var ReactInstrumentation =  require('react/lib/ReactInstrumentation');
    
    var canDefineProperty =  require('react/lib/canDefineProperty');
    var emptyObject = require('fbjs/lib/emptyObject');
    var invariant = require('fbjs/lib/invariant');
    var warning = require('fbjs/lib/warning');
    
    /**
     * Base class helpers for the updating state of a component.
     */
    function ReactComponent(props, context, updater) {
      this.props = props;
      this.context = context;
      this.refs = emptyObject;
      // We initialize the default updater but the real one gets injected by the
      // renderer.
      this.updater = updater || ReactNoopUpdateQueue;
    }
    
    ReactComponent.prototype.isReactComponent = {};
    
    /**
     * Sets a subset of the state. Always use this to mutate
     * state. You should treat `this.state` as immutable.
     *
     * There is no guarantee that `this.state` will be immediately updated, so
     * accessing `this.state` after calling this method may return the old value.
     *
     * There is no guarantee that calls to `setState` will run synchronously,
     * as they may eventually be batched together.  You can provide an optional
     * callback that will be executed when the call to setState is actually
     * completed.
     *
     * When a function is provided to setState, it will be called at some point in
     * the future (not synchronously). It will be called with the up to date
     * component arguments (state, props, context). These values can be different
     * from this.* because your function may be called after receiveProps but before
     * shouldComponentUpdate, and this new state, props, and context will not yet be
     * assigned to this.
     *
     * @param {object|function} partialState Next partial state or function to
     *        produce next partial state to be merged with current state.
     * @param {?function} callback Called after state is updated.
     * @final
     * @protected
     */
    ReactComponent.prototype.setState = function (partialState, callback) {
      !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.') : invariant(false) : void 0;
      if (process.env.NODE_ENV !== 'production') {
        ReactInstrumentation.debugTool.onSetState();
        process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : void 0;
      }
      this.updater.enqueueSetState(this, partialState);
      if (callback) {
        this.updater.enqueueCallback(this, callback, 'setState');
      }
    };
    
    /**
     * Forces an update. This should only be invoked when it is known with
     * certainty that we are **not** in a DOM transaction.
     *
     * You may want to call this when you know that some deeper aspect of the
     * component's state has changed but `setState` was not called.
     *
     * This will not invoke `shouldComponentUpdate`, but it will invoke
     * `componentWillUpdate` and `componentDidUpdate`.
     *
     * @param {?function} callback Called after update is complete.
     * @final
     * @protected
     */
    ReactComponent.prototype.forceUpdate = function (callback) {
      this.updater.enqueueForceUpdate(this);
      if (callback) {
        this.updater.enqueueCallback(this, callback, 'forceUpdate');
      }
    };
    
    /**
     * Deprecated APIs. These APIs used to exist on classic React classes but since
     * we would like to deprecate them, we're not going to move them over to this
     * modern base class. Instead, we define a getter that warns if it's accessed.
     */
    if (process.env.NODE_ENV !== 'production') {
      var deprecatedAPIs = {
        isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
        replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
      };
      var defineDeprecationWarning = function (methodName, info) {
        if (canDefineProperty) {
          Object.defineProperty(ReactComponent.prototype, methodName, {
            get: function () {
              process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : void 0;
              return undefined;
            }
          });
        }
      };
      for (var fnName in deprecatedAPIs) {
        if (deprecatedAPIs.hasOwnProperty(fnName)) {
          defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
        }
      }
    }
    
    module.exports = ReactComponent;
  provide("react/lib/ReactComponent", module.exports);
}(global));

// pakmanager:react/lib/ReactElementValidator
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  /**
     * Copyright 2014-present, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactElementValidator
     */
    
    /**
     * ReactElementValidator provides a wrapper around a element factory
     * which validates the props passed to the element. This is intended to be
     * used only in DEV and could be replaced by a static type checker for languages
     * that support it.
     */
    
    'use strict';
    
    var ReactElement =  require('react/lib/ReactElement');
    var ReactPropTypeLocations =  require('react/lib/ReactPropTypeLocations');
    var ReactPropTypeLocationNames =  require('react/lib/ReactPropTypeLocationNames');
    var ReactCurrentOwner =  require('react/lib/ReactCurrentOwner');
    
    var canDefineProperty =  require('react/lib/canDefineProperty');
    var getIteratorFn =  require('react/lib/getIteratorFn');
    var invariant = require('fbjs/lib/invariant');
    var warning = require('fbjs/lib/warning');
    
    function getDeclarationErrorAddendum() {
      if (ReactCurrentOwner.current) {
        var name = ReactCurrentOwner.current.getName();
        if (name) {
          return ' Check the render method of `' + name + '`.';
        }
      }
      return '';
    }
    
    /**
     * Warn if there's no key explicitly set on dynamic arrays of children or
     * object keys are not valid. This allows us to keep track of children between
     * updates.
     */
    var ownerHasKeyUseWarning = {};
    
    var loggedTypeFailures = {};
    
    /**
     * Warn if the element doesn't have an explicit key assigned to it.
     * This element is in an array. The array could grow and shrink or be
     * reordered. All children that haven't already been validated are required to
     * have a "key" property assigned to it.
     *
     * @internal
     * @param {ReactElement} element Element that requires a key.
     * @param {*} parentType element's parent's type.
     */
    function validateExplicitKey(element, parentType) {
      if (!element._store || element._store.validated || element.key != null) {
        return;
      }
      element._store.validated = true;
    
      var addenda = getAddendaForKeyUse('uniqueKey', element, parentType);
      if (addenda === null) {
        // we already showed the warning
        return;
      }
      process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s%s', addenda.parentOrOwner || '', addenda.childOwner || '', addenda.url || '') : void 0;
    }
    
    /**
     * Shared warning and monitoring code for the key warnings.
     *
     * @internal
     * @param {string} messageType A key used for de-duping warnings.
     * @param {ReactElement} element Component that requires a key.
     * @param {*} parentType element's parent's type.
     * @returns {?object} A set of addenda to use in the warning message, or null
     * if the warning has already been shown before (and shouldn't be shown again).
     */
    function getAddendaForKeyUse(messageType, element, parentType) {
      var addendum = getDeclarationErrorAddendum();
      if (!addendum) {
        var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
        if (parentName) {
          addendum = ' Check the top-level render call using <' + parentName + '>.';
        }
      }
    
      var memoizer = ownerHasKeyUseWarning[messageType] || (ownerHasKeyUseWarning[messageType] = {});
      if (memoizer[addendum]) {
        return null;
      }
      memoizer[addendum] = true;
    
      var addenda = {
        parentOrOwner: addendum,
        url: ' See https://fb.me/react-warning-keys for more information.',
        childOwner: null
      };
    
      // Usually the current owner is the offender, but if it accepts children as a
      // property, it may be the creator of the child that's responsible for
      // assigning it a key.
      if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
        // Give the component that originally created this child.
        addenda.childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
      }
    
      return addenda;
    }
    
    /**
     * Ensure that every element either is passed in a static location, in an
     * array with an explicit keys property defined, or in an object literal
     * with valid key property.
     *
     * @internal
     * @param {ReactNode} node Statically passed child of any type.
     * @param {*} parentType node's parent's type.
     */
    function validateChildKeys(node, parentType) {
      if (typeof node !== 'object') {
        return;
      }
      if (Array.isArray(node)) {
        for (var i = 0; i < node.length; i++) {
          var child = node[i];
          if (ReactElement.isValidElement(child)) {
            validateExplicitKey(child, parentType);
          }
        }
      } else if (ReactElement.isValidElement(node)) {
        // This element was passed in a valid location.
        if (node._store) {
          node._store.validated = true;
        }
      } else if (node) {
        var iteratorFn = getIteratorFn(node);
        // Entry iterators provide implicit keys.
        if (iteratorFn) {
          if (iteratorFn !== node.entries) {
            var iterator = iteratorFn.call(node);
            var step;
            while (!(step = iterator.next()).done) {
              if (ReactElement.isValidElement(step.value)) {
                validateExplicitKey(step.value, parentType);
              }
            }
          }
        }
      }
    }
    
    /**
     * Assert that the props are valid
     *
     * @param {string} componentName Name of the component for error messages.
     * @param {object} propTypes Map of prop name to a ReactPropType
     * @param {object} props
     * @param {string} location e.g. "prop", "context", "child context"
     * @private
     */
    function checkPropTypes(componentName, propTypes, props, location) {
      for (var propName in propTypes) {
        if (propTypes.hasOwnProperty(propName)) {
          var error;
          // Prop type validation may throw. In case they do, we don't want to
          // fail the render phase where it didn't fail before. So we log it.
          // After these have been cleaned up, we'll let them throw.
          try {
            // This is intentionally an invariant that gets caught. It's the same
            // behavior as without this statement except with a better message.
            !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : void 0;
            error = propTypes[propName](props, propName, componentName, location);
          } catch (ex) {
            error = ex;
          }
          process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], propName, typeof error) : void 0;
          if (error instanceof Error && !(error.message in loggedTypeFailures)) {
            // Only monitor this failure once because there tends to be a lot of the
            // same error.
            loggedTypeFailures[error.message] = true;
    
            var addendum = getDeclarationErrorAddendum();
            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed propType: %s%s', error.message, addendum) : void 0;
          }
        }
      }
    }
    
    /**
     * Given an element, validate that its props follow the propTypes definition,
     * provided by the type.
     *
     * @param {ReactElement} element
     */
    function validatePropTypes(element) {
      var componentClass = element.type;
      if (typeof componentClass !== 'function') {
        return;
      }
      var name = componentClass.displayName || componentClass.name;
      if (componentClass.propTypes) {
        checkPropTypes(name, componentClass.propTypes, element.props, ReactPropTypeLocations.prop);
      }
      if (typeof componentClass.getDefaultProps === 'function') {
        process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
      }
    }
    
    var ReactElementValidator = {
    
      createElement: function (type, props, children) {
        var validType = typeof type === 'string' || typeof type === 'function';
        // We warn in this case but don't throw. We expect the element creation to
        // succeed and there will likely be errors in render.
        process.env.NODE_ENV !== 'production' ? warning(validType, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : void 0;
    
        var element = ReactElement.createElement.apply(this, arguments);
    
        // The result can be nullish if a mock or a custom function is used.
        // TODO: Drop this when these are no longer allowed as the type argument.
        if (element == null) {
          return element;
        }
    
        // Skip key warning if the type isn't valid since our key validation logic
        // doesn't expect a non-string/function type and can throw confusing errors.
        // We don't want exception behavior to differ between dev and prod.
        // (Rendering will throw with a helpful message and as soon as the type is
        // fixed, the key warnings will appear.)
        if (validType) {
          for (var i = 2; i < arguments.length; i++) {
            validateChildKeys(arguments[i], type);
          }
        }
    
        validatePropTypes(element);
    
        return element;
      },
    
      createFactory: function (type) {
        var validatedFactory = ReactElementValidator.createElement.bind(null, type);
        // Legacy hook TODO: Warn if this is accessed
        validatedFactory.type = type;
    
        if (process.env.NODE_ENV !== 'production') {
          if (canDefineProperty) {
            Object.defineProperty(validatedFactory, 'type', {
              enumerable: false,
              get: function () {
                process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : void 0;
                Object.defineProperty(this, 'type', {
                  value: type
                });
                return type;
              }
            });
          }
        }
    
        return validatedFactory;
      },
    
      cloneElement: function (element, props, children) {
        var newElement = ReactElement.cloneElement.apply(this, arguments);
        for (var i = 2; i < arguments.length; i++) {
          validateChildKeys(arguments[i], newElement.type);
        }
        validatePropTypes(newElement);
        return newElement;
      }
    
    };
    
    module.exports = ReactElementValidator;
  provide("react/lib/ReactElementValidator", module.exports);
}(global));

// pakmanager:react/lib/ReactChildren
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  /**
     * Copyright 2013-present, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactChildren
     */
    
    'use strict';
    
    var PooledClass =  require('react/lib/PooledClass');
    var ReactElement =  require('react/lib/ReactElement');
    
    var emptyFunction = require('fbjs/lib/emptyFunction');
    var traverseAllChildren =  require('react/lib/traverseAllChildren');
    
    var twoArgumentPooler = PooledClass.twoArgumentPooler;
    var fourArgumentPooler = PooledClass.fourArgumentPooler;
    
    var userProvidedKeyEscapeRegex = /\/+/g;
    function escapeUserProvidedKey(text) {
      return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
    }
    
    /**
     * PooledClass representing the bookkeeping associated with performing a child
     * traversal. Allows avoiding binding callbacks.
     *
     * @constructor ForEachBookKeeping
     * @param {!function} forEachFunction Function to perform traversal with.
     * @param {?*} forEachContext Context to perform context with.
     */
    function ForEachBookKeeping(forEachFunction, forEachContext) {
      this.func = forEachFunction;
      this.context = forEachContext;
      this.count = 0;
    }
    ForEachBookKeeping.prototype.destructor = function () {
      this.func = null;
      this.context = null;
      this.count = 0;
    };
    PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);
    
    function forEachSingleChild(bookKeeping, child, name) {
      var func = bookKeeping.func;
      var context = bookKeeping.context;
    
      func.call(context, child, bookKeeping.count++);
    }
    
    /**
     * Iterates through children that are typically specified as `props.children`.
     *
     * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach
     *
     * The provided forEachFunc(child, index) will be called for each
     * leaf child.
     *
     * @param {?*} children Children tree container.
     * @param {function(*, int)} forEachFunc
     * @param {*} forEachContext Context for forEachContext.
     */
    function forEachChildren(children, forEachFunc, forEachContext) {
      if (children == null) {
        return children;
      }
      var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
      traverseAllChildren(children, forEachSingleChild, traverseContext);
      ForEachBookKeeping.release(traverseContext);
    }
    
    /**
     * PooledClass representing the bookkeeping associated with performing a child
     * mapping. Allows avoiding binding callbacks.
     *
     * @constructor MapBookKeeping
     * @param {!*} mapResult Object containing the ordered map of results.
     * @param {!function} mapFunction Function to perform mapping with.
     * @param {?*} mapContext Context to perform mapping with.
     */
    function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
      this.result = mapResult;
      this.keyPrefix = keyPrefix;
      this.func = mapFunction;
      this.context = mapContext;
      this.count = 0;
    }
    MapBookKeeping.prototype.destructor = function () {
      this.result = null;
      this.keyPrefix = null;
      this.func = null;
      this.context = null;
      this.count = 0;
    };
    PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);
    
    function mapSingleChildIntoContext(bookKeeping, child, childKey) {
      var result = bookKeeping.result;
      var keyPrefix = bookKeeping.keyPrefix;
      var func = bookKeeping.func;
      var context = bookKeeping.context;
    
    
      var mappedChild = func.call(context, child, bookKeeping.count++);
      if (Array.isArray(mappedChild)) {
        mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
      } else if (mappedChild != null) {
        if (ReactElement.isValidElement(mappedChild)) {
          mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
          // Keep both the (mapped) and old keys if they differ, just as
          // traverseAllChildren used to do for objects as children
          keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
        }
        result.push(mappedChild);
      }
    }
    
    function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
      var escapedPrefix = '';
      if (prefix != null) {
        escapedPrefix = escapeUserProvidedKey(prefix) + '/';
      }
      var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
      traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
      MapBookKeeping.release(traverseContext);
    }
    
    /**
     * Maps children that are typically specified as `props.children`.
     *
     * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map
     *
     * The provided mapFunction(child, key, index) will be called for each
     * leaf child.
     *
     * @param {?*} children Children tree container.
     * @param {function(*, int)} func The map function.
     * @param {*} context Context for mapFunction.
     * @return {object} Object containing the ordered map of results.
     */
    function mapChildren(children, func, context) {
      if (children == null) {
        return children;
      }
      var result = [];
      mapIntoWithKeyPrefixInternal(children, result, null, func, context);
      return result;
    }
    
    function forEachSingleChildDummy(traverseContext, child, name) {
      return null;
    }
    
    /**
     * Count the number of children that are typically specified as
     * `props.children`.
     *
     * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count
     *
     * @param {?*} children Children tree container.
     * @return {number} The number of children.
     */
    function countChildren(children, context) {
      return traverseAllChildren(children, forEachSingleChildDummy, null);
    }
    
    /**
     * Flatten a children object (typically specified as `props.children`) and
     * return an array with appropriately re-keyed children.
     *
     * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray
     */
    function toArray(children) {
      var result = [];
      mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
      return result;
    }
    
    var ReactChildren = {
      forEach: forEachChildren,
      map: mapChildren,
      mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
      count: countChildren,
      toArray: toArray
    };
    
    module.exports = ReactChildren;
  provide("react/lib/ReactChildren", module.exports);
}(global));

// pakmanager:react/lib/ReactClass
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  /**
     * Copyright 2013-present, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactClass
     */
    
    'use strict';
    
    var _assign = require('object-assign');
    
    var ReactComponent =  require('react/lib/ReactComponent');
    var ReactElement =  require('react/lib/ReactElement');
    var ReactPropTypeLocations =  require('react/lib/ReactPropTypeLocations');
    var ReactPropTypeLocationNames =  require('react/lib/ReactPropTypeLocationNames');
    var ReactNoopUpdateQueue =  require('react/lib/ReactNoopUpdateQueue');
    
    var emptyObject = require('fbjs/lib/emptyObject');
    var invariant = require('fbjs/lib/invariant');
    var keyMirror = require('fbjs/lib/keyMirror');
    var keyOf = require('fbjs/lib/keyOf');
    var warning = require('fbjs/lib/warning');
    
    var MIXINS_KEY = keyOf({ mixins: null });
    
    /**
     * Policies that describe methods in `ReactClassInterface`.
     */
    var SpecPolicy = keyMirror({
      /**
       * These methods may be defined only once by the class specification or mixin.
       */
      DEFINE_ONCE: null,
      /**
       * These methods may be defined by both the class specification and mixins.
       * Subsequent definitions will be chained. These methods must return void.
       */
      DEFINE_MANY: null,
      /**
       * These methods are overriding the base class.
       */
      OVERRIDE_BASE: null,
      /**
       * These methods are similar to DEFINE_MANY, except we assume they return
       * objects. We try to merge the keys of the return values of all the mixed in
       * functions. If there is a key conflict we throw.
       */
      DEFINE_MANY_MERGED: null
    });
    
    var injectedMixins = [];
    
    /**
     * Composite components are higher-level components that compose other composite
     * or native components.
     *
     * To create a new type of `ReactClass`, pass a specification of
     * your new class to `React.createClass`. The only requirement of your class
     * specification is that you implement a `render` method.
     *
     *   var MyComponent = React.createClass({
     *     render: function() {
     *       return <div>Hello World</div>;
     *     }
     *   });
     *
     * The class specification supports a specific protocol of methods that have
     * special meaning (e.g. `render`). See `ReactClassInterface` for
     * more the comprehensive protocol. Any other properties and methods in the
     * class specification will be available on the prototype.
     *
     * @interface ReactClassInterface
     * @internal
     */
    var ReactClassInterface = {
    
      /**
       * An array of Mixin objects to include when defining your component.
       *
       * @type {array}
       * @optional
       */
      mixins: SpecPolicy.DEFINE_MANY,
    
      /**
       * An object containing properties and methods that should be defined on
       * the component's constructor instead of its prototype (static methods).
       *
       * @type {object}
       * @optional
       */
      statics: SpecPolicy.DEFINE_MANY,
    
      /**
       * Definition of prop types for this component.
       *
       * @type {object}
       * @optional
       */
      propTypes: SpecPolicy.DEFINE_MANY,
    
      /**
       * Definition of context types for this component.
       *
       * @type {object}
       * @optional
       */
      contextTypes: SpecPolicy.DEFINE_MANY,
    
      /**
       * Definition of context types this component sets for its children.
       *
       * @type {object}
       * @optional
       */
      childContextTypes: SpecPolicy.DEFINE_MANY,
    
      // ==== Definition methods ====
    
      /**
       * Invoked when the component is mounted. Values in the mapping will be set on
       * `this.props` if that prop is not specified (i.e. using an `in` check).
       *
       * This method is invoked before `getInitialState` and therefore cannot rely
       * on `this.state` or use `this.setState`.
       *
       * @return {object}
       * @optional
       */
      getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,
    
      /**
       * Invoked once before the component is mounted. The return value will be used
       * as the initial value of `this.state`.
       *
       *   getInitialState: function() {
       *     return {
       *       isOn: false,
       *       fooBaz: new BazFoo()
       *     }
       *   }
       *
       * @return {object}
       * @optional
       */
      getInitialState: SpecPolicy.DEFINE_MANY_MERGED,
    
      /**
       * @return {object}
       * @optional
       */
      getChildContext: SpecPolicy.DEFINE_MANY_MERGED,
    
      /**
       * Uses props from `this.props` and state from `this.state` to render the
       * structure of the component.
       *
       * No guarantees are made about when or how often this method is invoked, so
       * it must not have side effects.
       *
       *   render: function() {
       *     var name = this.props.name;
       *     return <div>Hello, {name}!</div>;
       *   }
       *
       * @return {ReactComponent}
       * @nosideeffects
       * @required
       */
      render: SpecPolicy.DEFINE_ONCE,
    
      // ==== Delegate methods ====
    
      /**
       * Invoked when the component is initially created and about to be mounted.
       * This may have side effects, but any external subscriptions or data created
       * by this method must be cleaned up in `componentWillUnmount`.
       *
       * @optional
       */
      componentWillMount: SpecPolicy.DEFINE_MANY,
    
      /**
       * Invoked when the component has been mounted and has a DOM representation.
       * However, there is no guarantee that the DOM node is in the document.
       *
       * Use this as an opportunity to operate on the DOM when the component has
       * been mounted (initialized and rendered) for the first time.
       *
       * @param {DOMElement} rootNode DOM element representing the component.
       * @optional
       */
      componentDidMount: SpecPolicy.DEFINE_MANY,
    
      /**
       * Invoked before the component receives new props.
       *
       * Use this as an opportunity to react to a prop transition by updating the
       * state using `this.setState`. Current props are accessed via `this.props`.
       *
       *   componentWillReceiveProps: function(nextProps, nextContext) {
       *     this.setState({
       *       likesIncreasing: nextProps.likeCount > this.props.likeCount
       *     });
       *   }
       *
       * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
       * transition may cause a state change, but the opposite is not true. If you
       * need it, you are probably looking for `componentWillUpdate`.
       *
       * @param {object} nextProps
       * @optional
       */
      componentWillReceiveProps: SpecPolicy.DEFINE_MANY,
    
      /**
       * Invoked while deciding if the component should be updated as a result of
       * receiving new props, state and/or context.
       *
       * Use this as an opportunity to `return false` when you're certain that the
       * transition to the new props/state/context will not require a component
       * update.
       *
       *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
       *     return !equal(nextProps, this.props) ||
       *       !equal(nextState, this.state) ||
       *       !equal(nextContext, this.context);
       *   }
       *
       * @param {object} nextProps
       * @param {?object} nextState
       * @param {?object} nextContext
       * @return {boolean} True if the component should update.
       * @optional
       */
      shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,
    
      /**
       * Invoked when the component is about to update due to a transition from
       * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
       * and `nextContext`.
       *
       * Use this as an opportunity to perform preparation before an update occurs.
       *
       * NOTE: You **cannot** use `this.setState()` in this method.
       *
       * @param {object} nextProps
       * @param {?object} nextState
       * @param {?object} nextContext
       * @param {ReactReconcileTransaction} transaction
       * @optional
       */
      componentWillUpdate: SpecPolicy.DEFINE_MANY,
    
      /**
       * Invoked when the component's DOM representation has been updated.
       *
       * Use this as an opportunity to operate on the DOM when the component has
       * been updated.
       *
       * @param {object} prevProps
       * @param {?object} prevState
       * @param {?object} prevContext
       * @param {DOMElement} rootNode DOM element representing the component.
       * @optional
       */
      componentDidUpdate: SpecPolicy.DEFINE_MANY,
    
      /**
       * Invoked when the component is about to be removed from its parent and have
       * its DOM representation destroyed.
       *
       * Use this as an opportunity to deallocate any external resources.
       *
       * NOTE: There is no `componentDidUnmount` since your component will have been
       * destroyed by that point.
       *
       * @optional
       */
      componentWillUnmount: SpecPolicy.DEFINE_MANY,
    
      // ==== Advanced methods ====
    
      /**
       * Updates the component's currently mounted DOM representation.
       *
       * By default, this implements React's rendering and reconciliation algorithm.
       * Sophisticated clients may wish to override this.
       *
       * @param {ReactReconcileTransaction} transaction
       * @internal
       * @overridable
       */
      updateComponent: SpecPolicy.OVERRIDE_BASE
    
    };
    
    /**
     * Mapping from class specification keys to special processing functions.
     *
     * Although these are declared like instance properties in the specification
     * when defining classes using `React.createClass`, they are actually static
     * and are accessible on the constructor instead of the prototype. Despite
     * being static, they must be defined outside of the "statics" key under
     * which all other static methods are defined.
     */
    var RESERVED_SPEC_KEYS = {
      displayName: function (Constructor, displayName) {
        Constructor.displayName = displayName;
      },
      mixins: function (Constructor, mixins) {
        if (mixins) {
          for (var i = 0; i < mixins.length; i++) {
            mixSpecIntoComponent(Constructor, mixins[i]);
          }
        }
      },
      childContextTypes: function (Constructor, childContextTypes) {
        if (process.env.NODE_ENV !== 'production') {
          validateTypeDef(Constructor, childContextTypes, ReactPropTypeLocations.childContext);
        }
        Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, childContextTypes);
      },
      contextTypes: function (Constructor, contextTypes) {
        if (process.env.NODE_ENV !== 'production') {
          validateTypeDef(Constructor, contextTypes, ReactPropTypeLocations.context);
        }
        Constructor.contextTypes = _assign({}, Constructor.contextTypes, contextTypes);
      },
      /**
       * Special case getDefaultProps which should move into statics but requires
       * automatic merging.
       */
      getDefaultProps: function (Constructor, getDefaultProps) {
        if (Constructor.getDefaultProps) {
          Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
        } else {
          Constructor.getDefaultProps = getDefaultProps;
        }
      },
      propTypes: function (Constructor, propTypes) {
        if (process.env.NODE_ENV !== 'production') {
          validateTypeDef(Constructor, propTypes, ReactPropTypeLocations.prop);
        }
        Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);
      },
      statics: function (Constructor, statics) {
        mixStaticSpecIntoComponent(Constructor, statics);
      },
      autobind: function () {} };
    
    // noop
    function validateTypeDef(Constructor, typeDef, location) {
      for (var propName in typeDef) {
        if (typeDef.hasOwnProperty(propName)) {
          // use a warning instead of an invariant so components
          // don't show up in prod but only in __DEV__
          process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : void 0;
        }
      }
    }
    
    function validateMethodOverride(isAlreadyDefined, name) {
      var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;
    
      // Disallow overriding of base class methods unless explicitly allowed.
      if (ReactClassMixin.hasOwnProperty(name)) {
        !(specPolicy === SpecPolicy.OVERRIDE_BASE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name) : invariant(false) : void 0;
      }
    
      // Disallow defining methods more than once unless explicitly allowed.
      if (isAlreadyDefined) {
        !(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name) : invariant(false) : void 0;
      }
    }
    
    /**
     * Mixin helper which handles policy validation and reserved
     * specification keys when building React classes.
     */
    function mixSpecIntoComponent(Constructor, spec) {
      if (!spec) {
        return;
      }
    
      !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component class or function as a mixin. Instead, just use a ' + 'regular object.') : invariant(false) : void 0;
      !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component as a mixin. Instead, just use a regular object.') : invariant(false) : void 0;
    
      var proto = Constructor.prototype;
      var autoBindPairs = proto.__reactAutoBindPairs;
    
      // By handling mixins before any other properties, we ensure the same
      // chaining order is applied to methods with DEFINE_MANY policy, whether
      // mixins are listed before or after these methods in the spec.
      if (spec.hasOwnProperty(MIXINS_KEY)) {
        RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
      }
    
      for (var name in spec) {
        if (!spec.hasOwnProperty(name)) {
          continue;
        }
    
        if (name === MIXINS_KEY) {
          // We have already handled mixins in a special case above.
          continue;
        }
    
        var property = spec[name];
        var isAlreadyDefined = proto.hasOwnProperty(name);
        validateMethodOverride(isAlreadyDefined, name);
    
        if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
          RESERVED_SPEC_KEYS[name](Constructor, property);
        } else {
          // Setup methods on prototype:
          // The following member methods should not be automatically bound:
          // 1. Expected ReactClass methods (in the "interface").
          // 2. Overridden methods (that were mixed in).
          var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
          var isFunction = typeof property === 'function';
          var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;
    
          if (shouldAutoBind) {
            autoBindPairs.push(name, property);
            proto[name] = property;
          } else {
            if (isAlreadyDefined) {
              var specPolicy = ReactClassInterface[name];
    
              // These cases should already be caught by validateMethodOverride.
              !(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name) : invariant(false) : void 0;
    
              // For methods which are defined more than once, call the existing
              // methods before calling the new property, merging if appropriate.
              if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
                proto[name] = createMergedResultFunction(proto[name], property);
              } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
                proto[name] = createChainedFunction(proto[name], property);
              }
            } else {
              proto[name] = property;
              if (process.env.NODE_ENV !== 'production') {
                // Add verbose displayName to the function, which helps when looking
                // at profiling tools.
                if (typeof property === 'function' && spec.displayName) {
                  proto[name].displayName = spec.displayName + '_' + name;
                }
              }
            }
          }
        }
      }
    }
    
    function mixStaticSpecIntoComponent(Constructor, statics) {
      if (!statics) {
        return;
      }
      for (var name in statics) {
        var property = statics[name];
        if (!statics.hasOwnProperty(name)) {
          continue;
        }
    
        var isReserved = name in RESERVED_SPEC_KEYS;
        !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name) : invariant(false) : void 0;
    
        var isInherited = name in Constructor;
        !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name) : invariant(false) : void 0;
        Constructor[name] = property;
      }
    }
    
    /**
     * Merge two objects, but throw if both contain the same key.
     *
     * @param {object} one The first object, which is mutated.
     * @param {object} two The second object
     * @return {object} one after it has been mutated to contain everything in two.
     */
    function mergeIntoWithNoDuplicateKeys(one, two) {
      !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : invariant(false) : void 0;
    
      for (var key in two) {
        if (two.hasOwnProperty(key)) {
          !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key) : invariant(false) : void 0;
          one[key] = two[key];
        }
      }
      return one;
    }
    
    /**
     * Creates a function that invokes two functions and merges their return values.
     *
     * @param {function} one Function to invoke first.
     * @param {function} two Function to invoke second.
     * @return {function} Function that invokes the two argument functions.
     * @private
     */
    function createMergedResultFunction(one, two) {
      return function mergedResult() {
        var a = one.apply(this, arguments);
        var b = two.apply(this, arguments);
        if (a == null) {
          return b;
        } else if (b == null) {
          return a;
        }
        var c = {};
        mergeIntoWithNoDuplicateKeys(c, a);
        mergeIntoWithNoDuplicateKeys(c, b);
        return c;
      };
    }
    
    /**
     * Creates a function that invokes two functions and ignores their return vales.
     *
     * @param {function} one Function to invoke first.
     * @param {function} two Function to invoke second.
     * @return {function} Function that invokes the two argument functions.
     * @private
     */
    function createChainedFunction(one, two) {
      return function chainedFunction() {
        one.apply(this, arguments);
        two.apply(this, arguments);
      };
    }
    
    /**
     * Binds a method to the component.
     *
     * @param {object} component Component whose method is going to be bound.
     * @param {function} method Method to be bound.
     * @return {function} The bound method.
     */
    function bindAutoBindMethod(component, method) {
      var boundMethod = method.bind(component);
      if (process.env.NODE_ENV !== 'production') {
        boundMethod.__reactBoundContext = component;
        boundMethod.__reactBoundMethod = method;
        boundMethod.__reactBoundArguments = null;
        var componentName = component.constructor.displayName;
        var _bind = boundMethod.bind;
        boundMethod.bind = function (newThis) {
          for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
    
          // User is trying to bind() an autobound method; we effectively will
          // ignore the value of "this" that the user is trying to use, so
          // let's warn.
          if (newThis !== component && newThis !== null) {
            process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : void 0;
          } else if (!args.length) {
            process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : void 0;
            return boundMethod;
          }
          var reboundMethod = _bind.apply(boundMethod, arguments);
          reboundMethod.__reactBoundContext = component;
          reboundMethod.__reactBoundMethod = method;
          reboundMethod.__reactBoundArguments = args;
          return reboundMethod;
        };
      }
      return boundMethod;
    }
    
    /**
     * Binds all auto-bound methods in a component.
     *
     * @param {object} component Component whose method is going to be bound.
     */
    function bindAutoBindMethods(component) {
      var pairs = component.__reactAutoBindPairs;
      for (var i = 0; i < pairs.length; i += 2) {
        var autoBindKey = pairs[i];
        var method = pairs[i + 1];
        component[autoBindKey] = bindAutoBindMethod(component, method);
      }
    }
    
    /**
     * Add more to the ReactClass base class. These are all legacy features and
     * therefore not already part of the modern ReactComponent.
     */
    var ReactClassMixin = {
    
      /**
       * TODO: This will be deprecated because state should always keep a consistent
       * type signature and the only use case for this, is to avoid that.
       */
      replaceState: function (newState, callback) {
        this.updater.enqueueReplaceState(this, newState);
        if (callback) {
          this.updater.enqueueCallback(this, callback, 'replaceState');
        }
      },
    
      /**
       * Checks whether or not this composite component is mounted.
       * @return {boolean} True if mounted, false otherwise.
       * @protected
       * @final
       */
      isMounted: function () {
        return this.updater.isMounted(this);
      }
    };
    
    var ReactClassComponent = function () {};
    _assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);
    
    /**
     * Module for creating composite components.
     *
     * @class ReactClass
     */
    var ReactClass = {
    
      /**
       * Creates a composite component class given a class specification.
       * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
       *
       * @param {object} spec Class specification (which must define `render`).
       * @return {function} Component constructor function.
       * @public
       */
      createClass: function (spec) {
        var Constructor = function (props, context, updater) {
          // This constructor gets overridden by mocks. The argument is used
          // by mocks to assert on what gets mounted.
    
          if (process.env.NODE_ENV !== 'production') {
            process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
          }
    
          // Wire up auto-binding
          if (this.__reactAutoBindPairs.length) {
            bindAutoBindMethods(this);
          }
    
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
    
          this.state = null;
    
          // ReactClasses doesn't have constructors. Instead, they use the
          // getInitialState and componentWillMount methods for initialization.
    
          var initialState = this.getInitialState ? this.getInitialState() : null;
          if (process.env.NODE_ENV !== 'production') {
            // We allow auto-mocks to proceed as if they're returning null.
            if (initialState === undefined && this.getInitialState._isMockFunction) {
              // This is probably bad practice. Consider warning here and
              // deprecating this convenience.
              initialState = null;
            }
          }
          !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : invariant(false) : void 0;
    
          this.state = initialState;
        };
        Constructor.prototype = new ReactClassComponent();
        Constructor.prototype.constructor = Constructor;
        Constructor.prototype.__reactAutoBindPairs = [];
    
        injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));
    
        mixSpecIntoComponent(Constructor, spec);
    
        // Initialize the defaultProps property after all mixins have been merged.
        if (Constructor.getDefaultProps) {
          Constructor.defaultProps = Constructor.getDefaultProps();
        }
    
        if (process.env.NODE_ENV !== 'production') {
          // This is a tag to indicate that the use of these method names is ok,
          // since it's used with createClass. If it's not, then it's likely a
          // mistake so we'll warn you to use the static property, property
          // initializer or constructor respectively.
          if (Constructor.getDefaultProps) {
            Constructor.getDefaultProps.isReactClassApproved = {};
          }
          if (Constructor.prototype.getInitialState) {
            Constructor.prototype.getInitialState.isReactClassApproved = {};
          }
        }
    
        !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : invariant(false) : void 0;
    
        if (process.env.NODE_ENV !== 'production') {
          process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : void 0;
          process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : void 0;
        }
    
        // Reduce time spent doing lookups by setting these on the prototype.
        for (var methodName in ReactClassInterface) {
          if (!Constructor.prototype[methodName]) {
            Constructor.prototype[methodName] = null;
          }
        }
    
        return Constructor;
      },
    
      injection: {
        injectMixin: function (mixin) {
          injectedMixins.push(mixin);
        }
      }
    
    };
    
    module.exports = ReactClass;
  provide("react/lib/ReactClass", module.exports);
}(global));

// pakmanager:react/lib/ReactDOMFactories
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  /**
     * Copyright 2013-present, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactDOMFactories
     */
    
    'use strict';
    
    var ReactElement =  require('react/lib/ReactElement');
    var ReactElementValidator =  require('react/lib/ReactElementValidator');
    
    var mapObject = require('fbjs/lib/mapObject');
    
    /**
     * Create a factory that creates HTML tag elements.
     *
     * @param {string} tag Tag name (e.g. `div`).
     * @private
     */
    function createDOMFactory(tag) {
      if (process.env.NODE_ENV !== 'production') {
        return ReactElementValidator.createFactory(tag);
      }
      return ReactElement.createFactory(tag);
    }
    
    /**
     * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
     * This is also accessible via `React.DOM`.
     *
     * @public
     */
    var ReactDOMFactories = mapObject({
      a: 'a',
      abbr: 'abbr',
      address: 'address',
      area: 'area',
      article: 'article',
      aside: 'aside',
      audio: 'audio',
      b: 'b',
      base: 'base',
      bdi: 'bdi',
      bdo: 'bdo',
      big: 'big',
      blockquote: 'blockquote',
      body: 'body',
      br: 'br',
      button: 'button',
      canvas: 'canvas',
      caption: 'caption',
      cite: 'cite',
      code: 'code',
      col: 'col',
      colgroup: 'colgroup',
      data: 'data',
      datalist: 'datalist',
      dd: 'dd',
      del: 'del',
      details: 'details',
      dfn: 'dfn',
      dialog: 'dialog',
      div: 'div',
      dl: 'dl',
      dt: 'dt',
      em: 'em',
      embed: 'embed',
      fieldset: 'fieldset',
      figcaption: 'figcaption',
      figure: 'figure',
      footer: 'footer',
      form: 'form',
      h1: 'h1',
      h2: 'h2',
      h3: 'h3',
      h4: 'h4',
      h5: 'h5',
      h6: 'h6',
      head: 'head',
      header: 'header',
      hgroup: 'hgroup',
      hr: 'hr',
      html: 'html',
      i: 'i',
      iframe: 'iframe',
      img: 'img',
      input: 'input',
      ins: 'ins',
      kbd: 'kbd',
      keygen: 'keygen',
      label: 'label',
      legend: 'legend',
      li: 'li',
      link: 'link',
      main: 'main',
      map: 'map',
      mark: 'mark',
      menu: 'menu',
      menuitem: 'menuitem',
      meta: 'meta',
      meter: 'meter',
      nav: 'nav',
      noscript: 'noscript',
      object: 'object',
      ol: 'ol',
      optgroup: 'optgroup',
      option: 'option',
      output: 'output',
      p: 'p',
      param: 'param',
      picture: 'picture',
      pre: 'pre',
      progress: 'progress',
      q: 'q',
      rp: 'rp',
      rt: 'rt',
      ruby: 'ruby',
      s: 's',
      samp: 'samp',
      script: 'script',
      section: 'section',
      select: 'select',
      small: 'small',
      source: 'source',
      span: 'span',
      strong: 'strong',
      style: 'style',
      sub: 'sub',
      summary: 'summary',
      sup: 'sup',
      table: 'table',
      tbody: 'tbody',
      td: 'td',
      textarea: 'textarea',
      tfoot: 'tfoot',
      th: 'th',
      thead: 'thead',
      time: 'time',
      title: 'title',
      tr: 'tr',
      track: 'track',
      u: 'u',
      ul: 'ul',
      'var': 'var',
      video: 'video',
      wbr: 'wbr',
    
      // SVG
      circle: 'circle',
      clipPath: 'clipPath',
      defs: 'defs',
      ellipse: 'ellipse',
      g: 'g',
      image: 'image',
      line: 'line',
      linearGradient: 'linearGradient',
      mask: 'mask',
      path: 'path',
      pattern: 'pattern',
      polygon: 'polygon',
      polyline: 'polyline',
      radialGradient: 'radialGradient',
      rect: 'rect',
      stop: 'stop',
      svg: 'svg',
      text: 'text',
      tspan: 'tspan'
    
    }, createDOMFactory);
    
    module.exports = ReactDOMFactories;
  provide("react/lib/ReactDOMFactories", module.exports);
}(global));

// pakmanager:react/lib/ReactPropTypes
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  /**
     * Copyright 2013-present, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactPropTypes
     */
    
    'use strict';
    
    var ReactElement =  require('react/lib/ReactElement');
    var ReactPropTypeLocationNames =  require('react/lib/ReactPropTypeLocationNames');
    
    var emptyFunction = require('fbjs/lib/emptyFunction');
    var getIteratorFn =  require('react/lib/getIteratorFn');
    
    /**
     * Collection of methods that allow declaration and validation of props that are
     * supplied to React components. Example usage:
     *
     *   var Props = require('ReactPropTypes');
     *   var MyArticle = React.createClass({
     *     propTypes: {
     *       // An optional string prop named "description".
     *       description: Props.string,
     *
     *       // A required enum prop named "category".
     *       category: Props.oneOf(['News','Photos']).isRequired,
     *
     *       // A prop named "dialog" that requires an instance of Dialog.
     *       dialog: Props.instanceOf(Dialog).isRequired
     *     },
     *     render: function() { ... }
     *   });
     *
     * A more formal specification of how these methods are used:
     *
     *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
     *   decl := ReactPropTypes.{type}(.isRequired)?
     *
     * Each and every declaration produces a function with the same signature. This
     * allows the creation of custom validation functions. For example:
     *
     *  var MyLink = React.createClass({
     *    propTypes: {
     *      // An optional string or URI prop named "href".
     *      href: function(props, propName, componentName) {
     *        var propValue = props[propName];
     *        if (propValue != null && typeof propValue !== 'string' &&
     *            !(propValue instanceof URI)) {
     *          return new Error(
     *            'Expected a string or an URI for ' + propName + ' in ' +
     *            componentName
     *          );
     *        }
     *      }
     *    },
     *    render: function() {...}
     *  });
     *
     * @internal
     */
    
    var ANONYMOUS = '<<anonymous>>';
    
    var ReactPropTypes = {
      array: createPrimitiveTypeChecker('array'),
      bool: createPrimitiveTypeChecker('boolean'),
      func: createPrimitiveTypeChecker('function'),
      number: createPrimitiveTypeChecker('number'),
      object: createPrimitiveTypeChecker('object'),
      string: createPrimitiveTypeChecker('string'),
    
      any: createAnyTypeChecker(),
      arrayOf: createArrayOfTypeChecker,
      element: createElementTypeChecker(),
      instanceOf: createInstanceTypeChecker,
      node: createNodeChecker(),
      objectOf: createObjectOfTypeChecker,
      oneOf: createEnumTypeChecker,
      oneOfType: createUnionTypeChecker,
      shape: createShapeTypeChecker
    };
    
    /**
     * inlined Object.is polyfill to avoid requiring consumers ship their own
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
     */
    /*eslint-disable no-self-compare*/
    function is(x, y) {
      // SameValue algorithm
      if (x === y) {
        // Steps 1-5, 7-10
        // Steps 6.b-6.e: +0 != -0
        return x !== 0 || 1 / x === 1 / y;
      } else {
        // Step 6.a: NaN == NaN
        return x !== x && y !== y;
      }
    }
    /*eslint-enable no-self-compare*/
    
    function createChainableTypeChecker(validate) {
      function checkType(isRequired, props, propName, componentName, location, propFullName) {
        componentName = componentName || ANONYMOUS;
        propFullName = propFullName || propName;
        if (props[propName] == null) {
          var locationName = ReactPropTypeLocationNames[location];
          if (isRequired) {
            return new Error('Required ' + locationName + ' `' + propFullName + '` was not specified in ' + ('`' + componentName + '`.'));
          }
          return null;
        } else {
          return validate(props, propName, componentName, location, propFullName);
        }
      }
    
      var chainedCheckType = checkType.bind(null, false);
      chainedCheckType.isRequired = checkType.bind(null, true);
    
      return chainedCheckType;
    }
    
    function createPrimitiveTypeChecker(expectedType) {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== expectedType) {
          var locationName = ReactPropTypeLocationNames[location];
          // `propValue` being instance of, say, date/regexp, pass the 'object'
          // check, but we can offer a more precise error message here rather than
          // 'of type `object`'.
          var preciseType = getPreciseType(propValue);
    
          return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    
    function createAnyTypeChecker() {
      return createChainableTypeChecker(emptyFunction.thatReturns(null));
    }
    
    function createArrayOfTypeChecker(typeChecker) {
      function validate(props, propName, componentName, location, propFullName) {
        if (typeof typeChecker !== 'function') {
          return new Error('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
        }
        var propValue = props[propName];
        if (!Array.isArray(propValue)) {
          var locationName = ReactPropTypeLocationNames[location];
          var propType = getPropType(propValue);
          return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
        }
        for (var i = 0; i < propValue.length; i++) {
          var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']');
          if (error instanceof Error) {
            return error;
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    
    function createElementTypeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        if (!ReactElement.isValidElement(props[propName])) {
          var locationName = ReactPropTypeLocationNames[location];
          return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a single ReactElement.'));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    
    function createInstanceTypeChecker(expectedClass) {
      function validate(props, propName, componentName, location, propFullName) {
        if (!(props[propName] instanceof expectedClass)) {
          var locationName = ReactPropTypeLocationNames[location];
          var expectedClassName = expectedClass.name || ANONYMOUS;
          var actualClassName = getClassName(props[propName]);
          return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    
    function createEnumTypeChecker(expectedValues) {
      if (!Array.isArray(expectedValues)) {
        return createChainableTypeChecker(function () {
          return new Error('Invalid argument supplied to oneOf, expected an instance of array.');
        });
      }
    
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        for (var i = 0; i < expectedValues.length; i++) {
          if (is(propValue, expectedValues[i])) {
            return null;
          }
        }
    
        var locationName = ReactPropTypeLocationNames[location];
        var valuesString = JSON.stringify(expectedValues);
        return new Error('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
      }
      return createChainableTypeChecker(validate);
    }
    
    function createObjectOfTypeChecker(typeChecker) {
      function validate(props, propName, componentName, location, propFullName) {
        if (typeof typeChecker !== 'function') {
          return new Error('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
        }
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== 'object') {
          var locationName = ReactPropTypeLocationNames[location];
          return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
        }
        for (var key in propValue) {
          if (propValue.hasOwnProperty(key)) {
            var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key);
            if (error instanceof Error) {
              return error;
            }
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    
    function createUnionTypeChecker(arrayOfTypeCheckers) {
      if (!Array.isArray(arrayOfTypeCheckers)) {
        return createChainableTypeChecker(function () {
          return new Error('Invalid argument supplied to oneOfType, expected an instance of array.');
        });
      }
    
      function validate(props, propName, componentName, location, propFullName) {
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (checker(props, propName, componentName, location, propFullName) == null) {
            return null;
          }
        }
    
        var locationName = ReactPropTypeLocationNames[location];
        return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
      }
      return createChainableTypeChecker(validate);
    }
    
    function createNodeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        if (!isNode(props[propName])) {
          var locationName = ReactPropTypeLocationNames[location];
          return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    
    function createShapeTypeChecker(shapeTypes) {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== 'object') {
          var locationName = ReactPropTypeLocationNames[location];
          return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
        }
        for (var key in shapeTypes) {
          var checker = shapeTypes[key];
          if (!checker) {
            continue;
          }
          var error = checker(propValue, key, componentName, location, propFullName + '.' + key);
          if (error) {
            return error;
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    
    function isNode(propValue) {
      switch (typeof propValue) {
        case 'number':
        case 'string':
        case 'undefined':
          return true;
        case 'boolean':
          return !propValue;
        case 'object':
          if (Array.isArray(propValue)) {
            return propValue.every(isNode);
          }
          if (propValue === null || ReactElement.isValidElement(propValue)) {
            return true;
          }
    
          var iteratorFn = getIteratorFn(propValue);
          if (iteratorFn) {
            var iterator = iteratorFn.call(propValue);
            var step;
            if (iteratorFn !== propValue.entries) {
              while (!(step = iterator.next()).done) {
                if (!isNode(step.value)) {
                  return false;
                }
              }
            } else {
              // Iterator will provide entry [k,v] tuples rather than values.
              while (!(step = iterator.next()).done) {
                var entry = step.value;
                if (entry) {
                  if (!isNode(entry[1])) {
                    return false;
                  }
                }
              }
            }
          } else {
            return false;
          }
    
          return true;
        default:
          return false;
      }
    }
    
    // Equivalent of `typeof` but with special handling for array and regexp.
    function getPropType(propValue) {
      var propType = typeof propValue;
      if (Array.isArray(propValue)) {
        return 'array';
      }
      if (propValue instanceof RegExp) {
        // Old webkits (at least until Android 4.0) return 'function' rather than
        // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
        // passes PropTypes.object.
        return 'object';
      }
      return propType;
    }
    
    // This handles more types than `getPropType`. Only used for error messages.
    // See `createPrimitiveTypeChecker`.
    function getPreciseType(propValue) {
      var propType = getPropType(propValue);
      if (propType === 'object') {
        if (propValue instanceof Date) {
          return 'date';
        } else if (propValue instanceof RegExp) {
          return 'regexp';
        }
      }
      return propType;
    }
    
    // Returns class name of the object, if any.
    function getClassName(propValue) {
      if (!propValue.constructor || !propValue.constructor.name) {
        return ANONYMOUS;
      }
      return propValue.constructor.name;
    }
    
    module.exports = ReactPropTypes;
  provide("react/lib/ReactPropTypes", module.exports);
}(global));

// pakmanager:react/lib/ReactVersion
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  /**
     * Copyright 2013-present, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactVersion
     */
    
    'use strict';
    
    module.exports = '15.1.0';
  provide("react/lib/ReactVersion", module.exports);
}(global));

// pakmanager:react/lib/onlyChild
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  /**
     * Copyright 2013-present, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule onlyChild
     */
    'use strict';
    
    var ReactElement =  require('react/lib/ReactElement');
    
    var invariant = require('fbjs/lib/invariant');
    
    /**
     * Returns the first child in a collection of children and verifies that there
     * is only one child in the collection.
     *
     * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only
     *
     * The current implementation of this function assumes that a single child gets
     * passed without a wrapper, but the purpose of this helper function is to
     * abstract away the particular structure of children.
     *
     * @param {?object} children Child collection structure.
     * @return {ReactElement} The first and only `ReactElement` contained in the
     * structure.
     */
    function onlyChild(children) {
      !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'onlyChild must be passed a children with exactly one child.') : invariant(false) : void 0;
      return children;
    }
    
    module.exports = onlyChild;
  provide("react/lib/onlyChild", module.exports);
}(global));

// pakmanager:react/lib/React
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  /**
     * Copyright 2013-present, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule React
     */
    
    'use strict';
    
    var _assign = require('object-assign');
    
    var ReactChildren =  require('react/lib/ReactChildren');
    var ReactComponent =  require('react/lib/ReactComponent');
    var ReactClass =  require('react/lib/ReactClass');
    var ReactDOMFactories =  require('react/lib/ReactDOMFactories');
    var ReactElement =  require('react/lib/ReactElement');
    var ReactElementValidator =  require('react/lib/ReactElementValidator');
    var ReactPropTypes =  require('react/lib/ReactPropTypes');
    var ReactVersion =  require('react/lib/ReactVersion');
    
    var onlyChild =  require('react/lib/onlyChild');
    var warning = require('fbjs/lib/warning');
    
    var createElement = ReactElement.createElement;
    var createFactory = ReactElement.createFactory;
    var cloneElement = ReactElement.cloneElement;
    
    if (process.env.NODE_ENV !== 'production') {
      createElement = ReactElementValidator.createElement;
      createFactory = ReactElementValidator.createFactory;
      cloneElement = ReactElementValidator.cloneElement;
    }
    
    var __spread = _assign;
    
    if (process.env.NODE_ENV !== 'production') {
      var warned = false;
      __spread = function () {
        process.env.NODE_ENV !== 'production' ? warning(warned, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.') : void 0;
        warned = true;
        return _assign.apply(null, arguments);
      };
    }
    
    var React = {
    
      // Modern
    
      Children: {
        map: ReactChildren.map,
        forEach: ReactChildren.forEach,
        count: ReactChildren.count,
        toArray: ReactChildren.toArray,
        only: onlyChild
      },
    
      Component: ReactComponent,
    
      createElement: createElement,
      cloneElement: cloneElement,
      isValidElement: ReactElement.isValidElement,
    
      // Classic
    
      PropTypes: ReactPropTypes,
      createClass: ReactClass.createClass,
      createFactory: createFactory,
      createMixin: function (mixin) {
        // Currently a noop. Will be used to validate and trace mixins.
        return mixin;
      },
    
      // This looks DOM specific but these are actually isomorphic helpers
      // since they are just generating DOM strings.
      DOM: ReactDOMFactories,
    
      version: ReactVersion,
    
      // Deprecated hook for JSX spread, don't use this for anything.
      __spread: __spread
    };
    
    module.exports = React;
  provide("react/lib/React", module.exports);
}(global));

// pakmanager:react
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    module.exports =  require('react/lib/React');
    
  provide("react", module.exports);
}(global));

// pakmanager:react-router/lib/routerWarning
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    exports.default = routerWarning;
    exports._resetWarned = _resetWarned;
    
    var _warning = require('warning');
    
    var _warning2 = _interopRequireDefault(_warning);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    var warned = {};
    
    function routerWarning(falseToWarn, message) {
      // Only issue deprecation warnings once.
      if (message.indexOf('deprecated') !== -1) {
        if (warned[message]) {
          return;
        }
    
        warned[message] = true;
      }
    
      message = '[react-router] ' + message;
    
      for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        args[_key - 2] = arguments[_key];
      }
    
      _warning2.default.apply(undefined, [falseToWarn, message].concat(args));
    }
    
    function _resetWarned() {
      warned = {};
    }
  provide("react-router/lib/routerWarning", module.exports);
}(global));

// pakmanager:react-router/lib/deprecateObjectProperties
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    exports.canUseMembrane = undefined;
    
    var _routerWarning =  require('react-router/lib/routerWarning');
    
    var _routerWarning2 = _interopRequireDefault(_routerWarning);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    var canUseMembrane = exports.canUseMembrane = false;
    
    // No-op by default.
    var deprecateObjectProperties = function deprecateObjectProperties(object) {
      return object;
    };
    
    if (process.env.NODE_ENV !== 'production') {
      try {
        if (Object.defineProperty({}, 'x', {
          get: function get() {
            return true;
          }
        }).x) {
          exports.canUseMembrane = canUseMembrane = true;
        }
        /* eslint-disable no-empty */
      } catch (e) {}
      /* eslint-enable no-empty */
    
      if (canUseMembrane) {
        deprecateObjectProperties = function deprecateObjectProperties(object, message) {
          // Wrap the deprecated object in a membrane to warn on property access.
          var membrane = {};
    
          var _loop = function _loop(prop) {
            if (!Object.prototype.hasOwnProperty.call(object, prop)) {
              return 'continue';
            }
    
            if (typeof object[prop] === 'function') {
              // Can't use fat arrow here because of use of arguments below.
              membrane[prop] = function () {
                process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, message) : void 0;
                return object[prop].apply(object, arguments);
              };
              return 'continue';
            }
    
            // These properties are non-enumerable to prevent React dev tools from
            // seeing them and causing spurious warnings when accessing them. In
            // principle this could be done with a proxy, but support for the
            // ownKeys trap on proxies is not universal, even among browsers that
            // otherwise support proxies.
            Object.defineProperty(membrane, prop, {
              get: function get() {
                process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, message) : void 0;
                return object[prop];
              }
            });
          };
    
          for (var prop in object) {
            var _ret = _loop(prop);
    
            if (_ret === 'continue') continue;
          }
    
          return membrane;
        };
      }
    }
    
    exports.default = deprecateObjectProperties;
  provide("react-router/lib/deprecateObjectProperties", module.exports);
}(global));

// pakmanager:react-router/lib/PatternUtils
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    exports.compilePattern = compilePattern;
    exports.matchPattern = matchPattern;
    exports.getParamNames = getParamNames;
    exports.getParams = getParams;
    exports.formatPattern = formatPattern;
    
    var _invariant = require('invariant');
    
    var _invariant2 = _interopRequireDefault(_invariant);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function escapeRegExp(string) {
      return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    }
    
    function _compilePattern(pattern) {
      var regexpSource = '';
      var paramNames = [];
      var tokens = [];
    
      var match = void 0,
          lastIndex = 0,
          matcher = /:([a-zA-Z_$][a-zA-Z0-9_$]*)|\*\*|\*|\(|\)/g;
      while (match = matcher.exec(pattern)) {
        if (match.index !== lastIndex) {
          tokens.push(pattern.slice(lastIndex, match.index));
          regexpSource += escapeRegExp(pattern.slice(lastIndex, match.index));
        }
    
        if (match[1]) {
          regexpSource += '([^/]+)';
          paramNames.push(match[1]);
        } else if (match[0] === '**') {
          regexpSource += '(.*)';
          paramNames.push('splat');
        } else if (match[0] === '*') {
          regexpSource += '(.*?)';
          paramNames.push('splat');
        } else if (match[0] === '(') {
          regexpSource += '(?:';
        } else if (match[0] === ')') {
          regexpSource += ')?';
        }
    
        tokens.push(match[0]);
    
        lastIndex = matcher.lastIndex;
      }
    
      if (lastIndex !== pattern.length) {
        tokens.push(pattern.slice(lastIndex, pattern.length));
        regexpSource += escapeRegExp(pattern.slice(lastIndex, pattern.length));
      }
    
      return {
        pattern: pattern,
        regexpSource: regexpSource,
        paramNames: paramNames,
        tokens: tokens
      };
    }
    
    var CompiledPatternsCache = {};
    
    function compilePattern(pattern) {
      if (!(pattern in CompiledPatternsCache)) CompiledPatternsCache[pattern] = _compilePattern(pattern);
    
      return CompiledPatternsCache[pattern];
    }
    
    /**
     * Attempts to match a pattern on the given pathname. Patterns may use
     * the following special characters:
     *
     * - :paramName     Matches a URL segment up to the next /, ?, or #. The
     *                  captured string is considered a "param"
     * - ()             Wraps a segment of the URL that is optional
     * - *              Consumes (non-greedy) all characters up to the next
     *                  character in the pattern, or to the end of the URL if
     *                  there is none
     * - **             Consumes (greedy) all characters up to the next character
     *                  in the pattern, or to the end of the URL if there is none
     *
     *  The function calls callback(error, matched) when finished.
     * The return value is an object with the following properties:
     *
     * - remainingPathname
     * - paramNames
     * - paramValues
     */
    function matchPattern(pattern, pathname) {
      // Ensure pattern starts with leading slash for consistency with pathname.
      if (pattern.charAt(0) !== '/') {
        pattern = '/' + pattern;
      }
    
      var _compilePattern2 = compilePattern(pattern);
    
      var regexpSource = _compilePattern2.regexpSource;
      var paramNames = _compilePattern2.paramNames;
      var tokens = _compilePattern2.tokens;
    
    
      if (pattern.charAt(pattern.length - 1) !== '/') {
        regexpSource += '/?'; // Allow optional path separator at end.
      }
    
      // Special-case patterns like '*' for catch-all routes.
      if (tokens[tokens.length - 1] === '*') {
        regexpSource += '$';
      }
    
      var match = pathname.match(new RegExp('^' + regexpSource, 'i'));
      if (match == null) {
        return null;
      }
    
      var matchedPath = match[0];
      var remainingPathname = pathname.substr(matchedPath.length);
    
      if (remainingPathname) {
        // Require that the match ends at a path separator, if we didn't match
        // the full path, so any remaining pathname is a new path segment.
        if (matchedPath.charAt(matchedPath.length - 1) !== '/') {
          return null;
        }
    
        // If there is a remaining pathname, treat the path separator as part of
        // the remaining pathname for properly continuing the match.
        remainingPathname = '/' + remainingPathname;
      }
    
      return {
        remainingPathname: remainingPathname,
        paramNames: paramNames,
        paramValues: match.slice(1).map(function (v) {
          return v && decodeURIComponent(v);
        })
      };
    }
    
    function getParamNames(pattern) {
      return compilePattern(pattern).paramNames;
    }
    
    function getParams(pattern, pathname) {
      var match = matchPattern(pattern, pathname);
      if (!match) {
        return null;
      }
    
      var paramNames = match.paramNames;
      var paramValues = match.paramValues;
    
      var params = {};
    
      paramNames.forEach(function (paramName, index) {
        params[paramName] = paramValues[index];
      });
    
      return params;
    }
    
    /**
     * Returns a version of the given pattern with params interpolated. Throws
     * if there is a dynamic segment of the pattern for which there is no param.
     */
    function formatPattern(pattern, params) {
      params = params || {};
    
      var _compilePattern3 = compilePattern(pattern);
    
      var tokens = _compilePattern3.tokens;
    
      var parenCount = 0,
          pathname = '',
          splatIndex = 0;
    
      var token = void 0,
          paramName = void 0,
          paramValue = void 0;
      for (var i = 0, len = tokens.length; i < len; ++i) {
        token = tokens[i];
    
        if (token === '*' || token === '**') {
          paramValue = Array.isArray(params.splat) ? params.splat[splatIndex++] : params.splat;
    
          !(paramValue != null || parenCount > 0) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'Missing splat #%s for path "%s"', splatIndex, pattern) : (0, _invariant2.default)(false) : void 0;
    
          if (paramValue != null) pathname += encodeURI(paramValue);
        } else if (token === '(') {
          parenCount += 1;
        } else if (token === ')') {
          parenCount -= 1;
        } else if (token.charAt(0) === ':') {
          paramName = token.substring(1);
          paramValue = params[paramName];
    
          !(paramValue != null || parenCount > 0) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'Missing "%s" parameter for path "%s"', paramName, pattern) : (0, _invariant2.default)(false) : void 0;
    
          if (paramValue != null) pathname += encodeURIComponent(paramValue);
        } else {
          pathname += token;
        }
      }
    
      return pathname.replace(/\/+/g, '/');
    }
  provide("react-router/lib/PatternUtils", module.exports);
}(global));

// pakmanager:react-router/lib/AsyncUtils
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  "use strict";
    
    exports.__esModule = true;
    exports.loopAsync = loopAsync;
    exports.mapAsync = mapAsync;
    function loopAsync(turns, work, callback) {
      var currentTurn = 0,
          isDone = false;
      var sync = false,
          hasNext = false,
          doneArgs = void 0;
    
      function done() {
        isDone = true;
        if (sync) {
          // Iterate instead of recursing if possible.
          doneArgs = [].concat(Array.prototype.slice.call(arguments));
          return;
        }
    
        callback.apply(this, arguments);
      }
    
      function next() {
        if (isDone) {
          return;
        }
    
        hasNext = true;
        if (sync) {
          // Iterate instead of recursing if possible.
          return;
        }
    
        sync = true;
    
        while (!isDone && currentTurn < turns && hasNext) {
          hasNext = false;
          work.call(this, currentTurn++, next, done);
        }
    
        sync = false;
    
        if (isDone) {
          // This means the loop finished synchronously.
          callback.apply(this, doneArgs);
          return;
        }
    
        if (currentTurn >= turns && hasNext) {
          isDone = true;
          callback();
        }
      }
    
      next();
    }
    
    function mapAsync(array, work, callback) {
      var length = array.length;
      var values = [];
    
      if (length === 0) return callback(null, values);
    
      var isDone = false,
          doneCount = 0;
    
      function done(index, error, value) {
        if (isDone) return;
    
        if (error) {
          isDone = true;
          callback(error);
        } else {
          values[index] = value;
    
          isDone = ++doneCount === length;
    
          if (isDone) callback(null, values);
        }
      }
    
      array.forEach(function (item, index) {
        work(item, index, function (error, value) {
          done(index, error, value);
        });
      });
    }
  provide("react-router/lib/AsyncUtils", module.exports);
}(global));

// pakmanager:react-router/lib/makeStateWithLocation
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    
    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
    
    exports.default = makeStateWithLocation;
    
    var _deprecateObjectProperties =  require('react-router/lib/deprecateObjectProperties');
    
    var _routerWarning =  require('react-router/lib/routerWarning');
    
    var _routerWarning2 = _interopRequireDefault(_routerWarning);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function makeStateWithLocation(state, location) {
      if (process.env.NODE_ENV !== 'production' && _deprecateObjectProperties.canUseMembrane) {
        var stateWithLocation = _extends({}, state);
    
        // I don't use deprecateObjectProperties here because I want to keep the
        // same code path between development and production, in that we just
        // assign extra properties to the copy of the state object in both cases.
    
        var _loop = function _loop(prop) {
          if (!Object.prototype.hasOwnProperty.call(location, prop)) {
            return 'continue';
          }
    
          Object.defineProperty(stateWithLocation, prop, {
            get: function get() {
              process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, 'Accessing location properties directly from the first argument to `getComponent`, `getComponents`, `getChildRoutes`, and `getIndexRoute` is deprecated. That argument is now the router state (`nextState` or `partialNextState`) rather than the location. To access the location, use `nextState.location` or `partialNextState.location`.') : void 0;
              return location[prop];
            }
          });
        };
    
        for (var prop in location) {
          var _ret = _loop(prop);
    
          if (_ret === 'continue') continue;
        }
    
        return stateWithLocation;
      }
    
      return _extends({}, state, location);
    }
    module.exports = exports['default'];
  provide("react-router/lib/makeStateWithLocation", module.exports);
}(global));

// pakmanager:react-router/lib/RouteUtils
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    
    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
    
    exports.isReactChildren = isReactChildren;
    exports.createRouteFromReactElement = createRouteFromReactElement;
    exports.createRoutesFromReactChildren = createRoutesFromReactChildren;
    exports.createRoutes = createRoutes;
    
    var _react = require('react');
    
    var _react2 = _interopRequireDefault(_react);
    
    var _routerWarning =  require('react-router/lib/routerWarning');
    
    var _routerWarning2 = _interopRequireDefault(_routerWarning);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function isValidChild(object) {
      return object == null || _react2.default.isValidElement(object);
    }
    
    function isReactChildren(object) {
      return isValidChild(object) || Array.isArray(object) && object.every(isValidChild);
    }
    
    function checkPropTypes(componentName, propTypes, props) {
      componentName = componentName || 'UnknownComponent';
    
      for (var propName in propTypes) {
        if (Object.prototype.hasOwnProperty.call(propTypes, propName)) {
          var error = propTypes[propName](props, propName, componentName);
    
          /* istanbul ignore if: error logging */
          if (error instanceof Error) process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, error.message) : void 0;
        }
      }
    }
    
    function createRoute(defaultProps, props) {
      return _extends({}, defaultProps, props);
    }
    
    function createRouteFromReactElement(element) {
      var type = element.type;
      var route = createRoute(type.defaultProps, element.props);
    
      if (type.propTypes) checkPropTypes(type.displayName || type.name, type.propTypes, route);
    
      if (route.children) {
        var childRoutes = createRoutesFromReactChildren(route.children, route);
    
        if (childRoutes.length) route.childRoutes = childRoutes;
    
        delete route.children;
      }
    
      return route;
    }
    
    /**
     * Creates and returns a routes object from the given ReactChildren. JSX
     * provides a convenient way to visualize how routes in the hierarchy are
     * nested.
     *
     *   import { Route, createRoutesFromReactChildren } from 'react-router'
     *   
     *   const routes = createRoutesFromReactChildren(
     *     <Route component={App}>
     *       <Route path="home" component={Dashboard}/>
     *       <Route path="news" component={NewsFeed}/>
     *     </Route>
     *   )
     *
     * Note: This method is automatically used when you provide <Route> children
     * to a <Router> component.
     */
    function createRoutesFromReactChildren(children, parentRoute) {
      var routes = [];
    
      _react2.default.Children.forEach(children, function (element) {
        if (_react2.default.isValidElement(element)) {
          // Component classes may have a static create* method.
          if (element.type.createRouteFromReactElement) {
            var route = element.type.createRouteFromReactElement(element, parentRoute);
    
            if (route) routes.push(route);
          } else {
            routes.push(createRouteFromReactElement(element));
          }
        }
      });
    
      return routes;
    }
    
    /**
     * Creates and returns an array of routes from the given object which
     * may be a JSX route, a plain object route, or an array of either.
     */
    function createRoutes(routes) {
      if (isReactChildren(routes)) {
        routes = createRoutesFromReactChildren(routes);
      } else if (routes && !Array.isArray(routes)) {
        routes = [routes];
      }
    
      return routes;
    }
  provide("react-router/lib/RouteUtils", module.exports);
}(global));

// pakmanager:react-router/lib/InternalPropTypes
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    exports.routes = exports.route = exports.components = exports.component = exports.history = undefined;
    exports.falsy = falsy;
    
    var _react = require('react');
    
    var func = _react.PropTypes.func;
    var object = _react.PropTypes.object;
    var arrayOf = _react.PropTypes.arrayOf;
    var oneOfType = _react.PropTypes.oneOfType;
    var element = _react.PropTypes.element;
    var shape = _react.PropTypes.shape;
    var string = _react.PropTypes.string;
    function falsy(props, propName, componentName) {
      if (props[propName]) return new Error('<' + componentName + '> should not have a "' + propName + '" prop');
    }
    
    var history = exports.history = shape({
      listen: func.isRequired,
      push: func.isRequired,
      replace: func.isRequired,
      go: func.isRequired,
      goBack: func.isRequired,
      goForward: func.isRequired
    });
    
    var component = exports.component = oneOfType([func, string]);
    var components = exports.components = oneOfType([component, object]);
    var route = exports.route = oneOfType([object, element]);
    var routes = exports.routes = oneOfType([route, arrayOf(route)]);
  provide("react-router/lib/InternalPropTypes", module.exports);
}(global));

// pakmanager:react-router/lib/computeChangedRoutes
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    
    var _PatternUtils =  require('react-router/lib/PatternUtils');
    
    function routeParamsChanged(route, prevState, nextState) {
      if (!route.path) return false;
    
      var paramNames = (0, _PatternUtils.getParamNames)(route.path);
    
      return paramNames.some(function (paramName) {
        return prevState.params[paramName] !== nextState.params[paramName];
      });
    }
    
    /**
     * Returns an object of { leaveRoutes, changeRoutes, enterRoutes } determined by
     * the change from prevState to nextState. We leave routes if either
     * 1) they are not in the next state or 2) they are in the next state
     * but their params have changed (i.e. /users/123 => /users/456).
     *
     * leaveRoutes are ordered starting at the leaf route of the tree
     * we're leaving up to the common parent route. enterRoutes are ordered
     * from the top of the tree we're entering down to the leaf route.
     *
     * changeRoutes are any routes that didn't leave or enter during
     * the transition.
     */
    function computeChangedRoutes(prevState, nextState) {
      var prevRoutes = prevState && prevState.routes;
      var nextRoutes = nextState.routes;
    
      var leaveRoutes = void 0,
          changeRoutes = void 0,
          enterRoutes = void 0;
      if (prevRoutes) {
        (function () {
          var parentIsLeaving = false;
          leaveRoutes = prevRoutes.filter(function (route) {
            if (parentIsLeaving) {
              return true;
            } else {
              var isLeaving = nextRoutes.indexOf(route) === -1 || routeParamsChanged(route, prevState, nextState);
              if (isLeaving) parentIsLeaving = true;
              return isLeaving;
            }
          });
    
          // onLeave hooks start at the leaf route.
          leaveRoutes.reverse();
    
          enterRoutes = [];
          changeRoutes = [];
    
          nextRoutes.forEach(function (route) {
            var isNew = prevRoutes.indexOf(route) === -1;
            var paramsChanged = leaveRoutes.indexOf(route) !== -1;
    
            if (isNew || paramsChanged) enterRoutes.push(route);else changeRoutes.push(route);
          });
        })();
      } else {
        leaveRoutes = [];
        changeRoutes = [];
        enterRoutes = nextRoutes;
      }
    
      return {
        leaveRoutes: leaveRoutes,
        changeRoutes: changeRoutes,
        enterRoutes: enterRoutes
      };
    }
    
    exports.default = computeChangedRoutes;
    module.exports = exports['default'];
  provide("react-router/lib/computeChangedRoutes", module.exports);
}(global));

// pakmanager:react-router/lib/TransitionUtils
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    exports.runEnterHooks = runEnterHooks;
    exports.runChangeHooks = runChangeHooks;
    exports.runLeaveHooks = runLeaveHooks;
    
    var _AsyncUtils =  require('react-router/lib/AsyncUtils');
    
    var _routerWarning =  require('react-router/lib/routerWarning');
    
    var _routerWarning2 = _interopRequireDefault(_routerWarning);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function createTransitionHook(hook, route, asyncArity) {
      return function () {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
    
        hook.apply(route, args);
    
        if (hook.length < asyncArity) {
          var callback = args[args.length - 1];
          // Assume hook executes synchronously and
          // automatically call the callback.
          callback();
        }
      };
    }
    
    function getEnterHooks(routes) {
      return routes.reduce(function (hooks, route) {
        if (route.onEnter) hooks.push(createTransitionHook(route.onEnter, route, 3));
    
        return hooks;
      }, []);
    }
    
    function getChangeHooks(routes) {
      return routes.reduce(function (hooks, route) {
        if (route.onChange) hooks.push(createTransitionHook(route.onChange, route, 4));
        return hooks;
      }, []);
    }
    
    function runTransitionHooks(length, iter, callback) {
      if (!length) {
        callback();
        return;
      }
    
      var redirectInfo = void 0;
      function replace(location, deprecatedPathname, deprecatedQuery) {
        if (deprecatedPathname) {
          process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, '`replaceState(state, pathname, query) is deprecated; use `replace(location)` with a location descriptor instead. http://tiny.cc/router-isActivedeprecated') : void 0;
          redirectInfo = {
            pathname: deprecatedPathname,
            query: deprecatedQuery,
            state: location
          };
    
          return;
        }
    
        redirectInfo = location;
      }
    
      (0, _AsyncUtils.loopAsync)(length, function (index, next, done) {
        iter(index, replace, function (error) {
          if (error || redirectInfo) {
            done(error, redirectInfo); // No need to continue.
          } else {
              next();
            }
        });
      }, callback);
    }
    
    /**
     * Runs all onEnter hooks in the given array of routes in order
     * with onEnter(nextState, replace, callback) and calls
     * callback(error, redirectInfo) when finished. The first hook
     * to use replace short-circuits the loop.
     *
     * If a hook needs to run asynchronously, it may use the callback
     * function. However, doing so will cause the transition to pause,
     * which could lead to a non-responsive UI if the hook is slow.
     */
    function runEnterHooks(routes, nextState, callback) {
      var hooks = getEnterHooks(routes);
      return runTransitionHooks(hooks.length, function (index, replace, next) {
        hooks[index](nextState, replace, next);
      }, callback);
    }
    
    /**
     * Runs all onChange hooks in the given array of routes in order
     * with onChange(prevState, nextState, replace, callback) and calls
     * callback(error, redirectInfo) when finished. The first hook
     * to use replace short-circuits the loop.
     *
     * If a hook needs to run asynchronously, it may use the callback
     * function. However, doing so will cause the transition to pause,
     * which could lead to a non-responsive UI if the hook is slow.
     */
    function runChangeHooks(routes, state, nextState, callback) {
      var hooks = getChangeHooks(routes);
      return runTransitionHooks(hooks.length, function (index, replace, next) {
        hooks[index](state, nextState, replace, next);
      }, callback);
    }
    
    /**
     * Runs all onLeave hooks in the given array of routes in order.
     */
    function runLeaveHooks(routes) {
      for (var i = 0, len = routes.length; i < len; ++i) {
        if (routes[i].onLeave) routes[i].onLeave.call(routes[i]);
      }
    }
  provide("react-router/lib/TransitionUtils", module.exports);
}(global));

// pakmanager:react-router/lib/isActive
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    
    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
    
    exports.default = isActive;
    
    var _PatternUtils =  require('react-router/lib/PatternUtils');
    
    function deepEqual(a, b) {
      if (a == b) return true;
    
      if (a == null || b == null) return false;
    
      if (Array.isArray(a)) {
        return Array.isArray(b) && a.length === b.length && a.every(function (item, index) {
          return deepEqual(item, b[index]);
        });
      }
    
      if ((typeof a === 'undefined' ? 'undefined' : _typeof(a)) === 'object') {
        for (var p in a) {
          if (!Object.prototype.hasOwnProperty.call(a, p)) {
            continue;
          }
    
          if (a[p] === undefined) {
            if (b[p] !== undefined) {
              return false;
            }
          } else if (!Object.prototype.hasOwnProperty.call(b, p)) {
            return false;
          } else if (!deepEqual(a[p], b[p])) {
            return false;
          }
        }
    
        return true;
      }
    
      return String(a) === String(b);
    }
    
    /**
     * Returns true if the current pathname matches the supplied one, net of
     * leading and trailing slash normalization. This is sufficient for an
     * indexOnly route match.
     */
    function pathIsActive(pathname, currentPathname) {
      // Normalize leading slash for consistency. Leading slash on pathname has
      // already been normalized in isActive. See caveat there.
      if (currentPathname.charAt(0) !== '/') {
        currentPathname = '/' + currentPathname;
      }
    
      // Normalize the end of both path names too. Maybe `/foo/` shouldn't show
      // `/foo` as active, but in this case, we would already have failed the
      // match.
      if (pathname.charAt(pathname.length - 1) !== '/') {
        pathname += '/';
      }
      if (currentPathname.charAt(currentPathname.length - 1) !== '/') {
        currentPathname += '/';
      }
    
      return currentPathname === pathname;
    }
    
    /**
     * Returns true if the given pathname matches the active routes and params.
     */
    function routeIsActive(pathname, routes, params) {
      var remainingPathname = pathname,
          paramNames = [],
          paramValues = [];
    
      // for...of would work here but it's probably slower post-transpilation.
      for (var i = 0, len = routes.length; i < len; ++i) {
        var route = routes[i];
        var pattern = route.path || '';
    
        if (pattern.charAt(0) === '/') {
          remainingPathname = pathname;
          paramNames = [];
          paramValues = [];
        }
    
        if (remainingPathname !== null && pattern) {
          var matched = (0, _PatternUtils.matchPattern)(pattern, remainingPathname);
          if (matched) {
            remainingPathname = matched.remainingPathname;
            paramNames = [].concat(paramNames, matched.paramNames);
            paramValues = [].concat(paramValues, matched.paramValues);
          } else {
            remainingPathname = null;
          }
    
          if (remainingPathname === '') {
            // We have an exact match on the route. Just check that all the params
            // match.
            // FIXME: This doesn't work on repeated params.
            return paramNames.every(function (paramName, index) {
              return String(paramValues[index]) === String(params[paramName]);
            });
          }
        }
      }
    
      return false;
    }
    
    /**
     * Returns true if all key/value pairs in the given query are
     * currently active.
     */
    function queryIsActive(query, activeQuery) {
      if (activeQuery == null) return query == null;
    
      if (query == null) return true;
    
      return deepEqual(query, activeQuery);
    }
    
    /**
     * Returns true if a <Link> to the given pathname/query combination is
     * currently active.
     */
    function isActive(_ref, indexOnly, currentLocation, routes, params) {
      var pathname = _ref.pathname;
      var query = _ref.query;
    
      if (currentLocation == null) return false;
    
      // TODO: This is a bit ugly. It keeps around support for treating pathnames
      // without preceding slashes as absolute paths, but possibly also works
      // around the same quirks with basenames as in matchRoutes.
      if (pathname.charAt(0) !== '/') {
        pathname = '/' + pathname;
      }
    
      if (!pathIsActive(pathname, currentLocation.pathname)) {
        // The path check is necessary and sufficient for indexOnly, but otherwise
        // we still need to check the routes.
        if (indexOnly || !routeIsActive(pathname, routes, params)) {
          return false;
        }
      }
    
      return queryIsActive(query, currentLocation.query);
    }
    module.exports = exports['default'];
  provide("react-router/lib/isActive", module.exports);
}(global));

// pakmanager:react-router/lib/getComponents
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    
    var _AsyncUtils =  require('react-router/lib/AsyncUtils');
    
    var _makeStateWithLocation =  require('react-router/lib/makeStateWithLocation');
    
    var _makeStateWithLocation2 = _interopRequireDefault(_makeStateWithLocation);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function getComponentsForRoute(nextState, route, callback) {
      if (route.component || route.components) {
        callback(null, route.component || route.components);
        return;
      }
    
      var getComponent = route.getComponent || route.getComponents;
      if (!getComponent) {
        callback();
        return;
      }
    
      var location = nextState.location;
    
      var nextStateWithLocation = (0, _makeStateWithLocation2.default)(nextState, location);
    
      getComponent.call(route, nextStateWithLocation, callback);
    }
    
    /**
     * Asynchronously fetches all components needed for the given router
     * state and calls callback(error, components) when finished.
     *
     * Note: This operation may finish synchronously if no routes have an
     * asynchronous getComponents method.
     */
    function getComponents(nextState, callback) {
      (0, _AsyncUtils.mapAsync)(nextState.routes, function (route, index, callback) {
        getComponentsForRoute(nextState, route, callback);
      }, callback);
    }
    
    exports.default = getComponents;
    module.exports = exports['default'];
  provide("react-router/lib/getComponents", module.exports);
}(global));

// pakmanager:react-router/lib/matchRoutes
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    
    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
    
    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
    
    exports.default = matchRoutes;
    
    var _AsyncUtils =  require('react-router/lib/AsyncUtils');
    
    var _makeStateWithLocation =  require('react-router/lib/makeStateWithLocation');
    
    var _makeStateWithLocation2 = _interopRequireDefault(_makeStateWithLocation);
    
    var _PatternUtils =  require('react-router/lib/PatternUtils');
    
    var _routerWarning =  require('react-router/lib/routerWarning');
    
    var _routerWarning2 = _interopRequireDefault(_routerWarning);
    
    var _RouteUtils =  require('react-router/lib/RouteUtils');
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function getChildRoutes(route, location, paramNames, paramValues, callback) {
      if (route.childRoutes) {
        return [null, route.childRoutes];
      }
      if (!route.getChildRoutes) {
        return [];
      }
    
      var sync = true,
          result = void 0;
    
      var partialNextState = {
        location: location,
        params: createParams(paramNames, paramValues)
      };
    
      var partialNextStateWithLocation = (0, _makeStateWithLocation2.default)(partialNextState, location);
    
      route.getChildRoutes(partialNextStateWithLocation, function (error, childRoutes) {
        childRoutes = !error && (0, _RouteUtils.createRoutes)(childRoutes);
        if (sync) {
          result = [error, childRoutes];
          return;
        }
    
        callback(error, childRoutes);
      });
    
      sync = false;
      return result; // Might be undefined.
    }
    
    function getIndexRoute(route, location, paramNames, paramValues, callback) {
      if (route.indexRoute) {
        callback(null, route.indexRoute);
      } else if (route.getIndexRoute) {
        var partialNextState = {
          location: location,
          params: createParams(paramNames, paramValues)
        };
    
        var partialNextStateWithLocation = (0, _makeStateWithLocation2.default)(partialNextState, location);
    
        route.getIndexRoute(partialNextStateWithLocation, function (error, indexRoute) {
          callback(error, !error && (0, _RouteUtils.createRoutes)(indexRoute)[0]);
        });
      } else if (route.childRoutes) {
        (function () {
          var pathless = route.childRoutes.filter(function (childRoute) {
            return !childRoute.path;
          });
    
          (0, _AsyncUtils.loopAsync)(pathless.length, function (index, next, done) {
            getIndexRoute(pathless[index], location, paramNames, paramValues, function (error, indexRoute) {
              if (error || indexRoute) {
                var routes = [pathless[index]].concat(Array.isArray(indexRoute) ? indexRoute : [indexRoute]);
                done(error, routes);
              } else {
                next();
              }
            });
          }, function (err, routes) {
            callback(null, routes);
          });
        })();
      } else {
        callback();
      }
    }
    
    function assignParams(params, paramNames, paramValues) {
      return paramNames.reduce(function (params, paramName, index) {
        var paramValue = paramValues && paramValues[index];
    
        if (Array.isArray(params[paramName])) {
          params[paramName].push(paramValue);
        } else if (paramName in params) {
          params[paramName] = [params[paramName], paramValue];
        } else {
          params[paramName] = paramValue;
        }
    
        return params;
      }, params);
    }
    
    function createParams(paramNames, paramValues) {
      return assignParams({}, paramNames, paramValues);
    }
    
    function matchRouteDeep(route, location, remainingPathname, paramNames, paramValues, callback) {
      var pattern = route.path || '';
    
      if (pattern.charAt(0) === '/') {
        remainingPathname = location.pathname;
        paramNames = [];
        paramValues = [];
      }
    
      // Only try to match the path if the route actually has a pattern, and if
      // we're not just searching for potential nested absolute paths.
      if (remainingPathname !== null && pattern) {
        try {
          var matched = (0, _PatternUtils.matchPattern)(pattern, remainingPathname);
          if (matched) {
            remainingPathname = matched.remainingPathname;
            paramNames = [].concat(paramNames, matched.paramNames);
            paramValues = [].concat(paramValues, matched.paramValues);
          } else {
            remainingPathname = null;
          }
        } catch (error) {
          callback(error);
        }
    
        // By assumption, pattern is non-empty here, which is the prerequisite for
        // actually terminating a match.
        if (remainingPathname === '') {
          var _ret2 = function () {
            var match = {
              routes: [route],
              params: createParams(paramNames, paramValues)
            };
    
            getIndexRoute(route, location, paramNames, paramValues, function (error, indexRoute) {
              if (error) {
                callback(error);
              } else {
                if (Array.isArray(indexRoute)) {
                  var _match$routes;
    
                  process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(indexRoute.every(function (route) {
                    return !route.path;
                  }), 'Index routes should not have paths') : void 0;
                  (_match$routes = match.routes).push.apply(_match$routes, indexRoute);
                } else if (indexRoute) {
                  process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(!indexRoute.path, 'Index routes should not have paths') : void 0;
                  match.routes.push(indexRoute);
                }
    
                callback(null, match);
              }
            });
    
            return {
              v: void 0
            };
          }();
    
          if ((typeof _ret2 === 'undefined' ? 'undefined' : _typeof(_ret2)) === "object") return _ret2.v;
        }
      }
    
      if (remainingPathname != null || route.childRoutes) {
        // Either a) this route matched at least some of the path or b)
        // we don't have to load this route's children asynchronously. In
        // either case continue checking for matches in the subtree.
        var onChildRoutes = function onChildRoutes(error, childRoutes) {
          if (error) {
            callback(error);
          } else if (childRoutes) {
            // Check the child routes to see if any of them match.
            matchRoutes(childRoutes, location, function (error, match) {
              if (error) {
                callback(error);
              } else if (match) {
                // A child route matched! Augment the match and pass it up the stack.
                match.routes.unshift(route);
                callback(null, match);
              } else {
                callback();
              }
            }, remainingPathname, paramNames, paramValues);
          } else {
            callback();
          }
        };
    
        var result = getChildRoutes(route, location, paramNames, paramValues, onChildRoutes);
        if (result) {
          onChildRoutes.apply(undefined, result);
        }
      } else {
        callback();
      }
    }
    
    /**
     * Asynchronously matches the given location to a set of routes and calls
     * callback(error, state) when finished. The state object will have the
     * following properties:
     *
     * - routes       An array of routes that matched, in hierarchical order
     * - params       An object of URL parameters
     *
     * Note: This operation may finish synchronously if no routes have an
     * asynchronous getChildRoutes method.
     */
    function matchRoutes(routes, location, callback, remainingPathname) {
      var paramNames = arguments.length <= 4 || arguments[4] === undefined ? [] : arguments[4];
      var paramValues = arguments.length <= 5 || arguments[5] === undefined ? [] : arguments[5];
    
      if (remainingPathname === undefined) {
        // TODO: This is a little bit ugly, but it works around a quirk in history
        // that strips the leading slash from pathnames when using basenames with
        // trailing slashes.
        if (location.pathname.charAt(0) !== '/') {
          location = _extends({}, location, {
            pathname: '/' + location.pathname
          });
        }
        remainingPathname = location.pathname;
      }
    
      (0, _AsyncUtils.loopAsync)(routes.length, function (index, next, done) {
        matchRouteDeep(routes[index], location, remainingPathname, paramNames, paramValues, function (error, match) {
          if (error || match) {
            done(error, match);
          } else {
            next();
          }
        });
      }, callback);
    }
    module.exports = exports['default'];
  provide("react-router/lib/matchRoutes", module.exports);
}(global));

// pakmanager:react-router/lib/getRouteParams
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    
    var _PatternUtils =  require('react-router/lib/PatternUtils');
    
    /**
     * Extracts an object of params the given route cares about from
     * the given params object.
     */
    function getRouteParams(route, params) {
      var routeParams = {};
    
      if (!route.path) return routeParams;
    
      (0, _PatternUtils.getParamNames)(route.path).forEach(function (p) {
        if (Object.prototype.hasOwnProperty.call(params, p)) {
          routeParams[p] = params[p];
        }
      });
    
      return routeParams;
    }
    
    exports.default = getRouteParams;
    module.exports = exports['default'];
  provide("react-router/lib/getRouteParams", module.exports);
}(global));

// pakmanager:react-router/lib/PropTypes
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    exports.router = exports.routes = exports.route = exports.components = exports.component = exports.location = exports.history = exports.falsy = exports.locationShape = exports.routerShape = undefined;
    
    var _react = require('react');
    
    var _deprecateObjectProperties =  require('react-router/lib/deprecateObjectProperties');
    
    var _deprecateObjectProperties2 = _interopRequireDefault(_deprecateObjectProperties);
    
    var _InternalPropTypes =  require('react-router/lib/InternalPropTypes');
    
    var InternalPropTypes = _interopRequireWildcard(_InternalPropTypes);
    
    var _routerWarning =  require('react-router/lib/routerWarning');
    
    var _routerWarning2 = _interopRequireDefault(_routerWarning);
    
    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    var func = _react.PropTypes.func;
    var object = _react.PropTypes.object;
    var shape = _react.PropTypes.shape;
    var string = _react.PropTypes.string;
    var routerShape = exports.routerShape = shape({
      push: func.isRequired,
      replace: func.isRequired,
      go: func.isRequired,
      goBack: func.isRequired,
      goForward: func.isRequired,
      setRouteLeaveHook: func.isRequired,
      isActive: func.isRequired
    });
    
    var locationShape = exports.locationShape = shape({
      pathname: string.isRequired,
      search: string.isRequired,
      state: object,
      action: string.isRequired,
      key: string
    });
    
    // Deprecated stuff below:
    
    var falsy = exports.falsy = InternalPropTypes.falsy;
    var history = exports.history = InternalPropTypes.history;
    var location = exports.location = locationShape;
    var component = exports.component = InternalPropTypes.component;
    var components = exports.components = InternalPropTypes.components;
    var route = exports.route = InternalPropTypes.route;
    var routes = exports.routes = InternalPropTypes.routes;
    var router = exports.router = routerShape;
    
    if (process.env.NODE_ENV !== 'production') {
      (function () {
        var deprecatePropType = function deprecatePropType(propType, message) {
          return function () {
            process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, message) : void 0;
            return propType.apply(undefined, arguments);
          };
        };
    
        var deprecateInternalPropType = function deprecateInternalPropType(propType) {
          return deprecatePropType(propType, 'This prop type is not intended for external use, and was previously exported by mistake. These internal prop types are deprecated for external use, and will be removed in a later version.');
        };
    
        var deprecateRenamedPropType = function deprecateRenamedPropType(propType, name) {
          return deprecatePropType(propType, 'The `' + name + '` prop type is now exported as `' + name + 'Shape` to avoid name conflicts. This export is deprecated and will be removed in a later version.');
        };
    
        exports.falsy = falsy = deprecateInternalPropType(falsy);
        exports.history = history = deprecateInternalPropType(history);
        exports.component = component = deprecateInternalPropType(component);
        exports.components = components = deprecateInternalPropType(components);
        exports.route = route = deprecateInternalPropType(route);
        exports.routes = routes = deprecateInternalPropType(routes);
    
        exports.location = location = deprecateRenamedPropType(location, 'location');
        exports.router = router = deprecateRenamedPropType(router, 'router');
      })();
    }
    
    var defaultExport = {
      falsy: falsy,
      history: history,
      location: location,
      component: component,
      components: components,
      route: route,
      // For some reason, routes was never here.
      router: router
    };
    
    if (process.env.NODE_ENV !== 'production') {
      defaultExport = (0, _deprecateObjectProperties2.default)(defaultExport, 'The default export from `react-router/lib/PropTypes` is deprecated. Please use the named exports instead.');
    }
    
    exports.default = defaultExport;
  provide("react-router/lib/PropTypes", module.exports);
}(global));

// pakmanager:react-router/lib/useRouterHistory
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    exports.default = useRouterHistory;
    
    var _useQueries = require('history/lib/useQueries');
    
    var _useQueries2 = _interopRequireDefault(_useQueries);
    
    var _useBasename = require('history/lib/useBasename');
    
    var _useBasename2 = _interopRequireDefault(_useBasename);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function useRouterHistory(createHistory) {
      return function (options) {
        var history = (0, _useQueries2.default)((0, _useBasename2.default)(createHistory))(options);
        history.__v2_compatible__ = true;
        return history;
      };
    }
    module.exports = exports['default'];
  provide("react-router/lib/useRouterHistory", module.exports);
}(global));

// pakmanager:react-router/lib/createTransitionManager
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    
    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
    
    exports.default = createTransitionManager;
    
    var _routerWarning =  require('react-router/lib/routerWarning');
    
    var _routerWarning2 = _interopRequireDefault(_routerWarning);
    
    var _Actions = require('history/lib/Actions');
    
    var _computeChangedRoutes2 =  require('react-router/lib/computeChangedRoutes');
    
    var _computeChangedRoutes3 = _interopRequireDefault(_computeChangedRoutes2);
    
    var _TransitionUtils =  require('react-router/lib/TransitionUtils');
    
    var _isActive2 =  require('react-router/lib/isActive');
    
    var _isActive3 = _interopRequireDefault(_isActive2);
    
    var _getComponents =  require('react-router/lib/getComponents');
    
    var _getComponents2 = _interopRequireDefault(_getComponents);
    
    var _matchRoutes =  require('react-router/lib/matchRoutes');
    
    var _matchRoutes2 = _interopRequireDefault(_matchRoutes);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function hasAnyProperties(object) {
      for (var p in object) {
        if (Object.prototype.hasOwnProperty.call(object, p)) return true;
      }return false;
    }
    
    function createTransitionManager(history, routes) {
      var state = {};
    
      // Signature should be (location, indexOnly), but needs to support (path,
      // query, indexOnly)
      function isActive(location) {
        var indexOnlyOrDeprecatedQuery = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
        var deprecatedIndexOnly = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];
    
        var indexOnly = void 0;
        if (indexOnlyOrDeprecatedQuery && indexOnlyOrDeprecatedQuery !== true || deprecatedIndexOnly !== null) {
          process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, '`isActive(pathname, query, indexOnly) is deprecated; use `isActive(location, indexOnly)` with a location descriptor instead. http://tiny.cc/router-isActivedeprecated') : void 0;
          location = { pathname: location, query: indexOnlyOrDeprecatedQuery };
          indexOnly = deprecatedIndexOnly || false;
        } else {
          location = history.createLocation(location);
          indexOnly = indexOnlyOrDeprecatedQuery;
        }
    
        return (0, _isActive3.default)(location, indexOnly, state.location, state.routes, state.params);
      }
    
      function createLocationFromRedirectInfo(location) {
        return history.createLocation(location, _Actions.REPLACE);
      }
    
      var partialNextState = void 0;
    
      function match(location, callback) {
        if (partialNextState && partialNextState.location === location) {
          // Continue from where we left off.
          finishMatch(partialNextState, callback);
        } else {
          (0, _matchRoutes2.default)(routes, location, function (error, nextState) {
            if (error) {
              callback(error);
            } else if (nextState) {
              finishMatch(_extends({}, nextState, { location: location }), callback);
            } else {
              callback();
            }
          });
        }
      }
    
      function finishMatch(nextState, callback) {
        var _computeChangedRoutes = (0, _computeChangedRoutes3.default)(state, nextState);
    
        var leaveRoutes = _computeChangedRoutes.leaveRoutes;
        var changeRoutes = _computeChangedRoutes.changeRoutes;
        var enterRoutes = _computeChangedRoutes.enterRoutes;
    
    
        (0, _TransitionUtils.runLeaveHooks)(leaveRoutes);
    
        // Tear down confirmation hooks for left routes
        leaveRoutes.filter(function (route) {
          return enterRoutes.indexOf(route) === -1;
        }).forEach(removeListenBeforeHooksForRoute);
    
        // change and enter hooks are run in series
        (0, _TransitionUtils.runChangeHooks)(changeRoutes, state, nextState, function (error, redirectInfo) {
          if (error || redirectInfo) return handleErrorOrRedirect(error, redirectInfo);
    
          (0, _TransitionUtils.runEnterHooks)(enterRoutes, nextState, finishEnterHooks);
        });
    
        function finishEnterHooks(error, redirectInfo) {
          if (error || redirectInfo) return handleErrorOrRedirect(error, redirectInfo);
    
          // TODO: Fetch components after state is updated.
          (0, _getComponents2.default)(nextState, function (error, components) {
            if (error) {
              callback(error);
            } else {
              // TODO: Make match a pure function and have some other API
              // for "match and update state".
              callback(null, null, state = _extends({}, nextState, { components: components }));
            }
          });
        }
    
        function handleErrorOrRedirect(error, redirectInfo) {
          if (error) callback(error);else callback(null, createLocationFromRedirectInfo(redirectInfo));
        }
      }
    
      var RouteGuid = 1;
    
      function getRouteID(route) {
        var create = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];
    
        return route.__id__ || create && (route.__id__ = RouteGuid++);
      }
    
      var RouteHooks = Object.create(null);
    
      function getRouteHooksForRoutes(routes) {
        return routes.reduce(function (hooks, route) {
          hooks.push.apply(hooks, RouteHooks[getRouteID(route)]);
          return hooks;
        }, []);
      }
    
      function transitionHook(location, callback) {
        (0, _matchRoutes2.default)(routes, location, function (error, nextState) {
          if (nextState == null) {
            // TODO: We didn't actually match anything, but hang
            // onto error/nextState so we don't have to matchRoutes
            // again in the listen callback.
            callback();
            return;
          }
    
          // Cache some state here so we don't have to
          // matchRoutes() again in the listen callback.
          partialNextState = _extends({}, nextState, { location: location });
    
          var hooks = getRouteHooksForRoutes((0, _computeChangedRoutes3.default)(state, partialNextState).leaveRoutes);
    
          var result = void 0;
          for (var i = 0, len = hooks.length; result == null && i < len; ++i) {
            // Passing the location arg here indicates to
            // the user that this is a transition hook.
            result = hooks[i](location);
          }
    
          callback(result);
        });
      }
    
      /* istanbul ignore next: untestable with Karma */
      function beforeUnloadHook() {
        // Synchronously check to see if any route hooks want
        // to prevent the current window/tab from closing.
        if (state.routes) {
          var hooks = getRouteHooksForRoutes(state.routes);
    
          var message = void 0;
          for (var i = 0, len = hooks.length; typeof message !== 'string' && i < len; ++i) {
            // Passing no args indicates to the user that this is a
            // beforeunload hook. We don't know the next location.
            message = hooks[i]();
          }
    
          return message;
        }
      }
    
      var unlistenBefore = void 0,
          unlistenBeforeUnload = void 0;
    
      function removeListenBeforeHooksForRoute(route) {
        var routeID = getRouteID(route, false);
        if (!routeID) {
          return;
        }
    
        delete RouteHooks[routeID];
    
        if (!hasAnyProperties(RouteHooks)) {
          // teardown transition & beforeunload hooks
          if (unlistenBefore) {
            unlistenBefore();
            unlistenBefore = null;
          }
    
          if (unlistenBeforeUnload) {
            unlistenBeforeUnload();
            unlistenBeforeUnload = null;
          }
        }
      }
    
      /**
       * Registers the given hook function to run before leaving the given route.
       *
       * During a normal transition, the hook function receives the next location
       * as its only argument and can return either a prompt message (string) to show the user,
       * to make sure they want to leave the page; or `false`, to prevent the transition.
       * Any other return value will have no effect.
       *
       * During the beforeunload event (in browsers) the hook receives no arguments.
       * In this case it must return a prompt message to prevent the transition.
       *
       * Returns a function that may be used to unbind the listener.
       */
      function listenBeforeLeavingRoute(route, hook) {
        // TODO: Warn if they register for a route that isn't currently
        // active. They're probably doing something wrong, like re-creating
        // route objects on every location change.
        var routeID = getRouteID(route);
        var hooks = RouteHooks[routeID];
    
        if (!hooks) {
          var thereWereNoRouteHooks = !hasAnyProperties(RouteHooks);
    
          RouteHooks[routeID] = [hook];
    
          if (thereWereNoRouteHooks) {
            // setup transition & beforeunload hooks
            unlistenBefore = history.listenBefore(transitionHook);
    
            if (history.listenBeforeUnload) unlistenBeforeUnload = history.listenBeforeUnload(beforeUnloadHook);
          }
        } else {
          if (hooks.indexOf(hook) === -1) {
            process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, 'adding multiple leave hooks for the same route is deprecated; manage multiple confirmations in your own code instead') : void 0;
    
            hooks.push(hook);
          }
        }
    
        return function () {
          var hooks = RouteHooks[routeID];
    
          if (hooks) {
            var newHooks = hooks.filter(function (item) {
              return item !== hook;
            });
    
            if (newHooks.length === 0) {
              removeListenBeforeHooksForRoute(route);
            } else {
              RouteHooks[routeID] = newHooks;
            }
          }
        };
      }
    
      /**
       * This is the API for stateful environments. As the location
       * changes, we update state and call the listener. We can also
       * gracefully handle errors and redirects.
       */
      function listen(listener) {
        // TODO: Only use a single history listener. Otherwise we'll
        // end up with multiple concurrent calls to match.
        return history.listen(function (location) {
          if (state.location === location) {
            listener(null, state);
          } else {
            match(location, function (error, redirectLocation, nextState) {
              if (error) {
                listener(error);
              } else if (redirectLocation) {
                history.transitionTo(redirectLocation);
              } else if (nextState) {
                listener(null, nextState);
              } else {
                process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, 'Location "%s" did not match any routes', location.pathname + location.search + location.hash) : void 0;
              }
            });
          }
        });
      }
    
      return {
        isActive: isActive,
        match: match,
        listenBeforeLeavingRoute: listenBeforeLeavingRoute,
        listen: listen
      };
    }
    
    //export default useRoutes
    module.exports = exports['default'];
  provide("react-router/lib/createTransitionManager", module.exports);
}(global));

// pakmanager:react-router/lib/RouterContext
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    
    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
    
    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
    
    var _invariant = require('invariant');
    
    var _invariant2 = _interopRequireDefault(_invariant);
    
    var _react = require('react');
    
    var _react2 = _interopRequireDefault(_react);
    
    var _deprecateObjectProperties =  require('react-router/lib/deprecateObjectProperties');
    
    var _deprecateObjectProperties2 = _interopRequireDefault(_deprecateObjectProperties);
    
    var _getRouteParams =  require('react-router/lib/getRouteParams');
    
    var _getRouteParams2 = _interopRequireDefault(_getRouteParams);
    
    var _RouteUtils =  require('react-router/lib/RouteUtils');
    
    var _routerWarning =  require('react-router/lib/routerWarning');
    
    var _routerWarning2 = _interopRequireDefault(_routerWarning);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    var _React$PropTypes = _react2.default.PropTypes;
    var array = _React$PropTypes.array;
    var func = _React$PropTypes.func;
    var object = _React$PropTypes.object;
    
    /**
     * A <RouterContext> renders the component tree for a given router state
     * and sets the history object and the current location in context.
     */
    
    var RouterContext = _react2.default.createClass({
      displayName: 'RouterContext',
    
    
      propTypes: {
        history: object,
        router: object.isRequired,
        location: object.isRequired,
        routes: array.isRequired,
        params: object.isRequired,
        components: array.isRequired,
        createElement: func.isRequired
      },
    
      getDefaultProps: function getDefaultProps() {
        return {
          createElement: _react2.default.createElement
        };
      },
    
    
      childContextTypes: {
        history: object,
        location: object.isRequired,
        router: object.isRequired
      },
    
      getChildContext: function getChildContext() {
        var _props = this.props;
        var router = _props.router;
        var history = _props.history;
        var location = _props.location;
    
        if (!router) {
          process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, '`<RouterContext>` expects a `router` rather than a `history`') : void 0;
    
          router = _extends({}, history, {
            setRouteLeaveHook: history.listenBeforeLeavingRoute
          });
          delete router.listenBeforeLeavingRoute;
        }
    
        if (process.env.NODE_ENV !== 'production') {
          location = (0, _deprecateObjectProperties2.default)(location, '`context.location` is deprecated, please use a route component\'s `props.location` instead. http://tiny.cc/router-accessinglocation');
        }
    
        return { history: history, location: location, router: router };
      },
      createElement: function createElement(component, props) {
        return component == null ? null : this.props.createElement(component, props);
      },
      render: function render() {
        var _this = this;
    
        var _props2 = this.props;
        var history = _props2.history;
        var location = _props2.location;
        var routes = _props2.routes;
        var params = _props2.params;
        var components = _props2.components;
    
        var element = null;
    
        if (components) {
          element = components.reduceRight(function (element, components, index) {
            if (components == null) return element; // Don't create new children; use the grandchildren.
    
            var route = routes[index];
            var routeParams = (0, _getRouteParams2.default)(route, params);
            var props = {
              history: history,
              location: location,
              params: params,
              route: route,
              routeParams: routeParams,
              routes: routes
            };
    
            if ((0, _RouteUtils.isReactChildren)(element)) {
              props.children = element;
            } else if (element) {
              for (var prop in element) {
                if (Object.prototype.hasOwnProperty.call(element, prop)) props[prop] = element[prop];
              }
            }
    
            if ((typeof components === 'undefined' ? 'undefined' : _typeof(components)) === 'object') {
              var elements = {};
    
              for (var key in components) {
                if (Object.prototype.hasOwnProperty.call(components, key)) {
                  // Pass through the key as a prop to createElement to allow
                  // custom createElement functions to know which named component
                  // they're rendering, for e.g. matching up to fetched data.
                  elements[key] = _this.createElement(components[key], _extends({
                    key: key }, props));
                }
              }
    
              return elements;
            }
    
            return _this.createElement(components, props);
          }, element);
        }
    
        !(element === null || element === false || _react2.default.isValidElement(element)) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'The root route must render a single element') : (0, _invariant2.default)(false) : void 0;
    
        return element;
      }
    });
    
    exports.default = RouterContext;
    module.exports = exports['default'];
  provide("react-router/lib/RouterContext", module.exports);
}(global));

// pakmanager:react-router/lib/RouterUtils
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    
    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
    
    exports.createRouterObject = createRouterObject;
    exports.createRoutingHistory = createRoutingHistory;
    
    var _deprecateObjectProperties =  require('react-router/lib/deprecateObjectProperties');
    
    var _deprecateObjectProperties2 = _interopRequireDefault(_deprecateObjectProperties);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function createRouterObject(history, transitionManager) {
      return _extends({}, history, {
        setRouteLeaveHook: transitionManager.listenBeforeLeavingRoute,
        isActive: transitionManager.isActive
      });
    }
    
    // deprecated
    function createRoutingHistory(history, transitionManager) {
      history = _extends({}, history, transitionManager);
    
      if (process.env.NODE_ENV !== 'production') {
        history = (0, _deprecateObjectProperties2.default)(history, '`props.history` and `context.history` are deprecated. Please use `context.router`. http://tiny.cc/router-contextchanges');
      }
    
      return history;
    }
  provide("react-router/lib/RouterUtils", module.exports);
}(global));

// pakmanager:react-router/lib/Link
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    
    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
    
    var _react = require('react');
    
    var _react2 = _interopRequireDefault(_react);
    
    var _routerWarning =  require('react-router/lib/routerWarning');
    
    var _routerWarning2 = _interopRequireDefault(_routerWarning);
    
    var _invariant = require('invariant');
    
    var _invariant2 = _interopRequireDefault(_invariant);
    
    var _PropTypes =  require('react-router/lib/PropTypes');
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
    
    var _React$PropTypes = _react2.default.PropTypes;
    var bool = _React$PropTypes.bool;
    var object = _React$PropTypes.object;
    var string = _React$PropTypes.string;
    var func = _React$PropTypes.func;
    var oneOfType = _React$PropTypes.oneOfType;
    
    
    function isLeftClickEvent(event) {
      return event.button === 0;
    }
    
    function isModifiedEvent(event) {
      return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
    }
    
    // TODO: De-duplicate against hasAnyProperties in createTransitionManager.
    function isEmptyObject(object) {
      for (var p in object) {
        if (Object.prototype.hasOwnProperty.call(object, p)) return false;
      }return true;
    }
    
    function createLocationDescriptor(to, _ref) {
      var query = _ref.query;
      var hash = _ref.hash;
      var state = _ref.state;
    
      if (query || hash || state) {
        return { pathname: to, query: query, hash: hash, state: state };
      }
    
      return to;
    }
    
    /**
     * A <Link> is used to create an <a> element that links to a route.
     * When that route is active, the link gets the value of its
     * activeClassName prop.
     *
     * For example, assuming you have the following route:
     *
     *   <Route path="/posts/:postID" component={Post} />
     *
     * You could use the following component to link to that route:
     *
     *   <Link to={`/posts/${post.id}`} />
     *
     * Links may pass along location state and/or query string parameters
     * in the state/query props, respectively.
     *
     *   <Link ... query={{ show: true }} state={{ the: 'state' }} />
     */
    var Link = _react2.default.createClass({
      displayName: 'Link',
    
    
      contextTypes: {
        router: _PropTypes.routerShape
      },
    
      propTypes: {
        to: oneOfType([string, object]).isRequired,
        query: object,
        hash: string,
        state: object,
        activeStyle: object,
        activeClassName: string,
        onlyActiveOnIndex: bool.isRequired,
        onClick: func,
        target: string
      },
    
      getDefaultProps: function getDefaultProps() {
        return {
          onlyActiveOnIndex: false,
          style: {}
        };
      },
      handleClick: function handleClick(event) {
        !this.context.router ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, '<Link>s rendered outside of a router context cannot handle clicks.') : (0, _invariant2.default)(false) : void 0;
    
        var allowTransition = true;
    
        if (this.props.onClick) this.props.onClick(event);
    
        if (isModifiedEvent(event) || !isLeftClickEvent(event)) return;
    
        if (event.defaultPrevented === true) allowTransition = false;
    
        // If target prop is set (e.g. to "_blank") let browser handle link.
        /* istanbul ignore if: untestable with Karma */
        if (this.props.target) {
          if (!allowTransition) event.preventDefault();
    
          return;
        }
    
        event.preventDefault();
    
        if (allowTransition) {
          var _props = this.props;
          var to = _props.to;
          var query = _props.query;
          var hash = _props.hash;
          var state = _props.state;
    
          var location = createLocationDescriptor(to, { query: query, hash: hash, state: state });
    
          this.context.router.push(location);
        }
      },
      render: function render() {
        var _props2 = this.props;
        var to = _props2.to;
        var query = _props2.query;
        var hash = _props2.hash;
        var state = _props2.state;
        var activeClassName = _props2.activeClassName;
        var activeStyle = _props2.activeStyle;
        var onlyActiveOnIndex = _props2.onlyActiveOnIndex;
    
        var props = _objectWithoutProperties(_props2, ['to', 'query', 'hash', 'state', 'activeClassName', 'activeStyle', 'onlyActiveOnIndex']);
    
        process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(!(query || hash || state), 'the `query`, `hash`, and `state` props on `<Link>` are deprecated, use `<Link to={{ pathname, query, hash, state }}/>. http://tiny.cc/router-isActivedeprecated') : void 0;
    
        // Ignore if rendered outside the context of router, simplifies unit testing.
        var router = this.context.router;
    
    
        if (router) {
          var location = createLocationDescriptor(to, { query: query, hash: hash, state: state });
          props.href = router.createHref(location);
    
          if (activeClassName || activeStyle != null && !isEmptyObject(activeStyle)) {
            if (router.isActive(location, onlyActiveOnIndex)) {
              if (activeClassName) {
                if (props.className) {
                  props.className += ' ' + activeClassName;
                } else {
                  props.className = activeClassName;
                }
              }
    
              if (activeStyle) props.style = _extends({}, props.style, activeStyle);
            }
          }
        }
    
        return _react2.default.createElement('a', _extends({}, props, { onClick: this.handleClick }));
      }
    });
    
    exports.default = Link;
    module.exports = exports['default'];
  provide("react-router/lib/Link", module.exports);
}(global));

// pakmanager:react-router/lib/Redirect
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    
    var _react = require('react');
    
    var _react2 = _interopRequireDefault(_react);
    
    var _invariant = require('invariant');
    
    var _invariant2 = _interopRequireDefault(_invariant);
    
    var _RouteUtils =  require('react-router/lib/RouteUtils');
    
    var _PatternUtils =  require('react-router/lib/PatternUtils');
    
    var _InternalPropTypes =  require('react-router/lib/InternalPropTypes');
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    var _React$PropTypes = _react2.default.PropTypes;
    var string = _React$PropTypes.string;
    var object = _React$PropTypes.object;
    
    /**
     * A <Redirect> is used to declare another URL path a client should
     * be sent to when they request a given URL.
     *
     * Redirects are placed alongside routes in the route configuration
     * and are traversed in the same manner.
     */
    
    var Redirect = _react2.default.createClass({
      displayName: 'Redirect',
    
    
      statics: {
        createRouteFromReactElement: function createRouteFromReactElement(element) {
          var route = (0, _RouteUtils.createRouteFromReactElement)(element);
    
          if (route.from) route.path = route.from;
    
          route.onEnter = function (nextState, replace) {
            var location = nextState.location;
            var params = nextState.params;
    
    
            var pathname = void 0;
            if (route.to.charAt(0) === '/') {
              pathname = (0, _PatternUtils.formatPattern)(route.to, params);
            } else if (!route.to) {
              pathname = location.pathname;
            } else {
              var routeIndex = nextState.routes.indexOf(route);
              var parentPattern = Redirect.getRoutePattern(nextState.routes, routeIndex - 1);
              var pattern = parentPattern.replace(/\/*$/, '/') + route.to;
              pathname = (0, _PatternUtils.formatPattern)(pattern, params);
            }
    
            replace({
              pathname: pathname,
              query: route.query || location.query,
              state: route.state || location.state
            });
          };
    
          return route;
        },
        getRoutePattern: function getRoutePattern(routes, routeIndex) {
          var parentPattern = '';
    
          for (var i = routeIndex; i >= 0; i--) {
            var route = routes[i];
            var pattern = route.path || '';
    
            parentPattern = pattern.replace(/\/*$/, '/') + parentPattern;
    
            if (pattern.indexOf('/') === 0) break;
          }
    
          return '/' + parentPattern;
        }
      },
    
      propTypes: {
        path: string,
        from: string, // Alias for path
        to: string.isRequired,
        query: object,
        state: object,
        onEnter: _InternalPropTypes.falsy,
        children: _InternalPropTypes.falsy
      },
    
      /* istanbul ignore next: sanity check */
      render: function render() {
        !false ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, '<Redirect> elements are for router configuration only and should not be rendered') : (0, _invariant2.default)(false) : void 0;
      }
    });
    
    exports.default = Redirect;
    module.exports = exports['default'];
  provide("react-router/lib/Redirect", module.exports);
}(global));

// pakmanager:react-router/lib/createMemoryHistory
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    exports.default = createMemoryHistory;
    
    var _useQueries = require('history/lib/useQueries');
    
    var _useQueries2 = _interopRequireDefault(_useQueries);
    
    var _useBasename = require('history/lib/useBasename');
    
    var _useBasename2 = _interopRequireDefault(_useBasename);
    
    var _createMemoryHistory = require('history/lib/createMemoryHistory');
    
    var _createMemoryHistory2 = _interopRequireDefault(_createMemoryHistory);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function createMemoryHistory(options) {
      // signatures and type checking differ between `useRoutes` and
      // `createMemoryHistory`, have to create `memoryHistory` first because
      // `useQueries` doesn't understand the signature
      var memoryHistory = (0, _createMemoryHistory2.default)(options);
      var createHistory = function createHistory() {
        return memoryHistory;
      };
      var history = (0, _useQueries2.default)((0, _useBasename2.default)(createHistory))(options);
      history.__v2_compatible__ = true;
      return history;
    }
    module.exports = exports['default'];
  provide("react-router/lib/createMemoryHistory", module.exports);
}(global));

// pakmanager:react-router/lib/createRouterHistory
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    
    exports.default = function (createHistory) {
      var history = void 0;
      if (canUseDOM) history = (0, _useRouterHistory2.default)(createHistory)();
      return history;
    };
    
    var _useRouterHistory =  require('react-router/lib/useRouterHistory');
    
    var _useRouterHistory2 = _interopRequireDefault(_useRouterHistory);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
    
    module.exports = exports['default'];
  provide("react-router/lib/createRouterHistory", module.exports);
}(global));

// pakmanager:react-router/lib/Router
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    
    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
    
    var _createHashHistory = require('history/lib/createHashHistory');
    
    var _createHashHistory2 = _interopRequireDefault(_createHashHistory);
    
    var _useQueries = require('history/lib/useQueries');
    
    var _useQueries2 = _interopRequireDefault(_useQueries);
    
    var _invariant = require('invariant');
    
    var _invariant2 = _interopRequireDefault(_invariant);
    
    var _react = require('react');
    
    var _react2 = _interopRequireDefault(_react);
    
    var _createTransitionManager =  require('react-router/lib/createTransitionManager');
    
    var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);
    
    var _InternalPropTypes =  require('react-router/lib/InternalPropTypes');
    
    var _RouterContext =  require('react-router/lib/RouterContext');
    
    var _RouterContext2 = _interopRequireDefault(_RouterContext);
    
    var _RouteUtils =  require('react-router/lib/RouteUtils');
    
    var _RouterUtils =  require('react-router/lib/RouterUtils');
    
    var _routerWarning =  require('react-router/lib/routerWarning');
    
    var _routerWarning2 = _interopRequireDefault(_routerWarning);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
    
    function isDeprecatedHistory(history) {
      return !history || !history.__v2_compatible__;
    }
    
    /* istanbul ignore next: sanity check */
    function isUnsupportedHistory(history) {
      // v3 histories expose getCurrentLocation, but aren't currently supported.
      return history && history.getCurrentLocation;
    }
    
    var _React$PropTypes = _react2.default.PropTypes;
    var func = _React$PropTypes.func;
    var object = _React$PropTypes.object;
    
    /**
     * A <Router> is a high-level API for automatically setting up
     * a router that renders a <RouterContext> with all the props
     * it needs each time the URL changes.
     */
    
    var Router = _react2.default.createClass({
      displayName: 'Router',
    
    
      propTypes: {
        history: object,
        children: _InternalPropTypes.routes,
        routes: _InternalPropTypes.routes, // alias for children
        render: func,
        createElement: func,
        onError: func,
        onUpdate: func,
    
        // PRIVATE: For client-side rehydration of server match.
        matchContext: object
      },
    
      getDefaultProps: function getDefaultProps() {
        return {
          render: function render(props) {
            return _react2.default.createElement(_RouterContext2.default, props);
          }
        };
      },
      getInitialState: function getInitialState() {
        return {
          location: null,
          routes: null,
          params: null,
          components: null
        };
      },
      handleError: function handleError(error) {
        if (this.props.onError) {
          this.props.onError.call(this, error);
        } else {
          // Throw errors by default so we don't silently swallow them!
          throw error; // This error probably occurred in getChildRoutes or getComponents.
        }
      },
      componentWillMount: function componentWillMount() {
        var _this = this;
    
        var _props = this.props;
        var parseQueryString = _props.parseQueryString;
        var stringifyQuery = _props.stringifyQuery;
    
        process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(!(parseQueryString || stringifyQuery), '`parseQueryString` and `stringifyQuery` are deprecated. Please create a custom history. http://tiny.cc/router-customquerystring') : void 0;
    
        var _createRouterObjects = this.createRouterObjects();
    
        var history = _createRouterObjects.history;
        var transitionManager = _createRouterObjects.transitionManager;
        var router = _createRouterObjects.router;
    
    
        this._unlisten = transitionManager.listen(function (error, state) {
          if (error) {
            _this.handleError(error);
          } else {
            _this.setState(state, _this.props.onUpdate);
          }
        });
    
        this.history = history;
        this.router = router;
      },
      createRouterObjects: function createRouterObjects() {
        var matchContext = this.props.matchContext;
    
        if (matchContext) {
          return matchContext;
        }
    
        var history = this.props.history;
        var _props2 = this.props;
        var routes = _props2.routes;
        var children = _props2.children;
    
    
        !!isUnsupportedHistory(history) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'You have provided a history object created with history v3.x. ' + 'This version of React Router is not compatible with v3 history ' + 'objects. Please use history v2.x instead.') : (0, _invariant2.default)(false) : void 0;
    
        if (isDeprecatedHistory(history)) {
          history = this.wrapDeprecatedHistory(history);
        }
    
        var transitionManager = (0, _createTransitionManager2.default)(history, (0, _RouteUtils.createRoutes)(routes || children));
        var router = (0, _RouterUtils.createRouterObject)(history, transitionManager);
        var routingHistory = (0, _RouterUtils.createRoutingHistory)(history, transitionManager);
    
        return { history: routingHistory, transitionManager: transitionManager, router: router };
      },
      wrapDeprecatedHistory: function wrapDeprecatedHistory(history) {
        var _props3 = this.props;
        var parseQueryString = _props3.parseQueryString;
        var stringifyQuery = _props3.stringifyQuery;
    
    
        var createHistory = void 0;
        if (history) {
          process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, 'It appears you have provided a deprecated history object to `<Router/>`, please use a history provided by ' + 'React Router with `import { browserHistory } from \'react-router\'` or `import { hashHistory } from \'react-router\'`. ' + 'If you are using a custom history please create it with `useRouterHistory`, see http://tiny.cc/router-usinghistory for details.') : void 0;
          createHistory = function createHistory() {
            return history;
          };
        } else {
          process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, '`Router` no longer defaults the history prop to hash history. Please use the `hashHistory` singleton instead. http://tiny.cc/router-defaulthistory') : void 0;
          createHistory = _createHashHistory2.default;
        }
    
        return (0, _useQueries2.default)(createHistory)({ parseQueryString: parseQueryString, stringifyQuery: stringifyQuery });
      },
    
    
      /* istanbul ignore next: sanity check */
      componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(nextProps.history === this.props.history, 'You cannot change <Router history>; it will be ignored') : void 0;
    
        process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)((nextProps.routes || nextProps.children) === (this.props.routes || this.props.children), 'You cannot change <Router routes>; it will be ignored') : void 0;
      },
      componentWillUnmount: function componentWillUnmount() {
        if (this._unlisten) this._unlisten();
      },
      render: function render() {
        var _state = this.state;
        var location = _state.location;
        var routes = _state.routes;
        var params = _state.params;
        var components = _state.components;
        var _props4 = this.props;
        var createElement = _props4.createElement;
        var render = _props4.render;
    
        var props = _objectWithoutProperties(_props4, ['createElement', 'render']);
    
        if (location == null) return null; // Async match
    
        // Only forward non-Router-specific props to routing context, as those are
        // the only ones that might be custom routing context props.
        Object.keys(Router.propTypes).forEach(function (propType) {
          return delete props[propType];
        });
    
        return render(_extends({}, props, {
          history: this.history,
          router: this.router,
          location: location,
          routes: routes,
          params: params,
          components: components,
          createElement: createElement
        }));
      }
    });
    
    exports.default = Router;
    module.exports = exports['default'];
  provide("react-router/lib/Router", module.exports);
}(global));

// pakmanager:react-router/lib/IndexLink
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    
    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
    
    var _react = require('react');
    
    var _react2 = _interopRequireDefault(_react);
    
    var _Link =  require('react-router/lib/Link');
    
    var _Link2 = _interopRequireDefault(_Link);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    /**
     * An <IndexLink> is used to link to an <IndexRoute>.
     */
    var IndexLink = _react2.default.createClass({
      displayName: 'IndexLink',
      render: function render() {
        return _react2.default.createElement(_Link2.default, _extends({}, this.props, { onlyActiveOnIndex: true }));
      }
    });
    
    exports.default = IndexLink;
    module.exports = exports['default'];
  provide("react-router/lib/IndexLink", module.exports);
}(global));

// pakmanager:react-router/lib/withRouter
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    
    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
    
    exports.default = withRouter;
    
    var _react = require('react');
    
    var _react2 = _interopRequireDefault(_react);
    
    var _hoistNonReactStatics = require('hoist-non-react-statics');
    
    var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);
    
    var _PropTypes =  require('react-router/lib/PropTypes');
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function getDisplayName(WrappedComponent) {
      return WrappedComponent.displayName || WrappedComponent.name || 'Component';
    }
    
    function withRouter(WrappedComponent) {
      var WithRouter = _react2.default.createClass({
        displayName: 'WithRouter',
    
        contextTypes: { router: _PropTypes.routerShape },
        render: function render() {
          return _react2.default.createElement(WrappedComponent, _extends({}, this.props, { router: this.context.router }));
        }
      });
    
      WithRouter.displayName = 'withRouter(' + getDisplayName(WrappedComponent) + ')';
      WithRouter.WrappedComponent = WrappedComponent;
    
      return (0, _hoistNonReactStatics2.default)(WithRouter, WrappedComponent);
    }
    module.exports = exports['default'];
  provide("react-router/lib/withRouter", module.exports);
}(global));

// pakmanager:react-router/lib/IndexRedirect
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    
    var _react = require('react');
    
    var _react2 = _interopRequireDefault(_react);
    
    var _routerWarning =  require('react-router/lib/routerWarning');
    
    var _routerWarning2 = _interopRequireDefault(_routerWarning);
    
    var _invariant = require('invariant');
    
    var _invariant2 = _interopRequireDefault(_invariant);
    
    var _Redirect =  require('react-router/lib/Redirect');
    
    var _Redirect2 = _interopRequireDefault(_Redirect);
    
    var _InternalPropTypes =  require('react-router/lib/InternalPropTypes');
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    var _React$PropTypes = _react2.default.PropTypes;
    var string = _React$PropTypes.string;
    var object = _React$PropTypes.object;
    
    /**
     * An <IndexRedirect> is used to redirect from an indexRoute.
     */
    
    var IndexRedirect = _react2.default.createClass({
      displayName: 'IndexRedirect',
    
    
      statics: {
        createRouteFromReactElement: function createRouteFromReactElement(element, parentRoute) {
          /* istanbul ignore else: sanity check */
          if (parentRoute) {
            parentRoute.indexRoute = _Redirect2.default.createRouteFromReactElement(element);
          } else {
            process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, 'An <IndexRedirect> does not make sense at the root of your route config') : void 0;
          }
        }
      },
    
      propTypes: {
        to: string.isRequired,
        query: object,
        state: object,
        onEnter: _InternalPropTypes.falsy,
        children: _InternalPropTypes.falsy
      },
    
      /* istanbul ignore next: sanity check */
      render: function render() {
        !false ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, '<IndexRedirect> elements are for router configuration only and should not be rendered') : (0, _invariant2.default)(false) : void 0;
      }
    });
    
    exports.default = IndexRedirect;
    module.exports = exports['default'];
  provide("react-router/lib/IndexRedirect", module.exports);
}(global));

// pakmanager:react-router/lib/IndexRoute
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    
    var _react = require('react');
    
    var _react2 = _interopRequireDefault(_react);
    
    var _routerWarning =  require('react-router/lib/routerWarning');
    
    var _routerWarning2 = _interopRequireDefault(_routerWarning);
    
    var _invariant = require('invariant');
    
    var _invariant2 = _interopRequireDefault(_invariant);
    
    var _RouteUtils =  require('react-router/lib/RouteUtils');
    
    var _InternalPropTypes =  require('react-router/lib/InternalPropTypes');
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    var func = _react2.default.PropTypes.func;
    
    /**
     * An <IndexRoute> is used to specify its parent's <Route indexRoute> in
     * a JSX route config.
     */
    
    var IndexRoute = _react2.default.createClass({
      displayName: 'IndexRoute',
    
    
      statics: {
        createRouteFromReactElement: function createRouteFromReactElement(element, parentRoute) {
          /* istanbul ignore else: sanity check */
          if (parentRoute) {
            parentRoute.indexRoute = (0, _RouteUtils.createRouteFromReactElement)(element);
          } else {
            process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, 'An <IndexRoute> does not make sense at the root of your route config') : void 0;
          }
        }
      },
    
      propTypes: {
        path: _InternalPropTypes.falsy,
        component: _InternalPropTypes.component,
        components: _InternalPropTypes.components,
        getComponent: func,
        getComponents: func
      },
    
      /* istanbul ignore next: sanity check */
      render: function render() {
        !false ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, '<IndexRoute> elements are for router configuration only and should not be rendered') : (0, _invariant2.default)(false) : void 0;
      }
    });
    
    exports.default = IndexRoute;
    module.exports = exports['default'];
  provide("react-router/lib/IndexRoute", module.exports);
}(global));

// pakmanager:react-router/lib/Route
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    
    var _react = require('react');
    
    var _react2 = _interopRequireDefault(_react);
    
    var _invariant = require('invariant');
    
    var _invariant2 = _interopRequireDefault(_invariant);
    
    var _RouteUtils =  require('react-router/lib/RouteUtils');
    
    var _InternalPropTypes =  require('react-router/lib/InternalPropTypes');
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    var _React$PropTypes = _react2.default.PropTypes;
    var string = _React$PropTypes.string;
    var func = _React$PropTypes.func;
    
    /**
     * A <Route> is used to declare which components are rendered to the
     * page when the URL matches a given pattern.
     *
     * Routes are arranged in a nested tree structure. When a new URL is
     * requested, the tree is searched depth-first to find a route whose
     * path matches the URL.  When one is found, all routes in the tree
     * that lead to it are considered "active" and their components are
     * rendered into the DOM, nested in the same order as in the tree.
     */
    
    var Route = _react2.default.createClass({
      displayName: 'Route',
    
    
      statics: {
        createRouteFromReactElement: _RouteUtils.createRouteFromReactElement
      },
    
      propTypes: {
        path: string,
        component: _InternalPropTypes.component,
        components: _InternalPropTypes.components,
        getComponent: func,
        getComponents: func
      },
    
      /* istanbul ignore next: sanity check */
      render: function render() {
        !false ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, '<Route> elements are for router configuration only and should not be rendered') : (0, _invariant2.default)(false) : void 0;
      }
    });
    
    exports.default = Route;
    module.exports = exports['default'];
  provide("react-router/lib/Route", module.exports);
}(global));

// pakmanager:react-router/lib/History
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    
    var _routerWarning =  require('react-router/lib/routerWarning');
    
    var _routerWarning2 = _interopRequireDefault(_routerWarning);
    
    var _InternalPropTypes =  require('react-router/lib/InternalPropTypes');
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    /**
     * A mixin that adds the "history" instance variable to components.
     */
    var History = {
    
      contextTypes: {
        history: _InternalPropTypes.history
      },
    
      componentWillMount: function componentWillMount() {
        process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, 'the `History` mixin is deprecated, please access `context.router` with your own `contextTypes`. http://tiny.cc/router-historymixin') : void 0;
        this.history = this.context.history;
      }
    };
    
    exports.default = History;
    module.exports = exports['default'];
  provide("react-router/lib/History", module.exports);
}(global));

// pakmanager:react-router/lib/Lifecycle
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    
    var _routerWarning =  require('react-router/lib/routerWarning');
    
    var _routerWarning2 = _interopRequireDefault(_routerWarning);
    
    var _react = require('react');
    
    var _react2 = _interopRequireDefault(_react);
    
    var _invariant = require('invariant');
    
    var _invariant2 = _interopRequireDefault(_invariant);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    var object = _react2.default.PropTypes.object;
    
    /**
     * The Lifecycle mixin adds the routerWillLeave lifecycle method to a
     * component that may be used to cancel a transition or prompt the user
     * for confirmation.
     *
     * On standard transitions, routerWillLeave receives a single argument: the
     * location we're transitioning to. To cancel the transition, return false.
     * To prompt the user for confirmation, return a prompt message (string).
     *
     * During the beforeunload event (assuming you're using the useBeforeUnload
     * history enhancer), routerWillLeave does not receive a location object
     * because it isn't possible for us to know the location we're transitioning
     * to. In this case routerWillLeave must return a prompt message to prevent
     * the user from closing the window/tab.
     */
    
    var Lifecycle = {
    
      contextTypes: {
        history: object.isRequired,
        // Nested children receive the route as context, either
        // set by the route component using the RouteContext mixin
        // or by some other ancestor.
        route: object
      },
    
      propTypes: {
        // Route components receive the route object as a prop.
        route: object
      },
    
      componentDidMount: function componentDidMount() {
        process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, 'the `Lifecycle` mixin is deprecated, please use `context.router.setRouteLeaveHook(route, hook)`. http://tiny.cc/router-lifecyclemixin') : void 0;
        !this.routerWillLeave ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'The Lifecycle mixin requires you to define a routerWillLeave method') : (0, _invariant2.default)(false) : void 0;
    
        var route = this.props.route || this.context.route;
    
        !route ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'The Lifecycle mixin must be used on either a) a <Route component> or ' + 'b) a descendant of a <Route component> that uses the RouteContext mixin') : (0, _invariant2.default)(false) : void 0;
    
        this._unlistenBeforeLeavingRoute = this.context.history.listenBeforeLeavingRoute(route, this.routerWillLeave);
      },
      componentWillUnmount: function componentWillUnmount() {
        if (this._unlistenBeforeLeavingRoute) this._unlistenBeforeLeavingRoute();
      }
    };
    
    exports.default = Lifecycle;
    module.exports = exports['default'];
  provide("react-router/lib/Lifecycle", module.exports);
}(global));

// pakmanager:react-router/lib/RouteContext
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    
    var _routerWarning =  require('react-router/lib/routerWarning');
    
    var _routerWarning2 = _interopRequireDefault(_routerWarning);
    
    var _react = require('react');
    
    var _react2 = _interopRequireDefault(_react);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    var object = _react2.default.PropTypes.object;
    
    /**
     * The RouteContext mixin provides a convenient way for route
     * components to set the route in context. This is needed for
     * routes that render elements that want to use the Lifecycle
     * mixin to prevent transitions.
     */
    
    var RouteContext = {
    
      propTypes: {
        route: object.isRequired
      },
    
      childContextTypes: {
        route: object.isRequired
      },
    
      getChildContext: function getChildContext() {
        return {
          route: this.props.route
        };
      },
      componentWillMount: function componentWillMount() {
        process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, 'The `RouteContext` mixin is deprecated. You can provide `this.props.route` on context with your own `contextTypes`. http://tiny.cc/router-routecontextmixin') : void 0;
      }
    };
    
    exports.default = RouteContext;
    module.exports = exports['default'];
  provide("react-router/lib/RouteContext", module.exports);
}(global));

// pakmanager:react-router/lib/useRoutes
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    
    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
    
    var _useQueries = require('history/lib/useQueries');
    
    var _useQueries2 = _interopRequireDefault(_useQueries);
    
    var _createTransitionManager =  require('react-router/lib/createTransitionManager');
    
    var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);
    
    var _routerWarning =  require('react-router/lib/routerWarning');
    
    var _routerWarning2 = _interopRequireDefault(_routerWarning);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
    
    /**
     * Returns a new createHistory function that may be used to create
     * history objects that know about routing.
     *
     * Enhances history objects with the following methods:
     *
     * - listen((error, nextState) => {})
     * - listenBeforeLeavingRoute(route, (nextLocation) => {})
     * - match(location, (error, redirectLocation, nextState) => {})
     * - isActive(pathname, query, indexOnly=false)
     */
    function useRoutes(createHistory) {
      process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, '`useRoutes` is deprecated. Please use `createTransitionManager` instead.') : void 0;
    
      return function () {
        var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    
        var routes = _ref.routes;
    
        var options = _objectWithoutProperties(_ref, ['routes']);
    
        var history = (0, _useQueries2.default)(createHistory)(options);
        var transitionManager = (0, _createTransitionManager2.default)(history, routes);
        return _extends({}, history, transitionManager);
      };
    }
    
    exports.default = useRoutes;
    module.exports = exports['default'];
  provide("react-router/lib/useRoutes", module.exports);
}(global));

// pakmanager:react-router/lib/RoutingContext
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    
    var _react = require('react');
    
    var _react2 = _interopRequireDefault(_react);
    
    var _RouterContext =  require('react-router/lib/RouterContext');
    
    var _RouterContext2 = _interopRequireDefault(_RouterContext);
    
    var _routerWarning =  require('react-router/lib/routerWarning');
    
    var _routerWarning2 = _interopRequireDefault(_routerWarning);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    var RoutingContext = _react2.default.createClass({
      displayName: 'RoutingContext',
      componentWillMount: function componentWillMount() {
        process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, '`RoutingContext` has been renamed to `RouterContext`. Please use `import { RouterContext } from \'react-router\'`. http://tiny.cc/router-routercontext') : void 0;
      },
      render: function render() {
        return _react2.default.createElement(_RouterContext2.default, this.props);
      }
    });
    
    exports.default = RoutingContext;
    module.exports = exports['default'];
  provide("react-router/lib/RoutingContext", module.exports);
}(global));

// pakmanager:react-router/lib/match
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    
    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
    
    var _invariant = require('invariant');
    
    var _invariant2 = _interopRequireDefault(_invariant);
    
    var _createMemoryHistory =  require('react-router/lib/createMemoryHistory');
    
    var _createMemoryHistory2 = _interopRequireDefault(_createMemoryHistory);
    
    var _createTransitionManager =  require('react-router/lib/createTransitionManager');
    
    var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);
    
    var _RouteUtils =  require('react-router/lib/RouteUtils');
    
    var _RouterUtils =  require('react-router/lib/RouterUtils');
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
    
    /**
     * A high-level API to be used for server-side rendering.
     *
     * This function matches a location to a set of routes and calls
     * callback(error, redirectLocation, renderProps) when finished.
     *
     * Note: You probably don't want to use this in a browser unless you're using
     * server-side rendering with async routes.
     */
    function match(_ref, callback) {
      var history = _ref.history;
      var routes = _ref.routes;
      var location = _ref.location;
    
      var options = _objectWithoutProperties(_ref, ['history', 'routes', 'location']);
    
      !(history || location) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'match needs a history or a location') : (0, _invariant2.default)(false) : void 0;
    
      history = history ? history : (0, _createMemoryHistory2.default)(options);
      var transitionManager = (0, _createTransitionManager2.default)(history, (0, _RouteUtils.createRoutes)(routes));
    
      var unlisten = void 0;
    
      if (location) {
        // Allow match({ location: '/the/path', ... })
        location = history.createLocation(location);
      } else {
        // Pick up the location from the history via synchronous history.listen
        // call if needed.
        unlisten = history.listen(function (historyLocation) {
          location = historyLocation;
        });
      }
    
      var router = (0, _RouterUtils.createRouterObject)(history, transitionManager);
      history = (0, _RouterUtils.createRoutingHistory)(history, transitionManager);
    
      transitionManager.match(location, function (error, redirectLocation, nextState) {
        callback(error, redirectLocation, nextState && _extends({}, nextState, {
          history: history,
          router: router,
          matchContext: { history: history, transitionManager: transitionManager, router: router }
        }));
    
        // Defer removing the listener to here to prevent DOM histories from having
        // to unwind DOM event listeners unnecessarily, in case callback renders a
        // <Router> and attaches another history listener.
        if (unlisten) {
          unlisten();
        }
      });
    }
    
    exports.default = match;
    module.exports = exports['default'];
  provide("react-router/lib/match", module.exports);
}(global));

// pakmanager:react-router/lib/applyRouterMiddleware
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    
    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
    
    var _react = require('react');
    
    var _react2 = _interopRequireDefault(_react);
    
    var _RouterContext =  require('react-router/lib/RouterContext');
    
    var _RouterContext2 = _interopRequireDefault(_RouterContext);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    exports.default = function () {
      for (var _len = arguments.length, middlewares = Array(_len), _key = 0; _key < _len; _key++) {
        middlewares[_key] = arguments[_key];
      }
    
      var withContext = middlewares.map(function (m) {
        return m.renderRouterContext;
      }).filter(function (f) {
        return f;
      });
      var withComponent = middlewares.map(function (m) {
        return m.renderRouteComponent;
      }).filter(function (f) {
        return f;
      });
      var makeCreateElement = function makeCreateElement() {
        var baseCreateElement = arguments.length <= 0 || arguments[0] === undefined ? _react.createElement : arguments[0];
        return function (Component, props) {
          return withComponent.reduceRight(function (previous, renderRouteComponent) {
            return renderRouteComponent(previous, props);
          }, baseCreateElement(Component, props));
        };
      };
    
      return function (renderProps) {
        return withContext.reduceRight(function (previous, renderRouterContext) {
          return renderRouterContext(previous, renderProps);
        }, _react2.default.createElement(_RouterContext2.default, _extends({}, renderProps, {
          createElement: makeCreateElement(renderProps.createElement)
        })));
      };
    };
    
    module.exports = exports['default'];
  provide("react-router/lib/applyRouterMiddleware", module.exports);
}(global));

// pakmanager:react-router/lib/browserHistory
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    
    var _createBrowserHistory = require('history/lib/createBrowserHistory');
    
    var _createBrowserHistory2 = _interopRequireDefault(_createBrowserHistory);
    
    var _createRouterHistory =  require('react-router/lib/createRouterHistory');
    
    var _createRouterHistory2 = _interopRequireDefault(_createRouterHistory);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    exports.default = (0, _createRouterHistory2.default)(_createBrowserHistory2.default);
    module.exports = exports['default'];
  provide("react-router/lib/browserHistory", module.exports);
}(global));

// pakmanager:react-router/lib/hashHistory
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    
    var _createHashHistory = require('history/lib/createHashHistory');
    
    var _createHashHistory2 = _interopRequireDefault(_createHashHistory);
    
    var _createRouterHistory =  require('react-router/lib/createRouterHistory');
    
    var _createRouterHistory2 = _interopRequireDefault(_createRouterHistory);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    exports.default = (0, _createRouterHistory2.default)(_createHashHistory2.default);
    module.exports = exports['default'];
  provide("react-router/lib/hashHistory", module.exports);
}(global));

// pakmanager:react-router
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  'use strict';
    
    exports.__esModule = true;
    exports.createMemoryHistory = exports.hashHistory = exports.browserHistory = exports.applyRouterMiddleware = exports.formatPattern = exports.useRouterHistory = exports.match = exports.routerShape = exports.locationShape = exports.PropTypes = exports.RoutingContext = exports.RouterContext = exports.createRoutes = exports.useRoutes = exports.RouteContext = exports.Lifecycle = exports.History = exports.Route = exports.Redirect = exports.IndexRoute = exports.IndexRedirect = exports.withRouter = exports.IndexLink = exports.Link = exports.Router = undefined;
    
    var _RouteUtils =  require('react-router/lib/RouteUtils');
    
    Object.defineProperty(exports, 'createRoutes', {
      enumerable: true,
      get: function get() {
        return _RouteUtils.createRoutes;
      }
    });
    
    var _PropTypes2 =  require('react-router/lib/PropTypes');
    
    Object.defineProperty(exports, 'locationShape', {
      enumerable: true,
      get: function get() {
        return _PropTypes2.locationShape;
      }
    });
    Object.defineProperty(exports, 'routerShape', {
      enumerable: true,
      get: function get() {
        return _PropTypes2.routerShape;
      }
    });
    
    var _PatternUtils =  require('react-router/lib/PatternUtils');
    
    Object.defineProperty(exports, 'formatPattern', {
      enumerable: true,
      get: function get() {
        return _PatternUtils.formatPattern;
      }
    });
    
    var _Router2 =  require('react-router/lib/Router');
    
    var _Router3 = _interopRequireDefault(_Router2);
    
    var _Link2 =  require('react-router/lib/Link');
    
    var _Link3 = _interopRequireDefault(_Link2);
    
    var _IndexLink2 =  require('react-router/lib/IndexLink');
    
    var _IndexLink3 = _interopRequireDefault(_IndexLink2);
    
    var _withRouter2 =  require('react-router/lib/withRouter');
    
    var _withRouter3 = _interopRequireDefault(_withRouter2);
    
    var _IndexRedirect2 =  require('react-router/lib/IndexRedirect');
    
    var _IndexRedirect3 = _interopRequireDefault(_IndexRedirect2);
    
    var _IndexRoute2 =  require('react-router/lib/IndexRoute');
    
    var _IndexRoute3 = _interopRequireDefault(_IndexRoute2);
    
    var _Redirect2 =  require('react-router/lib/Redirect');
    
    var _Redirect3 = _interopRequireDefault(_Redirect2);
    
    var _Route2 =  require('react-router/lib/Route');
    
    var _Route3 = _interopRequireDefault(_Route2);
    
    var _History2 =  require('react-router/lib/History');
    
    var _History3 = _interopRequireDefault(_History2);
    
    var _Lifecycle2 =  require('react-router/lib/Lifecycle');
    
    var _Lifecycle3 = _interopRequireDefault(_Lifecycle2);
    
    var _RouteContext2 =  require('react-router/lib/RouteContext');
    
    var _RouteContext3 = _interopRequireDefault(_RouteContext2);
    
    var _useRoutes2 =  require('react-router/lib/useRoutes');
    
    var _useRoutes3 = _interopRequireDefault(_useRoutes2);
    
    var _RouterContext2 =  require('react-router/lib/RouterContext');
    
    var _RouterContext3 = _interopRequireDefault(_RouterContext2);
    
    var _RoutingContext2 =  require('react-router/lib/RoutingContext');
    
    var _RoutingContext3 = _interopRequireDefault(_RoutingContext2);
    
    var _PropTypes3 = _interopRequireDefault(_PropTypes2);
    
    var _match2 =  require('react-router/lib/match');
    
    var _match3 = _interopRequireDefault(_match2);
    
    var _useRouterHistory2 =  require('react-router/lib/useRouterHistory');
    
    var _useRouterHistory3 = _interopRequireDefault(_useRouterHistory2);
    
    var _applyRouterMiddleware2 =  require('react-router/lib/applyRouterMiddleware');
    
    var _applyRouterMiddleware3 = _interopRequireDefault(_applyRouterMiddleware2);
    
    var _browserHistory2 =  require('react-router/lib/browserHistory');
    
    var _browserHistory3 = _interopRequireDefault(_browserHistory2);
    
    var _hashHistory2 =  require('react-router/lib/hashHistory');
    
    var _hashHistory3 = _interopRequireDefault(_hashHistory2);
    
    var _createMemoryHistory2 =  require('react-router/lib/createMemoryHistory');
    
    var _createMemoryHistory3 = _interopRequireDefault(_createMemoryHistory2);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    exports.Router = _Router3.default; /* components */
    
    exports.Link = _Link3.default;
    exports.IndexLink = _IndexLink3.default;
    exports.withRouter = _withRouter3.default;
    
    /* components (configuration) */
    
    exports.IndexRedirect = _IndexRedirect3.default;
    exports.IndexRoute = _IndexRoute3.default;
    exports.Redirect = _Redirect3.default;
    exports.Route = _Route3.default;
    
    /* mixins */
    
    exports.History = _History3.default;
    exports.Lifecycle = _Lifecycle3.default;
    exports.RouteContext = _RouteContext3.default;
    
    /* utils */
    
    exports.useRoutes = _useRoutes3.default;
    exports.RouterContext = _RouterContext3.default;
    exports.RoutingContext = _RoutingContext3.default;
    exports.PropTypes = _PropTypes3.default;
    exports.match = _match3.default;
    exports.useRouterHistory = _useRouterHistory3.default;
    exports.applyRouterMiddleware = _applyRouterMiddleware3.default;
    
    /* histories */
    
    exports.browserHistory = _browserHistory3.default;
    exports.hashHistory = _hashHistory3.default;
    exports.createMemoryHistory = _createMemoryHistory3.default;
  provide("react-router", module.exports);
}(global));

// pakmanager:react-router-role-authorization
(function (context) {
  
  var module = { exports: {} }, exports = module.exports
    , $ = require("ender")
    ;
  
  (function webpackUniversalModuleDefinition(root, factory) {
    	if(typeof exports === 'object' && typeof module === 'object')
    		module.exports = factory(require("react"));
    	else if(typeof define === 'function' && define.amd)
    		define(["react"], factory);
    	else if(typeof exports === 'object')
    		exports["ReactRouterRoleAuthorization"] = factory(require("react"));
    	else
    		root["ReactRouterRoleAuthorization"] = factory(root["React"]);
    })(this, function(__WEBPACK_EXTERNAL_MODULE_84__) {
    return /******/ (function(modules) { // webpackBootstrap
    /******/ 	// The module cache
    /******/ 	var installedModules = {};
    
    /******/ 	// The require function
    /******/ 	function __webpack_require__(moduleId) {
    
    /******/ 		// Check if module is in cache
    /******/ 		if(installedModules[moduleId])
    /******/ 			return installedModules[moduleId].exports;
    
    /******/ 		// Create a new module (and put it into the cache)
    /******/ 		var module = installedModules[moduleId] = {
    /******/ 			exports: {},
    /******/ 			id: moduleId,
    /******/ 			loaded: false
    /******/ 		};
    
    /******/ 		// Execute the module function
    /******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    
    /******/ 		// Flag the module as loaded
    /******/ 		module.loaded = true;
    
    /******/ 		// Return the exports of the module
    /******/ 		return module.exports;
    /******/ 	}
    
    
    /******/ 	// expose the modules object (__webpack_modules__)
    /******/ 	__webpack_require__.m = modules;
    
    /******/ 	// expose the module cache
    /******/ 	__webpack_require__.c = installedModules;
    
    /******/ 	// __webpack_public_path__
    /******/ 	__webpack_require__.p = "";
    
    /******/ 	// Load entry module and return exports
    /******/ 	return __webpack_require__(0);
    /******/ })
    /************************************************************************/
    /******/ ([
    /* 0 */
    /***/ function(module, exports, __webpack_require__) {
    
    	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
    	  if (true) {
    	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(1), __webpack_require__(92)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    	  } else if (typeof exports !== "undefined") {
    	    factory(exports, require('./components/AuthorizedComponent.react'), require('./components/RoleAwareComponent.react'));
    	  } else {
    	    var mod = {
    	      exports: {}
    	    };
    	    factory(mod.exports, global.AuthorizedComponent, global.RoleAwareComponent);
    	    global.index = mod.exports;
    	  }
    	})(this, function (exports, _AuthorizedComponent, _RoleAwareComponent) {
    	  'use strict';
    
    	  Object.defineProperty(exports, "__esModule", {
    	    value: true
    	  });
    	  exports.RoleAwareComponent = exports.AuthorizedComponent = undefined;
    
    	  var _AuthorizedComponent2 = _interopRequireDefault(_AuthorizedComponent);
    
    	  var _RoleAwareComponent2 = _interopRequireDefault(_RoleAwareComponent);
    
    	  function _interopRequireDefault(obj) {
    	    return obj && obj.__esModule ? obj : {
    	      default: obj
    	    };
    	  }
    
    	  exports.AuthorizedComponent = _AuthorizedComponent2.default;
    	  exports.RoleAwareComponent = _RoleAwareComponent2.default;
    	});
    
    /***/ },
    /* 1 */
    /***/ function(module, exports, __webpack_require__) {
    
    	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
    	  if (true) {
    	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [module, exports, __webpack_require__(2), __webpack_require__(28), __webpack_require__(88), __webpack_require__(29), __webpack_require__(76), __webpack_require__(84), __webpack_require__(85)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    	  } else if (typeof exports !== "undefined") {
    	    factory(module, exports, require('babel-runtime/core-js/object/get-prototype-of'), require('babel-runtime/helpers/classCallCheck'), require('babel-runtime/helpers/createClass'), require('babel-runtime/helpers/possibleConstructorReturn'), require('babel-runtime/helpers/inherits'), require('react'), require('../utils/roleMatcher'));
    	  } else {
    	    var mod = {
    	      exports: {}
    	    };
    	    factory(mod, mod.exports, global.getPrototypeOf, global.classCallCheck, global.createClass, global.possibleConstructorReturn, global.inherits, global.react, global.roleMatcher);
    	    global.AuthorizedComponentReact = mod.exports;
    	  }
    	})(this, function (module, exports, _getPrototypeOf, _classCallCheck2, _createClass2, _possibleConstructorReturn2, _inherits2, _react, _roleMatcher) {
    	  'use strict';
    
    	  Object.defineProperty(exports, "__esModule", {
    	    value: true
    	  });
    
    	  var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);
    
    	  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
    
    	  var _createClass3 = _interopRequireDefault(_createClass2);
    
    	  var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
    
    	  var _inherits3 = _interopRequireDefault(_inherits2);
    
    	  var _react2 = _interopRequireDefault(_react);
    
    	  var roleMatcher = _interopRequireWildcard(_roleMatcher);
    
    	  function _interopRequireWildcard(obj) {
    	    if (obj && obj.__esModule) {
    	      return obj;
    	    } else {
    	      var newObj = {};
    
    	      if (obj != null) {
    	        for (var key in obj) {
    	          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
    	        }
    	      }
    
    	      newObj.default = obj;
    	      return newObj;
    	    }
    	  }
    
    	  function _interopRequireDefault(obj) {
    	    return obj && obj.__esModule ? obj : {
    	      default: obj
    	    };
    	  }
    
    	  var _class, _temp;
    
    	  var AuthorizedComponent = (_temp = _class = function (_React$Component) {
    	    (0, _inherits3.default)(AuthorizedComponent, _React$Component);
    
    	    function AuthorizedComponent(props) {
    	      (0, _classCallCheck3.default)(this, AuthorizedComponent);
    
    	      var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(AuthorizedComponent).call(this, props));
    
    	      // this is placeholder for user roles (should be get during authentication)
    	      _this.userRoles = undefined;
    
    	      // default path where to redirect when roles not match
    	      _this.notAuthorizedPath = undefined;
    	      return _this;
    	    }
    
    	    (0, _createClass3.default)(AuthorizedComponent, [{
    	      key: 'componentWillMount',
    	      value: function componentWillMount() {
    	        // validate properties first
    	        this.validate();
    
    	        // when you use react-router, these should be set
    	        var routes = this.props.routes;
    	        var router = this.context.router;
    
    
    	        // check roles
    	        var routeRoles = roleMatcher.getFlatterRoles(routes);
    	        if (roleMatcher.rolesMatched(routeRoles, this.userRoles) === false) {
    	          router.push(this.notAuthorizedPath);
    	        }
    	      }
    	    }, {
    	      key: 'validate',
    	      value: function validate() {
    	        if (this.userRoles === undefined) {
    	          throw new Error('AuthorizedComponent: No user roles defined! Please define them in the constructor of your component.');
    	        }
    
    	        if (this.notAuthorizedPath === undefined) {
    	          throw new Error('AuthorizedComponent: No not authorized path defined! Please define it in the constructor of your component.');
    	        }
    	      }
    	    }]);
    	    return AuthorizedComponent;
    	  }(_react2.default.Component), _class.propTypes = {
    	    routes: _react.PropTypes.array.isRequired
    	  }, _class.contextTypes = {
    	    router: _react.PropTypes.object.isRequired
    	  }, _temp);
    	  exports.default = AuthorizedComponent;
    	  module.exports = exports['default'];
    	});
    
    /***/ },
    /* 2 */
    /***/ function(module, exports, __webpack_require__) {
    
    	module.exports = { "default": __webpack_require__(3), __esModule: true };
    
    /***/ },
    /* 3 */
    /***/ function(module, exports, __webpack_require__) {
    
    	__webpack_require__(4);
    	module.exports = __webpack_require__(15).Object.getPrototypeOf;
    
    /***/ },
    /* 4 */
    /***/ function(module, exports, __webpack_require__) {
    
    	// 19.1.2.9 Object.getPrototypeOf(O)
    	var toObject        = __webpack_require__(5)
    	  , $getPrototypeOf = __webpack_require__(7);
    
    	__webpack_require__(13)('getPrototypeOf', function(){
    	  return function getPrototypeOf(it){
    	    return $getPrototypeOf(toObject(it));
    	  };
    	});
    
    /***/ },
    /* 5 */
    /***/ function(module, exports, __webpack_require__) {
    
    	// 7.1.13 ToObject(argument)
    	var defined = __webpack_require__(6);
    	module.exports = function(it){
    	  return Object(defined(it));
    	};
    
    /***/ },
    /* 6 */
    /***/ function(module, exports) {
    
    	// 7.2.1 RequireObjectCoercible(argument)
    	module.exports = function(it){
    	  if(it == undefined)throw TypeError("Can't call method on  " + it);
    	  return it;
    	};
    
    /***/ },
    /* 7 */
    /***/ function(module, exports, __webpack_require__) {
    
    	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
    	var has         = __webpack_require__(8)
    	  , toObject    = __webpack_require__(5)
    	  , IE_PROTO    = __webpack_require__(9)('IE_PROTO')
    	  , ObjectProto = Object.prototype;
    
    	module.exports = Object.getPrototypeOf || function(O){
    	  O = toObject(O);
    	  if(has(O, IE_PROTO))return O[IE_PROTO];
    	  if(typeof O.constructor == 'function' && O instanceof O.constructor){
    	    return O.constructor.prototype;
    	  } return O instanceof Object ? ObjectProto : null;
    	};
    
    /***/ },
    /* 8 */
    /***/ function(module, exports) {
    
    	var hasOwnProperty = {}.hasOwnProperty;
    	module.exports = function(it, key){
    	  return hasOwnProperty.call(it, key);
    	};
    
    /***/ },
    /* 9 */
    /***/ function(module, exports, __webpack_require__) {
    
    	var shared = __webpack_require__(10)('keys')
    	  , uid    = __webpack_require__(12);
    	module.exports = function(key){
    	  return shared[key] || (shared[key] = uid(key));
    	};
    
    /***/ },
    /* 10 */
    /***/ function(module, exports, __webpack_require__) {
    
    	var global = __webpack_require__(11)
    	  , SHARED = '__core-js_shared__'
    	  , store  = global[SHARED] || (global[SHARED] = {});
    	module.exports = function(key){
    	  return store[key] || (store[key] = {});
    	};
    
    /***/ },
    /* 11 */
    /***/ function(module, exports) {
    
    	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
    	var global = module.exports = typeof window != 'undefined' && window.Math == Math
    	  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
    	if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef
    
    /***/ },
    /* 12 */
    /***/ function(module, exports) {
    
    	var id = 0
    	  , px = Math.random();
    	module.exports = function(key){
    	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
    	};
    
    /***/ },
    /* 13 */
    /***/ function(module, exports, __webpack_require__) {
    
    	// most Object methods by ES6 should accept primitives
    	var $export = __webpack_require__(14)
    	  , core    = __webpack_require__(15)
    	  , fails   = __webpack_require__(24);
    	module.exports = function(KEY, exec){
    	  var fn  = (core.Object || {})[KEY] || Object[KEY]
    	    , exp = {};
    	  exp[KEY] = exec(fn);
    	  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
    	};
    
    /***/ },
    /* 14 */
    /***/ function(module, exports, __webpack_require__) {
    
    	var global    = __webpack_require__(11)
    	  , core      = __webpack_require__(15)
    	  , ctx       = __webpack_require__(16)
    	  , hide      = __webpack_require__(18)
    	  , PROTOTYPE = 'prototype';
    
    	var $export = function(type, name, source){
    	  var IS_FORCED = type & $export.F
    	    , IS_GLOBAL = type & $export.G
    	    , IS_STATIC = type & $export.S
    	    , IS_PROTO  = type & $export.P
    	    , IS_BIND   = type & $export.B
    	    , IS_WRAP   = type & $export.W
    	    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
    	    , expProto  = exports[PROTOTYPE]
    	    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
    	    , key, own, out;
    	  if(IS_GLOBAL)source = name;
    	  for(key in source){
    	    // contains in native
    	    own = !IS_FORCED && target && target[key] !== undefined;
    	    if(own && key in exports)continue;
    	    // export native or passed
    	    out = own ? target[key] : source[key];
    	    // prevent global pollution for namespaces
    	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    	    // bind timers to global for call from export context
    	    : IS_BIND && own ? ctx(out, global)
    	    // wrap global constructors for prevent change them in library
    	    : IS_WRAP && target[key] == out ? (function(C){
    	      var F = function(a, b, c){
    	        if(this instanceof C){
    	          switch(arguments.length){
    	            case 0: return new C;
    	            case 1: return new C(a);
    	            case 2: return new C(a, b);
    	          } return new C(a, b, c);
    	        } return C.apply(this, arguments);
    	      };
    	      F[PROTOTYPE] = C[PROTOTYPE];
    	      return F;
    	    // make static versions for prototype methods
    	    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    	    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
    	    if(IS_PROTO){
    	      (exports.virtual || (exports.virtual = {}))[key] = out;
    	      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
    	      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);
    	    }
    	  }
    	};
    	// type bitmap
    	$export.F = 1;   // forced
    	$export.G = 2;   // global
    	$export.S = 4;   // static
    	$export.P = 8;   // proto
    	$export.B = 16;  // bind
    	$export.W = 32;  // wrap
    	$export.U = 64;  // safe
    	$export.R = 128; // real proto method for `library` 
    	module.exports = $export;
    
    /***/ },
    /* 15 */
    /***/ function(module, exports) {
    
    	var core = module.exports = {version: '2.4.0'};
    	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef
    
    /***/ },
    /* 16 */
    /***/ function(module, exports, __webpack_require__) {
    
    	// optional / simple context binding
    	var aFunction = __webpack_require__(17);
    	module.exports = function(fn, that, length){
    	  aFunction(fn);
    	  if(that === undefined)return fn;
    	  switch(length){
    	    case 1: return function(a){
    	      return fn.call(that, a);
    	    };
    	    case 2: return function(a, b){
    	      return fn.call(that, a, b);
    	    };
    	    case 3: return function(a, b, c){
    	      return fn.call(that, a, b, c);
    	    };
    	  }
    	  return function(/* ...args */){
    	    return fn.apply(that, arguments);
    	  };
    	};
    
    /***/ },
    /* 17 */
    /***/ function(module, exports) {
    
    	module.exports = function(it){
    	  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
    	  return it;
    	};
    
    /***/ },
    /* 18 */
    /***/ function(module, exports, __webpack_require__) {
    
    	var dP         = __webpack_require__(19)
    	  , createDesc = __webpack_require__(27);
    	module.exports = __webpack_require__(23) ? function(object, key, value){
    	  return dP.f(object, key, createDesc(1, value));
    	} : function(object, key, value){
    	  object[key] = value;
    	  return object;
    	};
    
    /***/ },
    /* 19 */
    /***/ function(module, exports, __webpack_require__) {
    
    	var anObject       = __webpack_require__(20)
    	  , IE8_DOM_DEFINE = __webpack_require__(22)
    	  , toPrimitive    = __webpack_require__(26)
    	  , dP             = Object.defineProperty;
    
    	exports.f = __webpack_require__(23) ? Object.defineProperty : function defineProperty(O, P, Attributes){
    	  anObject(O);
    	  P = toPrimitive(P, true);
    	  anObject(Attributes);
    	  if(IE8_DOM_DEFINE)try {
    	    return dP(O, P, Attributes);
    	  } catch(e){ /* empty */ }
    	  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
    	  if('value' in Attributes)O[P] = Attributes.value;
    	  return O;
    	};
    
    /***/ },
    /* 20 */
    /***/ function(module, exports, __webpack_require__) {
    
    	var isObject = __webpack_require__(21);
    	module.exports = function(it){
    	  if(!isObject(it))throw TypeError(it + ' is not an object!');
    	  return it;
    	};
    
    /***/ },
    /* 21 */
    /***/ function(module, exports) {
    
    	module.exports = function(it){
    	  return typeof it === 'object' ? it !== null : typeof it === 'function';
    	};
    
    /***/ },
    /* 22 */
    /***/ function(module, exports, __webpack_require__) {
    
    	module.exports = !__webpack_require__(23) && !__webpack_require__(24)(function(){
    	  return Object.defineProperty(__webpack_require__(25)('div'), 'a', {get: function(){ return 7; }}).a != 7;
    	});
    
    /***/ },
    /* 23 */
    /***/ function(module, exports, __webpack_require__) {
    
    	// Thank's IE8 for his funny defineProperty
    	module.exports = !__webpack_require__(24)(function(){
    	  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
    	});
    
    /***/ },
    /* 24 */
    /***/ function(module, exports) {
    
    	module.exports = function(exec){
    	  try {
    	    return !!exec();
    	  } catch(e){
    	    return true;
    	  }
    	};
    
    /***/ },
    /* 25 */
    /***/ function(module, exports, __webpack_require__) {
    
    	var isObject = __webpack_require__(21)
    	  , document = __webpack_require__(11).document
    	  // in old IE typeof document.createElement is 'object'
    	  , is = isObject(document) && isObject(document.createElement);
    	module.exports = function(it){
    	  return is ? document.createElement(it) : {};
    	};
    
    /***/ },
    /* 26 */
    /***/ function(module, exports, __webpack_require__) {
    
    	// 7.1.1 ToPrimitive(input [, PreferredType])
    	var isObject = __webpack_require__(21);
    	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
    	// and the second argument - flag - preferred type is a string
    	module.exports = function(it, S){
    	  if(!isObject(it))return it;
    	  var fn, val;
    	  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
    	  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
    	  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
    	  throw TypeError("Can't convert object to primitive value");
    	};
    
    /***/ },
    /* 27 */
    /***/ function(module, exports) {
    
    	module.exports = function(bitmap, value){
    	  return {
    	    enumerable  : !(bitmap & 1),
    	    configurable: !(bitmap & 2),
    	    writable    : !(bitmap & 4),
    	    value       : value
    	  };
    	};
    
    /***/ },
    /* 28 */
    /***/ function(module, exports) {
    
    	"use strict";
    
    	exports.__esModule = true;
    
    	exports.default = function (instance, Constructor) {
    	  if (!(instance instanceof Constructor)) {
    	    throw new TypeError("Cannot call a class as a function");
    	  }
    	};
    
    /***/ },
    /* 29 */
    /***/ function(module, exports, __webpack_require__) {
    
    	"use strict";
    
    	exports.__esModule = true;
    
    	var _typeof2 = __webpack_require__(30);
    
    	var _typeof3 = _interopRequireDefault(_typeof2);
    
    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    	exports.default = function (self, call) {
    	  if (!self) {
    	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    	  }
    
    	  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
    	};
    
    /***/ },
    /* 30 */
    /***/ function(module, exports, __webpack_require__) {
    
    	"use strict";
    
    	exports.__esModule = true;
    
    	var _iterator = __webpack_require__(31);
    
    	var _iterator2 = _interopRequireDefault(_iterator);
    
    	var _symbol = __webpack_require__(60);
    
    	var _symbol2 = _interopRequireDefault(_symbol);
    
    	var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default ? "symbol" : typeof obj; };
    
    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    	exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
    	  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
    	} : function (obj) {
    	  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
    	};
    
    /***/ },
    /* 31 */
    /***/ function(module, exports, __webpack_require__) {
    
    	module.exports = { "default": __webpack_require__(32), __esModule: true };
    
    /***/ },
    /* 32 */
    /***/ function(module, exports, __webpack_require__) {
    
    	__webpack_require__(33);
    	__webpack_require__(55);
    	module.exports = __webpack_require__(59).f('iterator');
    
    /***/ },
    /* 33 */
    /***/ function(module, exports, __webpack_require__) {
    
    	'use strict';
    	var $at  = __webpack_require__(34)(true);
    
    	// 21.1.3.27 String.prototype[@@iterator]()
    	__webpack_require__(36)(String, 'String', function(iterated){
    	  this._t = String(iterated); // target
    	  this._i = 0;                // next index
    	// 21.1.5.2.1 %StringIteratorPrototype%.next()
    	}, function(){
    	  var O     = this._t
    	    , index = this._i
    	    , point;
    	  if(index >= O.length)return {value: undefined, done: true};
    	  point = $at(O, index);
    	  this._i += point.length;
    	  return {value: point, done: false};
    	});
    
    /***/ },
    /* 34 */
    /***/ function(module, exports, __webpack_require__) {
    
    	var toInteger = __webpack_require__(35)
    	  , defined   = __webpack_require__(6);
    	// true  -> String#at
    	// false -> String#codePointAt
    	module.exports = function(TO_STRING){
    	  return function(that, pos){
    	    var s = String(defined(that))
    	      , i = toInteger(pos)
    	      , l = s.length
    	      , a, b;
    	    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
    	    a = s.charCodeAt(i);
    	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
    	      ? TO_STRING ? s.charAt(i) : a
    	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
    	  };
    	};
    
    /***/ },
    /* 35 */
    /***/ function(module, exports) {
    
    	// 7.1.4 ToInteger
    	var ceil  = Math.ceil
    	  , floor = Math.floor;
    	module.exports = function(it){
    	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
    	};
    
    /***/ },
    /* 36 */
    /***/ function(module, exports, __webpack_require__) {
    
    	'use strict';
    	var LIBRARY        = __webpack_require__(37)
    	  , $export        = __webpack_require__(14)
    	  , redefine       = __webpack_require__(38)
    	  , hide           = __webpack_require__(18)
    	  , has            = __webpack_require__(8)
    	  , Iterators      = __webpack_require__(39)
    	  , $iterCreate    = __webpack_require__(40)
    	  , setToStringTag = __webpack_require__(53)
    	  , getPrototypeOf = __webpack_require__(7)
    	  , ITERATOR       = __webpack_require__(54)('iterator')
    	  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
    	  , FF_ITERATOR    = '@@iterator'
    	  , KEYS           = 'keys'
    	  , VALUES         = 'values';
    
    	var returnThis = function(){ return this; };
    
    	module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
    	  $iterCreate(Constructor, NAME, next);
    	  var getMethod = function(kind){
    	    if(!BUGGY && kind in proto)return proto[kind];
    	    switch(kind){
    	      case KEYS: return function keys(){ return new Constructor(this, kind); };
    	      case VALUES: return function values(){ return new Constructor(this, kind); };
    	    } return function entries(){ return new Constructor(this, kind); };
    	  };
    	  var TAG        = NAME + ' Iterator'
    	    , DEF_VALUES = DEFAULT == VALUES
    	    , VALUES_BUG = false
    	    , proto      = Base.prototype
    	    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
    	    , $default   = $native || getMethod(DEFAULT)
    	    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
    	    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
    	    , methods, key, IteratorPrototype;
    	  // Fix native
    	  if($anyNative){
    	    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
    	    if(IteratorPrototype !== Object.prototype){
    	      // Set @@toStringTag to native iterators
    	      setToStringTag(IteratorPrototype, TAG, true);
    	      // fix for some old engines
    	      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
    	    }
    	  }
    	  // fix Array#{values, @@iterator}.name in V8 / FF
    	  if(DEF_VALUES && $native && $native.name !== VALUES){
    	    VALUES_BUG = true;
    	    $default = function values(){ return $native.call(this); };
    	  }
    	  // Define iterator
    	  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
    	    hide(proto, ITERATOR, $default);
    	  }
    	  // Plug for library
    	  Iterators[NAME] = $default;
    	  Iterators[TAG]  = returnThis;
    	  if(DEFAULT){
    	    methods = {
    	      values:  DEF_VALUES ? $default : getMethod(VALUES),
    	      keys:    IS_SET     ? $default : getMethod(KEYS),
    	      entries: $entries
    	    };
    	    if(FORCED)for(key in methods){
    	      if(!(key in proto))redefine(proto, key, methods[key]);
    	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
    	  }
    	  return methods;
    	};
    
    /***/ },
    /* 37 */
    /***/ function(module, exports) {
    
    	module.exports = true;
    
    /***/ },
    /* 38 */
    /***/ function(module, exports, __webpack_require__) {
    
    	module.exports = __webpack_require__(18);
    
    /***/ },
    /* 39 */
    /***/ function(module, exports) {
    
    	module.exports = {};
    
    /***/ },
    /* 40 */
    /***/ function(module, exports, __webpack_require__) {
    
    	'use strict';
    	var create         = __webpack_require__(41)
    	  , descriptor     = __webpack_require__(27)
    	  , setToStringTag = __webpack_require__(53)
    	  , IteratorPrototype = {};
    
    	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
    	__webpack_require__(18)(IteratorPrototype, __webpack_require__(54)('iterator'), function(){ return this; });
    
    	module.exports = function(Constructor, NAME, next){
    	  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
    	  setToStringTag(Constructor, NAME + ' Iterator');
    	};
    
    /***/ },
    /* 41 */
    /***/ function(module, exports, __webpack_require__) {
    
    	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
    	var anObject    = __webpack_require__(20)
    	  , dPs         = __webpack_require__(42)
    	  , enumBugKeys = __webpack_require__(51)
    	  , IE_PROTO    = __webpack_require__(9)('IE_PROTO')
    	  , Empty       = function(){ /* empty */ }
    	  , PROTOTYPE   = 'prototype';
    
    	// Create object with fake `null` prototype: use iframe Object with cleared prototype
    	var createDict = function(){
    	  // Thrash, waste and sodomy: IE GC bug
    	  var iframe = __webpack_require__(25)('iframe')
    	    , i      = enumBugKeys.length
    	    , gt     = '>'
    	    , iframeDocument;
    	  iframe.style.display = 'none';
    	  __webpack_require__(52).appendChild(iframe);
    	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
    	  // createDict = iframe.contentWindow.Object;
    	  // html.removeChild(iframe);
    	  iframeDocument = iframe.contentWindow.document;
    	  iframeDocument.open();
    	  iframeDocument.write('<script>document.F=Object</script' + gt);
    	  iframeDocument.close();
    	  createDict = iframeDocument.F;
    	  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
    	  return createDict();
    	};
    
    	module.exports = Object.create || function create(O, Properties){
    	  var result;
    	  if(O !== null){
    	    Empty[PROTOTYPE] = anObject(O);
    	    result = new Empty;
    	    Empty[PROTOTYPE] = null;
    	    // add "__proto__" for Object.getPrototypeOf polyfill
    	    result[IE_PROTO] = O;
    	  } else result = createDict();
    	  return Properties === undefined ? result : dPs(result, Properties);
    	};
    
    /***/ },
    /* 42 */
    /***/ function(module, exports, __webpack_require__) {
    
    	var dP       = __webpack_require__(19)
    	  , anObject = __webpack_require__(20)
    	  , getKeys  = __webpack_require__(43);
    
    	module.exports = __webpack_require__(23) ? Object.defineProperties : function defineProperties(O, Properties){
    	  anObject(O);
    	  var keys   = getKeys(Properties)
    	    , length = keys.length
    	    , i = 0
    	    , P;
    	  while(length > i)dP.f(O, P = keys[i++], Properties[P]);
    	  return O;
    	};
    
    /***/ },
    /* 43 */
    /***/ function(module, exports, __webpack_require__) {
    
    	// 19.1.2.14 / 15.2.3.14 Object.keys(O)
    	var $keys       = __webpack_require__(44)
    	  , enumBugKeys = __webpack_require__(51);
    
    	module.exports = Object.keys || function keys(O){
    	  return $keys(O, enumBugKeys);
    	};
    
    /***/ },
    /* 44 */
    /***/ function(module, exports, __webpack_require__) {
    
    	var has          = __webpack_require__(8)
    	  , toIObject    = __webpack_require__(45)
    	  , arrayIndexOf = __webpack_require__(48)(false)
    	  , IE_PROTO     = __webpack_require__(9)('IE_PROTO');
    
    	module.exports = function(object, names){
    	  var O      = toIObject(object)
    	    , i      = 0
    	    , result = []
    	    , key;
    	  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
    	  // Don't enum bug & hidden keys
    	  while(names.length > i)if(has(O, key = names[i++])){
    	    ~arrayIndexOf(result, key) || result.push(key);
    	  }
    	  return result;
    	};
    
    /***/ },
    /* 45 */
    /***/ function(module, exports, __webpack_require__) {
    
    	// to indexed object, toObject with fallback for non-array-like ES3 strings
    	var IObject = __webpack_require__(46)
    	  , defined = __webpack_require__(6);
    	module.exports = function(it){
    	  return IObject(defined(it));
    	};
    
    /***/ },
    /* 46 */
    /***/ function(module, exports, __webpack_require__) {
    
    	// fallback for non-array-like ES3 and non-enumerable old V8 strings
    	var cof = __webpack_require__(47);
    	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
    	  return cof(it) == 'String' ? it.split('') : Object(it);
    	};
    
    /***/ },
    /* 47 */
    /***/ function(module, exports) {
    
    	var toString = {}.toString;
    
    	module.exports = function(it){
    	  return toString.call(it).slice(8, -1);
    	};
    
    /***/ },
    /* 48 */
    /***/ function(module, exports, __webpack_require__) {
    
    	// false -> Array#indexOf
    	// true  -> Array#includes
    	var toIObject = __webpack_require__(45)
    	  , toLength  = __webpack_require__(49)
    	  , toIndex   = __webpack_require__(50);
    	module.exports = function(IS_INCLUDES){
    	  return function($this, el, fromIndex){
    	    var O      = toIObject($this)
    	      , length = toLength(O.length)
    	      , index  = toIndex(fromIndex, length)
    	      , value;
    	    // Array#includes uses SameValueZero equality algorithm
    	    if(IS_INCLUDES && el != el)while(length > index){
    	      value = O[index++];
    	      if(value != value)return true;
    	    // Array#toIndex ignores holes, Array#includes - not
    	    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
    	      if(O[index] === el)return IS_INCLUDES || index || 0;
    	    } return !IS_INCLUDES && -1;
    	  };
    	};
    
    /***/ },
    /* 49 */
    /***/ function(module, exports, __webpack_require__) {
    
    	// 7.1.15 ToLength
    	var toInteger = __webpack_require__(35)
    	  , min       = Math.min;
    	module.exports = function(it){
    	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
    	};
    
    /***/ },
    /* 50 */
    /***/ function(module, exports, __webpack_require__) {
    
    	var toInteger = __webpack_require__(35)
    	  , max       = Math.max
    	  , min       = Math.min;
    	module.exports = function(index, length){
    	  index = toInteger(index);
    	  return index < 0 ? max(index + length, 0) : min(index, length);
    	};
    
    /***/ },
    /* 51 */
    /***/ function(module, exports) {
    
    	// IE 8- don't enum bug keys
    	module.exports = (
    	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
    	).split(',');
    
    /***/ },
    /* 52 */
    /***/ function(module, exports, __webpack_require__) {
    
    	module.exports = __webpack_require__(11).document && document.documentElement;
    
    /***/ },
    /* 53 */
    /***/ function(module, exports, __webpack_require__) {
    
    	var def = __webpack_require__(19).f
    	  , has = __webpack_require__(8)
    	  , TAG = __webpack_require__(54)('toStringTag');
    
    	module.exports = function(it, tag, stat){
    	  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
    	};
    
    /***/ },
    /* 54 */
    /***/ function(module, exports, __webpack_require__) {
    
    	var store      = __webpack_require__(10)('wks')
    	  , uid        = __webpack_require__(12)
    	  , Symbol     = __webpack_require__(11).Symbol
    	  , USE_SYMBOL = typeof Symbol == 'function';
    
    	var $exports = module.exports = function(name){
    	  return store[name] || (store[name] =
    	    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
    	};
    
    	$exports.store = store;
    
    /***/ },
    /* 55 */
    /***/ function(module, exports, __webpack_require__) {
    
    	__webpack_require__(56);
    	var global        = __webpack_require__(11)
    	  , hide          = __webpack_require__(18)
    	  , Iterators     = __webpack_require__(39)
    	  , TO_STRING_TAG = __webpack_require__(54)('toStringTag');
    
    	for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
    	  var NAME       = collections[i]
    	    , Collection = global[NAME]
    	    , proto      = Collection && Collection.prototype;
    	  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
    	  Iterators[NAME] = Iterators.Array;
    	}
    
    /***/ },
    /* 56 */
    /***/ function(module, exports, __webpack_require__) {
    
    	'use strict';
    	var addToUnscopables = __webpack_require__(57)
    	  , step             = __webpack_require__(58)
    	  , Iterators        = __webpack_require__(39)
    	  , toIObject        = __webpack_require__(45);
    
    	// 22.1.3.4 Array.prototype.entries()
    	// 22.1.3.13 Array.prototype.keys()
    	// 22.1.3.29 Array.prototype.values()
    	// 22.1.3.30 Array.prototype[@@iterator]()
    	module.exports = __webpack_require__(36)(Array, 'Array', function(iterated, kind){
    	  this._t = toIObject(iterated); // target
    	  this._i = 0;                   // next index
    	  this._k = kind;                // kind
    	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
    	}, function(){
    	  var O     = this._t
    	    , kind  = this._k
    	    , index = this._i++;
    	  if(!O || index >= O.length){
    	    this._t = undefined;
    	    return step(1);
    	  }
    	  if(kind == 'keys'  )return step(0, index);
    	  if(kind == 'values')return step(0, O[index]);
    	  return step(0, [index, O[index]]);
    	}, 'values');
    
    	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
    	Iterators.Arguments = Iterators.Array;
    
    	addToUnscopables('keys');
    	addToUnscopables('values');
    	addToUnscopables('entries');
    
    /***/ },
    /* 57 */
    /***/ function(module, exports) {
    
    	module.exports = function(){ /* empty */ };
    
    /***/ },
    /* 58 */
    /***/ function(module, exports) {
    
    	module.exports = function(done, value){
    	  return {value: value, done: !!done};
    	};
    
    /***/ },
    /* 59 */
    /***/ function(module, exports, __webpack_require__) {
    
    	exports.f = __webpack_require__(54);
    
    /***/ },
    /* 60 */
    /***/ function(module, exports, __webpack_require__) {
    
    	module.exports = { "default": __webpack_require__(61), __esModule: true };
    
    /***/ },
    /* 61 */
    /***/ function(module, exports, __webpack_require__) {
    
    	__webpack_require__(62);
    	__webpack_require__(73);
    	__webpack_require__(74);
    	__webpack_require__(75);
    	module.exports = __webpack_require__(15).Symbol;
    
    /***/ },
    /* 62 */
    /***/ function(module, exports, __webpack_require__) {
    
    	'use strict';
    	// ECMAScript 6 symbols shim
    	var global         = __webpack_require__(11)
    	  , has            = __webpack_require__(8)
    	  , DESCRIPTORS    = __webpack_require__(23)
    	  , $export        = __webpack_require__(14)
    	  , redefine       = __webpack_require__(38)
    	  , META           = __webpack_require__(63).KEY
    	  , $fails         = __webpack_require__(24)
    	  , shared         = __webpack_require__(10)
    	  , setToStringTag = __webpack_require__(53)
    	  , uid            = __webpack_require__(12)
    	  , wks            = __webpack_require__(54)
    	  , wksExt         = __webpack_require__(59)
    	  , wksDefine      = __webpack_require__(64)
    	  , keyOf          = __webpack_require__(65)
    	  , enumKeys       = __webpack_require__(66)
    	  , isArray        = __webpack_require__(69)
    	  , anObject       = __webpack_require__(20)
    	  , toIObject      = __webpack_require__(45)
    	  , toPrimitive    = __webpack_require__(26)
    	  , createDesc     = __webpack_require__(27)
    	  , _create        = __webpack_require__(41)
    	  , gOPNExt        = __webpack_require__(70)
    	  , $GOPD          = __webpack_require__(72)
    	  , $DP            = __webpack_require__(19)
    	  , $keys          = __webpack_require__(43)
    	  , gOPD           = $GOPD.f
    	  , dP             = $DP.f
    	  , gOPN           = gOPNExt.f
    	  , $Symbol        = global.Symbol
    	  , $JSON          = global.JSON
    	  , _stringify     = $JSON && $JSON.stringify
    	  , PROTOTYPE      = 'prototype'
    	  , HIDDEN         = wks('_hidden')
    	  , TO_PRIMITIVE   = wks('toPrimitive')
    	  , isEnum         = {}.propertyIsEnumerable
    	  , SymbolRegistry = shared('symbol-registry')
    	  , AllSymbols     = shared('symbols')
    	  , OPSymbols      = shared('op-symbols')
    	  , ObjectProto    = Object[PROTOTYPE]
    	  , USE_NATIVE     = typeof $Symbol == 'function'
    	  , QObject        = global.QObject;
    	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
    	var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
    
    	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
    	var setSymbolDesc = DESCRIPTORS && $fails(function(){
    	  return _create(dP({}, 'a', {
    	    get: function(){ return dP(this, 'a', {value: 7}).a; }
    	  })).a != 7;
    	}) ? function(it, key, D){
    	  var protoDesc = gOPD(ObjectProto, key);
    	  if(protoDesc)delete ObjectProto[key];
    	  dP(it, key, D);
    	  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);
    	} : dP;
    
    	var wrap = function(tag){
    	  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
    	  sym._k = tag;
    	  return sym;
    	};
    
    	var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){
    	  return typeof it == 'symbol';
    	} : function(it){
    	  return it instanceof $Symbol;
    	};
    
    	var $defineProperty = function defineProperty(it, key, D){
    	  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);
    	  anObject(it);
    	  key = toPrimitive(key, true);
    	  anObject(D);
    	  if(has(AllSymbols, key)){
    	    if(!D.enumerable){
    	      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));
    	      it[HIDDEN][key] = true;
    	    } else {
    	      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
    	      D = _create(D, {enumerable: createDesc(0, false)});
    	    } return setSymbolDesc(it, key, D);
    	  } return dP(it, key, D);
    	};
    	var $defineProperties = function defineProperties(it, P){
    	  anObject(it);
    	  var keys = enumKeys(P = toIObject(P))
    	    , i    = 0
    	    , l = keys.length
    	    , key;
    	  while(l > i)$defineProperty(it, key = keys[i++], P[key]);
    	  return it;
    	};
    	var $create = function create(it, P){
    	  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
    	};
    	var $propertyIsEnumerable = function propertyIsEnumerable(key){
    	  var E = isEnum.call(this, key = toPrimitive(key, true));
    	  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;
    	  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
    	};
    	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
    	  it  = toIObject(it);
    	  key = toPrimitive(key, true);
    	  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;
    	  var D = gOPD(it, key);
    	  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
    	  return D;
    	};
    	var $getOwnPropertyNames = function getOwnPropertyNames(it){
    	  var names  = gOPN(toIObject(it))
    	    , result = []
    	    , i      = 0
    	    , key;
    	  while(names.length > i){
    	    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
    	  } return result;
    	};
    	var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
    	  var IS_OP  = it === ObjectProto
    	    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))
    	    , result = []
    	    , i      = 0
    	    , key;
    	  while(names.length > i){
    	    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);
    	  } return result;
    	};
    
    	// 19.4.1.1 Symbol([description])
    	if(!USE_NATIVE){
    	  $Symbol = function Symbol(){
    	    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');
    	    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    	    var $set = function(value){
    	      if(this === ObjectProto)$set.call(OPSymbols, value);
    	      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
    	      setSymbolDesc(this, tag, createDesc(1, value));
    	    };
    	    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});
    	    return wrap(tag);
    	  };
    	  redefine($Symbol[PROTOTYPE], 'toString', function toString(){
    	    return this._k;
    	  });
    
    	  $GOPD.f = $getOwnPropertyDescriptor;
    	  $DP.f   = $defineProperty;
    	  __webpack_require__(71).f = gOPNExt.f = $getOwnPropertyNames;
    	  __webpack_require__(68).f  = $propertyIsEnumerable;
    	  __webpack_require__(67).f = $getOwnPropertySymbols;
    
    	  if(DESCRIPTORS && !__webpack_require__(37)){
    	    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
    	  }
    
    	  wksExt.f = function(name){
    	    return wrap(wks(name));
    	  }
    	}
    
    	$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});
    
    	for(var symbols = (
    	  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
    	  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
    	).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);
    
    	for(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);
    
    	$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
    	  // 19.4.2.1 Symbol.for(key)
    	  'for': function(key){
    	    return has(SymbolRegistry, key += '')
    	      ? SymbolRegistry[key]
    	      : SymbolRegistry[key] = $Symbol(key);
    	  },
    	  // 19.4.2.5 Symbol.keyFor(sym)
    	  keyFor: function keyFor(key){
    	    if(isSymbol(key))return keyOf(SymbolRegistry, key);
    	    throw TypeError(key + ' is not a symbol!');
    	  },
    	  useSetter: function(){ setter = true; },
    	  useSimple: function(){ setter = false; }
    	});
    
    	$export($export.S + $export.F * !USE_NATIVE, 'Object', {
    	  // 19.1.2.2 Object.create(O [, Properties])
    	  create: $create,
    	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
    	  defineProperty: $defineProperty,
    	  // 19.1.2.3 Object.defineProperties(O, Properties)
    	  defineProperties: $defineProperties,
    	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
    	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
    	  // 19.1.2.7 Object.getOwnPropertyNames(O)
    	  getOwnPropertyNames: $getOwnPropertyNames,
    	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
    	  getOwnPropertySymbols: $getOwnPropertySymbols
    	});
    
    	// 24.3.2 JSON.stringify(value [, replacer [, space]])
    	$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){
    	  var S = $Symbol();
    	  // MS Edge converts symbol values to JSON as {}
    	  // WebKit converts symbol values to JSON as null
    	  // V8 throws on boxed symbols
    	  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
    	})), 'JSON', {
    	  stringify: function stringify(it){
    	    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
    	    var args = [it]
    	      , i    = 1
    	      , replacer, $replacer;
    	    while(arguments.length > i)args.push(arguments[i++]);
    	    replacer = args[1];
    	    if(typeof replacer == 'function')$replacer = replacer;
    	    if($replacer || !isArray(replacer))replacer = function(key, value){
    	      if($replacer)value = $replacer.call(this, key, value);
    	      if(!isSymbol(value))return value;
    	    };
    	    args[1] = replacer;
    	    return _stringify.apply($JSON, args);
    	  }
    	});
    
    	// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
    	$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(18)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
    	// 19.4.3.5 Symbol.prototype[@@toStringTag]
    	setToStringTag($Symbol, 'Symbol');
    	// 20.2.1.9 Math[@@toStringTag]
    	setToStringTag(Math, 'Math', true);
    	// 24.3.3 JSON[@@toStringTag]
    	setToStringTag(global.JSON, 'JSON', true);
    
    /***/ },
    /* 63 */
    /***/ function(module, exports, __webpack_require__) {
    
    	var META     = __webpack_require__(12)('meta')
    	  , isObject = __webpack_require__(21)
    	  , has      = __webpack_require__(8)
    	  , setDesc  = __webpack_require__(19).f
    	  , id       = 0;
    	var isExtensible = Object.isExtensible || function(){
    	  return true;
    	};
    	var FREEZE = !__webpack_require__(24)(function(){
    	  return isExtensible(Object.preventExtensions({}));
    	});
    	var setMeta = function(it){
    	  setDesc(it, META, {value: {
    	    i: 'O' + ++id, // object ID
    	    w: {}          // weak collections IDs
    	  }});
    	};
    	var fastKey = function(it, create){
    	  // return primitive with prefix
    	  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
    	  if(!has(it, META)){
    	    // can't set metadata to uncaught frozen object
    	    if(!isExtensible(it))return 'F';
    	    // not necessary to add metadata
    	    if(!create)return 'E';
    	    // add missing metadata
    	    setMeta(it);
    	  // return object ID
    	  } return it[META].i;
    	};
    	var getWeak = function(it, create){
    	  if(!has(it, META)){
    	    // can't set metadata to uncaught frozen object
    	    if(!isExtensible(it))return true;
    	    // not necessary to add metadata
    	    if(!create)return false;
    	    // add missing metadata
    	    setMeta(it);
    	  // return hash weak collections IDs
    	  } return it[META].w;
    	};
    	// add metadata on freeze-family methods calling
    	var onFreeze = function(it){
    	  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
    	  return it;
    	};
    	var meta = module.exports = {
    	  KEY:      META,
    	  NEED:     false,
    	  fastKey:  fastKey,
    	  getWeak:  getWeak,
    	  onFreeze: onFreeze
    	};
    
    /***/ },
    /* 64 */
    /***/ function(module, exports, __webpack_require__) {
    
    	var global         = __webpack_require__(11)
    	  , core           = __webpack_require__(15)
    	  , LIBRARY        = __webpack_require__(37)
    	  , wksExt         = __webpack_require__(59)
    	  , defineProperty = __webpack_require__(19).f;
    	module.exports = function(name){
    	  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
    	  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});
    	};
    
    /***/ },
    /* 65 */
    /***/ function(module, exports, __webpack_require__) {
    
    	var getKeys   = __webpack_require__(43)
    	  , toIObject = __webpack_require__(45);
    	module.exports = function(object, el){
    	  var O      = toIObject(object)
    	    , keys   = getKeys(O)
    	    , length = keys.length
    	    , index  = 0
    	    , key;
    	  while(length > index)if(O[key = keys[index++]] === el)return key;
    	};
    
    /***/ },
    /* 66 */
    /***/ function(module, exports, __webpack_require__) {
    
    	// all enumerable object keys, includes symbols
    	var getKeys = __webpack_require__(43)
    	  , gOPS    = __webpack_require__(67)
    	  , pIE     = __webpack_require__(68);
    	module.exports = function(it){
    	  var result     = getKeys(it)
    	    , getSymbols = gOPS.f;
    	  if(getSymbols){
    	    var symbols = getSymbols(it)
    	      , isEnum  = pIE.f
    	      , i       = 0
    	      , key;
    	    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
    	  } return result;
    	};
    
    /***/ },
    /* 67 */
    /***/ function(module, exports) {
    
    	exports.f = Object.getOwnPropertySymbols;
    
    /***/ },
    /* 68 */
    /***/ function(module, exports) {
    
    	exports.f = {}.propertyIsEnumerable;
    
    /***/ },
    /* 69 */
    /***/ function(module, exports, __webpack_require__) {
    
    	// 7.2.2 IsArray(argument)
    	var cof = __webpack_require__(47);
    	module.exports = Array.isArray || function isArray(arg){
    	  return cof(arg) == 'Array';
    	};
    
    /***/ },
    /* 70 */
    /***/ function(module, exports, __webpack_require__) {
    
    	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
    	var toIObject = __webpack_require__(45)
    	  , gOPN      = __webpack_require__(71).f
    	  , toString  = {}.toString;
    
    	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
    	  ? Object.getOwnPropertyNames(window) : [];
    
    	var getWindowNames = function(it){
    	  try {
    	    return gOPN(it);
    	  } catch(e){
    	    return windowNames.slice();
    	  }
    	};
    
    	module.exports.f = function getOwnPropertyNames(it){
    	  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
    	};
    
    
    /***/ },
    /* 71 */
    /***/ function(module, exports, __webpack_require__) {
    
    	// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
    	var $keys      = __webpack_require__(44)
    	  , hiddenKeys = __webpack_require__(51).concat('length', 'prototype');
    
    	exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
    	  return $keys(O, hiddenKeys);
    	};
    
    /***/ },
    /* 72 */
    /***/ function(module, exports, __webpack_require__) {
    
    	var pIE            = __webpack_require__(68)
    	  , createDesc     = __webpack_require__(27)
    	  , toIObject      = __webpack_require__(45)
    	  , toPrimitive    = __webpack_require__(26)
    	  , has            = __webpack_require__(8)
    	  , IE8_DOM_DEFINE = __webpack_require__(22)
    	  , gOPD           = Object.getOwnPropertyDescriptor;
    
    	exports.f = __webpack_require__(23) ? gOPD : function getOwnPropertyDescriptor(O, P){
    	  O = toIObject(O);
    	  P = toPrimitive(P, true);
    	  if(IE8_DOM_DEFINE)try {
    	    return gOPD(O, P);
    	  } catch(e){ /* empty */ }
    	  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
    	};
    
    /***/ },
    /* 73 */
    /***/ function(module, exports) {
    
    	
    
    /***/ },
    /* 74 */
    /***/ function(module, exports, __webpack_require__) {
    
    	__webpack_require__(64)('asyncIterator');
    
    /***/ },
    /* 75 */
    /***/ function(module, exports, __webpack_require__) {
    
    	__webpack_require__(64)('observable');
    
    /***/ },
    /* 76 */
    /***/ function(module, exports, __webpack_require__) {
    
    	"use strict";
    
    	exports.__esModule = true;
    
    	var _setPrototypeOf = __webpack_require__(77);
    
    	var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);
    
    	var _create = __webpack_require__(81);
    
    	var _create2 = _interopRequireDefault(_create);
    
    	var _typeof2 = __webpack_require__(30);
    
    	var _typeof3 = _interopRequireDefault(_typeof2);
    
    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    	exports.default = function (subClass, superClass) {
    	  if (typeof superClass !== "function" && superClass !== null) {
    	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
    	  }
    
    	  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
    	    constructor: {
    	      value: subClass,
    	      enumerable: false,
    	      writable: true,
    	      configurable: true
    	    }
    	  });
    	  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
    	};
    
    /***/ },
    /* 77 */
    /***/ function(module, exports, __webpack_require__) {
    
    	module.exports = { "default": __webpack_require__(78), __esModule: true };
    
    /***/ },
    /* 78 */
    /***/ function(module, exports, __webpack_require__) {
    
    	__webpack_require__(79);
    	module.exports = __webpack_require__(15).Object.setPrototypeOf;
    
    /***/ },
    /* 79 */
    /***/ function(module, exports, __webpack_require__) {
    
    	// 19.1.3.19 Object.setPrototypeOf(O, proto)
    	var $export = __webpack_require__(14);
    	$export($export.S, 'Object', {setPrototypeOf: __webpack_require__(80).set});
    
    /***/ },
    /* 80 */
    /***/ function(module, exports, __webpack_require__) {
    
    	// Works with __proto__ only. Old v8 can't work with null proto objects.
    	/* eslint-disable no-proto */
    	var isObject = __webpack_require__(21)
    	  , anObject = __webpack_require__(20);
    	var check = function(O, proto){
    	  anObject(O);
    	  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
    	};
    	module.exports = {
    	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    	    function(test, buggy, set){
    	      try {
    	        set = __webpack_require__(16)(Function.call, __webpack_require__(72).f(Object.prototype, '__proto__').set, 2);
    	        set(test, []);
    	        buggy = !(test instanceof Array);
    	      } catch(e){ buggy = true; }
    	      return function setPrototypeOf(O, proto){
    	        check(O, proto);
    	        if(buggy)O.__proto__ = proto;
    	        else set(O, proto);
    	        return O;
    	      };
    	    }({}, false) : undefined),
    	  check: check
    	};
    
    /***/ },
    /* 81 */
    /***/ function(module, exports, __webpack_require__) {
    
    	module.exports = { "default": __webpack_require__(82), __esModule: true };
    
    /***/ },
    /* 82 */
    /***/ function(module, exports, __webpack_require__) {
    
    	__webpack_require__(83);
    	var $Object = __webpack_require__(15).Object;
    	module.exports = function create(P, D){
    	  return $Object.create(P, D);
    	};
    
    /***/ },
    /* 83 */
    /***/ function(module, exports, __webpack_require__) {
    
    	var $export = __webpack_require__(14)
    	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
    	$export($export.S, 'Object', {create: __webpack_require__(41)});
    
    /***/ },
    /* 84 */
    /***/ function(module, exports) {
    
    	module.exports = __WEBPACK_EXTERNAL_MODULE_84__;
    
    /***/ },
    /* 85 */
    /***/ function(module, exports, __webpack_require__) {
    
    	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
    	  if (true) {
    	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(86)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    	  } else if (typeof exports !== "undefined") {
    	    factory(exports, require('lodash'));
    	  } else {
    	    var mod = {
    	      exports: {}
    	    };
    	    factory(mod.exports, global.lodash);
    	    global.roleMatcher = mod.exports;
    	  }
    	})(this, function (exports, _lodash) {
    	  'use strict';
    
    	  Object.defineProperty(exports, "__esModule", {
    	    value: true
    	  });
    	  exports.getFlatterRoles = getFlatterRoles;
    	  exports.rolesMatched = rolesMatched;
    	  exports.rolesMatchedExact = rolesMatchedExact;
    
    	  var _lodash2 = _interopRequireDefault(_lodash);
    
    	  function _interopRequireDefault(obj) {
    	    return obj && obj.__esModule ? obj : {
    	      default: obj
    	    };
    	  }
    
    	  // gets all roles assigned to the current route (passed to the 'authorize' attribute in routing config)
    	  function getFlatterRoles(routeObjects) {
    	    return _lodash2.default.chain(routeObjects).filter(function (item) {
    	      return item.authorize;
    	    }).map(function (item) {
    	      return item.authorize;
    	    }).flattenDeep().union().value();
    	  }
    
    	  // check if any user role matches any allowed role
    	  function rolesMatched(allowedRoles, userRoles) {
    	    return _lodash2.default.intersection(allowedRoles, userRoles).length > 0;
    	  }
    
    	  // checks if allowed roles are exactly the same as user roles
    	  function rolesMatchedExact(allowedRoles, userRoles) {
    	    return _lodash2.default.isEqual(allowedRoles, userRoles);
    	  }
    	});
    
    /***/ },
    /* 86 */
    /***/ function(module, exports, __webpack_require__) {
    
    	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/**
    	 * @license
    	 * lodash <https://lodash.com/>
    	 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
    	 * Released under MIT license <https://lodash.com/license>
    	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
    	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
    	 */
    	;(function() {
    
    	  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
    	  var undefined;
    
    	  /** Used as the semantic version number. */
    	  var VERSION = '4.13.1';
    
    	  /** Used as the size to enable large array optimizations. */
    	  var LARGE_ARRAY_SIZE = 200;
    
    	  /** Used as the `TypeError` message for "Functions" methods. */
    	  var FUNC_ERROR_TEXT = 'Expected a function';
    
    	  /** Used to stand-in for `undefined` hash values. */
    	  var HASH_UNDEFINED = '__lodash_hash_undefined__';
    
    	  /** Used as the internal argument placeholder. */
    	  var PLACEHOLDER = '__lodash_placeholder__';
    
    	  /** Used to compose bitmasks for wrapper metadata. */
    	  var BIND_FLAG = 1,
    	      BIND_KEY_FLAG = 2,
    	      CURRY_BOUND_FLAG = 4,
    	      CURRY_FLAG = 8,
    	      CURRY_RIGHT_FLAG = 16,
    	      PARTIAL_FLAG = 32,
    	      PARTIAL_RIGHT_FLAG = 64,
    	      ARY_FLAG = 128,
    	      REARG_FLAG = 256,
    	      FLIP_FLAG = 512;
    
    	  /** Used to compose bitmasks for comparison styles. */
    	  var UNORDERED_COMPARE_FLAG = 1,
    	      PARTIAL_COMPARE_FLAG = 2;
    
    	  /** Used as default options for `_.truncate`. */
    	  var DEFAULT_TRUNC_LENGTH = 30,
    	      DEFAULT_TRUNC_OMISSION = '...';
    
    	  /** Used to detect hot functions by number of calls within a span of milliseconds. */
    	  var HOT_COUNT = 150,
    	      HOT_SPAN = 16;
    
    	  /** Used to indicate the type of lazy iteratees. */
    	  var LAZY_FILTER_FLAG = 1,
    	      LAZY_MAP_FLAG = 2,
    	      LAZY_WHILE_FLAG = 3;
    
    	  /** Used as references for various `Number` constants. */
    	  var INFINITY = 1 / 0,
    	      MAX_SAFE_INTEGER = 9007199254740991,
    	      MAX_INTEGER = 1.7976931348623157e+308,
    	      NAN = 0 / 0;
    
    	  /** Used as references for the maximum length and index of an array. */
    	  var MAX_ARRAY_LENGTH = 4294967295,
    	      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
    	      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
    
    	  /** `Object#toString` result references. */
    	  var argsTag = '[object Arguments]',
    	      arrayTag = '[object Array]',
    	      boolTag = '[object Boolean]',
    	      dateTag = '[object Date]',
    	      errorTag = '[object Error]',
    	      funcTag = '[object Function]',
    	      genTag = '[object GeneratorFunction]',
    	      mapTag = '[object Map]',
    	      numberTag = '[object Number]',
    	      objectTag = '[object Object]',
    	      promiseTag = '[object Promise]',
    	      regexpTag = '[object RegExp]',
    	      setTag = '[object Set]',
    	      stringTag = '[object String]',
    	      symbolTag = '[object Symbol]',
    	      weakMapTag = '[object WeakMap]',
    	      weakSetTag = '[object WeakSet]';
    
    	  var arrayBufferTag = '[object ArrayBuffer]',
    	      dataViewTag = '[object DataView]',
    	      float32Tag = '[object Float32Array]',
    	      float64Tag = '[object Float64Array]',
    	      int8Tag = '[object Int8Array]',
    	      int16Tag = '[object Int16Array]',
    	      int32Tag = '[object Int32Array]',
    	      uint8Tag = '[object Uint8Array]',
    	      uint8ClampedTag = '[object Uint8ClampedArray]',
    	      uint16Tag = '[object Uint16Array]',
    	      uint32Tag = '[object Uint32Array]';
    
    	  /** Used to match empty string literals in compiled template source. */
    	  var reEmptyStringLeading = /\b__p \+= '';/g,
    	      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
    	      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
    
    	  /** Used to match HTML entities and HTML characters. */
    	  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
    	      reUnescapedHtml = /[&<>"'`]/g,
    	      reHasEscapedHtml = RegExp(reEscapedHtml.source),
    	      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
    
    	  /** Used to match template delimiters. */
    	  var reEscape = /<%-([\s\S]+?)%>/g,
    	      reEvaluate = /<%([\s\S]+?)%>/g,
    	      reInterpolate = /<%=([\s\S]+?)%>/g;
    
    	  /** Used to match property names within property paths. */
    	  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    	      reIsPlainProp = /^\w*$/,
    	      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(\.|\[\])(?:\4|$))/g;
    
    	  /**
    	   * Used to match `RegExp`
    	   * [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns).
    	   */
    	  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
    	      reHasRegExpChar = RegExp(reRegExpChar.source);
    
    	  /** Used to match leading and trailing whitespace. */
    	  var reTrim = /^\s+|\s+$/g,
    	      reTrimStart = /^\s+/,
    	      reTrimEnd = /\s+$/;
    
    	  /** Used to match non-compound words composed of alphanumeric characters. */
    	  var reBasicWord = /[a-zA-Z0-9]+/g;
    
    	  /** Used to match backslashes in property paths. */
    	  var reEscapeChar = /\\(\\)?/g;
    
    	  /**
    	   * Used to match
    	   * [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components).
    	   */
    	  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
    
    	  /** Used to match `RegExp` flags from their coerced string values. */
    	  var reFlags = /\w*$/;
    
    	  /** Used to detect hexadecimal string values. */
    	  var reHasHexPrefix = /^0x/i;
    
    	  /** Used to detect bad signed hexadecimal string values. */
    	  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    
    	  /** Used to detect binary string values. */
    	  var reIsBinary = /^0b[01]+$/i;
    
    	  /** Used to detect host constructors (Safari). */
    	  var reIsHostCtor = /^\[object .+?Constructor\]$/;
    
    	  /** Used to detect octal string values. */
    	  var reIsOctal = /^0o[0-7]+$/i;
    
    	  /** Used to detect unsigned integer values. */
    	  var reIsUint = /^(?:0|[1-9]\d*)$/;
    
    	  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */
    	  var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;
    
    	  /** Used to ensure capturing order of template delimiters. */
    	  var reNoMatch = /($^)/;
    
    	  /** Used to match unescaped characters in compiled string literals. */
    	  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
    
    	  /** Used to compose unicode character classes. */
    	  var rsAstralRange = '\\ud800-\\udfff',
    	      rsComboMarksRange = '\\u0300-\\u036f\\ufe20-\\ufe23',
    	      rsComboSymbolsRange = '\\u20d0-\\u20f0',
    	      rsDingbatRange = '\\u2700-\\u27bf',
    	      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
    	      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
    	      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
    	      rsPunctuationRange = '\\u2000-\\u206f',
    	      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
    	      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
    	      rsVarRange = '\\ufe0e\\ufe0f',
    	      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
    
    	  /** Used to compose unicode capture groups. */
    	  var rsApos = "['\u2019]",
    	      rsAstral = '[' + rsAstralRange + ']',
    	      rsBreak = '[' + rsBreakRange + ']',
    	      rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',
    	      rsDigits = '\\d+',
    	      rsDingbat = '[' + rsDingbatRange + ']',
    	      rsLower = '[' + rsLowerRange + ']',
    	      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
    	      rsFitz = '\\ud83c[\\udffb-\\udfff]',
    	      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
    	      rsNonAstral = '[^' + rsAstralRange + ']',
    	      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
    	      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
    	      rsUpper = '[' + rsUpperRange + ']',
    	      rsZWJ = '\\u200d';
    
    	  /** Used to compose unicode regexes. */
    	  var rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')',
    	      rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')',
    	      rsOptLowerContr = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
    	      rsOptUpperContr = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
    	      reOptMod = rsModifier + '?',
    	      rsOptVar = '[' + rsVarRange + ']?',
    	      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
    	      rsSeq = rsOptVar + reOptMod + rsOptJoin,
    	      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
    	      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';
    
    	  /** Used to match apostrophes. */
    	  var reApos = RegExp(rsApos, 'g');
    
    	  /**
    	   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
    	   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
    	   */
    	  var reComboMark = RegExp(rsCombo, 'g');
    
    	  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
    	  var reComplexSymbol = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');
    
    	  /** Used to match complex or compound words. */
    	  var reComplexWord = RegExp([
    	    rsUpper + '?' + rsLower + '+' + rsOptLowerContr + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    	    rsUpperMisc + '+' + rsOptUpperContr + '(?=' + [rsBreak, rsUpper + rsLowerMisc, '$'].join('|') + ')',
    	    rsUpper + '?' + rsLowerMisc + '+' + rsOptLowerContr,
    	    rsUpper + '+' + rsOptUpperContr,
    	    rsDigits,
    	    rsEmoji
    	  ].join('|'), 'g');
    
    	  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
    	  var reHasComplexSymbol = RegExp('[' + rsZWJ + rsAstralRange  + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');
    
    	  /** Used to detect strings that need a more robust regexp to match words. */
    	  var reHasComplexWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
    
    	  /** Used to assign default `context` object properties. */
    	  var contextProps = [
    	    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    	    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    	    'Promise', 'Reflect', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError',
    	    'Uint8Array', 'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    	    '_', 'isFinite', 'parseInt', 'setTimeout'
    	  ];
    
    	  /** Used to make template sourceURLs easier to identify. */
    	  var templateCounter = -1;
    
    	  /** Used to identify `toStringTag` values of typed arrays. */
    	  var typedArrayTags = {};
    	  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
    	  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
    	  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
    	  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
    	  typedArrayTags[uint32Tag] = true;
    	  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
    	  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
    	  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
    	  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
    	  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
    	  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
    	  typedArrayTags[setTag] = typedArrayTags[stringTag] =
    	  typedArrayTags[weakMapTag] = false;
    
    	  /** Used to identify `toStringTag` values supported by `_.clone`. */
    	  var cloneableTags = {};
    	  cloneableTags[argsTag] = cloneableTags[arrayTag] =
    	  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
    	  cloneableTags[boolTag] = cloneableTags[dateTag] =
    	  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
    	  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
    	  cloneableTags[int32Tag] = cloneableTags[mapTag] =
    	  cloneableTags[numberTag] = cloneableTags[objectTag] =
    	  cloneableTags[regexpTag] = cloneableTags[setTag] =
    	  cloneableTags[stringTag] = cloneableTags[symbolTag] =
    	  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
    	  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    	  cloneableTags[errorTag] = cloneableTags[funcTag] =
    	  cloneableTags[weakMapTag] = false;
    
    	  /** Used to map latin-1 supplementary letters to basic latin letters. */
    	  var deburredLetters = {
    	    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    	    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    	    '\xc7': 'C',  '\xe7': 'c',
    	    '\xd0': 'D',  '\xf0': 'd',
    	    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    	    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    	    '\xcC': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    	    '\xeC': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    	    '\xd1': 'N',  '\xf1': 'n',
    	    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    	    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    	    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    	    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    	    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    	    '\xc6': 'Ae', '\xe6': 'ae',
    	    '\xde': 'Th', '\xfe': 'th',
    	    '\xdf': 'ss'
    	  };
    
    	  /** Used to map characters to HTML entities. */
    	  var htmlEscapes = {
    	    '&': '&amp;',
    	    '<': '&lt;',
    	    '>': '&gt;',
    	    '"': '&quot;',
    	    "'": '&#39;',
    	    '`': '&#96;'
    	  };
    
    	  /** Used to map HTML entities to characters. */
    	  var htmlUnescapes = {
    	    '&amp;': '&',
    	    '&lt;': '<',
    	    '&gt;': '>',
    	    '&quot;': '"',
    	    '&#39;': "'",
    	    '&#96;': '`'
    	  };
    
    	  /** Used to escape characters for inclusion in compiled string literals. */
    	  var stringEscapes = {
    	    '\\': '\\',
    	    "'": "'",
    	    '\n': 'n',
    	    '\r': 'r',
    	    '\u2028': 'u2028',
    	    '\u2029': 'u2029'
    	  };
    
    	  /** Built-in method references without a dependency on `root`. */
    	  var freeParseFloat = parseFloat,
    	      freeParseInt = parseInt;
    
    	  /** Detect free variable `exports`. */
    	  var freeExports = typeof exports == 'object' && exports;
    
    	  /** Detect free variable `module`. */
    	  var freeModule = freeExports && typeof module == 'object' && module;
    
    	  /** Detect the popular CommonJS extension `module.exports`. */
    	  var moduleExports = freeModule && freeModule.exports === freeExports;
    
    	  /** Detect free variable `global` from Node.js. */
    	  var freeGlobal = checkGlobal(typeof global == 'object' && global);
    
    	  /** Detect free variable `self`. */
    	  var freeSelf = checkGlobal(typeof self == 'object' && self);
    
    	  /** Detect `this` as the global object. */
    	  var thisGlobal = checkGlobal(typeof this == 'object' && this);
    
    	  /** Used as a reference to the global object. */
    	  var root = freeGlobal || freeSelf || thisGlobal || Function('return this')();
    
    	  /*--------------------------------------------------------------------------*/
    
    	  /**
    	   * Adds the key-value `pair` to `map`.
    	   *
    	   * @private
    	   * @param {Object} map The map to modify.
    	   * @param {Array} pair The key-value pair to add.
    	   * @returns {Object} Returns `map`.
    	   */
    	  function addMapEntry(map, pair) {
    	    // Don't return `Map#set` because it doesn't return the map instance in IE 11.
    	    map.set(pair[0], pair[1]);
    	    return map;
    	  }
    
    	  /**
    	   * Adds `value` to `set`.
    	   *
    	   * @private
    	   * @param {Object} set The set to modify.
    	   * @param {*} value The value to add.
    	   * @returns {Object} Returns `set`.
    	   */
    	  function addSetEntry(set, value) {
    	    set.add(value);
    	    return set;
    	  }
    
    	  /**
    	   * A faster alternative to `Function#apply`, this function invokes `func`
    	   * with the `this` binding of `thisArg` and the arguments of `args`.
    	   *
    	   * @private
    	   * @param {Function} func The function to invoke.
    	   * @param {*} thisArg The `this` binding of `func`.
    	   * @param {Array} args The arguments to invoke `func` with.
    	   * @returns {*} Returns the result of `func`.
    	   */
    	  function apply(func, thisArg, args) {
    	    var length = args.length;
    	    switch (length) {
    	      case 0: return func.call(thisArg);
    	      case 1: return func.call(thisArg, args[0]);
    	      case 2: return func.call(thisArg, args[0], args[1]);
    	      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    	    }
    	    return func.apply(thisArg, args);
    	  }
    
    	  /**
    	   * A specialized version of `baseAggregator` for arrays.
    	   *
    	   * @private
    	   * @param {Array} [array] The array to iterate over.
    	   * @param {Function} setter The function to set `accumulator` values.
    	   * @param {Function} iteratee The iteratee to transform keys.
    	   * @param {Object} accumulator The initial aggregated object.
    	   * @returns {Function} Returns `accumulator`.
    	   */
    	  function arrayAggregator(array, setter, iteratee, accumulator) {
    	    var index = -1,
    	        length = array ? array.length : 0;
    
    	    while (++index < length) {
    	      var value = array[index];
    	      setter(accumulator, value, iteratee(value), array);
    	    }
    	    return accumulator;
    	  }
    
    	  /**
    	   * A specialized version of `_.forEach` for arrays without support for
    	   * iteratee shorthands.
    	   *
    	   * @private
    	   * @param {Array} [array] The array to iterate over.
    	   * @param {Function} iteratee The function invoked per iteration.
    	   * @returns {Array} Returns `array`.
    	   */
    	  function arrayEach(array, iteratee) {
    	    var index = -1,
    	        length = array ? array.length : 0;
    
    	    while (++index < length) {
    	      if (iteratee(array[index], index, array) === false) {
    	        break;
    	      }
    	    }
    	    return array;
    	  }
    
    	  /**
    	   * A specialized version of `_.forEachRight` for arrays without support for
    	   * iteratee shorthands.
    	   *
    	   * @private
    	   * @param {Array} [array] The array to iterate over.
    	   * @param {Function} iteratee The function invoked per iteration.
    	   * @returns {Array} Returns `array`.
    	   */
    	  function arrayEachRight(array, iteratee) {
    	    var length = array ? array.length : 0;
    
    	    while (length--) {
    	      if (iteratee(array[length], length, array) === false) {
    	        break;
    	      }
    	    }
    	    return array;
    	  }
    
    	  /**
    	   * A specialized version of `_.every` for arrays without support for
    	   * iteratee shorthands.
    	   *
    	   * @private
    	   * @param {Array} [array] The array to iterate over.
    	   * @param {Function} predicate The function invoked per iteration.
    	   * @returns {boolean} Returns `true` if all elements pass the predicate check,
    	   *  else `false`.
    	   */
    	  function arrayEvery(array, predicate) {
    	    var index = -1,
    	        length = array ? array.length : 0;
    
    	    while (++index < length) {
    	      if (!predicate(array[index], index, array)) {
    	        return false;
    	      }
    	    }
    	    return true;
    	  }
    
    	  /**
    	   * A specialized version of `_.filter` for arrays without support for
    	   * iteratee shorthands.
    	   *
    	   * @private
    	   * @param {Array} [array] The array to iterate over.
    	   * @param {Function} predicate The function invoked per iteration.
    	   * @returns {Array} Returns the new filtered array.
    	   */
    	  function arrayFilter(array, predicate) {
    	    var index = -1,
    	        length = array ? array.length : 0,
    	        resIndex = 0,
    	        result = [];
    
    	    while (++index < length) {
    	      var value = array[index];
    	      if (predicate(value, index, array)) {
    	        result[resIndex++] = value;
    	      }
    	    }
    	    return result;
    	  }
    
    	  /**
    	   * A specialized version of `_.includes` for arrays without support for
    	   * specifying an index to search from.
    	   *
    	   * @private
    	   * @param {Array} [array] The array to search.
    	   * @param {*} target The value to search for.
    	   * @returns {boolean} Returns `true` if `target` is found, else `false`.
    	   */
    	  function arrayIncludes(array, value) {
    	    var length = array ? array.length : 0;
    	    return !!length && baseIndexOf(array, value, 0) > -1;
    	  }
    
    	  /**
    	   * This function is like `arrayIncludes` except that it accepts a comparator.
    	   *
    	   * @private
    	   * @param {Array} [array] The array to search.
    	   * @param {*} target The value to search for.
    	   * @param {Function} comparator The comparator invoked per element.
    	   * @returns {boolean} Returns `true` if `target` is found, else `false`.
    	   */
    	  function arrayIncludesWith(array, value, comparator) {
    	    var index = -1,
    	        length = array ? array.length : 0;
    
    	    while (++index < length) {
    	      if (comparator(value, array[index])) {
    	        return true;
    	      }
    	    }
    	    return false;
    	  }
    
    	  /**
    	   * A specialized version of `_.map` for arrays without support for iteratee
    	   * shorthands.
    	   *
    	   * @private
    	   * @param {Array} [array] The array to iterate over.
    	   * @param {Function} iteratee The function invoked per iteration.
    	   * @returns {Array} Returns the new mapped array.
    	   */
    	  function arrayMap(array, iteratee) {
    	    var index = -1,
    	        length = array ? array.length : 0,
    	        result = Array(length);
    
    	    while (++index < length) {
    	      result[index] = iteratee(array[index], index, array);
    	    }
    	    return result;
    	  }
    
    	  /**
    	   * Appends the elements of `values` to `array`.
    	   *
    	   * @private
    	   * @param {Array} array The array to modify.
    	   * @param {Array} values The values to append.
    	   * @returns {Array} Returns `array`.
    	   */
    	  function arrayPush(array, values) {
    	    var index = -1,
    	        length = values.length,
    	        offset = array.length;
    
    	    while (++index < length) {
    	      array[offset + index] = values[index];
    	    }
    	    return array;
    	  }
    
    	  /**
    	   * A specialized version of `_.reduce` for arrays without support for
    	   * iteratee shorthands.
    	   *
    	   * @private
    	   * @param {Array} [array] The array to iterate over.
    	   * @param {Function} iteratee The function invoked per iteration.
    	   * @param {*} [accumulator] The initial value.
    	   * @param {boolean} [initAccum] Specify using the first element of `array` as
    	   *  the initial value.
    	   * @returns {*} Returns the accumulated value.
    	   */
    	  function arrayReduce(array, iteratee, accumulator, initAccum) {
    	    var index = -1,
    	        length = array ? array.length : 0;
    
    	    if (initAccum && length) {
    	      accumulator = array[++index];
    	    }
    	    while (++index < length) {
    	      accumulator = iteratee(accumulator, array[index], index, array);
    	    }
    	    return accumulator;
    	  }
    
    	  /**
    	   * A specialized version of `_.reduceRight` for arrays without support for
    	   * iteratee shorthands.
    	   *
    	   * @private
    	   * @param {Array} [array] The array to iterate over.
    	   * @param {Function} iteratee The function invoked per iteration.
    	   * @param {*} [accumulator] The initial value.
    	   * @param {boolean} [initAccum] Specify using the last element of `array` as
    	   *  the initial value.
    	   * @returns {*} Returns the accumulated value.
    	   */
    	  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    	    var length = array ? array.length : 0;
    	    if (initAccum && length) {
    	      accumulator = array[--length];
    	    }
    	    while (length--) {
    	      accumulator = iteratee(accumulator, array[length], length, array);
    	    }
    	    return accumulator;
    	  }
    
    	  /**
    	   * A specialized version of `_.some` for arrays without support for iteratee
    	   * shorthands.
    	   *
    	   * @private
    	   * @param {Array} [array] The array to iterate over.
    	   * @param {Function} predicate The function invoked per iteration.
    	   * @returns {boolean} Returns `true` if any element passes the predicate check,
    	   *  else `false`.
    	   */
    	  function arraySome(array, predicate) {
    	    var index = -1,
    	        length = array ? array.length : 0;
    
    	    while (++index < length) {
    	      if (predicate(array[index], index, array)) {
    	        return true;
    	      }
    	    }
    	    return false;
    	  }
    
    	  /**
    	   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
    	   * without support for iteratee shorthands, which iterates over `collection`
    	   * using `eachFunc`.
    	   *
    	   * @private
    	   * @param {Array|Object} collection The collection to search.
    	   * @param {Function} predicate The function invoked per iteration.
    	   * @param {Function} eachFunc The function to iterate over `collection`.
    	   * @returns {*} Returns the found element or its key, else `undefined`.
    	   */
    	  function baseFindKey(collection, predicate, eachFunc) {
    	    var result;
    	    eachFunc(collection, function(value, key, collection) {
    	      if (predicate(value, key, collection)) {
    	        result = key;
    	        return false;
    	      }
    	    });
    	    return result;
    	  }
    
    	  /**
    	   * The base implementation of `_.findIndex` and `_.findLastIndex` without
    	   * support for iteratee shorthands.
    	   *
    	   * @private
    	   * @param {Array} array The array to search.
    	   * @param {Function} predicate The function invoked per iteration.
    	   * @param {number} fromIndex The index to search from.
    	   * @param {boolean} [fromRight] Specify iterating from right to left.
    	   * @returns {number} Returns the index of the matched value, else `-1`.
    	   */
    	  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    	    var length = array.length,
    	        index = fromIndex + (fromRight ? 1 : -1);
    
    	    while ((fromRight ? index-- : ++index < length)) {
    	      if (predicate(array[index], index, array)) {
    	        return index;
    	      }
    	    }
    	    return -1;
    	  }
    
    	  /**
    	   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
    	   *
    	   * @private
    	   * @param {Array} array The array to search.
    	   * @param {*} value The value to search for.
    	   * @param {number} fromIndex The index to search from.
    	   * @returns {number} Returns the index of the matched value, else `-1`.
    	   */
    	  function baseIndexOf(array, value, fromIndex) {
    	    if (value !== value) {
    	      return indexOfNaN(array, fromIndex);
    	    }
    	    var index = fromIndex - 1,
    	        length = array.length;
    
    	    while (++index < length) {
    	      if (array[index] === value) {
    	        return index;
    	      }
    	    }
    	    return -1;
    	  }
    
    	  /**
    	   * This function is like `baseIndexOf` except that it accepts a comparator.
    	   *
    	   * @private
    	   * @param {Array} array The array to search.
    	   * @param {*} value The value to search for.
    	   * @param {number} fromIndex The index to search from.
    	   * @param {Function} comparator The comparator invoked per element.
    	   * @returns {number} Returns the index of the matched value, else `-1`.
    	   */
    	  function baseIndexOfWith(array, value, fromIndex, comparator) {
    	    var index = fromIndex - 1,
    	        length = array.length;
    
    	    while (++index < length) {
    	      if (comparator(array[index], value)) {
    	        return index;
    	      }
    	    }
    	    return -1;
    	  }
    
    	  /**
    	   * The base implementation of `_.mean` and `_.meanBy` without support for
    	   * iteratee shorthands.
    	   *
    	   * @private
    	   * @param {Array} array The array to iterate over.
    	   * @param {Function} iteratee The function invoked per iteration.
    	   * @returns {number} Returns the mean.
    	   */
    	  function baseMean(array, iteratee) {
    	    var length = array ? array.length : 0;
    	    return length ? (baseSum(array, iteratee) / length) : NAN;
    	  }
    
    	  /**
    	   * The base implementation of `_.reduce` and `_.reduceRight`, without support
    	   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
    	   *
    	   * @private
    	   * @param {Array|Object} collection The collection to iterate over.
    	   * @param {Function} iteratee The function invoked per iteration.
    	   * @param {*} accumulator The initial value.
    	   * @param {boolean} initAccum Specify using the first or last element of
    	   *  `collection` as the initial value.
    	   * @param {Function} eachFunc The function to iterate over `collection`.
    	   * @returns {*} Returns the accumulated value.
    	   */
    	  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    	    eachFunc(collection, function(value, index, collection) {
    	      accumulator = initAccum
    	        ? (initAccum = false, value)
    	        : iteratee(accumulator, value, index, collection);
    	    });
    	    return accumulator;
    	  }
    
    	  /**
    	   * The base implementation of `_.sortBy` which uses `comparer` to define the
    	   * sort order of `array` and replaces criteria objects with their corresponding
    	   * values.
    	   *
    	   * @private
    	   * @param {Array} array The array to sort.
    	   * @param {Function} comparer The function to define sort order.
    	   * @returns {Array} Returns `array`.
    	   */
    	  function baseSortBy(array, comparer) {
    	    var length = array.length;
    
    	    array.sort(comparer);
    	    while (length--) {
    	      array[length] = array[length].value;
    	    }
    	    return array;
    	  }
    
    	  /**
    	   * The base implementation of `_.sum` and `_.sumBy` without support for
    	   * iteratee shorthands.
    	   *
    	   * @private
    	   * @param {Array} array The array to iterate over.
    	   * @param {Function} iteratee The function invoked per iteration.
    	   * @returns {number} Returns the sum.
    	   */
    	  function baseSum(array, iteratee) {
    	    var result,
    	        index = -1,
    	        length = array.length;
    
    	    while (++index < length) {
    	      var current = iteratee(array[index]);
    	      if (current !== undefined) {
    	        result = result === undefined ? current : (result + current);
    	      }
    	    }
    	    return result;
    	  }
    
    	  /**
    	   * The base implementation of `_.times` without support for iteratee shorthands
    	   * or max array length checks.
    	   *
    	   * @private
    	   * @param {number} n The number of times to invoke `iteratee`.
    	   * @param {Function} iteratee The function invoked per iteration.
    	   * @returns {Array} Returns the array of results.
    	   */
    	  function baseTimes(n, iteratee) {
    	    var index = -1,
    	        result = Array(n);
    
    	    while (++index < n) {
    	      result[index] = iteratee(index);
    	    }
    	    return result;
    	  }
    
    	  /**
    	   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
    	   * of key-value pairs for `object` corresponding to the property names of `props`.
    	   *
    	   * @private
    	   * @param {Object} object The object to query.
    	   * @param {Array} props The property names to get values for.
    	   * @returns {Object} Returns the key-value pairs.
    	   */
    	  function baseToPairs(object, props) {
    	    return arrayMap(props, function(key) {
    	      return [key, object[key]];
    	    });
    	  }
    
    	  /**
    	   * The base implementation of `_.unary` without support for storing wrapper metadata.
    	   *
    	   * @private
    	   * @param {Function} func The function to cap arguments for.
    	   * @returns {Function} Returns the new capped function.
    	   */
    	  function baseUnary(func) {
    	    return function(value) {
    	      return func(value);
    	    };
    	  }
    
    	  /**
    	   * The base implementation of `_.values` and `_.valuesIn` which creates an
    	   * array of `object` property values corresponding to the property names
    	   * of `props`.
    	   *
    	   * @private
    	   * @param {Object} object The object to query.
    	   * @param {Array} props The property names to get values for.
    	   * @returns {Object} Returns the array of property values.
    	   */
    	  function baseValues(object, props) {
    	    return arrayMap(props, function(key) {
    	      return object[key];
    	    });
    	  }
    
    	  /**
    	   * Checks if a cache value for `key` exists.
    	   *
    	   * @private
    	   * @param {Object} cache The cache to query.
    	   * @param {string} key The key of the entry to check.
    	   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
    	   */
    	  function cacheHas(cache, key) {
    	    return cache.has(key);
    	  }
    
    	  /**
    	   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
    	   * that is not found in the character symbols.
    	   *
    	   * @private
    	   * @param {Array} strSymbols The string symbols to inspect.
    	   * @param {Array} chrSymbols The character symbols to find.
    	   * @returns {number} Returns the index of the first unmatched string symbol.
    	   */
    	  function charsStartIndex(strSymbols, chrSymbols) {
    	    var index = -1,
    	        length = strSymbols.length;
    
    	    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    	    return index;
    	  }
    
    	  /**
    	   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
    	   * that is not found in the character symbols.
    	   *
    	   * @private
    	   * @param {Array} strSymbols The string symbols to inspect.
    	   * @param {Array} chrSymbols The character symbols to find.
    	   * @returns {number} Returns the index of the last unmatched string symbol.
    	   */
    	  function charsEndIndex(strSymbols, chrSymbols) {
    	    var index = strSymbols.length;
    
    	    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    	    return index;
    	  }
    
    	  /**
    	   * Checks if `value` is a global object.
    	   *
    	   * @private
    	   * @param {*} value The value to check.
    	   * @returns {null|Object} Returns `value` if it's a global object, else `null`.
    	   */
    	  function checkGlobal(value) {
    	    return (value && value.Object === Object) ? value : null;
    	  }
    
    	  /**
    	   * Gets the number of `placeholder` occurrences in `array`.
    	   *
    	   * @private
    	   * @param {Array} array The array to inspect.
    	   * @param {*} placeholder The placeholder to search for.
    	   * @returns {number} Returns the placeholder count.
    	   */
    	  function countHolders(array, placeholder) {
    	    var length = array.length,
    	        result = 0;
    
    	    while (length--) {
    	      if (array[length] === placeholder) {
    	        result++;
    	      }
    	    }
    	    return result;
    	  }
    
    	  /**
    	   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
    	   *
    	   * @private
    	   * @param {string} letter The matched letter to deburr.
    	   * @returns {string} Returns the deburred letter.
    	   */
    	  function deburrLetter(letter) {
    	    return deburredLetters[letter];
    	  }
    
    	  /**
    	   * Used by `_.escape` to convert characters to HTML entities.
    	   *
    	   * @private
    	   * @param {string} chr The matched character to escape.
    	   * @returns {string} Returns the escaped character.
    	   */
    	  function escapeHtmlChar(chr) {
    	    return htmlEscapes[chr];
    	  }
    
    	  /**
    	   * Used by `_.template` to escape characters for inclusion in compiled string literals.
    	   *
    	   * @private
    	   * @param {string} chr The matched character to escape.
    	   * @returns {string} Returns the escaped character.
    	   */
    	  function escapeStringChar(chr) {
    	    return '\\' + stringEscapes[chr];
    	  }
    
    	  /**
    	   * Gets the value at `key` of `object`.
    	   *
    	   * @private
    	   * @param {Object} [object] The object to query.
    	   * @param {string} key The key of the property to get.
    	   * @returns {*} Returns the property value.
    	   */
    	  function getValue(object, key) {
    	    return object == null ? undefined : object[key];
    	  }
    
    	  /**
    	   * Gets the index at which the first occurrence of `NaN` is found in `array`.
    	   *
    	   * @private
    	   * @param {Array} array The array to search.
    	   * @param {number} fromIndex The index to search from.
    	   * @param {boolean} [fromRight] Specify iterating from right to left.
    	   * @returns {number} Returns the index of the matched `NaN`, else `-1`.
    	   */
    	  function indexOfNaN(array, fromIndex, fromRight) {
    	    var length = array.length,
    	        index = fromIndex + (fromRight ? 1 : -1);
    
    	    while ((fromRight ? index-- : ++index < length)) {
    	      var other = array[index];
    	      if (other !== other) {
    	        return index;
    	      }
    	    }
    	    return -1;
    	  }
    
    	  /**
    	   * Checks if `value` is a host object in IE < 9.
    	   *
    	   * @private
    	   * @param {*} value The value to check.
    	   * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
    	   */
    	  function isHostObject(value) {
    	    // Many host objects are `Object` objects that can coerce to strings
    	    // despite having improperly defined `toString` methods.
    	    var result = false;
    	    if (value != null && typeof value.toString != 'function') {
    	      try {
    	        result = !!(value + '');
    	      } catch (e) {}
    	    }
    	    return result;
    	  }
    
    	  /**
    	   * Converts `iterator` to an array.
    	   *
    	   * @private
    	   * @param {Object} iterator The iterator to convert.
    	   * @returns {Array} Returns the converted array.
    	   */
    	  function iteratorToArray(iterator) {
    	    var data,
    	        result = [];
    
    	    while (!(data = iterator.next()).done) {
    	      result.push(data.value);
    	    }
    	    return result;
    	  }
    
    	  /**
    	   * Converts `map` to its key-value pairs.
    	   *
    	   * @private
    	   * @param {Object} map The map to convert.
    	   * @returns {Array} Returns the key-value pairs.
    	   */
    	  function mapToArray(map) {
    	    var index = -1,
    	        result = Array(map.size);
    
    	    map.forEach(function(value, key) {
    	      result[++index] = [key, value];
    	    });
    	    return result;
    	  }
    
    	  /**
    	   * Replaces all `placeholder` elements in `array` with an internal placeholder
    	   * and returns an array of their indexes.
    	   *
    	   * @private
    	   * @param {Array} array The array to modify.
    	   * @param {*} placeholder The placeholder to replace.
    	   * @returns {Array} Returns the new array of placeholder indexes.
    	   */
    	  function replaceHolders(array, placeholder) {
    	    var index = -1,
    	        length = array.length,
    	        resIndex = 0,
    	        result = [];
    
    	    while (++index < length) {
    	      var value = array[index];
    	      if (value === placeholder || value === PLACEHOLDER) {
    	        array[index] = PLACEHOLDER;
    	        result[resIndex++] = index;
    	      }
    	    }
    	    return result;
    	  }
    
    	  /**
    	   * Converts `set` to an array of its values.
    	   *
    	   * @private
    	   * @param {Object} set The set to convert.
    	   * @returns {Array} Returns the values.
    	   */
    	  function setToArray(set) {
    	    var index = -1,
    	        result = Array(set.size);
    
    	    set.forEach(function(value) {
    	      result[++index] = value;
    	    });
    	    return result;
    	  }
    
    	  /**
    	   * Converts `set` to its value-value pairs.
    	   *
    	   * @private
    	   * @param {Object} set The set to convert.
    	   * @returns {Array} Returns the value-value pairs.
    	   */
    	  function setToPairs(set) {
    	    var index = -1,
    	        result = Array(set.size);
    
    	    set.forEach(function(value) {
    	      result[++index] = [value, value];
    	    });
    	    return result;
    	  }
    
    	  /**
    	   * Gets the number of symbols in `string`.
    	   *
    	   * @private
    	   * @param {string} string The string to inspect.
    	   * @returns {number} Returns the string size.
    	   */
    	  function stringSize(string) {
    	    if (!(string && reHasComplexSymbol.test(string))) {
    	      return string.length;
    	    }
    	    var result = reComplexSymbol.lastIndex = 0;
    	    while (reComplexSymbol.test(string)) {
    	      result++;
    	    }
    	    return result;
    	  }
    
    	  /**
    	   * Converts `string` to an array.
    	   *
    	   * @private
    	   * @param {string} string The string to convert.
    	   * @returns {Array} Returns the converted array.
    	   */
    	  function stringToArray(string) {
    	    return string.match(reComplexSymbol);
    	  }
    
    	  /**
    	   * Used by `_.unescape` to convert HTML entities to characters.
    	   *
    	   * @private
    	   * @param {string} chr The matched character to unescape.
    	   * @returns {string} Returns the unescaped character.
    	   */
    	  function unescapeHtmlChar(chr) {
    	    return htmlUnescapes[chr];
    	  }
    
    	  /*--------------------------------------------------------------------------*/
    
    	  /**
    	   * Create a new pristine `lodash` function using the `context` object.
    	   *
    	   * @static
    	   * @memberOf _
    	   * @since 1.1.0
    	   * @category Util
    	   * @param {Object} [context=root] The context object.
    	   * @returns {Function} Returns a new `lodash` function.
    	   * @example
    	   *
    	   * _.mixin({ 'foo': _.constant('foo') });
    	   *
    	   * var lodash = _.runInContext();
    	   * lodash.mixin({ 'bar': lodash.constant('bar') });
    	   *
    	   * _.isFunction(_.foo);
    	   * // => true
    	   * _.isFunction(_.bar);
    	   * // => false
    	   *
    	   * lodash.isFunction(lodash.foo);
    	   * // => false
    	   * lodash.isFunction(lodash.bar);
    	   * // => true
    	   *
    	   * // Use `context` to stub `Date#getTime` use in `_.now`.
    	   * var stubbed = _.runInContext({
    	   *   'Date': function() {
    	   *     return { 'getTime': stubGetTime };
    	   *   }
    	   * });
    	   *
    	   * // Create a suped-up `defer` in Node.js.
    	   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
    	   */
    	  function runInContext(context) {
    	    context = context ? _.defaults({}, context, _.pick(root, contextProps)) : root;
    
    	    /** Built-in constructor references. */
    	    var Date = context.Date,
    	        Error = context.Error,
    	        Math = context.Math,
    	        RegExp = context.RegExp,
    	        TypeError = context.TypeError;
    
    	    /** Used for built-in method references. */
    	    var arrayProto = context.Array.prototype,
    	        objectProto = context.Object.prototype,
    	        stringProto = context.String.prototype;
    
    	    /** Used to detect overreaching core-js shims. */
    	    var coreJsData = context['__core-js_shared__'];
    
    	    /** Used to detect methods masquerading as native. */
    	    var maskSrcKey = (function() {
    	      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    	      return uid ? ('Symbol(src)_1.' + uid) : '';
    	    }());
    
    	    /** Used to resolve the decompiled source of functions. */
    	    var funcToString = context.Function.prototype.toString;
    
    	    /** Used to check objects for own properties. */
    	    var hasOwnProperty = objectProto.hasOwnProperty;
    
    	    /** Used to generate unique IDs. */
    	    var idCounter = 0;
    
    	    /** Used to infer the `Object` constructor. */
    	    var objectCtorString = funcToString.call(Object);
    
    	    /**
    	     * Used to resolve the
    	     * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
    	     * of values.
    	     */
    	    var objectToString = objectProto.toString;
    
    	    /** Used to restore the original `_` reference in `_.noConflict`. */
    	    var oldDash = root._;
    
    	    /** Used to detect if a method is native. */
    	    var reIsNative = RegExp('^' +
    	      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
    	      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    	    );
    
    	    /** Built-in value references. */
    	    var Buffer = moduleExports ? context.Buffer : undefined,
    	        Reflect = context.Reflect,
    	        Symbol = context.Symbol,
    	        Uint8Array = context.Uint8Array,
    	        enumerate = Reflect ? Reflect.enumerate : undefined,
    	        getOwnPropertySymbols = Object.getOwnPropertySymbols,
    	        iteratorSymbol = typeof (iteratorSymbol = Symbol && Symbol.iterator) == 'symbol' ? iteratorSymbol : undefined,
    	        objectCreate = Object.create,
    	        propertyIsEnumerable = objectProto.propertyIsEnumerable,
    	        splice = arrayProto.splice;
    
    	    /** Built-in method references that are mockable. */
    	    var setTimeout = function(func, wait) { return context.setTimeout.call(root, func, wait); };
    
    	    /* Built-in method references for those with the same name as other `lodash` methods. */
    	    var nativeCeil = Math.ceil,
    	        nativeFloor = Math.floor,
    	        nativeGetPrototype = Object.getPrototypeOf,
    	        nativeIsFinite = context.isFinite,
    	        nativeJoin = arrayProto.join,
    	        nativeKeys = Object.keys,
    	        nativeMax = Math.max,
    	        nativeMin = Math.min,
    	        nativeParseInt = context.parseInt,
    	        nativeRandom = Math.random,
    	        nativeReplace = stringProto.replace,
    	        nativeReverse = arrayProto.reverse,
    	        nativeSplit = stringProto.split;
    
    	    /* Built-in method references that are verified to be native. */
    	    var DataView = getNative(context, 'DataView'),
    	        Map = getNative(context, 'Map'),
    	        Promise = getNative(context, 'Promise'),
    	        Set = getNative(context, 'Set'),
    	        WeakMap = getNative(context, 'WeakMap'),
    	        nativeCreate = getNative(Object, 'create');
    
    	    /** Used to store function metadata. */
    	    var metaMap = WeakMap && new WeakMap;
    
    	    /** Detect if properties shadowing those on `Object.prototype` are non-enumerable. */
    	    var nonEnumShadows = !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf');
    
    	    /** Used to lookup unminified function names. */
    	    var realNames = {};
    
    	    /** Used to detect maps, sets, and weakmaps. */
    	    var dataViewCtorString = toSource(DataView),
    	        mapCtorString = toSource(Map),
    	        promiseCtorString = toSource(Promise),
    	        setCtorString = toSource(Set),
    	        weakMapCtorString = toSource(WeakMap);
    
    	    /** Used to convert symbols to primitives and strings. */
    	    var symbolProto = Symbol ? Symbol.prototype : undefined,
    	        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
    	        symbolToString = symbolProto ? symbolProto.toString : undefined;
    
    	    /*------------------------------------------------------------------------*/
    
    	    /**
    	     * Creates a `lodash` object which wraps `value` to enable implicit method
    	     * chain sequences. Methods that operate on and return arrays, collections,
    	     * and functions can be chained together. Methods that retrieve a single value
    	     * or may return a primitive value will automatically end the chain sequence
    	     * and return the unwrapped value. Otherwise, the value must be unwrapped
    	     * with `_#value`.
    	     *
    	     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
    	     * enabled using `_.chain`.
    	     *
    	     * The execution of chained methods is lazy, that is, it's deferred until
    	     * `_#value` is implicitly or explicitly called.
    	     *
    	     * Lazy evaluation allows several methods to support shortcut fusion.
    	     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
    	     * the creation of intermediate arrays and can greatly reduce the number of
    	     * iteratee executions. Sections of a chain sequence qualify for shortcut
    	     * fusion if the section is applied to an array of at least `200` elements
    	     * and any iteratees accept only one argument. The heuristic for whether a
    	     * section qualifies for shortcut fusion is subject to change.
    	     *
    	     * Chaining is supported in custom builds as long as the `_#value` method is
    	     * directly or indirectly included in the build.
    	     *
    	     * In addition to lodash methods, wrappers have `Array` and `String` methods.
    	     *
    	     * The wrapper `Array` methods are:
    	     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
    	     *
    	     * The wrapper `String` methods are:
    	     * `replace` and `split`
    	     *
    	     * The wrapper methods that support shortcut fusion are:
    	     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
    	     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
    	     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
    	     *
    	     * The chainable wrapper methods are:
    	     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
    	     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
    	     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
    	     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
    	     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
    	     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
    	     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
    	     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
    	     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
    	     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
    	     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
    	     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
    	     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
    	     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
    	     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
    	     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
    	     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
    	     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
    	     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
    	     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
    	     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
    	     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
    	     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
    	     * `zipObject`, `zipObjectDeep`, and `zipWith`
    	     *
    	     * The wrapper methods that are **not** chainable by default are:
    	     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
    	     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `deburr`, `divide`, `each`,
    	     * `eachRight`, `endsWith`, `eq`, `escape`, `escapeRegExp`, `every`, `find`,
    	     * `findIndex`, `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `first`,
    	     * `floor`, `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`,
    	     * `forOwnRight`, `get`, `gt`, `gte`, `has`, `hasIn`, `head`, `identity`,
    	     * `includes`, `indexOf`, `inRange`, `invoke`, `isArguments`, `isArray`,
    	     * `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`, `isBoolean`,
    	     * `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`, `isEqualWith`,
    	     * `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`, `isMap`,
    	     * `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
    	     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
    	     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
    	     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
    	     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
    	     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
    	     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
    	     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
    	     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
    	     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
    	     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
    	     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
    	     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
    	     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
    	     * `upperFirst`, `value`, and `words`
    	     *
    	     * @name _
    	     * @constructor
    	     * @category Seq
    	     * @param {*} value The value to wrap in a `lodash` instance.
    	     * @returns {Object} Returns the new `lodash` wrapper instance.
    	     * @example
    	     *
    	     * function square(n) {
    	     *   return n * n;
    	     * }
    	     *
    	     * var wrapped = _([1, 2, 3]);
    	     *
    	     * // Returns an unwrapped value.
    	     * wrapped.reduce(_.add);
    	     * // => 6
    	     *
    	     * // Returns a wrapped value.
    	     * var squares = wrapped.map(square);
    	     *
    	     * _.isArray(squares);
    	     * // => false
    	     *
    	     * _.isArray(squares.value());
    	     * // => true
    	     */
    	    function lodash(value) {
    	      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
    	        if (value instanceof LodashWrapper) {
    	          return value;
    	        }
    	        if (hasOwnProperty.call(value, '__wrapped__')) {
    	          return wrapperClone(value);
    	        }
    	      }
    	      return new LodashWrapper(value);
    	    }
    
    	    /**
    	     * The function whose prototype chain sequence wrappers inherit from.
    	     *
    	     * @private
    	     */
    	    function baseLodash() {
    	      // No operation performed.
    	    }
    
    	    /**
    	     * The base constructor for creating `lodash` wrapper objects.
    	     *
    	     * @private
    	     * @param {*} value The value to wrap.
    	     * @param {boolean} [chainAll] Enable explicit method chain sequences.
    	     */
    	    function LodashWrapper(value, chainAll) {
    	      this.__wrapped__ = value;
    	      this.__actions__ = [];
    	      this.__chain__ = !!chainAll;
    	      this.__index__ = 0;
    	      this.__values__ = undefined;
    	    }
    
    	    /**
    	     * By default, the template delimiters used by lodash are like those in
    	     * embedded Ruby (ERB). Change the following template settings to use
    	     * alternative delimiters.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @type {Object}
    	     */
    	    lodash.templateSettings = {
    
    	      /**
    	       * Used to detect `data` property values to be HTML-escaped.
    	       *
    	       * @memberOf _.templateSettings
    	       * @type {RegExp}
    	       */
    	      'escape': reEscape,
    
    	      /**
    	       * Used to detect code to be evaluated.
    	       *
    	       * @memberOf _.templateSettings
    	       * @type {RegExp}
    	       */
    	      'evaluate': reEvaluate,
    
    	      /**
    	       * Used to detect `data` property values to inject.
    	       *
    	       * @memberOf _.templateSettings
    	       * @type {RegExp}
    	       */
    	      'interpolate': reInterpolate,
    
    	      /**
    	       * Used to reference the data object in the template text.
    	       *
    	       * @memberOf _.templateSettings
    	       * @type {string}
    	       */
    	      'variable': '',
    
    	      /**
    	       * Used to import variables into the compiled template.
    	       *
    	       * @memberOf _.templateSettings
    	       * @type {Object}
    	       */
    	      'imports': {
    
    	        /**
    	         * A reference to the `lodash` function.
    	         *
    	         * @memberOf _.templateSettings.imports
    	         * @type {Function}
    	         */
    	        '_': lodash
    	      }
    	    };
    
    	    // Ensure wrappers are instances of `baseLodash`.
    	    lodash.prototype = baseLodash.prototype;
    	    lodash.prototype.constructor = lodash;
    
    	    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    	    LodashWrapper.prototype.constructor = LodashWrapper;
    
    	    /*------------------------------------------------------------------------*/
    
    	    /**
    	     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
    	     *
    	     * @private
    	     * @constructor
    	     * @param {*} value The value to wrap.
    	     */
    	    function LazyWrapper(value) {
    	      this.__wrapped__ = value;
    	      this.__actions__ = [];
    	      this.__dir__ = 1;
    	      this.__filtered__ = false;
    	      this.__iteratees__ = [];
    	      this.__takeCount__ = MAX_ARRAY_LENGTH;
    	      this.__views__ = [];
    	    }
    
    	    /**
    	     * Creates a clone of the lazy wrapper object.
    	     *
    	     * @private
    	     * @name clone
    	     * @memberOf LazyWrapper
    	     * @returns {Object} Returns the cloned `LazyWrapper` object.
    	     */
    	    function lazyClone() {
    	      var result = new LazyWrapper(this.__wrapped__);
    	      result.__actions__ = copyArray(this.__actions__);
    	      result.__dir__ = this.__dir__;
    	      result.__filtered__ = this.__filtered__;
    	      result.__iteratees__ = copyArray(this.__iteratees__);
    	      result.__takeCount__ = this.__takeCount__;
    	      result.__views__ = copyArray(this.__views__);
    	      return result;
    	    }
    
    	    /**
    	     * Reverses the direction of lazy iteration.
    	     *
    	     * @private
    	     * @name reverse
    	     * @memberOf LazyWrapper
    	     * @returns {Object} Returns the new reversed `LazyWrapper` object.
    	     */
    	    function lazyReverse() {
    	      if (this.__filtered__) {
    	        var result = new LazyWrapper(this);
    	        result.__dir__ = -1;
    	        result.__filtered__ = true;
    	      } else {
    	        result = this.clone();
    	        result.__dir__ *= -1;
    	      }
    	      return result;
    	    }
    
    	    /**
    	     * Extracts the unwrapped value from its lazy wrapper.
    	     *
    	     * @private
    	     * @name value
    	     * @memberOf LazyWrapper
    	     * @returns {*} Returns the unwrapped value.
    	     */
    	    function lazyValue() {
    	      var array = this.__wrapped__.value(),
    	          dir = this.__dir__,
    	          isArr = isArray(array),
    	          isRight = dir < 0,
    	          arrLength = isArr ? array.length : 0,
    	          view = getView(0, arrLength, this.__views__),
    	          start = view.start,
    	          end = view.end,
    	          length = end - start,
    	          index = isRight ? end : (start - 1),
    	          iteratees = this.__iteratees__,
    	          iterLength = iteratees.length,
    	          resIndex = 0,
    	          takeCount = nativeMin(length, this.__takeCount__);
    
    	      if (!isArr || arrLength < LARGE_ARRAY_SIZE ||
    	          (arrLength == length && takeCount == length)) {
    	        return baseWrapperValue(array, this.__actions__);
    	      }
    	      var result = [];
    
    	      outer:
    	      while (length-- && resIndex < takeCount) {
    	        index += dir;
    
    	        var iterIndex = -1,
    	            value = array[index];
    
    	        while (++iterIndex < iterLength) {
    	          var data = iteratees[iterIndex],
    	              iteratee = data.iteratee,
    	              type = data.type,
    	              computed = iteratee(value);
    
    	          if (type == LAZY_MAP_FLAG) {
    	            value = computed;
    	          } else if (!computed) {
    	            if (type == LAZY_FILTER_FLAG) {
    	              continue outer;
    	            } else {
    	              break outer;
    	            }
    	          }
    	        }
    	        result[resIndex++] = value;
    	      }
    	      return result;
    	    }
    
    	    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    	    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    	    LazyWrapper.prototype.constructor = LazyWrapper;
    
    	    /*------------------------------------------------------------------------*/
    
    	    /**
    	     * Creates a hash object.
    	     *
    	     * @private
    	     * @constructor
    	     * @param {Array} [entries] The key-value pairs to cache.
    	     */
    	    function Hash(entries) {
    	      var index = -1,
    	          length = entries ? entries.length : 0;
    
    	      this.clear();
    	      while (++index < length) {
    	        var entry = entries[index];
    	        this.set(entry[0], entry[1]);
    	      }
    	    }
    
    	    /**
    	     * Removes all key-value entries from the hash.
    	     *
    	     * @private
    	     * @name clear
    	     * @memberOf Hash
    	     */
    	    function hashClear() {
    	      this.__data__ = nativeCreate ? nativeCreate(null) : {};
    	    }
    
    	    /**
    	     * Removes `key` and its value from the hash.
    	     *
    	     * @private
    	     * @name delete
    	     * @memberOf Hash
    	     * @param {Object} hash The hash to modify.
    	     * @param {string} key The key of the value to remove.
    	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
    	     */
    	    function hashDelete(key) {
    	      return this.has(key) && delete this.__data__[key];
    	    }
    
    	    /**
    	     * Gets the hash value for `key`.
    	     *
    	     * @private
    	     * @name get
    	     * @memberOf Hash
    	     * @param {string} key The key of the value to get.
    	     * @returns {*} Returns the entry value.
    	     */
    	    function hashGet(key) {
    	      var data = this.__data__;
    	      if (nativeCreate) {
    	        var result = data[key];
    	        return result === HASH_UNDEFINED ? undefined : result;
    	      }
    	      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    	    }
    
    	    /**
    	     * Checks if a hash value for `key` exists.
    	     *
    	     * @private
    	     * @name has
    	     * @memberOf Hash
    	     * @param {string} key The key of the entry to check.
    	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
    	     */
    	    function hashHas(key) {
    	      var data = this.__data__;
    	      return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
    	    }
    
    	    /**
    	     * Sets the hash `key` to `value`.
    	     *
    	     * @private
    	     * @name set
    	     * @memberOf Hash
    	     * @param {string} key The key of the value to set.
    	     * @param {*} value The value to set.
    	     * @returns {Object} Returns the hash instance.
    	     */
    	    function hashSet(key, value) {
    	      var data = this.__data__;
    	      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
    	      return this;
    	    }
    
    	    // Add methods to `Hash`.
    	    Hash.prototype.clear = hashClear;
    	    Hash.prototype['delete'] = hashDelete;
    	    Hash.prototype.get = hashGet;
    	    Hash.prototype.has = hashHas;
    	    Hash.prototype.set = hashSet;
    
    	    /*------------------------------------------------------------------------*/
    
    	    /**
    	     * Creates an list cache object.
    	     *
    	     * @private
    	     * @constructor
    	     * @param {Array} [entries] The key-value pairs to cache.
    	     */
    	    function ListCache(entries) {
    	      var index = -1,
    	          length = entries ? entries.length : 0;
    
    	      this.clear();
    	      while (++index < length) {
    	        var entry = entries[index];
    	        this.set(entry[0], entry[1]);
    	      }
    	    }
    
    	    /**
    	     * Removes all key-value entries from the list cache.
    	     *
    	     * @private
    	     * @name clear
    	     * @memberOf ListCache
    	     */
    	    function listCacheClear() {
    	      this.__data__ = [];
    	    }
    
    	    /**
    	     * Removes `key` and its value from the list cache.
    	     *
    	     * @private
    	     * @name delete
    	     * @memberOf ListCache
    	     * @param {string} key The key of the value to remove.
    	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
    	     */
    	    function listCacheDelete(key) {
    	      var data = this.__data__,
    	          index = assocIndexOf(data, key);
    
    	      if (index < 0) {
    	        return false;
    	      }
    	      var lastIndex = data.length - 1;
    	      if (index == lastIndex) {
    	        data.pop();
    	      } else {
    	        splice.call(data, index, 1);
    	      }
    	      return true;
    	    }
    
    	    /**
    	     * Gets the list cache value for `key`.
    	     *
    	     * @private
    	     * @name get
    	     * @memberOf ListCache
    	     * @param {string} key The key of the value to get.
    	     * @returns {*} Returns the entry value.
    	     */
    	    function listCacheGet(key) {
    	      var data = this.__data__,
    	          index = assocIndexOf(data, key);
    
    	      return index < 0 ? undefined : data[index][1];
    	    }
    
    	    /**
    	     * Checks if a list cache value for `key` exists.
    	     *
    	     * @private
    	     * @name has
    	     * @memberOf ListCache
    	     * @param {string} key The key of the entry to check.
    	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
    	     */
    	    function listCacheHas(key) {
    	      return assocIndexOf(this.__data__, key) > -1;
    	    }
    
    	    /**
    	     * Sets the list cache `key` to `value`.
    	     *
    	     * @private
    	     * @name set
    	     * @memberOf ListCache
    	     * @param {string} key The key of the value to set.
    	     * @param {*} value The value to set.
    	     * @returns {Object} Returns the list cache instance.
    	     */
    	    function listCacheSet(key, value) {
    	      var data = this.__data__,
    	          index = assocIndexOf(data, key);
    
    	      if (index < 0) {
    	        data.push([key, value]);
    	      } else {
    	        data[index][1] = value;
    	      }
    	      return this;
    	    }
    
    	    // Add methods to `ListCache`.
    	    ListCache.prototype.clear = listCacheClear;
    	    ListCache.prototype['delete'] = listCacheDelete;
    	    ListCache.prototype.get = listCacheGet;
    	    ListCache.prototype.has = listCacheHas;
    	    ListCache.prototype.set = listCacheSet;
    
    	    /*------------------------------------------------------------------------*/
    
    	    /**
    	     * Creates a map cache object to store key-value pairs.
    	     *
    	     * @private
    	     * @constructor
    	     * @param {Array} [entries] The key-value pairs to cache.
    	     */
    	    function MapCache(entries) {
    	      var index = -1,
    	          length = entries ? entries.length : 0;
    
    	      this.clear();
    	      while (++index < length) {
    	        var entry = entries[index];
    	        this.set(entry[0], entry[1]);
    	      }
    	    }
    
    	    /**
    	     * Removes all key-value entries from the map.
    	     *
    	     * @private
    	     * @name clear
    	     * @memberOf MapCache
    	     */
    	    function mapCacheClear() {
    	      this.__data__ = {
    	        'hash': new Hash,
    	        'map': new (Map || ListCache),
    	        'string': new Hash
    	      };
    	    }
    
    	    /**
    	     * Removes `key` and its value from the map.
    	     *
    	     * @private
    	     * @name delete
    	     * @memberOf MapCache
    	     * @param {string} key The key of the value to remove.
    	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
    	     */
    	    function mapCacheDelete(key) {
    	      return getMapData(this, key)['delete'](key);
    	    }
    
    	    /**
    	     * Gets the map value for `key`.
    	     *
    	     * @private
    	     * @name get
    	     * @memberOf MapCache
    	     * @param {string} key The key of the value to get.
    	     * @returns {*} Returns the entry value.
    	     */
    	    function mapCacheGet(key) {
    	      return getMapData(this, key).get(key);
    	    }
    
    	    /**
    	     * Checks if a map value for `key` exists.
    	     *
    	     * @private
    	     * @name has
    	     * @memberOf MapCache
    	     * @param {string} key The key of the entry to check.
    	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
    	     */
    	    function mapCacheHas(key) {
    	      return getMapData(this, key).has(key);
    	    }
    
    	    /**
    	     * Sets the map `key` to `value`.
    	     *
    	     * @private
    	     * @name set
    	     * @memberOf MapCache
    	     * @param {string} key The key of the value to set.
    	     * @param {*} value The value to set.
    	     * @returns {Object} Returns the map cache instance.
    	     */
    	    function mapCacheSet(key, value) {
    	      getMapData(this, key).set(key, value);
    	      return this;
    	    }
    
    	    // Add methods to `MapCache`.
    	    MapCache.prototype.clear = mapCacheClear;
    	    MapCache.prototype['delete'] = mapCacheDelete;
    	    MapCache.prototype.get = mapCacheGet;
    	    MapCache.prototype.has = mapCacheHas;
    	    MapCache.prototype.set = mapCacheSet;
    
    	    /*------------------------------------------------------------------------*/
    
    	    /**
    	     *
    	     * Creates an array cache object to store unique values.
    	     *
    	     * @private
    	     * @constructor
    	     * @param {Array} [values] The values to cache.
    	     */
    	    function SetCache(values) {
    	      var index = -1,
    	          length = values ? values.length : 0;
    
    	      this.__data__ = new MapCache;
    	      while (++index < length) {
    	        this.add(values[index]);
    	      }
    	    }
    
    	    /**
    	     * Adds `value` to the array cache.
    	     *
    	     * @private
    	     * @name add
    	     * @memberOf SetCache
    	     * @alias push
    	     * @param {*} value The value to cache.
    	     * @returns {Object} Returns the cache instance.
    	     */
    	    function setCacheAdd(value) {
    	      this.__data__.set(value, HASH_UNDEFINED);
    	      return this;
    	    }
    
    	    /**
    	     * Checks if `value` is in the array cache.
    	     *
    	     * @private
    	     * @name has
    	     * @memberOf SetCache
    	     * @param {*} value The value to search for.
    	     * @returns {number} Returns `true` if `value` is found, else `false`.
    	     */
    	    function setCacheHas(value) {
    	      return this.__data__.has(value);
    	    }
    
    	    // Add methods to `SetCache`.
    	    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    	    SetCache.prototype.has = setCacheHas;
    
    	    /*------------------------------------------------------------------------*/
    
    	    /**
    	     * Creates a stack cache object to store key-value pairs.
    	     *
    	     * @private
    	     * @constructor
    	     * @param {Array} [entries] The key-value pairs to cache.
    	     */
    	    function Stack(entries) {
    	      this.__data__ = new ListCache(entries);
    	    }
    
    	    /**
    	     * Removes all key-value entries from the stack.
    	     *
    	     * @private
    	     * @name clear
    	     * @memberOf Stack
    	     */
    	    function stackClear() {
    	      this.__data__ = new ListCache;
    	    }
    
    	    /**
    	     * Removes `key` and its value from the stack.
    	     *
    	     * @private
    	     * @name delete
    	     * @memberOf Stack
    	     * @param {string} key The key of the value to remove.
    	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
    	     */
    	    function stackDelete(key) {
    	      return this.__data__['delete'](key);
    	    }
    
    	    /**
    	     * Gets the stack value for `key`.
    	     *
    	     * @private
    	     * @name get
    	     * @memberOf Stack
    	     * @param {string} key The key of the value to get.
    	     * @returns {*} Returns the entry value.
    	     */
    	    function stackGet(key) {
    	      return this.__data__.get(key);
    	    }
    
    	    /**
    	     * Checks if a stack value for `key` exists.
    	     *
    	     * @private
    	     * @name has
    	     * @memberOf Stack
    	     * @param {string} key The key of the entry to check.
    	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
    	     */
    	    function stackHas(key) {
    	      return this.__data__.has(key);
    	    }
    
    	    /**
    	     * Sets the stack `key` to `value`.
    	     *
    	     * @private
    	     * @name set
    	     * @memberOf Stack
    	     * @param {string} key The key of the value to set.
    	     * @param {*} value The value to set.
    	     * @returns {Object} Returns the stack cache instance.
    	     */
    	    function stackSet(key, value) {
    	      var cache = this.__data__;
    	      if (cache instanceof ListCache && cache.__data__.length == LARGE_ARRAY_SIZE) {
    	        cache = this.__data__ = new MapCache(cache.__data__);
    	      }
    	      cache.set(key, value);
    	      return this;
    	    }
    
    	    // Add methods to `Stack`.
    	    Stack.prototype.clear = stackClear;
    	    Stack.prototype['delete'] = stackDelete;
    	    Stack.prototype.get = stackGet;
    	    Stack.prototype.has = stackHas;
    	    Stack.prototype.set = stackSet;
    
    	    /*------------------------------------------------------------------------*/
    
    	    /**
    	     * Used by `_.defaults` to customize its `_.assignIn` use.
    	     *
    	     * @private
    	     * @param {*} objValue The destination value.
    	     * @param {*} srcValue The source value.
    	     * @param {string} key The key of the property to assign.
    	     * @param {Object} object The parent object of `objValue`.
    	     * @returns {*} Returns the value to assign.
    	     */
    	    function assignInDefaults(objValue, srcValue, key, object) {
    	      if (objValue === undefined ||
    	          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
    	        return srcValue;
    	      }
    	      return objValue;
    	    }
    
    	    /**
    	     * This function is like `assignValue` except that it doesn't assign
    	     * `undefined` values.
    	     *
    	     * @private
    	     * @param {Object} object The object to modify.
    	     * @param {string} key The key of the property to assign.
    	     * @param {*} value The value to assign.
    	     */
    	    function assignMergeValue(object, key, value) {
    	      if ((value !== undefined && !eq(object[key], value)) ||
    	          (typeof key == 'number' && value === undefined && !(key in object))) {
    	        object[key] = value;
    	      }
    	    }
    
    	    /**
    	     * Assigns `value` to `key` of `object` if the existing value is not equivalent
    	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
    	     * for equality comparisons.
    	     *
    	     * @private
    	     * @param {Object} object The object to modify.
    	     * @param {string} key The key of the property to assign.
    	     * @param {*} value The value to assign.
    	     */
    	    function assignValue(object, key, value) {
    	      var objValue = object[key];
    	      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
    	          (value === undefined && !(key in object))) {
    	        object[key] = value;
    	      }
    	    }
    
    	    /**
    	     * Gets the index at which the `key` is found in `array` of key-value pairs.
    	     *
    	     * @private
    	     * @param {Array} array The array to search.
    	     * @param {*} key The key to search for.
    	     * @returns {number} Returns the index of the matched value, else `-1`.
    	     */
    	    function assocIndexOf(array, key) {
    	      var length = array.length;
    	      while (length--) {
    	        if (eq(array[length][0], key)) {
    	          return length;
    	        }
    	      }
    	      return -1;
    	    }
    
    	    /**
    	     * Aggregates elements of `collection` on `accumulator` with keys transformed
    	     * by `iteratee` and values set by `setter`.
    	     *
    	     * @private
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} setter The function to set `accumulator` values.
    	     * @param {Function} iteratee The iteratee to transform keys.
    	     * @param {Object} accumulator The initial aggregated object.
    	     * @returns {Function} Returns `accumulator`.
    	     */
    	    function baseAggregator(collection, setter, iteratee, accumulator) {
    	      baseEach(collection, function(value, key, collection) {
    	        setter(accumulator, value, iteratee(value), collection);
    	      });
    	      return accumulator;
    	    }
    
    	    /**
    	     * The base implementation of `_.assign` without support for multiple sources
    	     * or `customizer` functions.
    	     *
    	     * @private
    	     * @param {Object} object The destination object.
    	     * @param {Object} source The source object.
    	     * @returns {Object} Returns `object`.
    	     */
    	    function baseAssign(object, source) {
    	      return object && copyObject(source, keys(source), object);
    	    }
    
    	    /**
    	     * The base implementation of `_.at` without support for individual paths.
    	     *
    	     * @private
    	     * @param {Object} object The object to iterate over.
    	     * @param {string[]} paths The property paths of elements to pick.
    	     * @returns {Array} Returns the picked elements.
    	     */
    	    function baseAt(object, paths) {
    	      var index = -1,
    	          isNil = object == null,
    	          length = paths.length,
    	          result = Array(length);
    
    	      while (++index < length) {
    	        result[index] = isNil ? undefined : get(object, paths[index]);
    	      }
    	      return result;
    	    }
    
    	    /**
    	     * The base implementation of `_.clamp` which doesn't coerce arguments to numbers.
    	     *
    	     * @private
    	     * @param {number} number The number to clamp.
    	     * @param {number} [lower] The lower bound.
    	     * @param {number} upper The upper bound.
    	     * @returns {number} Returns the clamped number.
    	     */
    	    function baseClamp(number, lower, upper) {
    	      if (number === number) {
    	        if (upper !== undefined) {
    	          number = number <= upper ? number : upper;
    	        }
    	        if (lower !== undefined) {
    	          number = number >= lower ? number : lower;
    	        }
    	      }
    	      return number;
    	    }
    
    	    /**
    	     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
    	     * traversed objects.
    	     *
    	     * @private
    	     * @param {*} value The value to clone.
    	     * @param {boolean} [isDeep] Specify a deep clone.
    	     * @param {boolean} [isFull] Specify a clone including symbols.
    	     * @param {Function} [customizer] The function to customize cloning.
    	     * @param {string} [key] The key of `value`.
    	     * @param {Object} [object] The parent object of `value`.
    	     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
    	     * @returns {*} Returns the cloned value.
    	     */
    	    function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
    	      var result;
    	      if (customizer) {
    	        result = object ? customizer(value, key, object, stack) : customizer(value);
    	      }
    	      if (result !== undefined) {
    	        return result;
    	      }
    	      if (!isObject(value)) {
    	        return value;
    	      }
    	      var isArr = isArray(value);
    	      if (isArr) {
    	        result = initCloneArray(value);
    	        if (!isDeep) {
    	          return copyArray(value, result);
    	        }
    	      } else {
    	        var tag = getTag(value),
    	            isFunc = tag == funcTag || tag == genTag;
    
    	        if (isBuffer(value)) {
    	          return cloneBuffer(value, isDeep);
    	        }
    	        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
    	          if (isHostObject(value)) {
    	            return object ? value : {};
    	          }
    	          result = initCloneObject(isFunc ? {} : value);
    	          if (!isDeep) {
    	            return copySymbols(value, baseAssign(result, value));
    	          }
    	        } else {
    	          if (!cloneableTags[tag]) {
    	            return object ? value : {};
    	          }
    	          result = initCloneByTag(value, tag, baseClone, isDeep);
    	        }
    	      }
    	      // Check for circular references and return its corresponding clone.
    	      stack || (stack = new Stack);
    	      var stacked = stack.get(value);
    	      if (stacked) {
    	        return stacked;
    	      }
    	      stack.set(value, result);
    
    	      if (!isArr) {
    	        var props = isFull ? getAllKeys(value) : keys(value);
    	      }
    	      // Recursively populate clone (susceptible to call stack limits).
    	      arrayEach(props || value, function(subValue, key) {
    	        if (props) {
    	          key = subValue;
    	          subValue = value[key];
    	        }
    	        assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));
    	      });
    	      return result;
    	    }
    
    	    /**
    	     * The base implementation of `_.conforms` which doesn't clone `source`.
    	     *
    	     * @private
    	     * @param {Object} source The object of property predicates to conform to.
    	     * @returns {Function} Returns the new spec function.
    	     */
    	    function baseConforms(source) {
    	      var props = keys(source),
    	          length = props.length;
    
    	      return function(object) {
    	        if (object == null) {
    	          return !length;
    	        }
    	        var index = length;
    	        while (index--) {
    	          var key = props[index],
    	              predicate = source[key],
    	              value = object[key];
    
    	          if ((value === undefined &&
    	              !(key in Object(object))) || !predicate(value)) {
    	            return false;
    	          }
    	        }
    	        return true;
    	      };
    	    }
    
    	    /**
    	     * The base implementation of `_.create` without support for assigning
    	     * properties to the created object.
    	     *
    	     * @private
    	     * @param {Object} prototype The object to inherit from.
    	     * @returns {Object} Returns the new object.
    	     */
    	    function baseCreate(proto) {
    	      return isObject(proto) ? objectCreate(proto) : {};
    	    }
    
    	    /**
    	     * The base implementation of `_.delay` and `_.defer` which accepts an array
    	     * of `func` arguments.
    	     *
    	     * @private
    	     * @param {Function} func The function to delay.
    	     * @param {number} wait The number of milliseconds to delay invocation.
    	     * @param {Object} args The arguments to provide to `func`.
    	     * @returns {number} Returns the timer id.
    	     */
    	    function baseDelay(func, wait, args) {
    	      if (typeof func != 'function') {
    	        throw new TypeError(FUNC_ERROR_TEXT);
    	      }
    	      return setTimeout(function() { func.apply(undefined, args); }, wait);
    	    }
    
    	    /**
    	     * The base implementation of methods like `_.difference` without support
    	     * for excluding multiple arrays or iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Array} array The array to inspect.
    	     * @param {Array} values The values to exclude.
    	     * @param {Function} [iteratee] The iteratee invoked per element.
    	     * @param {Function} [comparator] The comparator invoked per element.
    	     * @returns {Array} Returns the new array of filtered values.
    	     */
    	    function baseDifference(array, values, iteratee, comparator) {
    	      var index = -1,
    	          includes = arrayIncludes,
    	          isCommon = true,
    	          length = array.length,
    	          result = [],
    	          valuesLength = values.length;
    
    	      if (!length) {
    	        return result;
    	      }
    	      if (iteratee) {
    	        values = arrayMap(values, baseUnary(iteratee));
    	      }
    	      if (comparator) {
    	        includes = arrayIncludesWith;
    	        isCommon = false;
    	      }
    	      else if (values.length >= LARGE_ARRAY_SIZE) {
    	        includes = cacheHas;
    	        isCommon = false;
    	        values = new SetCache(values);
    	      }
    	      outer:
    	      while (++index < length) {
    	        var value = array[index],
    	            computed = iteratee ? iteratee(value) : value;
    
    	        value = (comparator || value !== 0) ? value : 0;
    	        if (isCommon && computed === computed) {
    	          var valuesIndex = valuesLength;
    	          while (valuesIndex--) {
    	            if (values[valuesIndex] === computed) {
    	              continue outer;
    	            }
    	          }
    	          result.push(value);
    	        }
    	        else if (!includes(values, computed, comparator)) {
    	          result.push(value);
    	        }
    	      }
    	      return result;
    	    }
    
    	    /**
    	     * The base implementation of `_.forEach` without support for iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} iteratee The function invoked per iteration.
    	     * @returns {Array|Object} Returns `collection`.
    	     */
    	    var baseEach = createBaseEach(baseForOwn);
    
    	    /**
    	     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} iteratee The function invoked per iteration.
    	     * @returns {Array|Object} Returns `collection`.
    	     */
    	    var baseEachRight = createBaseEach(baseForOwnRight, true);
    
    	    /**
    	     * The base implementation of `_.every` without support for iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} predicate The function invoked per iteration.
    	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
    	     *  else `false`
    	     */
    	    function baseEvery(collection, predicate) {
    	      var result = true;
    	      baseEach(collection, function(value, index, collection) {
    	        result = !!predicate(value, index, collection);
    	        return result;
    	      });
    	      return result;
    	    }
    
    	    /**
    	     * The base implementation of methods like `_.max` and `_.min` which accepts a
    	     * `comparator` to determine the extremum value.
    	     *
    	     * @private
    	     * @param {Array} array The array to iterate over.
    	     * @param {Function} iteratee The iteratee invoked per iteration.
    	     * @param {Function} comparator The comparator used to compare values.
    	     * @returns {*} Returns the extremum value.
    	     */
    	    function baseExtremum(array, iteratee, comparator) {
    	      var index = -1,
    	          length = array.length;
    
    	      while (++index < length) {
    	        var value = array[index],
    	            current = iteratee(value);
    
    	        if (current != null && (computed === undefined
    	              ? (current === current && !isSymbol(current))
    	              : comparator(current, computed)
    	            )) {
    	          var computed = current,
    	              result = value;
    	        }
    	      }
    	      return result;
    	    }
    
    	    /**
    	     * The base implementation of `_.fill` without an iteratee call guard.
    	     *
    	     * @private
    	     * @param {Array} array The array to fill.
    	     * @param {*} value The value to fill `array` with.
    	     * @param {number} [start=0] The start position.
    	     * @param {number} [end=array.length] The end position.
    	     * @returns {Array} Returns `array`.
    	     */
    	    function baseFill(array, value, start, end) {
    	      var length = array.length;
    
    	      start = toInteger(start);
    	      if (start < 0) {
    	        start = -start > length ? 0 : (length + start);
    	      }
    	      end = (end === undefined || end > length) ? length : toInteger(end);
    	      if (end < 0) {
    	        end += length;
    	      }
    	      end = start > end ? 0 : toLength(end);
    	      while (start < end) {
    	        array[start++] = value;
    	      }
    	      return array;
    	    }
    
    	    /**
    	     * The base implementation of `_.filter` without support for iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} predicate The function invoked per iteration.
    	     * @returns {Array} Returns the new filtered array.
    	     */
    	    function baseFilter(collection, predicate) {
    	      var result = [];
    	      baseEach(collection, function(value, index, collection) {
    	        if (predicate(value, index, collection)) {
    	          result.push(value);
    	        }
    	      });
    	      return result;
    	    }
    
    	    /**
    	     * The base implementation of `_.flatten` with support for restricting flattening.
    	     *
    	     * @private
    	     * @param {Array} array The array to flatten.
    	     * @param {number} depth The maximum recursion depth.
    	     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
    	     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
    	     * @param {Array} [result=[]] The initial result value.
    	     * @returns {Array} Returns the new flattened array.
    	     */
    	    function baseFlatten(array, depth, predicate, isStrict, result) {
    	      var index = -1,
    	          length = array.length;
    
    	      predicate || (predicate = isFlattenable);
    	      result || (result = []);
    
    	      while (++index < length) {
    	        var value = array[index];
    	        if (depth > 0 && predicate(value)) {
    	          if (depth > 1) {
    	            // Recursively flatten arrays (susceptible to call stack limits).
    	            baseFlatten(value, depth - 1, predicate, isStrict, result);
    	          } else {
    	            arrayPush(result, value);
    	          }
    	        } else if (!isStrict) {
    	          result[result.length] = value;
    	        }
    	      }
    	      return result;
    	    }
    
    	    /**
    	     * The base implementation of `baseForOwn` which iterates over `object`
    	     * properties returned by `keysFunc` and invokes `iteratee` for each property.
    	     * Iteratee functions may exit iteration early by explicitly returning `false`.
    	     *
    	     * @private
    	     * @param {Object} object The object to iterate over.
    	     * @param {Function} iteratee The function invoked per iteration.
    	     * @param {Function} keysFunc The function to get the keys of `object`.
    	     * @returns {Object} Returns `object`.
    	     */
    	    var baseFor = createBaseFor();
    
    	    /**
    	     * This function is like `baseFor` except that it iterates over properties
    	     * in the opposite order.
    	     *
    	     * @private
    	     * @param {Object} object The object to iterate over.
    	     * @param {Function} iteratee The function invoked per iteration.
    	     * @param {Function} keysFunc The function to get the keys of `object`.
    	     * @returns {Object} Returns `object`.
    	     */
    	    var baseForRight = createBaseFor(true);
    
    	    /**
    	     * The base implementation of `_.forOwn` without support for iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Object} object The object to iterate over.
    	     * @param {Function} iteratee The function invoked per iteration.
    	     * @returns {Object} Returns `object`.
    	     */
    	    function baseForOwn(object, iteratee) {
    	      return object && baseFor(object, iteratee, keys);
    	    }
    
    	    /**
    	     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Object} object The object to iterate over.
    	     * @param {Function} iteratee The function invoked per iteration.
    	     * @returns {Object} Returns `object`.
    	     */
    	    function baseForOwnRight(object, iteratee) {
    	      return object && baseForRight(object, iteratee, keys);
    	    }
    
    	    /**
    	     * The base implementation of `_.functions` which creates an array of
    	     * `object` function property names filtered from `props`.
    	     *
    	     * @private
    	     * @param {Object} object The object to inspect.
    	     * @param {Array} props The property names to filter.
    	     * @returns {Array} Returns the function names.
    	     */
    	    function baseFunctions(object, props) {
    	      return arrayFilter(props, function(key) {
    	        return isFunction(object[key]);
    	      });
    	    }
    
    	    /**
    	     * The base implementation of `_.get` without support for default values.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @param {Array|string} path The path of the property to get.
    	     * @returns {*} Returns the resolved value.
    	     */
    	    function baseGet(object, path) {
    	      path = isKey(path, object) ? [path] : castPath(path);
    
    	      var index = 0,
    	          length = path.length;
    
    	      while (object != null && index < length) {
    	        object = object[toKey(path[index++])];
    	      }
    	      return (index && index == length) ? object : undefined;
    	    }
    
    	    /**
    	     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
    	     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
    	     * symbols of `object`.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @param {Function} keysFunc The function to get the keys of `object`.
    	     * @param {Function} symbolsFunc The function to get the symbols of `object`.
    	     * @returns {Array} Returns the array of property names and symbols.
    	     */
    	    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    	      var result = keysFunc(object);
    	      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    	    }
    
    	    /**
    	     * The base implementation of `_.gt` which doesn't coerce arguments to numbers.
    	     *
    	     * @private
    	     * @param {*} value The value to compare.
    	     * @param {*} other The other value to compare.
    	     * @returns {boolean} Returns `true` if `value` is greater than `other`,
    	     *  else `false`.
    	     */
    	    function baseGt(value, other) {
    	      return value > other;
    	    }
    
    	    /**
    	     * The base implementation of `_.has` without support for deep paths.
    	     *
    	     * @private
    	     * @param {Object} [object] The object to query.
    	     * @param {Array|string} key The key to check.
    	     * @returns {boolean} Returns `true` if `key` exists, else `false`.
    	     */
    	    function baseHas(object, key) {
    	      // Avoid a bug in IE 10-11 where objects with a [[Prototype]] of `null`,
    	      // that are composed entirely of index properties, return `false` for
    	      // `hasOwnProperty` checks of them.
    	      return object != null &&
    	        (hasOwnProperty.call(object, key) ||
    	          (typeof object == 'object' && key in object && getPrototype(object) === null));
    	    }
    
    	    /**
    	     * The base implementation of `_.hasIn` without support for deep paths.
    	     *
    	     * @private
    	     * @param {Object} [object] The object to query.
    	     * @param {Array|string} key The key to check.
    	     * @returns {boolean} Returns `true` if `key` exists, else `false`.
    	     */
    	    function baseHasIn(object, key) {
    	      return object != null && key in Object(object);
    	    }
    
    	    /**
    	     * The base implementation of `_.inRange` which doesn't coerce arguments to numbers.
    	     *
    	     * @private
    	     * @param {number} number The number to check.
    	     * @param {number} start The start of the range.
    	     * @param {number} end The end of the range.
    	     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
    	     */
    	    function baseInRange(number, start, end) {
    	      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    	    }
    
    	    /**
    	     * The base implementation of methods like `_.intersection`, without support
    	     * for iteratee shorthands, that accepts an array of arrays to inspect.
    	     *
    	     * @private
    	     * @param {Array} arrays The arrays to inspect.
    	     * @param {Function} [iteratee] The iteratee invoked per element.
    	     * @param {Function} [comparator] The comparator invoked per element.
    	     * @returns {Array} Returns the new array of shared values.
    	     */
    	    function baseIntersection(arrays, iteratee, comparator) {
    	      var includes = comparator ? arrayIncludesWith : arrayIncludes,
    	          length = arrays[0].length,
    	          othLength = arrays.length,
    	          othIndex = othLength,
    	          caches = Array(othLength),
    	          maxLength = Infinity,
    	          result = [];
    
    	      while (othIndex--) {
    	        var array = arrays[othIndex];
    	        if (othIndex && iteratee) {
    	          array = arrayMap(array, baseUnary(iteratee));
    	        }
    	        maxLength = nativeMin(array.length, maxLength);
    	        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
    	          ? new SetCache(othIndex && array)
    	          : undefined;
    	      }
    	      array = arrays[0];
    
    	      var index = -1,
    	          seen = caches[0];
    
    	      outer:
    	      while (++index < length && result.length < maxLength) {
    	        var value = array[index],
    	            computed = iteratee ? iteratee(value) : value;
    
    	        value = (comparator || value !== 0) ? value : 0;
    	        if (!(seen
    	              ? cacheHas(seen, computed)
    	              : includes(result, computed, comparator)
    	            )) {
    	          othIndex = othLength;
    	          while (--othIndex) {
    	            var cache = caches[othIndex];
    	            if (!(cache
    	                  ? cacheHas(cache, computed)
    	                  : includes(arrays[othIndex], computed, comparator))
    	                ) {
    	              continue outer;
    	            }
    	          }
    	          if (seen) {
    	            seen.push(computed);
    	          }
    	          result.push(value);
    	        }
    	      }
    	      return result;
    	    }
    
    	    /**
    	     * The base implementation of `_.invert` and `_.invertBy` which inverts
    	     * `object` with values transformed by `iteratee` and set by `setter`.
    	     *
    	     * @private
    	     * @param {Object} object The object to iterate over.
    	     * @param {Function} setter The function to set `accumulator` values.
    	     * @param {Function} iteratee The iteratee to transform values.
    	     * @param {Object} accumulator The initial inverted object.
    	     * @returns {Function} Returns `accumulator`.
    	     */
    	    function baseInverter(object, setter, iteratee, accumulator) {
    	      baseForOwn(object, function(value, key, object) {
    	        setter(accumulator, iteratee(value), key, object);
    	      });
    	      return accumulator;
    	    }
    
    	    /**
    	     * The base implementation of `_.invoke` without support for individual
    	     * method arguments.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @param {Array|string} path The path of the method to invoke.
    	     * @param {Array} args The arguments to invoke the method with.
    	     * @returns {*} Returns the result of the invoked method.
    	     */
    	    function baseInvoke(object, path, args) {
    	      if (!isKey(path, object)) {
    	        path = castPath(path);
    	        object = parent(object, path);
    	        path = last(path);
    	      }
    	      var func = object == null ? object : object[toKey(path)];
    	      return func == null ? undefined : apply(func, object, args);
    	    }
    
    	    /**
    	     * The base implementation of `_.isEqual` which supports partial comparisons
    	     * and tracks traversed objects.
    	     *
    	     * @private
    	     * @param {*} value The value to compare.
    	     * @param {*} other The other value to compare.
    	     * @param {Function} [customizer] The function to customize comparisons.
    	     * @param {boolean} [bitmask] The bitmask of comparison flags.
    	     *  The bitmask may be composed of the following flags:
    	     *     1 - Unordered comparison
    	     *     2 - Partial comparison
    	     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
    	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
    	     */
    	    function baseIsEqual(value, other, customizer, bitmask, stack) {
    	      if (value === other) {
    	        return true;
    	      }
    	      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
    	        return value !== value && other !== other;
    	      }
    	      return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
    	    }
    
    	    /**
    	     * A specialized version of `baseIsEqual` for arrays and objects which performs
    	     * deep comparisons and tracks traversed objects enabling objects with circular
    	     * references to be compared.
    	     *
    	     * @private
    	     * @param {Object} object The object to compare.
    	     * @param {Object} other The other object to compare.
    	     * @param {Function} equalFunc The function to determine equivalents of values.
    	     * @param {Function} [customizer] The function to customize comparisons.
    	     * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`
    	     *  for more details.
    	     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
    	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
    	     */
    	    function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
    	      var objIsArr = isArray(object),
    	          othIsArr = isArray(other),
    	          objTag = arrayTag,
    	          othTag = arrayTag;
    
    	      if (!objIsArr) {
    	        objTag = getTag(object);
    	        objTag = objTag == argsTag ? objectTag : objTag;
    	      }
    	      if (!othIsArr) {
    	        othTag = getTag(other);
    	        othTag = othTag == argsTag ? objectTag : othTag;
    	      }
    	      var objIsObj = objTag == objectTag && !isHostObject(object),
    	          othIsObj = othTag == objectTag && !isHostObject(other),
    	          isSameTag = objTag == othTag;
    
    	      if (isSameTag && !objIsObj) {
    	        stack || (stack = new Stack);
    	        return (objIsArr || isTypedArray(object))
    	          ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)
    	          : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
    	      }
    	      if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
    	        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
    	            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');
    
    	        if (objIsWrapped || othIsWrapped) {
    	          var objUnwrapped = objIsWrapped ? object.value() : object,
    	              othUnwrapped = othIsWrapped ? other.value() : other;
    
    	          stack || (stack = new Stack);
    	          return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
    	        }
    	      }
    	      if (!isSameTag) {
    	        return false;
    	      }
    	      stack || (stack = new Stack);
    	      return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
    	    }
    
    	    /**
    	     * The base implementation of `_.isMatch` without support for iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Object} object The object to inspect.
    	     * @param {Object} source The object of property values to match.
    	     * @param {Array} matchData The property names, values, and compare flags to match.
    	     * @param {Function} [customizer] The function to customize comparisons.
    	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
    	     */
    	    function baseIsMatch(object, source, matchData, customizer) {
    	      var index = matchData.length,
    	          length = index,
    	          noCustomizer = !customizer;
    
    	      if (object == null) {
    	        return !length;
    	      }
    	      object = Object(object);
    	      while (index--) {
    	        var data = matchData[index];
    	        if ((noCustomizer && data[2])
    	              ? data[1] !== object[data[0]]
    	              : !(data[0] in object)
    	            ) {
    	          return false;
    	        }
    	      }
    	      while (++index < length) {
    	        data = matchData[index];
    	        var key = data[0],
    	            objValue = object[key],
    	            srcValue = data[1];
    
    	        if (noCustomizer && data[2]) {
    	          if (objValue === undefined && !(key in object)) {
    	            return false;
    	          }
    	        } else {
    	          var stack = new Stack;
    	          if (customizer) {
    	            var result = customizer(objValue, srcValue, key, object, source, stack);
    	          }
    	          if (!(result === undefined
    	                ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)
    	                : result
    	              )) {
    	            return false;
    	          }
    	        }
    	      }
    	      return true;
    	    }
    
    	    /**
    	     * The base implementation of `_.isNative` without bad shim checks.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a native function,
    	     *  else `false`.
    	     */
    	    function baseIsNative(value) {
    	      if (!isObject(value) || isMasked(value)) {
    	        return false;
    	      }
    	      var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
    	      return pattern.test(toSource(value));
    	    }
    
    	    /**
    	     * The base implementation of `_.iteratee`.
    	     *
    	     * @private
    	     * @param {*} [value=_.identity] The value to convert to an iteratee.
    	     * @returns {Function} Returns the iteratee.
    	     */
    	    function baseIteratee(value) {
    	      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
    	      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
    	      if (typeof value == 'function') {
    	        return value;
    	      }
    	      if (value == null) {
    	        return identity;
    	      }
    	      if (typeof value == 'object') {
    	        return isArray(value)
    	          ? baseMatchesProperty(value[0], value[1])
    	          : baseMatches(value);
    	      }
    	      return property(value);
    	    }
    
    	    /**
    	     * The base implementation of `_.keys` which doesn't skip the constructor
    	     * property of prototypes or treat sparse arrays as dense.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the array of property names.
    	     */
    	    function baseKeys(object) {
    	      return nativeKeys(Object(object));
    	    }
    
    	    /**
    	     * The base implementation of `_.keysIn` which doesn't skip the constructor
    	     * property of prototypes or treat sparse arrays as dense.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the array of property names.
    	     */
    	    function baseKeysIn(object) {
    	      object = object == null ? object : Object(object);
    
    	      var result = [];
    	      for (var key in object) {
    	        result.push(key);
    	      }
    	      return result;
    	    }
    
    	    // Fallback for IE < 9 with es6-shim.
    	    if (enumerate && !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf')) {
    	      baseKeysIn = function(object) {
    	        return iteratorToArray(enumerate(object));
    	      };
    	    }
    
    	    /**
    	     * The base implementation of `_.lt` which doesn't coerce arguments to numbers.
    	     *
    	     * @private
    	     * @param {*} value The value to compare.
    	     * @param {*} other The other value to compare.
    	     * @returns {boolean} Returns `true` if `value` is less than `other`,
    	     *  else `false`.
    	     */
    	    function baseLt(value, other) {
    	      return value < other;
    	    }
    
    	    /**
    	     * The base implementation of `_.map` without support for iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} iteratee The function invoked per iteration.
    	     * @returns {Array} Returns the new mapped array.
    	     */
    	    function baseMap(collection, iteratee) {
    	      var index = -1,
    	          result = isArrayLike(collection) ? Array(collection.length) : [];
    
    	      baseEach(collection, function(value, key, collection) {
    	        result[++index] = iteratee(value, key, collection);
    	      });
    	      return result;
    	    }
    
    	    /**
    	     * The base implementation of `_.matches` which doesn't clone `source`.
    	     *
    	     * @private
    	     * @param {Object} source The object of property values to match.
    	     * @returns {Function} Returns the new spec function.
    	     */
    	    function baseMatches(source) {
    	      var matchData = getMatchData(source);
    	      if (matchData.length == 1 && matchData[0][2]) {
    	        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
    	      }
    	      return function(object) {
    	        return object === source || baseIsMatch(object, source, matchData);
    	      };
    	    }
    
    	    /**
    	     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
    	     *
    	     * @private
    	     * @param {string} path The path of the property to get.
    	     * @param {*} srcValue The value to match.
    	     * @returns {Function} Returns the new spec function.
    	     */
    	    function baseMatchesProperty(path, srcValue) {
    	      if (isKey(path) && isStrictComparable(srcValue)) {
    	        return matchesStrictComparable(toKey(path), srcValue);
    	      }
    	      return function(object) {
    	        var objValue = get(object, path);
    	        return (objValue === undefined && objValue === srcValue)
    	          ? hasIn(object, path)
    	          : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
    	      };
    	    }
    
    	    /**
    	     * The base implementation of `_.merge` without support for multiple sources.
    	     *
    	     * @private
    	     * @param {Object} object The destination object.
    	     * @param {Object} source The source object.
    	     * @param {number} srcIndex The index of `source`.
    	     * @param {Function} [customizer] The function to customize merged values.
    	     * @param {Object} [stack] Tracks traversed source values and their merged
    	     *  counterparts.
    	     */
    	    function baseMerge(object, source, srcIndex, customizer, stack) {
    	      if (object === source) {
    	        return;
    	      }
    	      if (!(isArray(source) || isTypedArray(source))) {
    	        var props = keysIn(source);
    	      }
    	      arrayEach(props || source, function(srcValue, key) {
    	        if (props) {
    	          key = srcValue;
    	          srcValue = source[key];
    	        }
    	        if (isObject(srcValue)) {
    	          stack || (stack = new Stack);
    	          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
    	        }
    	        else {
    	          var newValue = customizer
    	            ? customizer(object[key], srcValue, (key + ''), object, source, stack)
    	            : undefined;
    
    	          if (newValue === undefined) {
    	            newValue = srcValue;
    	          }
    	          assignMergeValue(object, key, newValue);
    	        }
    	      });
    	    }
    
    	    /**
    	     * A specialized version of `baseMerge` for arrays and objects which performs
    	     * deep merges and tracks traversed objects enabling objects with circular
    	     * references to be merged.
    	     *
    	     * @private
    	     * @param {Object} object The destination object.
    	     * @param {Object} source The source object.
    	     * @param {string} key The key of the value to merge.
    	     * @param {number} srcIndex The index of `source`.
    	     * @param {Function} mergeFunc The function to merge values.
    	     * @param {Function} [customizer] The function to customize assigned values.
    	     * @param {Object} [stack] Tracks traversed source values and their merged
    	     *  counterparts.
    	     */
    	    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
    	      var objValue = object[key],
    	          srcValue = source[key],
    	          stacked = stack.get(srcValue);
    
    	      if (stacked) {
    	        assignMergeValue(object, key, stacked);
    	        return;
    	      }
    	      var newValue = customizer
    	        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
    	        : undefined;
    
    	      var isCommon = newValue === undefined;
    
    	      if (isCommon) {
    	        newValue = srcValue;
    	        if (isArray(srcValue) || isTypedArray(srcValue)) {
    	          if (isArray(objValue)) {
    	            newValue = objValue;
    	          }
    	          else if (isArrayLikeObject(objValue)) {
    	            newValue = copyArray(objValue);
    	          }
    	          else {
    	            isCommon = false;
    	            newValue = baseClone(srcValue, true);
    	          }
    	        }
    	        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
    	          if (isArguments(objValue)) {
    	            newValue = toPlainObject(objValue);
    	          }
    	          else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
    	            isCommon = false;
    	            newValue = baseClone(srcValue, true);
    	          }
    	          else {
    	            newValue = objValue;
    	          }
    	        }
    	        else {
    	          isCommon = false;
    	        }
    	      }
    	      stack.set(srcValue, newValue);
    
    	      if (isCommon) {
    	        // Recursively merge objects and arrays (susceptible to call stack limits).
    	        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
    	      }
    	      stack['delete'](srcValue);
    	      assignMergeValue(object, key, newValue);
    	    }
    
    	    /**
    	     * The base implementation of `_.nth` which doesn't coerce `n` to an integer.
    	     *
    	     * @private
    	     * @param {Array} array The array to query.
    	     * @param {number} n The index of the element to return.
    	     * @returns {*} Returns the nth element of `array`.
    	     */
    	    function baseNth(array, n) {
    	      var length = array.length;
    	      if (!length) {
    	        return;
    	      }
    	      n += n < 0 ? length : 0;
    	      return isIndex(n, length) ? array[n] : undefined;
    	    }
    
    	    /**
    	     * The base implementation of `_.orderBy` without param guards.
    	     *
    	     * @private
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
    	     * @param {string[]} orders The sort orders of `iteratees`.
    	     * @returns {Array} Returns the new sorted array.
    	     */
    	    function baseOrderBy(collection, iteratees, orders) {
    	      var index = -1;
    	      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));
    
    	      var result = baseMap(collection, function(value, key, collection) {
    	        var criteria = arrayMap(iteratees, function(iteratee) {
    	          return iteratee(value);
    	        });
    	        return { 'criteria': criteria, 'index': ++index, 'value': value };
    	      });
    
    	      return baseSortBy(result, function(object, other) {
    	        return compareMultiple(object, other, orders);
    	      });
    	    }
    
    	    /**
    	     * The base implementation of `_.pick` without support for individual
    	     * property identifiers.
    	     *
    	     * @private
    	     * @param {Object} object The source object.
    	     * @param {string[]} props The property identifiers to pick.
    	     * @returns {Object} Returns the new object.
    	     */
    	    function basePick(object, props) {
    	      object = Object(object);
    	      return arrayReduce(props, function(result, key) {
    	        if (key in object) {
    	          result[key] = object[key];
    	        }
    	        return result;
    	      }, {});
    	    }
    
    	    /**
    	     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Object} object The source object.
    	     * @param {Function} predicate The function invoked per property.
    	     * @returns {Object} Returns the new object.
    	     */
    	    function basePickBy(object, predicate) {
    	      var index = -1,
    	          props = getAllKeysIn(object),
    	          length = props.length,
    	          result = {};
    
    	      while (++index < length) {
    	        var key = props[index],
    	            value = object[key];
    
    	        if (predicate(value, key)) {
    	          result[key] = value;
    	        }
    	      }
    	      return result;
    	    }
    
    	    /**
    	     * The base implementation of `_.property` without support for deep paths.
    	     *
    	     * @private
    	     * @param {string} key The key of the property to get.
    	     * @returns {Function} Returns the new accessor function.
    	     */
    	    function baseProperty(key) {
    	      return function(object) {
    	        return object == null ? undefined : object[key];
    	      };
    	    }
    
    	    /**
    	     * A specialized version of `baseProperty` which supports deep paths.
    	     *
    	     * @private
    	     * @param {Array|string} path The path of the property to get.
    	     * @returns {Function} Returns the new accessor function.
    	     */
    	    function basePropertyDeep(path) {
    	      return function(object) {
    	        return baseGet(object, path);
    	      };
    	    }
    
    	    /**
    	     * The base implementation of `_.pullAllBy` without support for iteratee
    	     * shorthands.
    	     *
    	     * @private
    	     * @param {Array} array The array to modify.
    	     * @param {Array} values The values to remove.
    	     * @param {Function} [iteratee] The iteratee invoked per element.
    	     * @param {Function} [comparator] The comparator invoked per element.
    	     * @returns {Array} Returns `array`.
    	     */
    	    function basePullAll(array, values, iteratee, comparator) {
    	      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
    	          index = -1,
    	          length = values.length,
    	          seen = array;
    
    	      if (array === values) {
    	        values = copyArray(values);
    	      }
    	      if (iteratee) {
    	        seen = arrayMap(array, baseUnary(iteratee));
    	      }
    	      while (++index < length) {
    	        var fromIndex = 0,
    	            value = values[index],
    	            computed = iteratee ? iteratee(value) : value;
    
    	        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
    	          if (seen !== array) {
    	            splice.call(seen, fromIndex, 1);
    	          }
    	          splice.call(array, fromIndex, 1);
    	        }
    	      }
    	      return array;
    	    }
    
    	    /**
    	     * The base implementation of `_.pullAt` without support for individual
    	     * indexes or capturing the removed elements.
    	     *
    	     * @private
    	     * @param {Array} array The array to modify.
    	     * @param {number[]} indexes The indexes of elements to remove.
    	     * @returns {Array} Returns `array`.
    	     */
    	    function basePullAt(array, indexes) {
    	      var length = array ? indexes.length : 0,
    	          lastIndex = length - 1;
    
    	      while (length--) {
    	        var index = indexes[length];
    	        if (length == lastIndex || index !== previous) {
    	          var previous = index;
    	          if (isIndex(index)) {
    	            splice.call(array, index, 1);
    	          }
    	          else if (!isKey(index, array)) {
    	            var path = castPath(index),
    	                object = parent(array, path);
    
    	            if (object != null) {
    	              delete object[toKey(last(path))];
    	            }
    	          }
    	          else {
    	            delete array[toKey(index)];
    	          }
    	        }
    	      }
    	      return array;
    	    }
    
    	    /**
    	     * The base implementation of `_.random` without support for returning
    	     * floating-point numbers.
    	     *
    	     * @private
    	     * @param {number} lower The lower bound.
    	     * @param {number} upper The upper bound.
    	     * @returns {number} Returns the random number.
    	     */
    	    function baseRandom(lower, upper) {
    	      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    	    }
    
    	    /**
    	     * The base implementation of `_.range` and `_.rangeRight` which doesn't
    	     * coerce arguments to numbers.
    	     *
    	     * @private
    	     * @param {number} start The start of the range.
    	     * @param {number} end The end of the range.
    	     * @param {number} step The value to increment or decrement by.
    	     * @param {boolean} [fromRight] Specify iterating from right to left.
    	     * @returns {Array} Returns the range of numbers.
    	     */
    	    function baseRange(start, end, step, fromRight) {
    	      var index = -1,
    	          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
    	          result = Array(length);
    
    	      while (length--) {
    	        result[fromRight ? length : ++index] = start;
    	        start += step;
    	      }
    	      return result;
    	    }
    
    	    /**
    	     * The base implementation of `_.repeat` which doesn't coerce arguments.
    	     *
    	     * @private
    	     * @param {string} string The string to repeat.
    	     * @param {number} n The number of times to repeat the string.
    	     * @returns {string} Returns the repeated string.
    	     */
    	    function baseRepeat(string, n) {
    	      var result = '';
    	      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
    	        return result;
    	      }
    	      // Leverage the exponentiation by squaring algorithm for a faster repeat.
    	      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
    	      do {
    	        if (n % 2) {
    	          result += string;
    	        }
    	        n = nativeFloor(n / 2);
    	        if (n) {
    	          string += string;
    	        }
    	      } while (n);
    
    	      return result;
    	    }
    
    	    /**
    	     * The base implementation of `_.set`.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @param {Array|string} path The path of the property to set.
    	     * @param {*} value The value to set.
    	     * @param {Function} [customizer] The function to customize path creation.
    	     * @returns {Object} Returns `object`.
    	     */
    	    function baseSet(object, path, value, customizer) {
    	      path = isKey(path, object) ? [path] : castPath(path);
    
    	      var index = -1,
    	          length = path.length,
    	          lastIndex = length - 1,
    	          nested = object;
    
    	      while (nested != null && ++index < length) {
    	        var key = toKey(path[index]);
    	        if (isObject(nested)) {
    	          var newValue = value;
    	          if (index != lastIndex) {
    	            var objValue = nested[key];
    	            newValue = customizer ? customizer(objValue, key, nested) : undefined;
    	            if (newValue === undefined) {
    	              newValue = objValue == null
    	                ? (isIndex(path[index + 1]) ? [] : {})
    	                : objValue;
    	            }
    	          }
    	          assignValue(nested, key, newValue);
    	        }
    	        nested = nested[key];
    	      }
    	      return object;
    	    }
    
    	    /**
    	     * The base implementation of `setData` without support for hot loop detection.
    	     *
    	     * @private
    	     * @param {Function} func The function to associate metadata with.
    	     * @param {*} data The metadata.
    	     * @returns {Function} Returns `func`.
    	     */
    	    var baseSetData = !metaMap ? identity : function(func, data) {
    	      metaMap.set(func, data);
    	      return func;
    	    };
    
    	    /**
    	     * The base implementation of `_.slice` without an iteratee call guard.
    	     *
    	     * @private
    	     * @param {Array} array The array to slice.
    	     * @param {number} [start=0] The start position.
    	     * @param {number} [end=array.length] The end position.
    	     * @returns {Array} Returns the slice of `array`.
    	     */
    	    function baseSlice(array, start, end) {
    	      var index = -1,
    	          length = array.length;
    
    	      if (start < 0) {
    	        start = -start > length ? 0 : (length + start);
    	      }
    	      end = end > length ? length : end;
    	      if (end < 0) {
    	        end += length;
    	      }
    	      length = start > end ? 0 : ((end - start) >>> 0);
    	      start >>>= 0;
    
    	      var result = Array(length);
    	      while (++index < length) {
    	        result[index] = array[index + start];
    	      }
    	      return result;
    	    }
    
    	    /**
    	     * The base implementation of `_.some` without support for iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} predicate The function invoked per iteration.
    	     * @returns {boolean} Returns `true` if any element passes the predicate check,
    	     *  else `false`.
    	     */
    	    function baseSome(collection, predicate) {
    	      var result;
    
    	      baseEach(collection, function(value, index, collection) {
    	        result = predicate(value, index, collection);
    	        return !result;
    	      });
    	      return !!result;
    	    }
    
    	    /**
    	     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
    	     * performs a binary search of `array` to determine the index at which `value`
    	     * should be inserted into `array` in order to maintain its sort order.
    	     *
    	     * @private
    	     * @param {Array} array The sorted array to inspect.
    	     * @param {*} value The value to evaluate.
    	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
    	     * @returns {number} Returns the index at which `value` should be inserted
    	     *  into `array`.
    	     */
    	    function baseSortedIndex(array, value, retHighest) {
    	      var low = 0,
    	          high = array ? array.length : low;
    
    	      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
    	        while (low < high) {
    	          var mid = (low + high) >>> 1,
    	              computed = array[mid];
    
    	          if (computed !== null && !isSymbol(computed) &&
    	              (retHighest ? (computed <= value) : (computed < value))) {
    	            low = mid + 1;
    	          } else {
    	            high = mid;
    	          }
    	        }
    	        return high;
    	      }
    	      return baseSortedIndexBy(array, value, identity, retHighest);
    	    }
    
    	    /**
    	     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
    	     * which invokes `iteratee` for `value` and each element of `array` to compute
    	     * their sort ranking. The iteratee is invoked with one argument; (value).
    	     *
    	     * @private
    	     * @param {Array} array The sorted array to inspect.
    	     * @param {*} value The value to evaluate.
    	     * @param {Function} iteratee The iteratee invoked per element.
    	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
    	     * @returns {number} Returns the index at which `value` should be inserted
    	     *  into `array`.
    	     */
    	    function baseSortedIndexBy(array, value, iteratee, retHighest) {
    	      value = iteratee(value);
    
    	      var low = 0,
    	          high = array ? array.length : 0,
    	          valIsNaN = value !== value,
    	          valIsNull = value === null,
    	          valIsSymbol = isSymbol(value),
    	          valIsUndefined = value === undefined;
    
    	      while (low < high) {
    	        var mid = nativeFloor((low + high) / 2),
    	            computed = iteratee(array[mid]),
    	            othIsDefined = computed !== undefined,
    	            othIsNull = computed === null,
    	            othIsReflexive = computed === computed,
    	            othIsSymbol = isSymbol(computed);
    
    	        if (valIsNaN) {
    	          var setLow = retHighest || othIsReflexive;
    	        } else if (valIsUndefined) {
    	          setLow = othIsReflexive && (retHighest || othIsDefined);
    	        } else if (valIsNull) {
    	          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
    	        } else if (valIsSymbol) {
    	          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
    	        } else if (othIsNull || othIsSymbol) {
    	          setLow = false;
    	        } else {
    	          setLow = retHighest ? (computed <= value) : (computed < value);
    	        }
    	        if (setLow) {
    	          low = mid + 1;
    	        } else {
    	          high = mid;
    	        }
    	      }
    	      return nativeMin(high, MAX_ARRAY_INDEX);
    	    }
    
    	    /**
    	     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
    	     * support for iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Array} array The array to inspect.
    	     * @param {Function} [iteratee] The iteratee invoked per element.
    	     * @returns {Array} Returns the new duplicate free array.
    	     */
    	    function baseSortedUniq(array, iteratee) {
    	      var index = -1,
    	          length = array.length,
    	          resIndex = 0,
    	          result = [];
    
    	      while (++index < length) {
    	        var value = array[index],
    	            computed = iteratee ? iteratee(value) : value;
    
    	        if (!index || !eq(computed, seen)) {
    	          var seen = computed;
    	          result[resIndex++] = value === 0 ? 0 : value;
    	        }
    	      }
    	      return result;
    	    }
    
    	    /**
    	     * The base implementation of `_.toNumber` which doesn't ensure correct
    	     * conversions of binary, hexadecimal, or octal string values.
    	     *
    	     * @private
    	     * @param {*} value The value to process.
    	     * @returns {number} Returns the number.
    	     */
    	    function baseToNumber(value) {
    	      if (typeof value == 'number') {
    	        return value;
    	      }
    	      if (isSymbol(value)) {
    	        return NAN;
    	      }
    	      return +value;
    	    }
    
    	    /**
    	     * The base implementation of `_.toString` which doesn't convert nullish
    	     * values to empty strings.
    	     *
    	     * @private
    	     * @param {*} value The value to process.
    	     * @returns {string} Returns the string.
    	     */
    	    function baseToString(value) {
    	      // Exit early for strings to avoid a performance hit in some environments.
    	      if (typeof value == 'string') {
    	        return value;
    	      }
    	      if (isSymbol(value)) {
    	        return symbolToString ? symbolToString.call(value) : '';
    	      }
    	      var result = (value + '');
    	      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    	    }
    
    	    /**
    	     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Array} array The array to inspect.
    	     * @param {Function} [iteratee] The iteratee invoked per element.
    	     * @param {Function} [comparator] The comparator invoked per element.
    	     * @returns {Array} Returns the new duplicate free array.
    	     */
    	    function baseUniq(array, iteratee, comparator) {
    	      var index = -1,
    	          includes = arrayIncludes,
    	          length = array.length,
    	          isCommon = true,
    	          result = [],
    	          seen = result;
    
    	      if (comparator) {
    	        isCommon = false;
    	        includes = arrayIncludesWith;
    	      }
    	      else if (length >= LARGE_ARRAY_SIZE) {
    	        var set = iteratee ? null : createSet(array);
    	        if (set) {
    	          return setToArray(set);
    	        }
    	        isCommon = false;
    	        includes = cacheHas;
    	        seen = new SetCache;
    	      }
    	      else {
    	        seen = iteratee ? [] : result;
    	      }
    	      outer:
    	      while (++index < length) {
    	        var value = array[index],
    	            computed = iteratee ? iteratee(value) : value;
    
    	        value = (comparator || value !== 0) ? value : 0;
    	        if (isCommon && computed === computed) {
    	          var seenIndex = seen.length;
    	          while (seenIndex--) {
    	            if (seen[seenIndex] === computed) {
    	              continue outer;
    	            }
    	          }
    	          if (iteratee) {
    	            seen.push(computed);
    	          }
    	          result.push(value);
    	        }
    	        else if (!includes(seen, computed, comparator)) {
    	          if (seen !== result) {
    	            seen.push(computed);
    	          }
    	          result.push(value);
    	        }
    	      }
    	      return result;
    	    }
    
    	    /**
    	     * The base implementation of `_.unset`.
    	     *
    	     * @private
    	     * @param {Object} object The object to modify.
    	     * @param {Array|string} path The path of the property to unset.
    	     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
    	     */
    	    function baseUnset(object, path) {
    	      path = isKey(path, object) ? [path] : castPath(path);
    	      object = parent(object, path);
    
    	      var key = toKey(last(path));
    	      return !(object != null && baseHas(object, key)) || delete object[key];
    	    }
    
    	    /**
    	     * The base implementation of `_.update`.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @param {Array|string} path The path of the property to update.
    	     * @param {Function} updater The function to produce the updated value.
    	     * @param {Function} [customizer] The function to customize path creation.
    	     * @returns {Object} Returns `object`.
    	     */
    	    function baseUpdate(object, path, updater, customizer) {
    	      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    	    }
    
    	    /**
    	     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
    	     * without support for iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Array} array The array to query.
    	     * @param {Function} predicate The function invoked per iteration.
    	     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
    	     * @param {boolean} [fromRight] Specify iterating from right to left.
    	     * @returns {Array} Returns the slice of `array`.
    	     */
    	    function baseWhile(array, predicate, isDrop, fromRight) {
    	      var length = array.length,
    	          index = fromRight ? length : -1;
    
    	      while ((fromRight ? index-- : ++index < length) &&
    	        predicate(array[index], index, array)) {}
    
    	      return isDrop
    	        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
    	        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    	    }
    
    	    /**
    	     * The base implementation of `wrapperValue` which returns the result of
    	     * performing a sequence of actions on the unwrapped `value`, where each
    	     * successive action is supplied the return value of the previous.
    	     *
    	     * @private
    	     * @param {*} value The unwrapped value.
    	     * @param {Array} actions Actions to perform to resolve the unwrapped value.
    	     * @returns {*} Returns the resolved value.
    	     */
    	    function baseWrapperValue(value, actions) {
    	      var result = value;
    	      if (result instanceof LazyWrapper) {
    	        result = result.value();
    	      }
    	      return arrayReduce(actions, function(result, action) {
    	        return action.func.apply(action.thisArg, arrayPush([result], action.args));
    	      }, result);
    	    }
    
    	    /**
    	     * The base implementation of methods like `_.xor`, without support for
    	     * iteratee shorthands, that accepts an array of arrays to inspect.
    	     *
    	     * @private
    	     * @param {Array} arrays The arrays to inspect.
    	     * @param {Function} [iteratee] The iteratee invoked per element.
    	     * @param {Function} [comparator] The comparator invoked per element.
    	     * @returns {Array} Returns the new array of values.
    	     */
    	    function baseXor(arrays, iteratee, comparator) {
    	      var index = -1,
    	          length = arrays.length;
    
    	      while (++index < length) {
    	        var result = result
    	          ? arrayPush(
    	              baseDifference(result, arrays[index], iteratee, comparator),
    	              baseDifference(arrays[index], result, iteratee, comparator)
    	            )
    	          : arrays[index];
    	      }
    	      return (result && result.length) ? baseUniq(result, iteratee, comparator) : [];
    	    }
    
    	    /**
    	     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
    	     *
    	     * @private
    	     * @param {Array} props The property identifiers.
    	     * @param {Array} values The property values.
    	     * @param {Function} assignFunc The function to assign values.
    	     * @returns {Object} Returns the new object.
    	     */
    	    function baseZipObject(props, values, assignFunc) {
    	      var index = -1,
    	          length = props.length,
    	          valsLength = values.length,
    	          result = {};
    
    	      while (++index < length) {
    	        var value = index < valsLength ? values[index] : undefined;
    	        assignFunc(result, props[index], value);
    	      }
    	      return result;
    	    }
    
    	    /**
    	     * Casts `value` to an empty array if it's not an array like object.
    	     *
    	     * @private
    	     * @param {*} value The value to inspect.
    	     * @returns {Array|Object} Returns the cast array-like object.
    	     */
    	    function castArrayLikeObject(value) {
    	      return isArrayLikeObject(value) ? value : [];
    	    }
    
    	    /**
    	     * Casts `value` to `identity` if it's not a function.
    	     *
    	     * @private
    	     * @param {*} value The value to inspect.
    	     * @returns {Function} Returns cast function.
    	     */
    	    function castFunction(value) {
    	      return typeof value == 'function' ? value : identity;
    	    }
    
    	    /**
    	     * Casts `value` to a path array if it's not one.
    	     *
    	     * @private
    	     * @param {*} value The value to inspect.
    	     * @returns {Array} Returns the cast property path array.
    	     */
    	    function castPath(value) {
    	      return isArray(value) ? value : stringToPath(value);
    	    }
    
    	    /**
    	     * Casts `array` to a slice if it's needed.
    	     *
    	     * @private
    	     * @param {Array} array The array to inspect.
    	     * @param {number} start The start position.
    	     * @param {number} [end=array.length] The end position.
    	     * @returns {Array} Returns the cast slice.
    	     */
    	    function castSlice(array, start, end) {
    	      var length = array.length;
    	      end = end === undefined ? length : end;
    	      return (!start && end >= length) ? array : baseSlice(array, start, end);
    	    }
    
    	    /**
    	     * Creates a clone of  `buffer`.
    	     *
    	     * @private
    	     * @param {Buffer} buffer The buffer to clone.
    	     * @param {boolean} [isDeep] Specify a deep clone.
    	     * @returns {Buffer} Returns the cloned buffer.
    	     */
    	    function cloneBuffer(buffer, isDeep) {
    	      if (isDeep) {
    	        return buffer.slice();
    	      }
    	      var result = new buffer.constructor(buffer.length);
    	      buffer.copy(result);
    	      return result;
    	    }
    
    	    /**
    	     * Creates a clone of `arrayBuffer`.
    	     *
    	     * @private
    	     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
    	     * @returns {ArrayBuffer} Returns the cloned array buffer.
    	     */
    	    function cloneArrayBuffer(arrayBuffer) {
    	      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    	      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
    	      return result;
    	    }
    
    	    /**
    	     * Creates a clone of `dataView`.
    	     *
    	     * @private
    	     * @param {Object} dataView The data view to clone.
    	     * @param {boolean} [isDeep] Specify a deep clone.
    	     * @returns {Object} Returns the cloned data view.
    	     */
    	    function cloneDataView(dataView, isDeep) {
    	      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
    	      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    	    }
    
    	    /**
    	     * Creates a clone of `map`.
    	     *
    	     * @private
    	     * @param {Object} map The map to clone.
    	     * @param {Function} cloneFunc The function to clone values.
    	     * @param {boolean} [isDeep] Specify a deep clone.
    	     * @returns {Object} Returns the cloned map.
    	     */
    	    function cloneMap(map, isDeep, cloneFunc) {
    	      var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
    	      return arrayReduce(array, addMapEntry, new map.constructor);
    	    }
    
    	    /**
    	     * Creates a clone of `regexp`.
    	     *
    	     * @private
    	     * @param {Object} regexp The regexp to clone.
    	     * @returns {Object} Returns the cloned regexp.
    	     */
    	    function cloneRegExp(regexp) {
    	      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
    	      result.lastIndex = regexp.lastIndex;
    	      return result;
    	    }
    
    	    /**
    	     * Creates a clone of `set`.
    	     *
    	     * @private
    	     * @param {Object} set The set to clone.
    	     * @param {Function} cloneFunc The function to clone values.
    	     * @param {boolean} [isDeep] Specify a deep clone.
    	     * @returns {Object} Returns the cloned set.
    	     */
    	    function cloneSet(set, isDeep, cloneFunc) {
    	      var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
    	      return arrayReduce(array, addSetEntry, new set.constructor);
    	    }
    
    	    /**
    	     * Creates a clone of the `symbol` object.
    	     *
    	     * @private
    	     * @param {Object} symbol The symbol object to clone.
    	     * @returns {Object} Returns the cloned symbol object.
    	     */
    	    function cloneSymbol(symbol) {
    	      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    	    }
    
    	    /**
    	     * Creates a clone of `typedArray`.
    	     *
    	     * @private
    	     * @param {Object} typedArray The typed array to clone.
    	     * @param {boolean} [isDeep] Specify a deep clone.
    	     * @returns {Object} Returns the cloned typed array.
    	     */
    	    function cloneTypedArray(typedArray, isDeep) {
    	      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    	      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    	    }
    
    	    /**
    	     * Compares values to sort them in ascending order.
    	     *
    	     * @private
    	     * @param {*} value The value to compare.
    	     * @param {*} other The other value to compare.
    	     * @returns {number} Returns the sort order indicator for `value`.
    	     */
    	    function compareAscending(value, other) {
    	      if (value !== other) {
    	        var valIsDefined = value !== undefined,
    	            valIsNull = value === null,
    	            valIsReflexive = value === value,
    	            valIsSymbol = isSymbol(value);
    
    	        var othIsDefined = other !== undefined,
    	            othIsNull = other === null,
    	            othIsReflexive = other === other,
    	            othIsSymbol = isSymbol(other);
    
    	        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
    	            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
    	            (valIsNull && othIsDefined && othIsReflexive) ||
    	            (!valIsDefined && othIsReflexive) ||
    	            !valIsReflexive) {
    	          return 1;
    	        }
    	        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
    	            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
    	            (othIsNull && valIsDefined && valIsReflexive) ||
    	            (!othIsDefined && valIsReflexive) ||
    	            !othIsReflexive) {
    	          return -1;
    	        }
    	      }
    	      return 0;
    	    }
    
    	    /**
    	     * Used by `_.orderBy` to compare multiple properties of a value to another
    	     * and stable sort them.
    	     *
    	     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
    	     * specify an order of "desc" for descending or "asc" for ascending sort order
    	     * of corresponding values.
    	     *
    	     * @private
    	     * @param {Object} object The object to compare.
    	     * @param {Object} other The other object to compare.
    	     * @param {boolean[]|string[]} orders The order to sort by for each property.
    	     * @returns {number} Returns the sort order indicator for `object`.
    	     */
    	    function compareMultiple(object, other, orders) {
    	      var index = -1,
    	          objCriteria = object.criteria,
    	          othCriteria = other.criteria,
    	          length = objCriteria.length,
    	          ordersLength = orders.length;
    
    	      while (++index < length) {
    	        var result = compareAscending(objCriteria[index], othCriteria[index]);
    	        if (result) {
    	          if (index >= ordersLength) {
    	            return result;
    	          }
    	          var order = orders[index];
    	          return result * (order == 'desc' ? -1 : 1);
    	        }
    	      }
    	      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
    	      // that causes it, under certain circumstances, to provide the same value for
    	      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
    	      // for more details.
    	      //
    	      // This also ensures a stable sort in V8 and other engines.
    	      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
    	      return object.index - other.index;
    	    }
    
    	    /**
    	     * Creates an array that is the composition of partially applied arguments,
    	     * placeholders, and provided arguments into a single array of arguments.
    	     *
    	     * @private
    	     * @param {Array} args The provided arguments.
    	     * @param {Array} partials The arguments to prepend to those provided.
    	     * @param {Array} holders The `partials` placeholder indexes.
    	     * @params {boolean} [isCurried] Specify composing for a curried function.
    	     * @returns {Array} Returns the new array of composed arguments.
    	     */
    	    function composeArgs(args, partials, holders, isCurried) {
    	      var argsIndex = -1,
    	          argsLength = args.length,
    	          holdersLength = holders.length,
    	          leftIndex = -1,
    	          leftLength = partials.length,
    	          rangeLength = nativeMax(argsLength - holdersLength, 0),
    	          result = Array(leftLength + rangeLength),
    	          isUncurried = !isCurried;
    
    	      while (++leftIndex < leftLength) {
    	        result[leftIndex] = partials[leftIndex];
    	      }
    	      while (++argsIndex < holdersLength) {
    	        if (isUncurried || argsIndex < argsLength) {
    	          result[holders[argsIndex]] = args[argsIndex];
    	        }
    	      }
    	      while (rangeLength--) {
    	        result[leftIndex++] = args[argsIndex++];
    	      }
    	      return result;
    	    }
    
    	    /**
    	     * This function is like `composeArgs` except that the arguments composition
    	     * is tailored for `_.partialRight`.
    	     *
    	     * @private
    	     * @param {Array} args The provided arguments.
    	     * @param {Array} partials The arguments to append to those provided.
    	     * @param {Array} holders The `partials` placeholder indexes.
    	     * @params {boolean} [isCurried] Specify composing for a curried function.
    	     * @returns {Array} Returns the new array of composed arguments.
    	     */
    	    function composeArgsRight(args, partials, holders, isCurried) {
    	      var argsIndex = -1,
    	          argsLength = args.length,
    	          holdersIndex = -1,
    	          holdersLength = holders.length,
    	          rightIndex = -1,
    	          rightLength = partials.length,
    	          rangeLength = nativeMax(argsLength - holdersLength, 0),
    	          result = Array(rangeLength + rightLength),
    	          isUncurried = !isCurried;
    
    	      while (++argsIndex < rangeLength) {
    	        result[argsIndex] = args[argsIndex];
    	      }
    	      var offset = argsIndex;
    	      while (++rightIndex < rightLength) {
    	        result[offset + rightIndex] = partials[rightIndex];
    	      }
    	      while (++holdersIndex < holdersLength) {
    	        if (isUncurried || argsIndex < argsLength) {
    	          result[offset + holders[holdersIndex]] = args[argsIndex++];
    	        }
    	      }
    	      return result;
    	    }
    
    	    /**
    	     * Copies the values of `source` to `array`.
    	     *
    	     * @private
    	     * @param {Array} source The array to copy values from.
    	     * @param {Array} [array=[]] The array to copy values to.
    	     * @returns {Array} Returns `array`.
    	     */
    	    function copyArray(source, array) {
    	      var index = -1,
    	          length = source.length;
    
    	      array || (array = Array(length));
    	      while (++index < length) {
    	        array[index] = source[index];
    	      }
    	      return array;
    	    }
    
    	    /**
    	     * Copies properties of `source` to `object`.
    	     *
    	     * @private
    	     * @param {Object} source The object to copy properties from.
    	     * @param {Array} props The property identifiers to copy.
    	     * @param {Object} [object={}] The object to copy properties to.
    	     * @param {Function} [customizer] The function to customize copied values.
    	     * @returns {Object} Returns `object`.
    	     */
    	    function copyObject(source, props, object, customizer) {
    	      object || (object = {});
    
    	      var index = -1,
    	          length = props.length;
    
    	      while (++index < length) {
    	        var key = props[index];
    
    	        var newValue = customizer
    	          ? customizer(object[key], source[key], key, object, source)
    	          : source[key];
    
    	        assignValue(object, key, newValue);
    	      }
    	      return object;
    	    }
    
    	    /**
    	     * Copies own symbol properties of `source` to `object`.
    	     *
    	     * @private
    	     * @param {Object} source The object to copy symbols from.
    	     * @param {Object} [object={}] The object to copy symbols to.
    	     * @returns {Object} Returns `object`.
    	     */
    	    function copySymbols(source, object) {
    	      return copyObject(source, getSymbols(source), object);
    	    }
    
    	    /**
    	     * Creates a function like `_.groupBy`.
    	     *
    	     * @private
    	     * @param {Function} setter The function to set accumulator values.
    	     * @param {Function} [initializer] The accumulator object initializer.
    	     * @returns {Function} Returns the new aggregator function.
    	     */
    	    function createAggregator(setter, initializer) {
    	      return function(collection, iteratee) {
    	        var func = isArray(collection) ? arrayAggregator : baseAggregator,
    	            accumulator = initializer ? initializer() : {};
    
    	        return func(collection, setter, getIteratee(iteratee), accumulator);
    	      };
    	    }
    
    	    /**
    	     * Creates a function like `_.assign`.
    	     *
    	     * @private
    	     * @param {Function} assigner The function to assign values.
    	     * @returns {Function} Returns the new assigner function.
    	     */
    	    function createAssigner(assigner) {
    	      return rest(function(object, sources) {
    	        var index = -1,
    	            length = sources.length,
    	            customizer = length > 1 ? sources[length - 1] : undefined,
    	            guard = length > 2 ? sources[2] : undefined;
    
    	        customizer = (assigner.length > 3 && typeof customizer == 'function')
    	          ? (length--, customizer)
    	          : undefined;
    
    	        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
    	          customizer = length < 3 ? undefined : customizer;
    	          length = 1;
    	        }
    	        object = Object(object);
    	        while (++index < length) {
    	          var source = sources[index];
    	          if (source) {
    	            assigner(object, source, index, customizer);
    	          }
    	        }
    	        return object;
    	      });
    	    }
    
    	    /**
    	     * Creates a `baseEach` or `baseEachRight` function.
    	     *
    	     * @private
    	     * @param {Function} eachFunc The function to iterate over a collection.
    	     * @param {boolean} [fromRight] Specify iterating from right to left.
    	     * @returns {Function} Returns the new base function.
    	     */
    	    function createBaseEach(eachFunc, fromRight) {
    	      return function(collection, iteratee) {
    	        if (collection == null) {
    	          return collection;
    	        }
    	        if (!isArrayLike(collection)) {
    	          return eachFunc(collection, iteratee);
    	        }
    	        var length = collection.length,
    	            index = fromRight ? length : -1,
    	            iterable = Object(collection);
    
    	        while ((fromRight ? index-- : ++index < length)) {
    	          if (iteratee(iterable[index], index, iterable) === false) {
    	            break;
    	          }
    	        }
    	        return collection;
    	      };
    	    }
    
    	    /**
    	     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
    	     *
    	     * @private
    	     * @param {boolean} [fromRight] Specify iterating from right to left.
    	     * @returns {Function} Returns the new base function.
    	     */
    	    function createBaseFor(fromRight) {
    	      return function(object, iteratee, keysFunc) {
    	        var index = -1,
    	            iterable = Object(object),
    	            props = keysFunc(object),
    	            length = props.length;
    
    	        while (length--) {
    	          var key = props[fromRight ? length : ++index];
    	          if (iteratee(iterable[key], key, iterable) === false) {
    	            break;
    	          }
    	        }
    	        return object;
    	      };
    	    }
    
    	    /**
    	     * Creates a function that wraps `func` to invoke it with the optional `this`
    	     * binding of `thisArg`.
    	     *
    	     * @private
    	     * @param {Function} func The function to wrap.
    	     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper`
    	     *  for more details.
    	     * @param {*} [thisArg] The `this` binding of `func`.
    	     * @returns {Function} Returns the new wrapped function.
    	     */
    	    function createBaseWrapper(func, bitmask, thisArg) {
    	      var isBind = bitmask & BIND_FLAG,
    	          Ctor = createCtorWrapper(func);
    
    	      function wrapper() {
    	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
    	        return fn.apply(isBind ? thisArg : this, arguments);
    	      }
    	      return wrapper;
    	    }
    
    	    /**
    	     * Creates a function like `_.lowerFirst`.
    	     *
    	     * @private
    	     * @param {string} methodName The name of the `String` case method to use.
    	     * @returns {Function} Returns the new case function.
    	     */
    	    function createCaseFirst(methodName) {
    	      return function(string) {
    	        string = toString(string);
    
    	        var strSymbols = reHasComplexSymbol.test(string)
    	          ? stringToArray(string)
    	          : undefined;
    
    	        var chr = strSymbols
    	          ? strSymbols[0]
    	          : string.charAt(0);
    
    	        var trailing = strSymbols
    	          ? castSlice(strSymbols, 1).join('')
    	          : string.slice(1);
    
    	        return chr[methodName]() + trailing;
    	      };
    	    }
    
    	    /**
    	     * Creates a function like `_.camelCase`.
    	     *
    	     * @private
    	     * @param {Function} callback The function to combine each word.
    	     * @returns {Function} Returns the new compounder function.
    	     */
    	    function createCompounder(callback) {
    	      return function(string) {
    	        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
    	      };
    	    }
    
    	    /**
    	     * Creates a function that produces an instance of `Ctor` regardless of
    	     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
    	     *
    	     * @private
    	     * @param {Function} Ctor The constructor to wrap.
    	     * @returns {Function} Returns the new wrapped function.
    	     */
    	    function createCtorWrapper(Ctor) {
    	      return function() {
    	        // Use a `switch` statement to work with class constructors. See
    	        // http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
    	        // for more details.
    	        var args = arguments;
    	        switch (args.length) {
    	          case 0: return new Ctor;
    	          case 1: return new Ctor(args[0]);
    	          case 2: return new Ctor(args[0], args[1]);
    	          case 3: return new Ctor(args[0], args[1], args[2]);
    	          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
    	          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
    	          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
    	          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
    	        }
    	        var thisBinding = baseCreate(Ctor.prototype),
    	            result = Ctor.apply(thisBinding, args);
    
    	        // Mimic the constructor's `return` behavior.
    	        // See https://es5.github.io/#x13.2.2 for more details.
    	        return isObject(result) ? result : thisBinding;
    	      };
    	    }
    
    	    /**
    	     * Creates a function that wraps `func` to enable currying.
    	     *
    	     * @private
    	     * @param {Function} func The function to wrap.
    	     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper`
    	     *  for more details.
    	     * @param {number} arity The arity of `func`.
    	     * @returns {Function} Returns the new wrapped function.
    	     */
    	    function createCurryWrapper(func, bitmask, arity) {
    	      var Ctor = createCtorWrapper(func);
    
    	      function wrapper() {
    	        var length = arguments.length,
    	            args = Array(length),
    	            index = length,
    	            placeholder = getHolder(wrapper);
    
    	        while (index--) {
    	          args[index] = arguments[index];
    	        }
    	        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
    	          ? []
    	          : replaceHolders(args, placeholder);
    
    	        length -= holders.length;
    	        if (length < arity) {
    	          return createRecurryWrapper(
    	            func, bitmask, createHybridWrapper, wrapper.placeholder, undefined,
    	            args, holders, undefined, undefined, arity - length);
    	        }
    	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
    	        return apply(fn, this, args);
    	      }
    	      return wrapper;
    	    }
    
    	    /**
    	     * Creates a `_.find` or `_.findLast` function.
    	     *
    	     * @private
    	     * @param {Function} findIndexFunc The function to find the collection index.
    	     * @returns {Function} Returns the new find function.
    	     */
    	    function createFind(findIndexFunc) {
    	      return function(collection, predicate, fromIndex) {
    	        var iterable = Object(collection);
    	        predicate = getIteratee(predicate, 3);
    	        if (!isArrayLike(collection)) {
    	          var props = keys(collection);
    	        }
    	        var index = findIndexFunc(props || collection, function(value, key) {
    	          if (props) {
    	            key = value;
    	            value = iterable[key];
    	          }
    	          return predicate(value, key, iterable);
    	        }, fromIndex);
    	        return index > -1 ? collection[props ? props[index] : index] : undefined;
    	      };
    	    }
    
    	    /**
    	     * Creates a `_.flow` or `_.flowRight` function.
    	     *
    	     * @private
    	     * @param {boolean} [fromRight] Specify iterating from right to left.
    	     * @returns {Function} Returns the new flow function.
    	     */
    	    function createFlow(fromRight) {
    	      return rest(function(funcs) {
    	        funcs = baseFlatten(funcs, 1);
    
    	        var length = funcs.length,
    	            index = length,
    	            prereq = LodashWrapper.prototype.thru;
    
    	        if (fromRight) {
    	          funcs.reverse();
    	        }
    	        while (index--) {
    	          var func = funcs[index];
    	          if (typeof func != 'function') {
    	            throw new TypeError(FUNC_ERROR_TEXT);
    	          }
    	          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
    	            var wrapper = new LodashWrapper([], true);
    	          }
    	        }
    	        index = wrapper ? index : length;
    	        while (++index < length) {
    	          func = funcs[index];
    
    	          var funcName = getFuncName(func),
    	              data = funcName == 'wrapper' ? getData(func) : undefined;
    
    	          if (data && isLaziable(data[0]) &&
    	                data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) &&
    	                !data[4].length && data[9] == 1
    	              ) {
    	            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
    	          } else {
    	            wrapper = (func.length == 1 && isLaziable(func))
    	              ? wrapper[funcName]()
    	              : wrapper.thru(func);
    	          }
    	        }
    	        return function() {
    	          var args = arguments,
    	              value = args[0];
    
    	          if (wrapper && args.length == 1 &&
    	              isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
    	            return wrapper.plant(value).value();
    	          }
    	          var index = 0,
    	              result = length ? funcs[index].apply(this, args) : value;
    
    	          while (++index < length) {
    	            result = funcs[index].call(this, result);
    	          }
    	          return result;
    	        };
    	      });
    	    }
    
    	    /**
    	     * Creates a function that wraps `func` to invoke it with optional `this`
    	     * binding of `thisArg`, partial application, and currying.
    	     *
    	     * @private
    	     * @param {Function|string} func The function or method name to wrap.
    	     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper`
    	     *  for more details.
    	     * @param {*} [thisArg] The `this` binding of `func`.
    	     * @param {Array} [partials] The arguments to prepend to those provided to
    	     *  the new function.
    	     * @param {Array} [holders] The `partials` placeholder indexes.
    	     * @param {Array} [partialsRight] The arguments to append to those provided
    	     *  to the new function.
    	     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
    	     * @param {Array} [argPos] The argument positions of the new function.
    	     * @param {number} [ary] The arity cap of `func`.
    	     * @param {number} [arity] The arity of `func`.
    	     * @returns {Function} Returns the new wrapped function.
    	     */
    	    function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
    	      var isAry = bitmask & ARY_FLAG,
    	          isBind = bitmask & BIND_FLAG,
    	          isBindKey = bitmask & BIND_KEY_FLAG,
    	          isCurried = bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG),
    	          isFlip = bitmask & FLIP_FLAG,
    	          Ctor = isBindKey ? undefined : createCtorWrapper(func);
    
    	      function wrapper() {
    	        var length = arguments.length,
    	            args = Array(length),
    	            index = length;
    
    	        while (index--) {
    	          args[index] = arguments[index];
    	        }
    	        if (isCurried) {
    	          var placeholder = getHolder(wrapper),
    	              holdersCount = countHolders(args, placeholder);
    	        }
    	        if (partials) {
    	          args = composeArgs(args, partials, holders, isCurried);
    	        }
    	        if (partialsRight) {
    	          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
    	        }
    	        length -= holdersCount;
    	        if (isCurried && length < arity) {
    	          var newHolders = replaceHolders(args, placeholder);
    	          return createRecurryWrapper(
    	            func, bitmask, createHybridWrapper, wrapper.placeholder, thisArg,
    	            args, newHolders, argPos, ary, arity - length
    	          );
    	        }
    	        var thisBinding = isBind ? thisArg : this,
    	            fn = isBindKey ? thisBinding[func] : func;
    
    	        length = args.length;
    	        if (argPos) {
    	          args = reorder(args, argPos);
    	        } else if (isFlip && length > 1) {
    	          args.reverse();
    	        }
    	        if (isAry && ary < length) {
    	          args.length = ary;
    	        }
    	        if (this && this !== root && this instanceof wrapper) {
    	          fn = Ctor || createCtorWrapper(fn);
    	        }
    	        return fn.apply(thisBinding, args);
    	      }
    	      return wrapper;
    	    }
    
    	    /**
    	     * Creates a function like `_.invertBy`.
    	     *
    	     * @private
    	     * @param {Function} setter The function to set accumulator values.
    	     * @param {Function} toIteratee The function to resolve iteratees.
    	     * @returns {Function} Returns the new inverter function.
    	     */
    	    function createInverter(setter, toIteratee) {
    	      return function(object, iteratee) {
    	        return baseInverter(object, setter, toIteratee(iteratee), {});
    	      };
    	    }
    
    	    /**
    	     * Creates a function that performs a mathematical operation on two values.
    	     *
    	     * @private
    	     * @param {Function} operator The function to perform the operation.
    	     * @returns {Function} Returns the new mathematical operation function.
    	     */
    	    function createMathOperation(operator) {
    	      return function(value, other) {
    	        var result;
    	        if (value === undefined && other === undefined) {
    	          return 0;
    	        }
    	        if (value !== undefined) {
    	          result = value;
    	        }
    	        if (other !== undefined) {
    	          if (result === undefined) {
    	            return other;
    	          }
    	          if (typeof value == 'string' || typeof other == 'string') {
    	            value = baseToString(value);
    	            other = baseToString(other);
    	          } else {
    	            value = baseToNumber(value);
    	            other = baseToNumber(other);
    	          }
    	          result = operator(value, other);
    	        }
    	        return result;
    	      };
    	    }
    
    	    /**
    	     * Creates a function like `_.over`.
    	     *
    	     * @private
    	     * @param {Function} arrayFunc The function to iterate over iteratees.
    	     * @returns {Function} Returns the new over function.
    	     */
    	    function createOver(arrayFunc) {
    	      return rest(function(iteratees) {
    	        iteratees = (iteratees.length == 1 && isArray(iteratees[0]))
    	          ? arrayMap(iteratees[0], baseUnary(getIteratee()))
    	          : arrayMap(baseFlatten(iteratees, 1, isFlattenableIteratee), baseUnary(getIteratee()));
    
    	        return rest(function(args) {
    	          var thisArg = this;
    	          return arrayFunc(iteratees, function(iteratee) {
    	            return apply(iteratee, thisArg, args);
    	          });
    	        });
    	      });
    	    }
    
    	    /**
    	     * Creates the padding for `string` based on `length`. The `chars` string
    	     * is truncated if the number of characters exceeds `length`.
    	     *
    	     * @private
    	     * @param {number} length The padding length.
    	     * @param {string} [chars=' '] The string used as padding.
    	     * @returns {string} Returns the padding for `string`.
    	     */
    	    function createPadding(length, chars) {
    	      chars = chars === undefined ? ' ' : baseToString(chars);
    
    	      var charsLength = chars.length;
    	      if (charsLength < 2) {
    	        return charsLength ? baseRepeat(chars, length) : chars;
    	      }
    	      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
    	      return reHasComplexSymbol.test(chars)
    	        ? castSlice(stringToArray(result), 0, length).join('')
    	        : result.slice(0, length);
    	    }
    
    	    /**
    	     * Creates a function that wraps `func` to invoke it with the `this` binding
    	     * of `thisArg` and `partials` prepended to the arguments it receives.
    	     *
    	     * @private
    	     * @param {Function} func The function to wrap.
    	     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper`
    	     *  for more details.
    	     * @param {*} thisArg The `this` binding of `func`.
    	     * @param {Array} partials The arguments to prepend to those provided to
    	     *  the new function.
    	     * @returns {Function} Returns the new wrapped function.
    	     */
    	    function createPartialWrapper(func, bitmask, thisArg, partials) {
    	      var isBind = bitmask & BIND_FLAG,
    	          Ctor = createCtorWrapper(func);
    
    	      function wrapper() {
    	        var argsIndex = -1,
    	            argsLength = arguments.length,
    	            leftIndex = -1,
    	            leftLength = partials.length,
    	            args = Array(leftLength + argsLength),
    	            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
    
    	        while (++leftIndex < leftLength) {
    	          args[leftIndex] = partials[leftIndex];
    	        }
    	        while (argsLength--) {
    	          args[leftIndex++] = arguments[++argsIndex];
    	        }
    	        return apply(fn, isBind ? thisArg : this, args);
    	      }
    	      return wrapper;
    	    }
    
    	    /**
    	     * Creates a `_.range` or `_.rangeRight` function.
    	     *
    	     * @private
    	     * @param {boolean} [fromRight] Specify iterating from right to left.
    	     * @returns {Function} Returns the new range function.
    	     */
    	    function createRange(fromRight) {
    	      return function(start, end, step) {
    	        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
    	          end = step = undefined;
    	        }
    	        // Ensure the sign of `-0` is preserved.
    	        start = toNumber(start);
    	        start = start === start ? start : 0;
    	        if (end === undefined) {
    	          end = start;
    	          start = 0;
    	        } else {
    	          end = toNumber(end) || 0;
    	        }
    	        step = step === undefined ? (start < end ? 1 : -1) : (toNumber(step) || 0);
    	        return baseRange(start, end, step, fromRight);
    	      };
    	    }
    
    	    /**
    	     * Creates a function that performs a relational operation on two values.
    	     *
    	     * @private
    	     * @param {Function} operator The function to perform the operation.
    	     * @returns {Function} Returns the new relational operation function.
    	     */
    	    function createRelationalOperation(operator) {
    	      return function(value, other) {
    	        if (!(typeof value == 'string' && typeof other == 'string')) {
    	          value = toNumber(value);
    	          other = toNumber(other);
    	        }
    	        return operator(value, other);
    	      };
    	    }
    
    	    /**
    	     * Creates a function that wraps `func` to continue currying.
    	     *
    	     * @private
    	     * @param {Function} func The function to wrap.
    	     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper`
    	     *  for more details.
    	     * @param {Function} wrapFunc The function to create the `func` wrapper.
    	     * @param {*} placeholder The placeholder value.
    	     * @param {*} [thisArg] The `this` binding of `func`.
    	     * @param {Array} [partials] The arguments to prepend to those provided to
    	     *  the new function.
    	     * @param {Array} [holders] The `partials` placeholder indexes.
    	     * @param {Array} [argPos] The argument positions of the new function.
    	     * @param {number} [ary] The arity cap of `func`.
    	     * @param {number} [arity] The arity of `func`.
    	     * @returns {Function} Returns the new wrapped function.
    	     */
    	    function createRecurryWrapper(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
    	      var isCurry = bitmask & CURRY_FLAG,
    	          newHolders = isCurry ? holders : undefined,
    	          newHoldersRight = isCurry ? undefined : holders,
    	          newPartials = isCurry ? partials : undefined,
    	          newPartialsRight = isCurry ? undefined : partials;
    
    	      bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
    	      bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);
    
    	      if (!(bitmask & CURRY_BOUND_FLAG)) {
    	        bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
    	      }
    	      var newData = [
    	        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
    	        newHoldersRight, argPos, ary, arity
    	      ];
    
    	      var result = wrapFunc.apply(undefined, newData);
    	      if (isLaziable(func)) {
    	        setData(result, newData);
    	      }
    	      result.placeholder = placeholder;
    	      return result;
    	    }
    
    	    /**
    	     * Creates a function like `_.round`.
    	     *
    	     * @private
    	     * @param {string} methodName The name of the `Math` method to use when rounding.
    	     * @returns {Function} Returns the new round function.
    	     */
    	    function createRound(methodName) {
    	      var func = Math[methodName];
    	      return function(number, precision) {
    	        number = toNumber(number);
    	        precision = nativeMin(toInteger(precision), 292);
    	        if (precision) {
    	          // Shift with exponential notation to avoid floating-point issues.
    	          // See [MDN](https://mdn.io/round#Examples) for more details.
    	          var pair = (toString(number) + 'e').split('e'),
    	              value = func(pair[0] + 'e' + (+pair[1] + precision));
    
    	          pair = (toString(value) + 'e').split('e');
    	          return +(pair[0] + 'e' + (+pair[1] - precision));
    	        }
    	        return func(number);
    	      };
    	    }
    
    	    /**
    	     * Creates a set of `values`.
    	     *
    	     * @private
    	     * @param {Array} values The values to add to the set.
    	     * @returns {Object} Returns the new set.
    	     */
    	    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
    	      return new Set(values);
    	    };
    
    	    /**
    	     * Creates a `_.toPairs` or `_.toPairsIn` function.
    	     *
    	     * @private
    	     * @param {Function} keysFunc The function to get the keys of a given object.
    	     * @returns {Function} Returns the new pairs function.
    	     */
    	    function createToPairs(keysFunc) {
    	      return function(object) {
    	        var tag = getTag(object);
    	        if (tag == mapTag) {
    	          return mapToArray(object);
    	        }
    	        if (tag == setTag) {
    	          return setToPairs(object);
    	        }
    	        return baseToPairs(object, keysFunc(object));
    	      };
    	    }
    
    	    /**
    	     * Creates a function that either curries or invokes `func` with optional
    	     * `this` binding and partially applied arguments.
    	     *
    	     * @private
    	     * @param {Function|string} func The function or method name to wrap.
    	     * @param {number} bitmask The bitmask of wrapper flags.
    	     *  The bitmask may be composed of the following flags:
    	     *     1 - `_.bind`
    	     *     2 - `_.bindKey`
    	     *     4 - `_.curry` or `_.curryRight` of a bound function
    	     *     8 - `_.curry`
    	     *    16 - `_.curryRight`
    	     *    32 - `_.partial`
    	     *    64 - `_.partialRight`
    	     *   128 - `_.rearg`
    	     *   256 - `_.ary`
    	     *   512 - `_.flip`
    	     * @param {*} [thisArg] The `this` binding of `func`.
    	     * @param {Array} [partials] The arguments to be partially applied.
    	     * @param {Array} [holders] The `partials` placeholder indexes.
    	     * @param {Array} [argPos] The argument positions of the new function.
    	     * @param {number} [ary] The arity cap of `func`.
    	     * @param {number} [arity] The arity of `func`.
    	     * @returns {Function} Returns the new wrapped function.
    	     */
    	    function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
    	      var isBindKey = bitmask & BIND_KEY_FLAG;
    	      if (!isBindKey && typeof func != 'function') {
    	        throw new TypeError(FUNC_ERROR_TEXT);
    	      }
    	      var length = partials ? partials.length : 0;
    	      if (!length) {
    	        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
    	        partials = holders = undefined;
    	      }
    	      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
    	      arity = arity === undefined ? arity : toInteger(arity);
    	      length -= holders ? holders.length : 0;
    
    	      if (bitmask & PARTIAL_RIGHT_FLAG) {
    	        var partialsRight = partials,
    	            holdersRight = holders;
    
    	        partials = holders = undefined;
    	      }
    	      var data = isBindKey ? undefined : getData(func);
    
    	      var newData = [
    	        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
    	        argPos, ary, arity
    	      ];
    
    	      if (data) {
    	        mergeData(newData, data);
    	      }
    	      func = newData[0];
    	      bitmask = newData[1];
    	      thisArg = newData[2];
    	      partials = newData[3];
    	      holders = newData[4];
    	      arity = newData[9] = newData[9] == null
    	        ? (isBindKey ? 0 : func.length)
    	        : nativeMax(newData[9] - length, 0);
    
    	      if (!arity && bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG)) {
    	        bitmask &= ~(CURRY_FLAG | CURRY_RIGHT_FLAG);
    	      }
    	      if (!bitmask || bitmask == BIND_FLAG) {
    	        var result = createBaseWrapper(func, bitmask, thisArg);
    	      } else if (bitmask == CURRY_FLAG || bitmask == CURRY_RIGHT_FLAG) {
    	        result = createCurryWrapper(func, bitmask, arity);
    	      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !holders.length) {
    	        result = createPartialWrapper(func, bitmask, thisArg, partials);
    	      } else {
    	        result = createHybridWrapper.apply(undefined, newData);
    	      }
    	      var setter = data ? baseSetData : setData;
    	      return setter(result, newData);
    	    }
    
    	    /**
    	     * A specialized version of `baseIsEqualDeep` for arrays with support for
    	     * partial deep comparisons.
    	     *
    	     * @private
    	     * @param {Array} array The array to compare.
    	     * @param {Array} other The other array to compare.
    	     * @param {Function} equalFunc The function to determine equivalents of values.
    	     * @param {Function} customizer The function to customize comparisons.
    	     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
    	     *  for more details.
    	     * @param {Object} stack Tracks traversed `array` and `other` objects.
    	     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
    	     */
    	    function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
    	      var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
    	          arrLength = array.length,
    	          othLength = other.length;
    
    	      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    	        return false;
    	      }
    	      // Assume cyclic values are equal.
    	      var stacked = stack.get(array);
    	      if (stacked) {
    	        return stacked == other;
    	      }
    	      var index = -1,
    	          result = true,
    	          seen = (bitmask & UNORDERED_COMPARE_FLAG) ? new SetCache : undefined;
    
    	      stack.set(array, other);
    
    	      // Ignore non-index properties.
    	      while (++index < arrLength) {
    	        var arrValue = array[index],
    	            othValue = other[index];
    
    	        if (customizer) {
    	          var compared = isPartial
    	            ? customizer(othValue, arrValue, index, other, array, stack)
    	            : customizer(arrValue, othValue, index, array, other, stack);
    	        }
    	        if (compared !== undefined) {
    	          if (compared) {
    	            continue;
    	          }
    	          result = false;
    	          break;
    	        }
    	        // Recursively compare arrays (susceptible to call stack limits).
    	        if (seen) {
    	          if (!arraySome(other, function(othValue, othIndex) {
    	                if (!seen.has(othIndex) &&
    	                    (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
    	                  return seen.add(othIndex);
    	                }
    	              })) {
    	            result = false;
    	            break;
    	          }
    	        } else if (!(
    	              arrValue === othValue ||
    	                equalFunc(arrValue, othValue, customizer, bitmask, stack)
    	            )) {
    	          result = false;
    	          break;
    	        }
    	      }
    	      stack['delete'](array);
    	      return result;
    	    }
    
    	    /**
    	     * A specialized version of `baseIsEqualDeep` for comparing objects of
    	     * the same `toStringTag`.
    	     *
    	     * **Note:** This function only supports comparing values with tags of
    	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
    	     *
    	     * @private
    	     * @param {Object} object The object to compare.
    	     * @param {Object} other The other object to compare.
    	     * @param {string} tag The `toStringTag` of the objects to compare.
    	     * @param {Function} equalFunc The function to determine equivalents of values.
    	     * @param {Function} customizer The function to customize comparisons.
    	     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
    	     *  for more details.
    	     * @param {Object} stack Tracks traversed `object` and `other` objects.
    	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
    	     */
    	    function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
    	      switch (tag) {
    	        case dataViewTag:
    	          if ((object.byteLength != other.byteLength) ||
    	              (object.byteOffset != other.byteOffset)) {
    	            return false;
    	          }
    	          object = object.buffer;
    	          other = other.buffer;
    
    	        case arrayBufferTag:
    	          if ((object.byteLength != other.byteLength) ||
    	              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
    	            return false;
    	          }
    	          return true;
    
    	        case boolTag:
    	        case dateTag:
    	          // Coerce dates and booleans to numbers, dates to milliseconds and
    	          // booleans to `1` or `0` treating invalid dates coerced to `NaN` as
    	          // not equal.
    	          return +object == +other;
    
    	        case errorTag:
    	          return object.name == other.name && object.message == other.message;
    
    	        case numberTag:
    	          // Treat `NaN` vs. `NaN` as equal.
    	          return (object != +object) ? other != +other : object == +other;
    
    	        case regexpTag:
    	        case stringTag:
    	          // Coerce regexes to strings and treat strings, primitives and objects,
    	          // as equal. See http://www.ecma-international.org/ecma-262/6.0/#sec-regexp.prototype.tostring
    	          // for more details.
    	          return object == (other + '');
    
    	        case mapTag:
    	          var convert = mapToArray;
    
    	        case setTag:
    	          var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
    	          convert || (convert = setToArray);
    
    	          if (object.size != other.size && !isPartial) {
    	            return false;
    	          }
    	          // Assume cyclic values are equal.
    	          var stacked = stack.get(object);
    	          if (stacked) {
    	            return stacked == other;
    	          }
    	          bitmask |= UNORDERED_COMPARE_FLAG;
    	          stack.set(object, other);
    
    	          // Recursively compare objects (susceptible to call stack limits).
    	          return equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);
    
    	        case symbolTag:
    	          if (symbolValueOf) {
    	            return symbolValueOf.call(object) == symbolValueOf.call(other);
    	          }
    	      }
    	      return false;
    	    }
    
    	    /**
    	     * A specialized version of `baseIsEqualDeep` for objects with support for
    	     * partial deep comparisons.
    	     *
    	     * @private
    	     * @param {Object} object The object to compare.
    	     * @param {Object} other The other object to compare.
    	     * @param {Function} equalFunc The function to determine equivalents of values.
    	     * @param {Function} customizer The function to customize comparisons.
    	     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
    	     *  for more details.
    	     * @param {Object} stack Tracks traversed `object` and `other` objects.
    	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
    	     */
    	    function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
    	      var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
    	          objProps = keys(object),
    	          objLength = objProps.length,
    	          othProps = keys(other),
    	          othLength = othProps.length;
    
    	      if (objLength != othLength && !isPartial) {
    	        return false;
    	      }
    	      var index = objLength;
    	      while (index--) {
    	        var key = objProps[index];
    	        if (!(isPartial ? key in other : baseHas(other, key))) {
    	          return false;
    	        }
    	      }
    	      // Assume cyclic values are equal.
    	      var stacked = stack.get(object);
    	      if (stacked) {
    	        return stacked == other;
    	      }
    	      var result = true;
    	      stack.set(object, other);
    
    	      var skipCtor = isPartial;
    	      while (++index < objLength) {
    	        key = objProps[index];
    	        var objValue = object[key],
    	            othValue = other[key];
    
    	        if (customizer) {
    	          var compared = isPartial
    	            ? customizer(othValue, objValue, key, other, object, stack)
    	            : customizer(objValue, othValue, key, object, other, stack);
    	        }
    	        // Recursively compare objects (susceptible to call stack limits).
    	        if (!(compared === undefined
    	              ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))
    	              : compared
    	            )) {
    	          result = false;
    	          break;
    	        }
    	        skipCtor || (skipCtor = key == 'constructor');
    	      }
    	      if (result && !skipCtor) {
    	        var objCtor = object.constructor,
    	            othCtor = other.constructor;
    
    	        // Non `Object` object instances with different constructors are not equal.
    	        if (objCtor != othCtor &&
    	            ('constructor' in object && 'constructor' in other) &&
    	            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
    	              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
    	          result = false;
    	        }
    	      }
    	      stack['delete'](object);
    	      return result;
    	    }
    
    	    /**
    	     * Creates an array of own enumerable property names and symbols of `object`.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the array of property names and symbols.
    	     */
    	    function getAllKeys(object) {
    	      return baseGetAllKeys(object, keys, getSymbols);
    	    }
    
    	    /**
    	     * Creates an array of own and inherited enumerable property names and
    	     * symbols of `object`.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the array of property names and symbols.
    	     */
    	    function getAllKeysIn(object) {
    	      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    	    }
    
    	    /**
    	     * Gets metadata for `func`.
    	     *
    	     * @private
    	     * @param {Function} func The function to query.
    	     * @returns {*} Returns the metadata for `func`.
    	     */
    	    var getData = !metaMap ? noop : function(func) {
    	      return metaMap.get(func);
    	    };
    
    	    /**
    	     * Gets the name of `func`.
    	     *
    	     * @private
    	     * @param {Function} func The function to query.
    	     * @returns {string} Returns the function name.
    	     */
    	    function getFuncName(func) {
    	      var result = (func.name + ''),
    	          array = realNames[result],
    	          length = hasOwnProperty.call(realNames, result) ? array.length : 0;
    
    	      while (length--) {
    	        var data = array[length],
    	            otherFunc = data.func;
    	        if (otherFunc == null || otherFunc == func) {
    	          return data.name;
    	        }
    	      }
    	      return result;
    	    }
    
    	    /**
    	     * Gets the argument placeholder value for `func`.
    	     *
    	     * @private
    	     * @param {Function} func The function to inspect.
    	     * @returns {*} Returns the placeholder value.
    	     */
    	    function getHolder(func) {
    	      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
    	      return object.placeholder;
    	    }
    
    	    /**
    	     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
    	     * this function returns the custom method, otherwise it returns `baseIteratee`.
    	     * If arguments are provided, the chosen function is invoked with them and
    	     * its result is returned.
    	     *
    	     * @private
    	     * @param {*} [value] The value to convert to an iteratee.
    	     * @param {number} [arity] The arity of the created iteratee.
    	     * @returns {Function} Returns the chosen function or its result.
    	     */
    	    function getIteratee() {
    	      var result = lodash.iteratee || iteratee;
    	      result = result === iteratee ? baseIteratee : result;
    	      return arguments.length ? result(arguments[0], arguments[1]) : result;
    	    }
    
    	    /**
    	     * Gets the "length" property value of `object`.
    	     *
    	     * **Note:** This function is used to avoid a
    	     * [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792) that affects
    	     * Safari on at least iOS 8.1-8.3 ARM64.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @returns {*} Returns the "length" value.
    	     */
    	    var getLength = baseProperty('length');
    
    	    /**
    	     * Gets the data for `map`.
    	     *
    	     * @private
    	     * @param {Object} map The map to query.
    	     * @param {string} key The reference key.
    	     * @returns {*} Returns the map data.
    	     */
    	    function getMapData(map, key) {
    	      var data = map.__data__;
    	      return isKeyable(key)
    	        ? data[typeof key == 'string' ? 'string' : 'hash']
    	        : data.map;
    	    }
    
    	    /**
    	     * Gets the property names, values, and compare flags of `object`.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the match data of `object`.
    	     */
    	    function getMatchData(object) {
    	      var result = keys(object),
    	          length = result.length;
    
    	      while (length--) {
    	        var key = result[length],
    	            value = object[key];
    
    	        result[length] = [key, value, isStrictComparable(value)];
    	      }
    	      return result;
    	    }
    
    	    /**
    	     * Gets the native function at `key` of `object`.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @param {string} key The key of the method to get.
    	     * @returns {*} Returns the function if it's native, else `undefined`.
    	     */
    	    function getNative(object, key) {
    	      var value = getValue(object, key);
    	      return baseIsNative(value) ? value : undefined;
    	    }
    
    	    /**
    	     * Gets the `[[Prototype]]` of `value`.
    	     *
    	     * @private
    	     * @param {*} value The value to query.
    	     * @returns {null|Object} Returns the `[[Prototype]]`.
    	     */
    	    function getPrototype(value) {
    	      return nativeGetPrototype(Object(value));
    	    }
    
    	    /**
    	     * Creates an array of the own enumerable symbol properties of `object`.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the array of symbols.
    	     */
    	    function getSymbols(object) {
    	      // Coerce `object` to an object to avoid non-object errors in V8.
    	      // See https://bugs.chromium.org/p/v8/issues/detail?id=3443 for more details.
    	      return getOwnPropertySymbols(Object(object));
    	    }
    
    	    // Fallback for IE < 11.
    	    if (!getOwnPropertySymbols) {
    	      getSymbols = stubArray;
    	    }
    
    	    /**
    	     * Creates an array of the own and inherited enumerable symbol properties
    	     * of `object`.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the array of symbols.
    	     */
    	    var getSymbolsIn = !getOwnPropertySymbols ? getSymbols : function(object) {
    	      var result = [];
    	      while (object) {
    	        arrayPush(result, getSymbols(object));
    	        object = getPrototype(object);
    	      }
    	      return result;
    	    };
    
    	    /**
    	     * Gets the `toStringTag` of `value`.
    	     *
    	     * @private
    	     * @param {*} value The value to query.
    	     * @returns {string} Returns the `toStringTag`.
    	     */
    	    function getTag(value) {
    	      return objectToString.call(value);
    	    }
    
    	    // Fallback for data views, maps, sets, and weak maps in IE 11,
    	    // for data views in Edge, and promises in Node.js.
    	    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    	        (Map && getTag(new Map) != mapTag) ||
    	        (Promise && getTag(Promise.resolve()) != promiseTag) ||
    	        (Set && getTag(new Set) != setTag) ||
    	        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
    	      getTag = function(value) {
    	        var result = objectToString.call(value),
    	            Ctor = result == objectTag ? value.constructor : undefined,
    	            ctorString = Ctor ? toSource(Ctor) : undefined;
    
    	        if (ctorString) {
    	          switch (ctorString) {
    	            case dataViewCtorString: return dataViewTag;
    	            case mapCtorString: return mapTag;
    	            case promiseCtorString: return promiseTag;
    	            case setCtorString: return setTag;
    	            case weakMapCtorString: return weakMapTag;
    	          }
    	        }
    	        return result;
    	      };
    	    }
    
    	    /**
    	     * Gets the view, applying any `transforms` to the `start` and `end` positions.
    	     *
    	     * @private
    	     * @param {number} start The start of the view.
    	     * @param {number} end The end of the view.
    	     * @param {Array} transforms The transformations to apply to the view.
    	     * @returns {Object} Returns an object containing the `start` and `end`
    	     *  positions of the view.
    	     */
    	    function getView(start, end, transforms) {
    	      var index = -1,
    	          length = transforms.length;
    
    	      while (++index < length) {
    	        var data = transforms[index],
    	            size = data.size;
    
    	        switch (data.type) {
    	          case 'drop':      start += size; break;
    	          case 'dropRight': end -= size; break;
    	          case 'take':      end = nativeMin(end, start + size); break;
    	          case 'takeRight': start = nativeMax(start, end - size); break;
    	        }
    	      }
    	      return { 'start': start, 'end': end };
    	    }
    
    	    /**
    	     * Checks if `path` exists on `object`.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @param {Array|string} path The path to check.
    	     * @param {Function} hasFunc The function to check properties.
    	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
    	     */
    	    function hasPath(object, path, hasFunc) {
    	      path = isKey(path, object) ? [path] : castPath(path);
    
    	      var result,
    	          index = -1,
    	          length = path.length;
    
    	      while (++index < length) {
    	        var key = toKey(path[index]);
    	        if (!(result = object != null && hasFunc(object, key))) {
    	          break;
    	        }
    	        object = object[key];
    	      }
    	      if (result) {
    	        return result;
    	      }
    	      var length = object ? object.length : 0;
    	      return !!length && isLength(length) && isIndex(key, length) &&
    	        (isArray(object) || isString(object) || isArguments(object));
    	    }
    
    	    /**
    	     * Initializes an array clone.
    	     *
    	     * @private
    	     * @param {Array} array The array to clone.
    	     * @returns {Array} Returns the initialized clone.
    	     */
    	    function initCloneArray(array) {
    	      var length = array.length,
    	          result = array.constructor(length);
    
    	      // Add properties assigned by `RegExp#exec`.
    	      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
    	        result.index = array.index;
    	        result.input = array.input;
    	      }
    	      return result;
    	    }
    
    	    /**
    	     * Initializes an object clone.
    	     *
    	     * @private
    	     * @param {Object} object The object to clone.
    	     * @returns {Object} Returns the initialized clone.
    	     */
    	    function initCloneObject(object) {
    	      return (typeof object.constructor == 'function' && !isPrototype(object))
    	        ? baseCreate(getPrototype(object))
    	        : {};
    	    }
    
    	    /**
    	     * Initializes an object clone based on its `toStringTag`.
    	     *
    	     * **Note:** This function only supports cloning values with tags of
    	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
    	     *
    	     * @private
    	     * @param {Object} object The object to clone.
    	     * @param {string} tag The `toStringTag` of the object to clone.
    	     * @param {Function} cloneFunc The function to clone values.
    	     * @param {boolean} [isDeep] Specify a deep clone.
    	     * @returns {Object} Returns the initialized clone.
    	     */
    	    function initCloneByTag(object, tag, cloneFunc, isDeep) {
    	      var Ctor = object.constructor;
    	      switch (tag) {
    	        case arrayBufferTag:
    	          return cloneArrayBuffer(object);
    
    	        case boolTag:
    	        case dateTag:
    	          return new Ctor(+object);
    
    	        case dataViewTag:
    	          return cloneDataView(object, isDeep);
    
    	        case float32Tag: case float64Tag:
    	        case int8Tag: case int16Tag: case int32Tag:
    	        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
    	          return cloneTypedArray(object, isDeep);
    
    	        case mapTag:
    	          return cloneMap(object, isDeep, cloneFunc);
    
    	        case numberTag:
    	        case stringTag:
    	          return new Ctor(object);
    
    	        case regexpTag:
    	          return cloneRegExp(object);
    
    	        case setTag:
    	          return cloneSet(object, isDeep, cloneFunc);
    
    	        case symbolTag:
    	          return cloneSymbol(object);
    	      }
    	    }
    
    	    /**
    	     * Creates an array of index keys for `object` values of arrays,
    	     * `arguments` objects, and strings, otherwise `null` is returned.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @returns {Array|null} Returns index keys, else `null`.
    	     */
    	    function indexKeys(object) {
    	      var length = object ? object.length : undefined;
    	      if (isLength(length) &&
    	          (isArray(object) || isString(object) || isArguments(object))) {
    	        return baseTimes(length, String);
    	      }
    	      return null;
    	    }
    
    	    /**
    	     * Checks if `value` is a flattenable `arguments` object or array.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
    	     */
    	    function isFlattenable(value) {
    	      return isArray(value) || isArguments(value);
    	    }
    
    	    /**
    	     * Checks if `value` is a flattenable array and not a `_.matchesProperty`
    	     * iteratee shorthand.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
    	     */
    	    function isFlattenableIteratee(value) {
    	      return isArray(value) && !(value.length == 2 && !isFunction(value[0]));
    	    }
    
    	    /**
    	     * Checks if `value` is a valid array-like index.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
    	     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
    	     */
    	    function isIndex(value, length) {
    	      length = length == null ? MAX_SAFE_INTEGER : length;
    	      return !!length &&
    	        (typeof value == 'number' || reIsUint.test(value)) &&
    	        (value > -1 && value % 1 == 0 && value < length);
    	    }
    
    	    /**
    	     * Checks if the given arguments are from an iteratee call.
    	     *
    	     * @private
    	     * @param {*} value The potential iteratee value argument.
    	     * @param {*} index The potential iteratee index or key argument.
    	     * @param {*} object The potential iteratee object argument.
    	     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
    	     *  else `false`.
    	     */
    	    function isIterateeCall(value, index, object) {
    	      if (!isObject(object)) {
    	        return false;
    	      }
    	      var type = typeof index;
    	      if (type == 'number'
    	            ? (isArrayLike(object) && isIndex(index, object.length))
    	            : (type == 'string' && index in object)
    	          ) {
    	        return eq(object[index], value);
    	      }
    	      return false;
    	    }
    
    	    /**
    	     * Checks if `value` is a property name and not a property path.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @param {Object} [object] The object to query keys on.
    	     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
    	     */
    	    function isKey(value, object) {
    	      if (isArray(value)) {
    	        return false;
    	      }
    	      var type = typeof value;
    	      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
    	          value == null || isSymbol(value)) {
    	        return true;
    	      }
    	      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    	        (object != null && value in Object(object));
    	    }
    
    	    /**
    	     * Checks if `value` is suitable for use as unique object key.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
    	     */
    	    function isKeyable(value) {
    	      var type = typeof value;
    	      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    	        ? (value !== '__proto__')
    	        : (value === null);
    	    }
    
    	    /**
    	     * Checks if `func` has a lazy counterpart.
    	     *
    	     * @private
    	     * @param {Function} func The function to check.
    	     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
    	     *  else `false`.
    	     */
    	    function isLaziable(func) {
    	      var funcName = getFuncName(func),
    	          other = lodash[funcName];
    
    	      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
    	        return false;
    	      }
    	      if (func === other) {
    	        return true;
    	      }
    	      var data = getData(other);
    	      return !!data && func === data[0];
    	    }
    
    	    /**
    	     * Checks if `func` has its source masked.
    	     *
    	     * @private
    	     * @param {Function} func The function to check.
    	     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
    	     */
    	    function isMasked(func) {
    	      return !!maskSrcKey && (maskSrcKey in func);
    	    }
    
    	    /**
    	     * Checks if `func` is capable of being masked.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
    	     */
    	    var isMaskable = coreJsData ? isFunction : stubFalse;
    
    	    /**
    	     * Checks if `value` is likely a prototype object.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
    	     */
    	    function isPrototype(value) {
    	      var Ctor = value && value.constructor,
    	          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;
    
    	      return value === proto;
    	    }
    
    	    /**
    	     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` if suitable for strict
    	     *  equality comparisons, else `false`.
    	     */
    	    function isStrictComparable(value) {
    	      return value === value && !isObject(value);
    	    }
    
    	    /**
    	     * A specialized version of `matchesProperty` for source values suitable
    	     * for strict equality comparisons, i.e. `===`.
    	     *
    	     * @private
    	     * @param {string} key The key of the property to get.
    	     * @param {*} srcValue The value to match.
    	     * @returns {Function} Returns the new spec function.
    	     */
    	    function matchesStrictComparable(key, srcValue) {
    	      return function(object) {
    	        if (object == null) {
    	          return false;
    	        }
    	        return object[key] === srcValue &&
    	          (srcValue !== undefined || (key in Object(object)));
    	      };
    	    }
    
    	    /**
    	     * Merges the function metadata of `source` into `data`.
    	     *
    	     * Merging metadata reduces the number of wrappers used to invoke a function.
    	     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
    	     * may be applied regardless of execution order. Methods like `_.ary` and
    	     * `_.rearg` modify function arguments, making the order in which they are
    	     * executed important, preventing the merging of metadata. However, we make
    	     * an exception for a safe combined case where curried functions have `_.ary`
    	     * and or `_.rearg` applied.
    	     *
    	     * @private
    	     * @param {Array} data The destination metadata.
    	     * @param {Array} source The source metadata.
    	     * @returns {Array} Returns `data`.
    	     */
    	    function mergeData(data, source) {
    	      var bitmask = data[1],
    	          srcBitmask = source[1],
    	          newBitmask = bitmask | srcBitmask,
    	          isCommon = newBitmask < (BIND_FLAG | BIND_KEY_FLAG | ARY_FLAG);
    
    	      var isCombo =
    	        ((srcBitmask == ARY_FLAG) && (bitmask == CURRY_FLAG)) ||
    	        ((srcBitmask == ARY_FLAG) && (bitmask == REARG_FLAG) && (data[7].length <= source[8])) ||
    	        ((srcBitmask == (ARY_FLAG | REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == CURRY_FLAG));
    
    	      // Exit early if metadata can't be merged.
    	      if (!(isCommon || isCombo)) {
    	        return data;
    	      }
    	      // Use source `thisArg` if available.
    	      if (srcBitmask & BIND_FLAG) {
    	        data[2] = source[2];
    	        // Set when currying a bound function.
    	        newBitmask |= bitmask & BIND_FLAG ? 0 : CURRY_BOUND_FLAG;
    	      }
    	      // Compose partial arguments.
    	      var value = source[3];
    	      if (value) {
    	        var partials = data[3];
    	        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
    	        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
    	      }
    	      // Compose partial right arguments.
    	      value = source[5];
    	      if (value) {
    	        partials = data[5];
    	        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
    	        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
    	      }
    	      // Use source `argPos` if available.
    	      value = source[7];
    	      if (value) {
    	        data[7] = value;
    	      }
    	      // Use source `ary` if it's smaller.
    	      if (srcBitmask & ARY_FLAG) {
    	        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
    	      }
    	      // Use source `arity` if one is not provided.
    	      if (data[9] == null) {
    	        data[9] = source[9];
    	      }
    	      // Use source `func` and merge bitmasks.
    	      data[0] = source[0];
    	      data[1] = newBitmask;
    
    	      return data;
    	    }
    
    	    /**
    	     * Used by `_.defaultsDeep` to customize its `_.merge` use.
    	     *
    	     * @private
    	     * @param {*} objValue The destination value.
    	     * @param {*} srcValue The source value.
    	     * @param {string} key The key of the property to merge.
    	     * @param {Object} object The parent object of `objValue`.
    	     * @param {Object} source The parent object of `srcValue`.
    	     * @param {Object} [stack] Tracks traversed source values and their merged
    	     *  counterparts.
    	     * @returns {*} Returns the value to assign.
    	     */
    	    function mergeDefaults(objValue, srcValue, key, object, source, stack) {
    	      if (isObject(objValue) && isObject(srcValue)) {
    	        baseMerge(objValue, srcValue, undefined, mergeDefaults, stack.set(srcValue, objValue));
    	      }
    	      return objValue;
    	    }
    
    	    /**
    	     * Gets the parent value at `path` of `object`.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @param {Array} path The path to get the parent value of.
    	     * @returns {*} Returns the parent value.
    	     */
    	    function parent(object, path) {
    	      return path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
    	    }
    
    	    /**
    	     * Reorder `array` according to the specified indexes where the element at
    	     * the first index is assigned as the first element, the element at
    	     * the second index is assigned as the second element, and so on.
    	     *
    	     * @private
    	     * @param {Array} array The array to reorder.
    	     * @param {Array} indexes The arranged array indexes.
    	     * @returns {Array} Returns `array`.
    	     */
    	    function reorder(array, indexes) {
    	      var arrLength = array.length,
    	          length = nativeMin(indexes.length, arrLength),
    	          oldArray = copyArray(array);
    
    	      while (length--) {
    	        var index = indexes[length];
    	        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
    	      }
    	      return array;
    	    }
    
    	    /**
    	     * Sets metadata for `func`.
    	     *
    	     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
    	     * period of time, it will trip its breaker and transition to an identity
    	     * function to avoid garbage collection pauses in V8. See
    	     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
    	     * for more details.
    	     *
    	     * @private
    	     * @param {Function} func The function to associate metadata with.
    	     * @param {*} data The metadata.
    	     * @returns {Function} Returns `func`.
    	     */
    	    var setData = (function() {
    	      var count = 0,
    	          lastCalled = 0;
    
    	      return function(key, value) {
    	        var stamp = now(),
    	            remaining = HOT_SPAN - (stamp - lastCalled);
    
    	        lastCalled = stamp;
    	        if (remaining > 0) {
    	          if (++count >= HOT_COUNT) {
    	            return key;
    	          }
    	        } else {
    	          count = 0;
    	        }
    	        return baseSetData(key, value);
    	      };
    	    }());
    
    	    /**
    	     * Converts `string` to a property path array.
    	     *
    	     * @private
    	     * @param {string} string The string to convert.
    	     * @returns {Array} Returns the property path array.
    	     */
    	    var stringToPath = memoize(function(string) {
    	      var result = [];
    	      toString(string).replace(rePropName, function(match, number, quote, string) {
    	        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
    	      });
    	      return result;
    	    });
    
    	    /**
    	     * Converts `value` to a string key if it's not a string or symbol.
    	     *
    	     * @private
    	     * @param {*} value The value to inspect.
    	     * @returns {string|symbol} Returns the key.
    	     */
    	    function toKey(value) {
    	      if (typeof value == 'string' || isSymbol(value)) {
    	        return value;
    	      }
    	      var result = (value + '');
    	      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    	    }
    
    	    /**
    	     * Converts `func` to its source code.
    	     *
    	     * @private
    	     * @param {Function} func The function to process.
    	     * @returns {string} Returns the source code.
    	     */
    	    function toSource(func) {
    	      if (func != null) {
    	        try {
    	          return funcToString.call(func);
    	        } catch (e) {}
    	        try {
    	          return (func + '');
    	        } catch (e) {}
    	      }
    	      return '';
    	    }
    
    	    /**
    	     * Creates a clone of `wrapper`.
    	     *
    	     * @private
    	     * @param {Object} wrapper The wrapper to clone.
    	     * @returns {Object} Returns the cloned wrapper.
    	     */
    	    function wrapperClone(wrapper) {
    	      if (wrapper instanceof LazyWrapper) {
    	        return wrapper.clone();
    	      }
    	      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
    	      result.__actions__ = copyArray(wrapper.__actions__);
    	      result.__index__  = wrapper.__index__;
    	      result.__values__ = wrapper.__values__;
    	      return result;
    	    }
    
    	    /*------------------------------------------------------------------------*/
    
    	    /**
    	     * Creates an array of elements split into groups the length of `size`.
    	     * If `array` can't be split evenly, the final chunk will be the remaining
    	     * elements.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Array
    	     * @param {Array} array The array to process.
    	     * @param {number} [size=1] The length of each chunk
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {Array} Returns the new array of chunks.
    	     * @example
    	     *
    	     * _.chunk(['a', 'b', 'c', 'd'], 2);
    	     * // => [['a', 'b'], ['c', 'd']]
    	     *
    	     * _.chunk(['a', 'b', 'c', 'd'], 3);
    	     * // => [['a', 'b', 'c'], ['d']]
    	     */
    	    function chunk(array, size, guard) {
    	      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
    	        size = 1;
    	      } else {
    	        size = nativeMax(toInteger(size), 0);
    	      }
    	      var length = array ? array.length : 0;
    	      if (!length || size < 1) {
    	        return [];
    	      }
    	      var index = 0,
    	          resIndex = 0,
    	          result = Array(nativeCeil(length / size));
    
    	      while (index < length) {
    	        result[resIndex++] = baseSlice(array, index, (index += size));
    	      }
    	      return result;
    	    }
    
    	    /**
    	     * Creates an array with all falsey values removed. The values `false`, `null`,
    	     * `0`, `""`, `undefined`, and `NaN` are falsey.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {Array} array The array to compact.
    	     * @returns {Array} Returns the new array of filtered values.
    	     * @example
    	     *
    	     * _.compact([0, 1, false, 2, '', 3]);
    	     * // => [1, 2, 3]
    	     */
    	    function compact(array) {
    	      var index = -1,
    	          length = array ? array.length : 0,
    	          resIndex = 0,
    	          result = [];
    
    	      while (++index < length) {
    	        var value = array[index];
    	        if (value) {
    	          result[resIndex++] = value;
    	        }
    	      }
    	      return result;
    	    }
    
    	    /**
    	     * Creates a new array concatenating `array` with any additional arrays
    	     * and/or values.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to concatenate.
    	     * @param {...*} [values] The values to concatenate.
    	     * @returns {Array} Returns the new concatenated array.
    	     * @example
    	     *
    	     * var array = [1];
    	     * var other = _.concat(array, 2, [3], [[4]]);
    	     *
    	     * console.log(other);
    	     * // => [1, 2, 3, [4]]
    	     *
    	     * console.log(array);
    	     * // => [1]
    	     */
    	    function concat() {
    	      var length = arguments.length,
    	          args = Array(length ? length - 1 : 0),
    	          array = arguments[0],
    	          index = length;
    
    	      while (index--) {
    	        args[index - 1] = arguments[index];
    	      }
    	      return length
    	        ? arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1))
    	        : [];
    	    }
    
    	    /**
    	     * Creates an array of unique `array` values not included in the other given
    	     * arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
    	     * for equality comparisons. The order of result values is determined by the
    	     * order they occur in the first array.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @param {...Array} [values] The values to exclude.
    	     * @returns {Array} Returns the new array of filtered values.
    	     * @see _.without, _.xor
    	     * @example
    	     *
    	     * _.difference([2, 1], [2, 3]);
    	     * // => [1]
    	     */
    	    var difference = rest(function(array, values) {
    	      return isArrayLikeObject(array)
    	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
    	        : [];
    	    });
    
    	    /**
    	     * This method is like `_.difference` except that it accepts `iteratee` which
    	     * is invoked for each element of `array` and `values` to generate the criterion
    	     * by which they're compared. Result values are chosen from the first array.
    	     * The iteratee is invoked with one argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @param {...Array} [values] The values to exclude.
    	     * @param {Array|Function|Object|string} [iteratee=_.identity]
    	     *  The iteratee invoked per element.
    	     * @returns {Array} Returns the new array of filtered values.
    	     * @example
    	     *
    	     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
    	     * // => [1.2]
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
    	     * // => [{ 'x': 2 }]
    	     */
    	    var differenceBy = rest(function(array, values) {
    	      var iteratee = last(values);
    	      if (isArrayLikeObject(iteratee)) {
    	        iteratee = undefined;
    	      }
    	      return isArrayLikeObject(array)
    	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee))
    	        : [];
    	    });
    
    	    /**
    	     * This method is like `_.difference` except that it accepts `comparator`
    	     * which is invoked to compare elements of `array` to `values`. Result values
    	     * are chosen from the first array. The comparator is invoked with two arguments:
    	     * (arrVal, othVal).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @param {...Array} [values] The values to exclude.
    	     * @param {Function} [comparator] The comparator invoked per element.
    	     * @returns {Array} Returns the new array of filtered values.
    	     * @example
    	     *
    	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
    	     *
    	     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
    	     * // => [{ 'x': 2, 'y': 1 }]
    	     */
    	    var differenceWith = rest(function(array, values) {
    	      var comparator = last(values);
    	      if (isArrayLikeObject(comparator)) {
    	        comparator = undefined;
    	      }
    	      return isArrayLikeObject(array)
    	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
    	        : [];
    	    });
    
    	    /**
    	     * Creates a slice of `array` with `n` elements dropped from the beginning.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.5.0
    	     * @category Array
    	     * @param {Array} array The array to query.
    	     * @param {number} [n=1] The number of elements to drop.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {Array} Returns the slice of `array`.
    	     * @example
    	     *
    	     * _.drop([1, 2, 3]);
    	     * // => [2, 3]
    	     *
    	     * _.drop([1, 2, 3], 2);
    	     * // => [3]
    	     *
    	     * _.drop([1, 2, 3], 5);
    	     * // => []
    	     *
    	     * _.drop([1, 2, 3], 0);
    	     * // => [1, 2, 3]
    	     */
    	    function drop(array, n, guard) {
    	      var length = array ? array.length : 0;
    	      if (!length) {
    	        return [];
    	      }
    	      n = (guard || n === undefined) ? 1 : toInteger(n);
    	      return baseSlice(array, n < 0 ? 0 : n, length);
    	    }
    
    	    /**
    	     * Creates a slice of `array` with `n` elements dropped from the end.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Array
    	     * @param {Array} array The array to query.
    	     * @param {number} [n=1] The number of elements to drop.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {Array} Returns the slice of `array`.
    	     * @example
    	     *
    	     * _.dropRight([1, 2, 3]);
    	     * // => [1, 2]
    	     *
    	     * _.dropRight([1, 2, 3], 2);
    	     * // => [1]
    	     *
    	     * _.dropRight([1, 2, 3], 5);
    	     * // => []
    	     *
    	     * _.dropRight([1, 2, 3], 0);
    	     * // => [1, 2, 3]
    	     */
    	    function dropRight(array, n, guard) {
    	      var length = array ? array.length : 0;
    	      if (!length) {
    	        return [];
    	      }
    	      n = (guard || n === undefined) ? 1 : toInteger(n);
    	      n = length - n;
    	      return baseSlice(array, 0, n < 0 ? 0 : n);
    	    }
    
    	    /**
    	     * Creates a slice of `array` excluding elements dropped from the end.
    	     * Elements are dropped until `predicate` returns falsey. The predicate is
    	     * invoked with three arguments: (value, index, array).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Array
    	     * @param {Array} array The array to query.
    	     * @param {Array|Function|Object|string} [predicate=_.identity]
    	     *  The function invoked per iteration.
    	     * @returns {Array} Returns the slice of `array`.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney',  'active': true },
    	     *   { 'user': 'fred',    'active': false },
    	     *   { 'user': 'pebbles', 'active': false }
    	     * ];
    	     *
    	     * _.dropRightWhile(users, function(o) { return !o.active; });
    	     * // => objects for ['barney']
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
    	     * // => objects for ['barney', 'fred']
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.dropRightWhile(users, ['active', false]);
    	     * // => objects for ['barney']
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.dropRightWhile(users, 'active');
    	     * // => objects for ['barney', 'fred', 'pebbles']
    	     */
    	    function dropRightWhile(array, predicate) {
    	      return (array && array.length)
    	        ? baseWhile(array, getIteratee(predicate, 3), true, true)
    	        : [];
    	    }
    
    	    /**
    	     * Creates a slice of `array` excluding elements dropped from the beginning.
    	     * Elements are dropped until `predicate` returns falsey. The predicate is
    	     * invoked with three arguments: (value, index, array).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Array
    	     * @param {Array} array The array to query.
    	     * @param {Array|Function|Object|string} [predicate=_.identity]
    	     *  The function invoked per iteration.
    	     * @returns {Array} Returns the slice of `array`.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney',  'active': false },
    	     *   { 'user': 'fred',    'active': false },
    	     *   { 'user': 'pebbles', 'active': true }
    	     * ];
    	     *
    	     * _.dropWhile(users, function(o) { return !o.active; });
    	     * // => objects for ['pebbles']
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.dropWhile(users, { 'user': 'barney', 'active': false });
    	     * // => objects for ['fred', 'pebbles']
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.dropWhile(users, ['active', false]);
    	     * // => objects for ['pebbles']
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.dropWhile(users, 'active');
    	     * // => objects for ['barney', 'fred', 'pebbles']
    	     */
    	    function dropWhile(array, predicate) {
    	      return (array && array.length)
    	        ? baseWhile(array, getIteratee(predicate, 3), true)
    	        : [];
    	    }
    
    	    /**
    	     * Fills elements of `array` with `value` from `start` up to, but not
    	     * including, `end`.
    	     *
    	     * **Note:** This method mutates `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.2.0
    	     * @category Array
    	     * @param {Array} array The array to fill.
    	     * @param {*} value The value to fill `array` with.
    	     * @param {number} [start=0] The start position.
    	     * @param {number} [end=array.length] The end position.
    	     * @returns {Array} Returns `array`.
    	     * @example
    	     *
    	     * var array = [1, 2, 3];
    	     *
    	     * _.fill(array, 'a');
    	     * console.log(array);
    	     * // => ['a', 'a', 'a']
    	     *
    	     * _.fill(Array(3), 2);
    	     * // => [2, 2, 2]
    	     *
    	     * _.fill([4, 6, 8, 10], '*', 1, 3);
    	     * // => [4, '*', '*', 10]
    	     */
    	    function fill(array, value, start, end) {
    	      var length = array ? array.length : 0;
    	      if (!length) {
    	        return [];
    	      }
    	      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
    	        start = 0;
    	        end = length;
    	      }
    	      return baseFill(array, value, start, end);
    	    }
    
    	    /**
    	     * This method is like `_.find` except that it returns the index of the first
    	     * element `predicate` returns truthy for instead of the element itself.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 1.1.0
    	     * @category Array
    	     * @param {Array} array The array to search.
    	     * @param {Array|Function|Object|string} [predicate=_.identity]
    	     *  The function invoked per iteration.
    	     * @param {number} [fromIndex=0] The index to search from.
    	     * @returns {number} Returns the index of the found element, else `-1`.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney',  'active': false },
    	     *   { 'user': 'fred',    'active': false },
    	     *   { 'user': 'pebbles', 'active': true }
    	     * ];
    	     *
    	     * _.findIndex(users, function(o) { return o.user == 'barney'; });
    	     * // => 0
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.findIndex(users, { 'user': 'fred', 'active': false });
    	     * // => 1
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.findIndex(users, ['active', false]);
    	     * // => 0
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.findIndex(users, 'active');
    	     * // => 2
    	     */
    	    function findIndex(array, predicate, fromIndex) {
    	      var length = array ? array.length : 0;
    	      if (!length) {
    	        return -1;
    	      }
    	      var index = fromIndex == null ? 0 : toInteger(fromIndex);
    	      if (index < 0) {
    	        index = nativeMax(length + index, 0);
    	      }
    	      return baseFindIndex(array, getIteratee(predicate, 3), index);
    	    }
    
    	    /**
    	     * This method is like `_.findIndex` except that it iterates over elements
    	     * of `collection` from right to left.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.0.0
    	     * @category Array
    	     * @param {Array} array The array to search.
    	     * @param {Array|Function|Object|string} [predicate=_.identity]
    	     *  The function invoked per iteration.
    	     * @param {number} [fromIndex=array.length-1] The index to search from.
    	     * @returns {number} Returns the index of the found element, else `-1`.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney',  'active': true },
    	     *   { 'user': 'fred',    'active': false },
    	     *   { 'user': 'pebbles', 'active': false }
    	     * ];
    	     *
    	     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
    	     * // => 2
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
    	     * // => 0
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.findLastIndex(users, ['active', false]);
    	     * // => 2
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.findLastIndex(users, 'active');
    	     * // => 0
    	     */
    	    function findLastIndex(array, predicate, fromIndex) {
    	      var length = array ? array.length : 0;
    	      if (!length) {
    	        return -1;
    	      }
    	      var index = length - 1;
    	      if (fromIndex !== undefined) {
    	        index = toInteger(fromIndex);
    	        index = fromIndex < 0
    	          ? nativeMax(length + index, 0)
    	          : nativeMin(index, length - 1);
    	      }
    	      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    	    }
    
    	    /**
    	     * Flattens `array` a single level deep.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {Array} array The array to flatten.
    	     * @returns {Array} Returns the new flattened array.
    	     * @example
    	     *
    	     * _.flatten([1, [2, [3, [4]], 5]]);
    	     * // => [1, 2, [3, [4]], 5]
    	     */
    	    function flatten(array) {
    	      var length = array ? array.length : 0;
    	      return length ? baseFlatten(array, 1) : [];
    	    }
    
    	    /**
    	     * Recursively flattens `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Array
    	     * @param {Array} array The array to flatten.
    	     * @returns {Array} Returns the new flattened array.
    	     * @example
    	     *
    	     * _.flattenDeep([1, [2, [3, [4]], 5]]);
    	     * // => [1, 2, 3, 4, 5]
    	     */
    	    function flattenDeep(array) {
    	      var length = array ? array.length : 0;
    	      return length ? baseFlatten(array, INFINITY) : [];
    	    }
    
    	    /**
    	     * Recursively flatten `array` up to `depth` times.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.4.0
    	     * @category Array
    	     * @param {Array} array The array to flatten.
    	     * @param {number} [depth=1] The maximum recursion depth.
    	     * @returns {Array} Returns the new flattened array.
    	     * @example
    	     *
    	     * var array = [1, [2, [3, [4]], 5]];
    	     *
    	     * _.flattenDepth(array, 1);
    	     * // => [1, 2, [3, [4]], 5]
    	     *
    	     * _.flattenDepth(array, 2);
    	     * // => [1, 2, 3, [4], 5]
    	     */
    	    function flattenDepth(array, depth) {
    	      var length = array ? array.length : 0;
    	      if (!length) {
    	        return [];
    	      }
    	      depth = depth === undefined ? 1 : toInteger(depth);
    	      return baseFlatten(array, depth);
    	    }
    
    	    /**
    	     * The inverse of `_.toPairs`; this method returns an object composed
    	     * from key-value `pairs`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} pairs The key-value pairs.
    	     * @returns {Object} Returns the new object.
    	     * @example
    	     *
    	     * _.fromPairs([['fred', 30], ['barney', 40]]);
    	     * // => { 'fred': 30, 'barney': 40 }
    	     */
    	    function fromPairs(pairs) {
    	      var index = -1,
    	          length = pairs ? pairs.length : 0,
    	          result = {};
    
    	      while (++index < length) {
    	        var pair = pairs[index];
    	        result[pair[0]] = pair[1];
    	      }
    	      return result;
    	    }
    
    	    /**
    	     * Gets the first element of `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @alias first
    	     * @category Array
    	     * @param {Array} array The array to query.
    	     * @returns {*} Returns the first element of `array`.
    	     * @example
    	     *
    	     * _.head([1, 2, 3]);
    	     * // => 1
    	     *
    	     * _.head([]);
    	     * // => undefined
    	     */
    	    function head(array) {
    	      return (array && array.length) ? array[0] : undefined;
    	    }
    
    	    /**
    	     * Gets the index at which the first occurrence of `value` is found in `array`
    	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
    	     * for equality comparisons. If `fromIndex` is negative, it's used as the
    	     * offset from the end of `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {Array} array The array to search.
    	     * @param {*} value The value to search for.
    	     * @param {number} [fromIndex=0] The index to search from.
    	     * @returns {number} Returns the index of the matched value, else `-1`.
    	     * @example
    	     *
    	     * _.indexOf([1, 2, 1, 2], 2);
    	     * // => 1
    	     *
    	     * // Search from the `fromIndex`.
    	     * _.indexOf([1, 2, 1, 2], 2, 2);
    	     * // => 3
    	     */
    	    function indexOf(array, value, fromIndex) {
    	      var length = array ? array.length : 0;
    	      if (!length) {
    	        return -1;
    	      }
    	      var index = fromIndex == null ? 0 : toInteger(fromIndex);
    	      if (index < 0) {
    	        index = nativeMax(length + index, 0);
    	      }
    	      return baseIndexOf(array, value, index);
    	    }
    
    	    /**
    	     * Gets all but the last element of `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {Array} array The array to query.
    	     * @returns {Array} Returns the slice of `array`.
    	     * @example
    	     *
    	     * _.initial([1, 2, 3]);
    	     * // => [1, 2]
    	     */
    	    function initial(array) {
    	      return dropRight(array, 1);
    	    }
    
    	    /**
    	     * Creates an array of unique values that are included in all given arrays
    	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
    	     * for equality comparisons. The order of result values is determined by the
    	     * order they occur in the first array.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {...Array} [arrays] The arrays to inspect.
    	     * @returns {Array} Returns the new array of intersecting values.
    	     * @example
    	     *
    	     * _.intersection([2, 1], [2, 3]);
    	     * // => [2]
    	     */
    	    var intersection = rest(function(arrays) {
    	      var mapped = arrayMap(arrays, castArrayLikeObject);
    	      return (mapped.length && mapped[0] === arrays[0])
    	        ? baseIntersection(mapped)
    	        : [];
    	    });
    
    	    /**
    	     * This method is like `_.intersection` except that it accepts `iteratee`
    	     * which is invoked for each element of each `arrays` to generate the criterion
    	     * by which they're compared. Result values are chosen from the first array.
    	     * The iteratee is invoked with one argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {...Array} [arrays] The arrays to inspect.
    	     * @param {Array|Function|Object|string} [iteratee=_.identity]
    	     *  The iteratee invoked per element.
    	     * @returns {Array} Returns the new array of intersecting values.
    	     * @example
    	     *
    	     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
    	     * // => [2.1]
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
    	     * // => [{ 'x': 1 }]
    	     */
    	    var intersectionBy = rest(function(arrays) {
    	      var iteratee = last(arrays),
    	          mapped = arrayMap(arrays, castArrayLikeObject);
    
    	      if (iteratee === last(mapped)) {
    	        iteratee = undefined;
    	      } else {
    	        mapped.pop();
    	      }
    	      return (mapped.length && mapped[0] === arrays[0])
    	        ? baseIntersection(mapped, getIteratee(iteratee))
    	        : [];
    	    });
    
    	    /**
    	     * This method is like `_.intersection` except that it accepts `comparator`
    	     * which is invoked to compare elements of `arrays`. Result values are chosen
    	     * from the first array. The comparator is invoked with two arguments:
    	     * (arrVal, othVal).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {...Array} [arrays] The arrays to inspect.
    	     * @param {Function} [comparator] The comparator invoked per element.
    	     * @returns {Array} Returns the new array of intersecting values.
    	     * @example
    	     *
    	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
    	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
    	     *
    	     * _.intersectionWith(objects, others, _.isEqual);
    	     * // => [{ 'x': 1, 'y': 2 }]
    	     */
    	    var intersectionWith = rest(function(arrays) {
    	      var comparator = last(arrays),
    	          mapped = arrayMap(arrays, castArrayLikeObject);
    
    	      if (comparator === last(mapped)) {
    	        comparator = undefined;
    	      } else {
    	        mapped.pop();
    	      }
    	      return (mapped.length && mapped[0] === arrays[0])
    	        ? baseIntersection(mapped, undefined, comparator)
    	        : [];
    	    });
    
    	    /**
    	     * Converts all elements in `array` into a string separated by `separator`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to convert.
    	     * @param {string} [separator=','] The element separator.
    	     * @returns {string} Returns the joined string.
    	     * @example
    	     *
    	     * _.join(['a', 'b', 'c'], '~');
    	     * // => 'a~b~c'
    	     */
    	    function join(array, separator) {
    	      return array ? nativeJoin.call(array, separator) : '';
    	    }
    
    	    /**
    	     * Gets the last element of `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {Array} array The array to query.
    	     * @returns {*} Returns the last element of `array`.
    	     * @example
    	     *
    	     * _.last([1, 2, 3]);
    	     * // => 3
    	     */
    	    function last(array) {
    	      var length = array ? array.length : 0;
    	      return length ? array[length - 1] : undefined;
    	    }
    
    	    /**
    	     * This method is like `_.indexOf` except that it iterates over elements of
    	     * `array` from right to left.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {Array} array The array to search.
    	     * @param {*} value The value to search for.
    	     * @param {number} [fromIndex=array.length-1] The index to search from.
    	     * @returns {number} Returns the index of the matched value, else `-1`.
    	     * @example
    	     *
    	     * _.lastIndexOf([1, 2, 1, 2], 2);
    	     * // => 3
    	     *
    	     * // Search from the `fromIndex`.
    	     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
    	     * // => 1
    	     */
    	    function lastIndexOf(array, value, fromIndex) {
    	      var length = array ? array.length : 0;
    	      if (!length) {
    	        return -1;
    	      }
    	      var index = length;
    	      if (fromIndex !== undefined) {
    	        index = toInteger(fromIndex);
    	        index = (
    	          index < 0
    	            ? nativeMax(length + index, 0)
    	            : nativeMin(index, length - 1)
    	        ) + 1;
    	      }
    	      if (value !== value) {
    	        return indexOfNaN(array, index - 1, true);
    	      }
    	      while (index--) {
    	        if (array[index] === value) {
    	          return index;
    	        }
    	      }
    	      return -1;
    	    }
    
    	    /**
    	     * Gets the element at index `n` of `array`. If `n` is negative, the nth
    	     * element from the end is returned.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.11.0
    	     * @category Array
    	     * @param {Array} array The array to query.
    	     * @param {number} [n=0] The index of the element to return.
    	     * @returns {*} Returns the nth element of `array`.
    	     * @example
    	     *
    	     * var array = ['a', 'b', 'c', 'd'];
    	     *
    	     * _.nth(array, 1);
    	     * // => 'b'
    	     *
    	     * _.nth(array, -2);
    	     * // => 'c';
    	     */
    	    function nth(array, n) {
    	      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    	    }
    
    	    /**
    	     * Removes all given values from `array` using
    	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
    	     * for equality comparisons.
    	     *
    	     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
    	     * to remove elements from an array by predicate.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.0.0
    	     * @category Array
    	     * @param {Array} array The array to modify.
    	     * @param {...*} [values] The values to remove.
    	     * @returns {Array} Returns `array`.
    	     * @example
    	     *
    	     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
    	     *
    	     * _.pull(array, 'a', 'c');
    	     * console.log(array);
    	     * // => ['b', 'b']
    	     */
    	    var pull = rest(pullAll);
    
    	    /**
    	     * This method is like `_.pull` except that it accepts an array of values to remove.
    	     *
    	     * **Note:** Unlike `_.difference`, this method mutates `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to modify.
    	     * @param {Array} values The values to remove.
    	     * @returns {Array} Returns `array`.
    	     * @example
    	     *
    	     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
    	     *
    	     * _.pullAll(array, ['a', 'c']);
    	     * console.log(array);
    	     * // => ['b', 'b']
    	     */
    	    function pullAll(array, values) {
    	      return (array && array.length && values && values.length)
    	        ? basePullAll(array, values)
    	        : array;
    	    }
    
    	    /**
    	     * This method is like `_.pullAll` except that it accepts `iteratee` which is
    	     * invoked for each element of `array` and `values` to generate the criterion
    	     * by which they're compared. The iteratee is invoked with one argument: (value).
    	     *
    	     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to modify.
    	     * @param {Array} values The values to remove.
    	     * @param {Array|Function|Object|string} [iteratee=_.identity]
    	     *  The iteratee invoked per element.
    	     * @returns {Array} Returns `array`.
    	     * @example
    	     *
    	     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
    	     *
    	     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
    	     * console.log(array);
    	     * // => [{ 'x': 2 }]
    	     */
    	    function pullAllBy(array, values, iteratee) {
    	      return (array && array.length && values && values.length)
    	        ? basePullAll(array, values, getIteratee(iteratee))
    	        : array;
    	    }
    
    	    /**
    	     * This method is like `_.pullAll` except that it accepts `comparator` which
    	     * is invoked to compare elements of `array` to `values`. The comparator is
    	     * invoked with two arguments: (arrVal, othVal).
    	     *
    	     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.6.0
    	     * @category Array
    	     * @param {Array} array The array to modify.
    	     * @param {Array} values The values to remove.
    	     * @param {Function} [comparator] The comparator invoked per element.
    	     * @returns {Array} Returns `array`.
    	     * @example
    	     *
    	     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
    	     *
    	     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
    	     * console.log(array);
    	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
    	     */
    	    function pullAllWith(array, values, comparator) {
    	      return (array && array.length && values && values.length)
    	        ? basePullAll(array, values, undefined, comparator)
    	        : array;
    	    }
    
    	    /**
    	     * Removes elements from `array` corresponding to `indexes` and returns an
    	     * array of removed elements.
    	     *
    	     * **Note:** Unlike `_.at`, this method mutates `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Array
    	     * @param {Array} array The array to modify.
    	     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
    	     * @returns {Array} Returns the new array of removed elements.
    	     * @example
    	     *
    	     * var array = ['a', 'b', 'c', 'd'];
    	     * var pulled = _.pullAt(array, [1, 3]);
    	     *
    	     * console.log(array);
    	     * // => ['a', 'c']
    	     *
    	     * console.log(pulled);
    	     * // => ['b', 'd']
    	     */
    	    var pullAt = rest(function(array, indexes) {
    	      indexes = baseFlatten(indexes, 1);
    
    	      var length = array ? array.length : 0,
    	          result = baseAt(array, indexes);
    
    	      basePullAt(array, arrayMap(indexes, function(index) {
    	        return isIndex(index, length) ? +index : index;
    	      }).sort(compareAscending));
    
    	      return result;
    	    });
    
    	    /**
    	     * Removes all elements from `array` that `predicate` returns truthy for
    	     * and returns an array of the removed elements. The predicate is invoked
    	     * with three arguments: (value, index, array).
    	     *
    	     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
    	     * to pull elements from an array by value.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.0.0
    	     * @category Array
    	     * @param {Array} array The array to modify.
    	     * @param {Array|Function|Object|string} [predicate=_.identity]
    	     *  The function invoked per iteration.
    	     * @returns {Array} Returns the new array of removed elements.
    	     * @example
    	     *
    	     * var array = [1, 2, 3, 4];
    	     * var evens = _.remove(array, function(n) {
    	     *   return n % 2 == 0;
    	     * });
    	     *
    	     * console.log(array);
    	     * // => [1, 3]
    	     *
    	     * console.log(evens);
    	     * // => [2, 4]
    	     */
    	    function remove(array, predicate) {
    	      var result = [];
    	      if (!(array && array.length)) {
    	        return result;
    	      }
    	      var index = -1,
    	          indexes = [],
    	          length = array.length;
    
    	      predicate = getIteratee(predicate, 3);
    	      while (++index < length) {
    	        var value = array[index];
    	        if (predicate(value, index, array)) {
    	          result.push(value);
    	          indexes.push(index);
    	        }
    	      }
    	      basePullAt(array, indexes);
    	      return result;
    	    }
    
    	    /**
    	     * Reverses `array` so that the first element becomes the last, the second
    	     * element becomes the second to last, and so on.
    	     *
    	     * **Note:** This method mutates `array` and is based on
    	     * [`Array#reverse`](https://mdn.io/Array/reverse).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to modify.
    	     * @returns {Array} Returns `array`.
    	     * @example
    	     *
    	     * var array = [1, 2, 3];
    	     *
    	     * _.reverse(array);
    	     * // => [3, 2, 1]
    	     *
    	     * console.log(array);
    	     * // => [3, 2, 1]
    	     */
    	    function reverse(array) {
    	      return array ? nativeReverse.call(array) : array;
    	    }
    
    	    /**
    	     * Creates a slice of `array` from `start` up to, but not including, `end`.
    	     *
    	     * **Note:** This method is used instead of
    	     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
    	     * returned.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Array
    	     * @param {Array} array The array to slice.
    	     * @param {number} [start=0] The start position.
    	     * @param {number} [end=array.length] The end position.
    	     * @returns {Array} Returns the slice of `array`.
    	     */
    	    function slice(array, start, end) {
    	      var length = array ? array.length : 0;
    	      if (!length) {
    	        return [];
    	      }
    	      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
    	        start = 0;
    	        end = length;
    	      }
    	      else {
    	        start = start == null ? 0 : toInteger(start);
    	        end = end === undefined ? length : toInteger(end);
    	      }
    	      return baseSlice(array, start, end);
    	    }
    
    	    /**
    	     * Uses a binary search to determine the lowest index at which `value`
    	     * should be inserted into `array` in order to maintain its sort order.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {Array} array The sorted array to inspect.
    	     * @param {*} value The value to evaluate.
    	     * @returns {number} Returns the index at which `value` should be inserted
    	     *  into `array`.
    	     * @example
    	     *
    	     * _.sortedIndex([30, 50], 40);
    	     * // => 1
    	     */
    	    function sortedIndex(array, value) {
    	      return baseSortedIndex(array, value);
    	    }
    
    	    /**
    	     * This method is like `_.sortedIndex` except that it accepts `iteratee`
    	     * which is invoked for `value` and each element of `array` to compute their
    	     * sort ranking. The iteratee is invoked with one argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The sorted array to inspect.
    	     * @param {*} value The value to evaluate.
    	     * @param {Array|Function|Object|string} [iteratee=_.identity]
    	     *  The iteratee invoked per element.
    	     * @returns {number} Returns the index at which `value` should be inserted
    	     *  into `array`.
    	     * @example
    	     *
    	     * var objects = [{ 'x': 4 }, { 'x': 5 }];
    	     *
    	     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
    	     * // => 0
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
    	     * // => 0
    	     */
    	    function sortedIndexBy(array, value, iteratee) {
    	      return baseSortedIndexBy(array, value, getIteratee(iteratee));
    	    }
    
    	    /**
    	     * This method is like `_.indexOf` except that it performs a binary
    	     * search on a sorted `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to search.
    	     * @param {*} value The value to search for.
    	     * @returns {number} Returns the index of the matched value, else `-1`.
    	     * @example
    	     *
    	     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
    	     * // => 1
    	     */
    	    function sortedIndexOf(array, value) {
    	      var length = array ? array.length : 0;
    	      if (length) {
    	        var index = baseSortedIndex(array, value);
    	        if (index < length && eq(array[index], value)) {
    	          return index;
    	        }
    	      }
    	      return -1;
    	    }
    
    	    /**
    	     * This method is like `_.sortedIndex` except that it returns the highest
    	     * index at which `value` should be inserted into `array` in order to
    	     * maintain its sort order.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Array
    	     * @param {Array} array The sorted array to inspect.
    	     * @param {*} value The value to evaluate.
    	     * @returns {number} Returns the index at which `value` should be inserted
    	     *  into `array`.
    	     * @example
    	     *
    	     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
    	     * // => 4
    	     */
    	    function sortedLastIndex(array, value) {
    	      return baseSortedIndex(array, value, true);
    	    }
    
    	    /**
    	     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
    	     * which is invoked for `value` and each element of `array` to compute their
    	     * sort ranking. The iteratee is invoked with one argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The sorted array to inspect.
    	     * @param {*} value The value to evaluate.
    	     * @param {Array|Function|Object|string} [iteratee=_.identity]
    	     *  The iteratee invoked per element.
    	     * @returns {number} Returns the index at which `value` should be inserted
    	     *  into `array`.
    	     * @example
    	     *
    	     * var objects = [{ 'x': 4 }, { 'x': 5 }];
    	     *
    	     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
    	     * // => 1
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
    	     * // => 1
    	     */
    	    function sortedLastIndexBy(array, value, iteratee) {
    	      return baseSortedIndexBy(array, value, getIteratee(iteratee), true);
    	    }
    
    	    /**
    	     * This method is like `_.lastIndexOf` except that it performs a binary
    	     * search on a sorted `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to search.
    	     * @param {*} value The value to search for.
    	     * @returns {number} Returns the index of the matched value, else `-1`.
    	     * @example
    	     *
    	     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
    	     * // => 3
    	     */
    	    function sortedLastIndexOf(array, value) {
    	      var length = array ? array.length : 0;
    	      if (length) {
    	        var index = baseSortedIndex(array, value, true) - 1;
    	        if (eq(array[index], value)) {
    	          return index;
    	        }
    	      }
    	      return -1;
    	    }
    
    	    /**
    	     * This method is like `_.uniq` except that it's designed and optimized
    	     * for sorted arrays.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @returns {Array} Returns the new duplicate free array.
    	     * @example
    	     *
    	     * _.sortedUniq([1, 1, 2]);
    	     * // => [1, 2]
    	     */
    	    function sortedUniq(array) {
    	      return (array && array.length)
    	        ? baseSortedUniq(array)
    	        : [];
    	    }
    
    	    /**
    	     * This method is like `_.uniqBy` except that it's designed and optimized
    	     * for sorted arrays.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @param {Function} [iteratee] The iteratee invoked per element.
    	     * @returns {Array} Returns the new duplicate free array.
    	     * @example
    	     *
    	     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
    	     * // => [1.1, 2.3]
    	     */
    	    function sortedUniqBy(array, iteratee) {
    	      return (array && array.length)
    	        ? baseSortedUniq(array, getIteratee(iteratee))
    	        : [];
    	    }
    
    	    /**
    	     * Gets all but the first element of `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to query.
    	     * @returns {Array} Returns the slice of `array`.
    	     * @example
    	     *
    	     * _.tail([1, 2, 3]);
    	     * // => [2, 3]
    	     */
    	    function tail(array) {
    	      return drop(array, 1);
    	    }
    
    	    /**
    	     * Creates a slice of `array` with `n` elements taken from the beginning.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {Array} array The array to query.
    	     * @param {number} [n=1] The number of elements to take.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {Array} Returns the slice of `array`.
    	     * @example
    	     *
    	     * _.take([1, 2, 3]);
    	     * // => [1]
    	     *
    	     * _.take([1, 2, 3], 2);
    	     * // => [1, 2]
    	     *
    	     * _.take([1, 2, 3], 5);
    	     * // => [1, 2, 3]
    	     *
    	     * _.take([1, 2, 3], 0);
    	     * // => []
    	     */
    	    function take(array, n, guard) {
    	      if (!(array && array.length)) {
    	        return [];
    	      }
    	      n = (guard || n === undefined) ? 1 : toInteger(n);
    	      return baseSlice(array, 0, n < 0 ? 0 : n);
    	    }
    
    	    /**
    	     * Creates a slice of `array` with `n` elements taken from the end.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Array
    	     * @param {Array} array The array to query.
    	     * @param {number} [n=1] The number of elements to take.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {Array} Returns the slice of `array`.
    	     * @example
    	     *
    	     * _.takeRight([1, 2, 3]);
    	     * // => [3]
    	     *
    	     * _.takeRight([1, 2, 3], 2);
    	     * // => [2, 3]
    	     *
    	     * _.takeRight([1, 2, 3], 5);
    	     * // => [1, 2, 3]
    	     *
    	     * _.takeRight([1, 2, 3], 0);
    	     * // => []
    	     */
    	    function takeRight(array, n, guard) {
    	      var length = array ? array.length : 0;
    	      if (!length) {
    	        return [];
    	      }
    	      n = (guard || n === undefined) ? 1 : toInteger(n);
    	      n = length - n;
    	      return baseSlice(array, n < 0 ? 0 : n, length);
    	    }
    
    	    /**
    	     * Creates a slice of `array` with elements taken from the end. Elements are
    	     * taken until `predicate` returns falsey. The predicate is invoked with
    	     * three arguments: (value, index, array).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Array
    	     * @param {Array} array The array to query.
    	     * @param {Array|Function|Object|string} [predicate=_.identity]
    	     *  The function invoked per iteration.
    	     * @returns {Array} Returns the slice of `array`.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney',  'active': true },
    	     *   { 'user': 'fred',    'active': false },
    	     *   { 'user': 'pebbles', 'active': false }
    	     * ];
    	     *
    	     * _.takeRightWhile(users, function(o) { return !o.active; });
    	     * // => objects for ['fred', 'pebbles']
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
    	     * // => objects for ['pebbles']
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.takeRightWhile(users, ['active', false]);
    	     * // => objects for ['fred', 'pebbles']
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.takeRightWhile(users, 'active');
    	     * // => []
    	     */
    	    function takeRightWhile(array, predicate) {
    	      return (array && array.length)
    	        ? baseWhile(array, getIteratee(predicate, 3), false, true)
    	        : [];
    	    }
    
    	    /**
    	     * Creates a slice of `array` with elements taken from the beginning. Elements
    	     * are taken until `predicate` returns falsey. The predicate is invoked with
    	     * three arguments: (value, index, array).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Array
    	     * @param {Array} array The array to query.
    	     * @param {Array|Function|Object|string} [predicate=_.identity]
    	     *  The function invoked per iteration.
    	     * @returns {Array} Returns the slice of `array`.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney',  'active': false },
    	     *   { 'user': 'fred',    'active': false},
    	     *   { 'user': 'pebbles', 'active': true }
    	     * ];
    	     *
    	     * _.takeWhile(users, function(o) { return !o.active; });
    	     * // => objects for ['barney', 'fred']
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.takeWhile(users, { 'user': 'barney', 'active': false });
    	     * // => objects for ['barney']
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.takeWhile(users, ['active', false]);
    	     * // => objects for ['barney', 'fred']
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.takeWhile(users, 'active');
    	     * // => []
    	     */
    	    function takeWhile(array, predicate) {
    	      return (array && array.length)
    	        ? baseWhile(array, getIteratee(predicate, 3))
    	        : [];
    	    }
    
    	    /**
    	     * Creates an array of unique values, in order, from all given arrays using
    	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
    	     * for equality comparisons.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {...Array} [arrays] The arrays to inspect.
    	     * @returns {Array} Returns the new array of combined values.
    	     * @example
    	     *
    	     * _.union([2], [1, 2]);
    	     * // => [2, 1]
    	     */
    	    var union = rest(function(arrays) {
    	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    	    });
    
    	    /**
    	     * This method is like `_.union` except that it accepts `iteratee` which is
    	     * invoked for each element of each `arrays` to generate the criterion by
    	     * which uniqueness is computed. The iteratee is invoked with one argument:
    	     * (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {...Array} [arrays] The arrays to inspect.
    	     * @param {Array|Function|Object|string} [iteratee=_.identity]
    	     *  The iteratee invoked per element.
    	     * @returns {Array} Returns the new array of combined values.
    	     * @example
    	     *
    	     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
    	     * // => [2.1, 1.2]
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
    	     * // => [{ 'x': 1 }, { 'x': 2 }]
    	     */
    	    var unionBy = rest(function(arrays) {
    	      var iteratee = last(arrays);
    	      if (isArrayLikeObject(iteratee)) {
    	        iteratee = undefined;
    	      }
    	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee));
    	    });
    
    	    /**
    	     * This method is like `_.union` except that it accepts `comparator` which
    	     * is invoked to compare elements of `arrays`. The comparator is invoked
    	     * with two arguments: (arrVal, othVal).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {...Array} [arrays] The arrays to inspect.
    	     * @param {Function} [comparator] The comparator invoked per element.
    	     * @returns {Array} Returns the new array of combined values.
    	     * @example
    	     *
    	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
    	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
    	     *
    	     * _.unionWith(objects, others, _.isEqual);
    	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
    	     */
    	    var unionWith = rest(function(arrays) {
    	      var comparator = last(arrays);
    	      if (isArrayLikeObject(comparator)) {
    	        comparator = undefined;
    	      }
    	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    	    });
    
    	    /**
    	     * Creates a duplicate-free version of an array, using
    	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
    	     * for equality comparisons, in which only the first occurrence of each
    	     * element is kept.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @returns {Array} Returns the new duplicate free array.
    	     * @example
    	     *
    	     * _.uniq([2, 1, 2]);
    	     * // => [2, 1]
    	     */
    	    function uniq(array) {
    	      return (array && array.length)
    	        ? baseUniq(array)
    	        : [];
    	    }
    
    	    /**
    	     * This method is like `_.uniq` except that it accepts `iteratee` which is
    	     * invoked for each element in `array` to generate the criterion by which
    	     * uniqueness is computed. The iteratee is invoked with one argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @param {Array|Function|Object|string} [iteratee=_.identity]
    	     *  The iteratee invoked per element.
    	     * @returns {Array} Returns the new duplicate free array.
    	     * @example
    	     *
    	     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
    	     * // => [2.1, 1.2]
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
    	     * // => [{ 'x': 1 }, { 'x': 2 }]
    	     */
    	    function uniqBy(array, iteratee) {
    	      return (array && array.length)
    	        ? baseUniq(array, getIteratee(iteratee))
    	        : [];
    	    }
    
    	    /**
    	     * This method is like `_.uniq` except that it accepts `comparator` which
    	     * is invoked to compare elements of `array`. The comparator is invoked with
    	     * two arguments: (arrVal, othVal).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @param {Function} [comparator] The comparator invoked per element.
    	     * @returns {Array} Returns the new duplicate free array.
    	     * @example
    	     *
    	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
    	     *
    	     * _.uniqWith(objects, _.isEqual);
    	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
    	     */
    	    function uniqWith(array, comparator) {
    	      return (array && array.length)
    	        ? baseUniq(array, undefined, comparator)
    	        : [];
    	    }
    
    	    /**
    	     * This method is like `_.zip` except that it accepts an array of grouped
    	     * elements and creates an array regrouping the elements to their pre-zip
    	     * configuration.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 1.2.0
    	     * @category Array
    	     * @param {Array} array The array of grouped elements to process.
    	     * @returns {Array} Returns the new array of regrouped elements.
    	     * @example
    	     *
    	     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
    	     * // => [['fred', 30, true], ['barney', 40, false]]
    	     *
    	     * _.unzip(zipped);
    	     * // => [['fred', 'barney'], [30, 40], [true, false]]
    	     */
    	    function unzip(array) {
    	      if (!(array && array.length)) {
    	        return [];
    	      }
    	      var length = 0;
    	      array = arrayFilter(array, function(group) {
    	        if (isArrayLikeObject(group)) {
    	          length = nativeMax(group.length, length);
    	          return true;
    	        }
    	      });
    	      return baseTimes(length, function(index) {
    	        return arrayMap(array, baseProperty(index));
    	      });
    	    }
    
    	    /**
    	     * This method is like `_.unzip` except that it accepts `iteratee` to specify
    	     * how regrouped values should be combined. The iteratee is invoked with the
    	     * elements of each group: (...group).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.8.0
    	     * @category Array
    	     * @param {Array} array The array of grouped elements to process.
    	     * @param {Function} [iteratee=_.identity] The function to combine
    	     *  regrouped values.
    	     * @returns {Array} Returns the new array of regrouped elements.
    	     * @example
    	     *
    	     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
    	     * // => [[1, 10, 100], [2, 20, 200]]
    	     *
    	     * _.unzipWith(zipped, _.add);
    	     * // => [3, 30, 300]
    	     */
    	    function unzipWith(array, iteratee) {
    	      if (!(array && array.length)) {
    	        return [];
    	      }
    	      var result = unzip(array);
    	      if (iteratee == null) {
    	        return result;
    	      }
    	      return arrayMap(result, function(group) {
    	        return apply(iteratee, undefined, group);
    	      });
    	    }
    
    	    /**
    	     * Creates an array excluding all given values using
    	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
    	     * for equality comparisons.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @param {...*} [values] The values to exclude.
    	     * @returns {Array} Returns the new array of filtered values.
    	     * @see _.difference, _.xor
    	     * @example
    	     *
    	     * _.without([2, 1, 2, 3], 1, 2);
    	     * // => [3]
    	     */
    	    var without = rest(function(array, values) {
    	      return isArrayLikeObject(array)
    	        ? baseDifference(array, values)
    	        : [];
    	    });
    
    	    /**
    	     * Creates an array of unique values that is the
    	     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
    	     * of the given arrays. The order of result values is determined by the order
    	     * they occur in the arrays.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.4.0
    	     * @category Array
    	     * @param {...Array} [arrays] The arrays to inspect.
    	     * @returns {Array} Returns the new array of filtered values.
    	     * @see _.difference, _.without
    	     * @example
    	     *
    	     * _.xor([2, 1], [2, 3]);
    	     * // => [1, 3]
    	     */
    	    var xor = rest(function(arrays) {
    	      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    	    });
    
    	    /**
    	     * This method is like `_.xor` except that it accepts `iteratee` which is
    	     * invoked for each element of each `arrays` to generate the criterion by
    	     * which by which they're compared. The iteratee is invoked with one argument:
    	     * (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {...Array} [arrays] The arrays to inspect.
    	     * @param {Array|Function|Object|string} [iteratee=_.identity]
    	     *  The iteratee invoked per element.
    	     * @returns {Array} Returns the new array of filtered values.
    	     * @example
    	     *
    	     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
    	     * // => [1.2, 3.4]
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
    	     * // => [{ 'x': 2 }]
    	     */
    	    var xorBy = rest(function(arrays) {
    	      var iteratee = last(arrays);
    	      if (isArrayLikeObject(iteratee)) {
    	        iteratee = undefined;
    	      }
    	      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee));
    	    });
    
    	    /**
    	     * This method is like `_.xor` except that it accepts `comparator` which is
    	     * invoked to compare elements of `arrays`. The comparator is invoked with
    	     * two arguments: (arrVal, othVal).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {...Array} [arrays] The arrays to inspect.
    	     * @param {Function} [comparator] The comparator invoked per element.
    	     * @returns {Array} Returns the new array of filtered values.
    	     * @example
    	     *
    	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
    	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
    	     *
    	     * _.xorWith(objects, others, _.isEqual);
    	     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
    	     */
    	    var xorWith = rest(function(arrays) {
    	      var comparator = last(arrays);
    	      if (isArrayLikeObject(comparator)) {
    	        comparator = undefined;
    	      }
    	      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    	    });
    
    	    /**
    	     * Creates an array of grouped elements, the first of which contains the
    	     * first elements of the given arrays, the second of which contains the
    	     * second elements of the given arrays, and so on.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {...Array} [arrays] The arrays to process.
    	     * @returns {Array} Returns the new array of grouped elements.
    	     * @example
    	     *
    	     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
    	     * // => [['fred', 30, true], ['barney', 40, false]]
    	     */
    	    var zip = rest(unzip);
    
    	    /**
    	     * This method is like `_.fromPairs` except that it accepts two arrays,
    	     * one of property identifiers and one of corresponding values.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.4.0
    	     * @category Array
    	     * @param {Array} [props=[]] The property identifiers.
    	     * @param {Array} [values=[]] The property values.
    	     * @returns {Object} Returns the new object.
    	     * @example
    	     *
    	     * _.zipObject(['a', 'b'], [1, 2]);
    	     * // => { 'a': 1, 'b': 2 }
    	     */
    	    function zipObject(props, values) {
    	      return baseZipObject(props || [], values || [], assignValue);
    	    }
    
    	    /**
    	     * This method is like `_.zipObject` except that it supports property paths.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.1.0
    	     * @category Array
    	     * @param {Array} [props=[]] The property identifiers.
    	     * @param {Array} [values=[]] The property values.
    	     * @returns {Object} Returns the new object.
    	     * @example
    	     *
    	     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
    	     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
    	     */
    	    function zipObjectDeep(props, values) {
    	      return baseZipObject(props || [], values || [], baseSet);
    	    }
    
    	    /**
    	     * This method is like `_.zip` except that it accepts `iteratee` to specify
    	     * how grouped values should be combined. The iteratee is invoked with the
    	     * elements of each group: (...group).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.8.0
    	     * @category Array
    	     * @param {...Array} [arrays] The arrays to process.
    	     * @param {Function} [iteratee=_.identity] The function to combine grouped values.
    	     * @returns {Array} Returns the new array of grouped elements.
    	     * @example
    	     *
    	     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
    	     *   return a + b + c;
    	     * });
    	     * // => [111, 222]
    	     */
    	    var zipWith = rest(function(arrays) {
    	      var length = arrays.length,
    	          iteratee = length > 1 ? arrays[length - 1] : undefined;
    
    	      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
    	      return unzipWith(arrays, iteratee);
    	    });
    
    	    /*------------------------------------------------------------------------*/
    
    	    /**
    	     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
    	     * chain sequences enabled. The result of such sequences must be unwrapped
    	     * with `_#value`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 1.3.0
    	     * @category Seq
    	     * @param {*} value The value to wrap.
    	     * @returns {Object} Returns the new `lodash` wrapper instance.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney',  'age': 36 },
    	     *   { 'user': 'fred',    'age': 40 },
    	     *   { 'user': 'pebbles', 'age': 1 }
    	     * ];
    	     *
    	     * var youngest = _
    	     *   .chain(users)
    	     *   .sortBy('age')
    	     *   .map(function(o) {
    	     *     return o.user + ' is ' + o.age;
    	     *   })
    	     *   .head()
    	     *   .value();
    	     * // => 'pebbles is 1'
    	     */
    	    function chain(value) {
    	      var result = lodash(value);
    	      result.__chain__ = true;
    	      return result;
    	    }
    
    	    /**
    	     * This method invokes `interceptor` and returns `value`. The interceptor
    	     * is invoked with one argument; (value). The purpose of this method is to
    	     * "tap into" a method chain sequence in order to modify intermediate results.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Seq
    	     * @param {*} value The value to provide to `interceptor`.
    	     * @param {Function} interceptor The function to invoke.
    	     * @returns {*} Returns `value`.
    	     * @example
    	     *
    	     * _([1, 2, 3])
    	     *  .tap(function(array) {
    	     *    // Mutate input array.
    	     *    array.pop();
    	     *  })
    	     *  .reverse()
    	     *  .value();
    	     * // => [2, 1]
    	     */
    	    function tap(value, interceptor) {
    	      interceptor(value);
    	      return value;
    	    }
    
    	    /**
    	     * This method is like `_.tap` except that it returns the result of `interceptor`.
    	     * The purpose of this method is to "pass thru" values replacing intermediate
    	     * results in a method chain sequence.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Seq
    	     * @param {*} value The value to provide to `interceptor`.
    	     * @param {Function} interceptor The function to invoke.
    	     * @returns {*} Returns the result of `interceptor`.
    	     * @example
    	     *
    	     * _('  abc  ')
    	     *  .chain()
    	     *  .trim()
    	     *  .thru(function(value) {
    	     *    return [value];
    	     *  })
    	     *  .value();
    	     * // => ['abc']
    	     */
    	    function thru(value, interceptor) {
    	      return interceptor(value);
    	    }
    
    	    /**
    	     * This method is the wrapper version of `_.at`.
    	     *
    	     * @name at
    	     * @memberOf _
    	     * @since 1.0.0
    	     * @category Seq
    	     * @param {...(string|string[])} [paths] The property paths of elements to pick.
    	     * @returns {Object} Returns the new `lodash` wrapper instance.
    	     * @example
    	     *
    	     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
    	     *
    	     * _(object).at(['a[0].b.c', 'a[1]']).value();
    	     * // => [3, 4]
    	     */
    	    var wrapperAt = rest(function(paths) {
    	      paths = baseFlatten(paths, 1);
    	      var length = paths.length,
    	          start = length ? paths[0] : 0,
    	          value = this.__wrapped__,
    	          interceptor = function(object) { return baseAt(object, paths); };
    
    	      if (length > 1 || this.__actions__.length ||
    	          !(value instanceof LazyWrapper) || !isIndex(start)) {
    	        return this.thru(interceptor);
    	      }
    	      value = value.slice(start, +start + (length ? 1 : 0));
    	      value.__actions__.push({
    	        'func': thru,
    	        'args': [interceptor],
    	        'thisArg': undefined
    	      });
    	      return new LodashWrapper(value, this.__chain__).thru(function(array) {
    	        if (length && !array.length) {
    	          array.push(undefined);
    	        }
    	        return array;
    	      });
    	    });
    
    	    /**
    	     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
    	     *
    	     * @name chain
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Seq
    	     * @returns {Object} Returns the new `lodash` wrapper instance.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney', 'age': 36 },
    	     *   { 'user': 'fred',   'age': 40 }
    	     * ];
    	     *
    	     * // A sequence without explicit chaining.
    	     * _(users).head();
    	     * // => { 'user': 'barney', 'age': 36 }
    	     *
    	     * // A sequence with explicit chaining.
    	     * _(users)
    	     *   .chain()
    	     *   .head()
    	     *   .pick('user')
    	     *   .value();
    	     * // => { 'user': 'barney' }
    	     */
    	    function wrapperChain() {
    	      return chain(this);
    	    }
    
    	    /**
    	     * Executes the chain sequence and returns the wrapped result.
    	     *
    	     * @name commit
    	     * @memberOf _
    	     * @since 3.2.0
    	     * @category Seq
    	     * @returns {Object} Returns the new `lodash` wrapper instance.
    	     * @example
    	     *
    	     * var array = [1, 2];
    	     * var wrapped = _(array).push(3);
    	     *
    	     * console.log(array);
    	     * // => [1, 2]
    	     *
    	     * wrapped = wrapped.commit();
    	     * console.log(array);
    	     * // => [1, 2, 3]
    	     *
    	     * wrapped.last();
    	     * // => 3
    	     *
    	     * console.log(array);
    	     * // => [1, 2, 3]
    	     */
    	    function wrapperCommit() {
    	      return new LodashWrapper(this.value(), this.__chain__);
    	    }
    
    	    /**
    	     * Gets the next value on a wrapped object following the
    	     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
    	     *
    	     * @name next
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Seq
    	     * @returns {Object} Returns the next iterator value.
    	     * @example
    	     *
    	     * var wrapped = _([1, 2]);
    	     *
    	     * wrapped.next();
    	     * // => { 'done': false, 'value': 1 }
    	     *
    	     * wrapped.next();
    	     * // => { 'done': false, 'value': 2 }
    	     *
    	     * wrapped.next();
    	     * // => { 'done': true, 'value': undefined }
    	     */
    	    function wrapperNext() {
    	      if (this.__values__ === undefined) {
    	        this.__values__ = toArray(this.value());
    	      }
    	      var done = this.__index__ >= this.__values__.length,
    	          value = done ? undefined : this.__values__[this.__index__++];
    
    	      return { 'done': done, 'value': value };
    	    }
    
    	    /**
    	     * Enables the wrapper to be iterable.
    	     *
    	     * @name Symbol.iterator
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Seq
    	     * @returns {Object} Returns the wrapper object.
    	     * @example
    	     *
    	     * var wrapped = _([1, 2]);
    	     *
    	     * wrapped[Symbol.iterator]() === wrapped;
    	     * // => true
    	     *
    	     * Array.from(wrapped);
    	     * // => [1, 2]
    	     */
    	    function wrapperToIterator() {
    	      return this;
    	    }
    
    	    /**
    	     * Creates a clone of the chain sequence planting `value` as the wrapped value.
    	     *
    	     * @name plant
    	     * @memberOf _
    	     * @since 3.2.0
    	     * @category Seq
    	     * @param {*} value The value to plant.
    	     * @returns {Object} Returns the new `lodash` wrapper instance.
    	     * @example
    	     *
    	     * function square(n) {
    	     *   return n * n;
    	     * }
    	     *
    	     * var wrapped = _([1, 2]).map(square);
    	     * var other = wrapped.plant([3, 4]);
    	     *
    	     * other.value();
    	     * // => [9, 16]
    	     *
    	     * wrapped.value();
    	     * // => [1, 4]
    	     */
    	    function wrapperPlant(value) {
    	      var result,
    	          parent = this;
    
    	      while (parent instanceof baseLodash) {
    	        var clone = wrapperClone(parent);
    	        clone.__index__ = 0;
    	        clone.__values__ = undefined;
    	        if (result) {
    	          previous.__wrapped__ = clone;
    	        } else {
    	          result = clone;
    	        }
    	        var previous = clone;
    	        parent = parent.__wrapped__;
    	      }
    	      previous.__wrapped__ = value;
    	      return result;
    	    }
    
    	    /**
    	     * This method is the wrapper version of `_.reverse`.
    	     *
    	     * **Note:** This method mutates the wrapped array.
    	     *
    	     * @name reverse
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Seq
    	     * @returns {Object} Returns the new `lodash` wrapper instance.
    	     * @example
    	     *
    	     * var array = [1, 2, 3];
    	     *
    	     * _(array).reverse().value()
    	     * // => [3, 2, 1]
    	     *
    	     * console.log(array);
    	     * // => [3, 2, 1]
    	     */
    	    function wrapperReverse() {
    	      var value = this.__wrapped__;
    	      if (value instanceof LazyWrapper) {
    	        var wrapped = value;
    	        if (this.__actions__.length) {
    	          wrapped = new LazyWrapper(this);
    	        }
    	        wrapped = wrapped.reverse();
    	        wrapped.__actions__.push({
    	          'func': thru,
    	          'args': [reverse],
    	          'thisArg': undefined
    	        });
    	        return new LodashWrapper(wrapped, this.__chain__);
    	      }
    	      return this.thru(reverse);
    	    }
    
    	    /**
    	     * Executes the chain sequence to resolve the unwrapped value.
    	     *
    	     * @name value
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @alias toJSON, valueOf
    	     * @category Seq
    	     * @returns {*} Returns the resolved unwrapped value.
    	     * @example
    	     *
    	     * _([1, 2, 3]).value();
    	     * // => [1, 2, 3]
    	     */
    	    function wrapperValue() {
    	      return baseWrapperValue(this.__wrapped__, this.__actions__);
    	    }
    
    	    /*------------------------------------------------------------------------*/
    
    	    /**
    	     * Creates an object composed of keys generated from the results of running
    	     * each element of `collection` thru `iteratee`. The corresponding value of
    	     * each key is the number of times the key was returned by `iteratee`. The
    	     * iteratee is invoked with one argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.5.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Array|Function|Object|string} [iteratee=_.identity]
    	     *  The iteratee to transform keys.
    	     * @returns {Object} Returns the composed aggregate object.
    	     * @example
    	     *
    	     * _.countBy([6.1, 4.2, 6.3], Math.floor);
    	     * // => { '4': 1, '6': 2 }
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.countBy(['one', 'two', 'three'], 'length');
    	     * // => { '3': 2, '5': 1 }
    	     */
    	    var countBy = createAggregator(function(result, value, key) {
    	      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);
    	    });
    
    	    /**
    	     * Checks if `predicate` returns truthy for **all** elements of `collection`.
    	     * Iteration is stopped once `predicate` returns falsey. The predicate is
    	     * invoked with three arguments: (value, index|key, collection).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Array|Function|Object|string} [predicate=_.identity]
    	     *  The function invoked per iteration.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
    	     *  else `false`.
    	     * @example
    	     *
    	     * _.every([true, 1, null, 'yes'], Boolean);
    	     * // => false
    	     *
    	     * var users = [
    	     *   { 'user': 'barney', 'age': 36, 'active': false },
    	     *   { 'user': 'fred',   'age': 40, 'active': false }
    	     * ];
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.every(users, { 'user': 'barney', 'active': false });
    	     * // => false
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.every(users, ['active', false]);
    	     * // => true
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.every(users, 'active');
    	     * // => false
    	     */
    	    function every(collection, predicate, guard) {
    	      var func = isArray(collection) ? arrayEvery : baseEvery;
    	      if (guard && isIterateeCall(collection, predicate, guard)) {
    	        predicate = undefined;
    	      }
    	      return func(collection, getIteratee(predicate, 3));
    	    }
    
    	    /**
    	     * Iterates over elements of `collection`, returning an array of all elements
    	     * `predicate` returns truthy for. The predicate is invoked with three
    	     * arguments: (value, index|key, collection).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Array|Function|Object|string} [predicate=_.identity]
    	     *  The function invoked per iteration.
    	     * @returns {Array} Returns the new filtered array.
    	     * @see _.reject
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney', 'age': 36, 'active': true },
    	     *   { 'user': 'fred',   'age': 40, 'active': false }
    	     * ];
    	     *
    	     * _.filter(users, function(o) { return !o.active; });
    	     * // => objects for ['fred']
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.filter(users, { 'age': 36, 'active': true });
    	     * // => objects for ['barney']
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.filter(users, ['active', false]);
    	     * // => objects for ['fred']
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.filter(users, 'active');
    	     * // => objects for ['barney']
    	     */
    	    function filter(collection, predicate) {
    	      var func = isArray(collection) ? arrayFilter : baseFilter;
    	      return func(collection, getIteratee(predicate, 3));
    	    }
    
    	    /**
    	     * Iterates over elements of `collection`, returning the first element
    	     * `predicate` returns truthy for. The predicate is invoked with three
    	     * arguments: (value, index|key, collection).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to search.
    	     * @param {Array|Function|Object|string} [predicate=_.identity]
    	     *  The function invoked per iteration.
    	     * @param {number} [fromIndex=0] The index to search from.
    	     * @returns {*} Returns the matched element, else `undefined`.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney',  'age': 36, 'active': true },
    	     *   { 'user': 'fred',    'age': 40, 'active': false },
    	     *   { 'user': 'pebbles', 'age': 1,  'active': true }
    	     * ];
    	     *
    	     * _.find(users, function(o) { return o.age < 40; });
    	     * // => object for 'barney'
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.find(users, { 'age': 1, 'active': true });
    	     * // => object for 'pebbles'
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.find(users, ['active', false]);
    	     * // => object for 'fred'
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.find(users, 'active');
    	     * // => object for 'barney'
    	     */
    	    var find = createFind(findIndex);
    
    	    /**
    	     * This method is like `_.find` except that it iterates over elements of
    	     * `collection` from right to left.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.0.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to search.
    	     * @param {Array|Function|Object|string} [predicate=_.identity]
    	     *  The function invoked per iteration.
    	     * @param {number} [fromIndex=collection.length-1] The index to search from.
    	     * @returns {*} Returns the matched element, else `undefined`.
    	     * @example
    	     *
    	     * _.findLast([1, 2, 3, 4], function(n) {
    	     *   return n % 2 == 1;
    	     * });
    	     * // => 3
    	     */
    	    var findLast = createFind(findLastIndex);
    
    	    /**
    	     * Creates a flattened array of values by running each element in `collection`
    	     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
    	     * with three arguments: (value, index|key, collection).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Array|Function|Object|string} [iteratee=_.identity]
    	     *  The function invoked per iteration.
    	     * @returns {Array} Returns the new flattened array.
    	     * @example
    	     *
    	     * function duplicate(n) {
    	     *   return [n, n];
    	     * }
    	     *
    	     * _.flatMap([1, 2], duplicate);
    	     * // => [1, 1, 2, 2]
    	     */
    	    function flatMap(collection, iteratee) {
    	      return baseFlatten(map(collection, iteratee), 1);
    	    }
    
    	    /**
    	     * This method is like `_.flatMap` except that it recursively flattens the
    	     * mapped results.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.7.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Array|Function|Object|string} [iteratee=_.identity]
    	     *  The function invoked per iteration.
    	     * @returns {Array} Returns the new flattened array.
    	     * @example
    	     *
    	     * function duplicate(n) {
    	     *   return [[[n, n]]];
    	     * }
    	     *
    	     * _.flatMapDeep([1, 2], duplicate);
    	     * // => [1, 1, 2, 2]
    	     */
    	    function flatMapDeep(collection, iteratee) {
    	      return baseFlatten(map(collection, iteratee), INFINITY);
    	    }
    
    	    /**
    	     * This method is like `_.flatMap` except that it recursively flattens the
    	     * mapped results up to `depth` times.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.7.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Array|Function|Object|string} [iteratee=_.identity]
    	     *  The function invoked per iteration.
    	     * @param {number} [depth=1] The maximum recursion depth.
    	     * @returns {Array} Returns the new flattened array.
    	     * @example
    	     *
    	     * function duplicate(n) {
    	     *   return [[[n, n]]];
    	     * }
    	     *
    	     * _.flatMapDepth([1, 2], duplicate, 2);
    	     * // => [[1, 1], [2, 2]]
    	     */
    	    function flatMapDepth(collection, iteratee, depth) {
    	      depth = depth === undefined ? 1 : toInteger(depth);
    	      return baseFlatten(map(collection, iteratee), depth);
    	    }
    
    	    /**
    	     * Iterates over elements of `collection` and invokes `iteratee` for each element.
    	     * The iteratee is invoked with three arguments: (value, index|key, collection).
    	     * Iteratee functions may exit iteration early by explicitly returning `false`.
    	     *
    	     * **Note:** As with other "Collections" methods, objects with a "length"
    	     * property are iterated like arrays. To avoid this behavior use `_.forIn`
    	     * or `_.forOwn` for object iteration.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @alias each
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @returns {Array|Object} Returns `collection`.
    	     * @see _.forEachRight
    	     * @example
    	     *
    	     * _([1, 2]).forEach(function(value) {
    	     *   console.log(value);
    	     * });
    	     * // => Logs `1` then `2`.
    	     *
    	     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
    	     *   console.log(key);
    	     * });
    	     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
    	     */
    	    function forEach(collection, iteratee) {
    	      var func = isArray(collection) ? arrayEach : baseEach;
    	      return func(collection, getIteratee(iteratee, 3));
    	    }
    
    	    /**
    	     * This method is like `_.forEach` except that it iterates over elements of
    	     * `collection` from right to left.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.0.0
    	     * @alias eachRight
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @returns {Array|Object} Returns `collection`.
    	     * @see _.forEach
    	     * @example
    	     *
    	     * _.forEachRight([1, 2], function(value) {
    	     *   console.log(value);
    	     * });
    	     * // => Logs `2` then `1`.
    	     */
    	    function forEachRight(collection, iteratee) {
    	      var func = isArray(collection) ? arrayEachRight : baseEachRight;
    	      return func(collection, getIteratee(iteratee, 3));
    	    }
    
    	    /**
    	     * Creates an object composed of keys generated from the results of running
    	     * each element of `collection` thru `iteratee`. The order of grouped values
    	     * is determined by the order they occur in `collection`. The corresponding
    	     * value of each key is an array of elements responsible for generating the
    	     * key. The iteratee is invoked with one argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Array|Function|Object|string} [iteratee=_.identity]
    	     *  The iteratee to transform keys.
    	     * @returns {Object} Returns the composed aggregate object.
    	     * @example
    	     *
    	     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
    	     * // => { '4': [4.2], '6': [6.1, 6.3] }
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.groupBy(['one', 'two', 'three'], 'length');
    	     * // => { '3': ['one', 'two'], '5': ['three'] }
    	     */
    	    var groupBy = createAggregator(function(result, value, key) {
    	      if (hasOwnProperty.call(result, key)) {
    	        result[key].push(value);
    	      } else {
    	        result[key] = [value];
    	      }
    	    });
    
    	    /**
    	     * Checks if `value` is in `collection`. If `collection` is a string, it's
    	     * checked for a substring of `value`, otherwise
    	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
    	     * is used for equality comparisons. If `fromIndex` is negative, it's used as
    	     * the offset from the end of `collection`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Collection
    	     * @param {Array|Object|string} collection The collection to search.
    	     * @param {*} value The value to search for.
    	     * @param {number} [fromIndex=0] The index to search from.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
    	     * @returns {boolean} Returns `true` if `value` is found, else `false`.
    	     * @example
    	     *
    	     * _.includes([1, 2, 3], 1);
    	     * // => true
    	     *
    	     * _.includes([1, 2, 3], 1, 2);
    	     * // => false
    	     *
    	     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
    	     * // => true
    	     *
    	     * _.includes('pebbles', 'eb');
    	     * // => true
    	     */
    	    function includes(collection, value, fromIndex, guard) {
    	      collection = isArrayLike(collection) ? collection : values(collection);
    	      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;
    
    	      var length = collection.length;
    	      if (fromIndex < 0) {
    	        fromIndex = nativeMax(length + fromIndex, 0);
    	      }
    	      return isString(collection)
    	        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
    	        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    	    }
    
    	    /**
    	     * Invokes the method at `path` of each element in `collection`, returning
    	     * an array of the results of each invoked method. Any additional arguments
    	     * are provided to each invoked method. If `methodName` is a function, it's
    	     * invoked for and `this` bound to, each element in `collection`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Array|Function|string} path The path of the method to invoke or
    	     *  the function invoked per iteration.
    	     * @param {...*} [args] The arguments to invoke each method with.
    	     * @returns {Array} Returns the array of results.
    	     * @example
    	     *
    	     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
    	     * // => [[1, 5, 7], [1, 2, 3]]
    	     *
    	     * _.invokeMap([123, 456], String.prototype.split, '');
    	     * // => [['1', '2', '3'], ['4', '5', '6']]
    	     */
    	    var invokeMap = rest(function(collection, path, args) {
    	      var index = -1,
    	          isFunc = typeof path == 'function',
    	          isProp = isKey(path),
    	          result = isArrayLike(collection) ? Array(collection.length) : [];
    
    	      baseEach(collection, function(value) {
    	        var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);
    	        result[++index] = func ? apply(func, value, args) : baseInvoke(value, path, args);
    	      });
    	      return result;
    	    });
    
    	    /**
    	     * Creates an object composed of keys generated from the results of running
    	     * each element of `collection` thru `iteratee`. The corresponding value of
    	     * each key is the last element responsible for generating the key. The
    	     * iteratee is invoked with one argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Array|Function|Object|string} [iteratee=_.identity]
    	     *  The iteratee to transform keys.
    	     * @returns {Object} Returns the composed aggregate object.
    	     * @example
    	     *
    	     * var array = [
    	     *   { 'dir': 'left', 'code': 97 },
    	     *   { 'dir': 'right', 'code': 100 }
    	     * ];
    	     *
    	     * _.keyBy(array, function(o) {
    	     *   return String.fromCharCode(o.code);
    	     * });
    	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
    	     *
    	     * _.keyBy(array, 'dir');
    	     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
    	     */
    	    var keyBy = createAggregator(function(result, value, key) {
    	      result[key] = value;
    	    });
    
    	    /**
    	     * Creates an array of values by running each element in `collection` thru
    	     * `iteratee`. The iteratee is invoked with three arguments:
    	     * (value, index|key, collection).
    	     *
    	     * Many lodash methods are guarded to work as iteratees for methods like
    	     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
    	     *
    	     * The guarded methods are:
    	     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
    	     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
    	     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
    	     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Array|Function|Object|string} [iteratee=_.identity]
    	     *  The function invoked per iteration.
    	     * @returns {Array} Returns the new mapped array.
    	     * @example
    	     *
    	     * function square(n) {
    	     *   return n * n;
    	     * }
    	     *
    	     * _.map([4, 8], square);
    	     * // => [16, 64]
    	     *
    	     * _.map({ 'a': 4, 'b': 8 }, square);
    	     * // => [16, 64] (iteration order is not guaranteed)
    	     *
    	     * var users = [
    	     *   { 'user': 'barney' },
    	     *   { 'user': 'fred' }
    	     * ];
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.map(users, 'user');
    	     * // => ['barney', 'fred']
    	     */
    	    function map(collection, iteratee) {
    	      var func = isArray(collection) ? arrayMap : baseMap;
    	      return func(collection, getIteratee(iteratee, 3));
    	    }
    
    	    /**
    	     * This method is like `_.sortBy` except that it allows specifying the sort
    	     * orders of the iteratees to sort by. If `orders` is unspecified, all values
    	     * are sorted in ascending order. Otherwise, specify an order of "desc" for
    	     * descending or "asc" for ascending sort order of corresponding values.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
    	     *  The iteratees to sort by.
    	     * @param {string[]} [orders] The sort orders of `iteratees`.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
    	     * @returns {Array} Returns the new sorted array.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'fred',   'age': 48 },
    	     *   { 'user': 'barney', 'age': 34 },
    	     *   { 'user': 'fred',   'age': 40 },
    	     *   { 'user': 'barney', 'age': 36 }
    	     * ];
    	     *
    	     * // Sort by `user` in ascending order and by `age` in descending order.
    	     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
    	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
    	     */
    	    function orderBy(collection, iteratees, orders, guard) {
    	      if (collection == null) {
    	        return [];
    	      }
    	      if (!isArray(iteratees)) {
    	        iteratees = iteratees == null ? [] : [iteratees];
    	      }
    	      orders = guard ? undefined : orders;
    	      if (!isArray(orders)) {
    	        orders = orders == null ? [] : [orders];
    	      }
    	      return baseOrderBy(collection, iteratees, orders);
    	    }
    
    	    /**
    	     * Creates an array of elements split into two groups, the first of which
    	     * contains elements `predicate` returns truthy for, the second of which
    	     * contains elements `predicate` returns falsey for. The predicate is
    	     * invoked with one argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Array|Function|Object|string} [predicate=_.identity]
    	     *  The function invoked per iteration.
    	     * @returns {Array} Returns the array of grouped elements.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney',  'age': 36, 'active': false },
    	     *   { 'user': 'fred',    'age': 40, 'active': true },
    	     *   { 'user': 'pebbles', 'age': 1,  'active': false }
    	     * ];
    	     *
    	     * _.partition(users, function(o) { return o.active; });
    	     * // => objects for [['fred'], ['barney', 'pebbles']]
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.partition(users, { 'age': 1, 'active': false });
    	     * // => objects for [['pebbles'], ['barney', 'fred']]
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.partition(users, ['active', false]);
    	     * // => objects for [['barney', 'pebbles'], ['fred']]
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.partition(users, 'active');
    	     * // => objects for [['fred'], ['barney', 'pebbles']]
    	     */
    	    var partition = createAggregator(function(result, value, key) {
    	      result[key ? 0 : 1].push(value);
    	    }, function() { return [[], []]; });
    
    	    /**
    	     * Reduces `collection` to a value which is the accumulated result of running
    	     * each element in `collection` thru `iteratee`, where each successive
    	     * invocation is supplied the return value of the previous. If `accumulator`
    	     * is not given, the first element of `collection` is used as the initial
    	     * value. The iteratee is invoked with four arguments:
    	     * (accumulator, value, index|key, collection).
    	     *
    	     * Many lodash methods are guarded to work as iteratees for methods like
    	     * `_.reduce`, `_.reduceRight`, and `_.transform`.
    	     *
    	     * The guarded methods are:
    	     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
    	     * and `sortBy`
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @param {*} [accumulator] The initial value.
    	     * @returns {*} Returns the accumulated value.
    	     * @see _.reduceRight
    	     * @example
    	     *
    	     * _.reduce([1, 2], function(sum, n) {
    	     *   return sum + n;
    	     * }, 0);
    	     * // => 3
    	     *
    	     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
    	     *   (result[value] || (result[value] = [])).push(key);
    	     *   return result;
    	     * }, {});
    	     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
    	     */
    	    function reduce(collection, iteratee, accumulator) {
    	      var func = isArray(collection) ? arrayReduce : baseReduce,
    	          initAccum = arguments.length < 3;
    
    	      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    	    }
    
    	    /**
    	     * This method is like `_.reduce` except that it iterates over elements of
    	     * `collection` from right to left.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @param {*} [accumulator] The initial value.
    	     * @returns {*} Returns the accumulated value.
    	     * @see _.reduce
    	     * @example
    	     *
    	     * var array = [[0, 1], [2, 3], [4, 5]];
    	     *
    	     * _.reduceRight(array, function(flattened, other) {
    	     *   return flattened.concat(other);
    	     * }, []);
    	     * // => [4, 5, 2, 3, 0, 1]
    	     */
    	    function reduceRight(collection, iteratee, accumulator) {
    	      var func = isArray(collection) ? arrayReduceRight : baseReduce,
    	          initAccum = arguments.length < 3;
    
    	      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    	    }
    
    	    /**
    	     * The opposite of `_.filter`; this method returns the elements of `collection`
    	     * that `predicate` does **not** return truthy for.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Array|Function|Object|string} [predicate=_.identity]
    	     *  The function invoked per iteration.
    	     * @returns {Array} Returns the new filtered array.
    	     * @see _.filter
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney', 'age': 36, 'active': false },
    	     *   { 'user': 'fred',   'age': 40, 'active': true }
    	     * ];
    	     *
    	     * _.reject(users, function(o) { return !o.active; });
    	     * // => objects for ['fred']
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.reject(users, { 'age': 40, 'active': true });
    	     * // => objects for ['barney']
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.reject(users, ['active', false]);
    	     * // => objects for ['fred']
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.reject(users, 'active');
    	     * // => objects for ['barney']
    	     */
    	    function reject(collection, predicate) {
    	      var func = isArray(collection) ? arrayFilter : baseFilter;
    	      predicate = getIteratee(predicate, 3);
    	      return func(collection, function(value, index, collection) {
    	        return !predicate(value, index, collection);
    	      });
    	    }
    
    	    /**
    	     * Gets a random element from `collection`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.0.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to sample.
    	     * @returns {*} Returns the random element.
    	     * @example
    	     *
    	     * _.sample([1, 2, 3, 4]);
    	     * // => 2
    	     */
    	    function sample(collection) {
    	      var array = isArrayLike(collection) ? collection : values(collection),
    	          length = array.length;
    
    	      return length > 0 ? array[baseRandom(0, length - 1)] : undefined;
    	    }
    
    	    /**
    	     * Gets `n` random elements at unique keys from `collection` up to the
    	     * size of `collection`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to sample.
    	     * @param {number} [n=1] The number of elements to sample.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {Array} Returns the random elements.
    	     * @example
    	     *
    	     * _.sampleSize([1, 2, 3], 2);
    	     * // => [3, 1]
    	     *
    	     * _.sampleSize([1, 2, 3], 4);
    	     * // => [2, 3, 1]
    	     */
    	    function sampleSize(collection, n, guard) {
    	      var index = -1,
    	          result = toArray(collection),
    	          length = result.length,
    	          lastIndex = length - 1;
    
    	      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
    	        n = 1;
    	      } else {
    	        n = baseClamp(toInteger(n), 0, length);
    	      }
    	      while (++index < n) {
    	        var rand = baseRandom(index, lastIndex),
    	            value = result[rand];
    
    	        result[rand] = result[index];
    	        result[index] = value;
    	      }
    	      result.length = n;
    	      return result;
    	    }
    
    	    /**
    	     * Creates an array of shuffled values, using a version of the
    	     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to shuffle.
    	     * @returns {Array} Returns the new shuffled array.
    	     * @example
    	     *
    	     * _.shuffle([1, 2, 3, 4]);
    	     * // => [4, 1, 3, 2]
    	     */
    	    function shuffle(collection) {
    	      return sampleSize(collection, MAX_ARRAY_LENGTH);
    	    }
    
    	    /**
    	     * Gets the size of `collection` by returning its length for array-like
    	     * values or the number of own enumerable string keyed properties for objects.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to inspect.
    	     * @returns {number} Returns the collection size.
    	     * @example
    	     *
    	     * _.size([1, 2, 3]);
    	     * // => 3
    	     *
    	     * _.size({ 'a': 1, 'b': 2 });
    	     * // => 2
    	     *
    	     * _.size('pebbles');
    	     * // => 7
    	     */
    	    function size(collection) {
    	      if (collection == null) {
    	        return 0;
    	      }
    	      if (isArrayLike(collection)) {
    	        var result = collection.length;
    	        return (result && isString(collection)) ? stringSize(collection) : result;
    	      }
    	      if (isObjectLike(collection)) {
    	        var tag = getTag(collection);
    	        if (tag == mapTag || tag == setTag) {
    	          return collection.size;
    	        }
    	      }
    	      return keys(collection).length;
    	    }
    
    	    /**
    	     * Checks if `predicate` returns truthy for **any** element of `collection`.
    	     * Iteration is stopped once `predicate` returns truthy. The predicate is
    	     * invoked with three arguments: (value, index|key, collection).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Array|Function|Object|string} [predicate=_.identity]
    	     *  The function invoked per iteration.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {boolean} Returns `true` if any element passes the predicate check,
    	     *  else `false`.
    	     * @example
    	     *
    	     * _.some([null, 0, 'yes', false], Boolean);
    	     * // => true
    	     *
    	     * var users = [
    	     *   { 'user': 'barney', 'active': true },
    	     *   { 'user': 'fred',   'active': false }
    	     * ];
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.some(users, { 'user': 'barney', 'active': false });
    	     * // => false
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.some(users, ['active', false]);
    	     * // => true
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.some(users, 'active');
    	     * // => true
    	     */
    	    function some(collection, predicate, guard) {
    	      var func = isArray(collection) ? arraySome : baseSome;
    	      if (guard && isIterateeCall(collection, predicate, guard)) {
    	        predicate = undefined;
    	      }
    	      return func(collection, getIteratee(predicate, 3));
    	    }
    
    	    /**
    	     * Creates an array of elements, sorted in ascending order by the results of
    	     * running each element in a collection thru each iteratee. This method
    	     * performs a stable sort, that is, it preserves the original sort order of
    	     * equal elements. The iteratees are invoked with one argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {...(Array|Array[]|Function|Function[]|Object|Object[]|string|string[])}
    	     *  [iteratees=[_.identity]] The iteratees to sort by.
    	     * @returns {Array} Returns the new sorted array.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'fred',   'age': 48 },
    	     *   { 'user': 'barney', 'age': 36 },
    	     *   { 'user': 'fred',   'age': 40 },
    	     *   { 'user': 'barney', 'age': 34 }
    	     * ];
    	     *
    	     * _.sortBy(users, function(o) { return o.user; });
    	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
    	     *
    	     * _.sortBy(users, ['user', 'age']);
    	     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
    	     *
    	     * _.sortBy(users, 'user', function(o) {
    	     *   return Math.floor(o.age / 10);
    	     * });
    	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
    	     */
    	    var sortBy = rest(function(collection, iteratees) {
    	      if (collection == null) {
    	        return [];
    	      }
    	      var length = iteratees.length;
    	      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
    	        iteratees = [];
    	      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
    	        iteratees = [iteratees[0]];
    	      }
    	      iteratees = (iteratees.length == 1 && isArray(iteratees[0]))
    	        ? iteratees[0]
    	        : baseFlatten(iteratees, 1, isFlattenableIteratee);
    
    	      return baseOrderBy(collection, iteratees, []);
    	    });
    
    	    /*------------------------------------------------------------------------*/
    
    	    /**
    	     * Gets the timestamp of the number of milliseconds that have elapsed since
    	     * the Unix epoch (1 January 1970 00:00:00 UTC).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.4.0
    	     * @category Date
    	     * @returns {number} Returns the timestamp.
    	     * @example
    	     *
    	     * _.defer(function(stamp) {
    	     *   console.log(_.now() - stamp);
    	     * }, _.now());
    	     * // => Logs the number of milliseconds it took for the deferred invocation.
    	     */
    	    function now() {
    	      return Date.now();
    	    }
    
    	    /*------------------------------------------------------------------------*/
    
    	    /**
    	     * The opposite of `_.before`; this method creates a function that invokes
    	     * `func` once it's called `n` or more times.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Function
    	     * @param {number} n The number of calls before `func` is invoked.
    	     * @param {Function} func The function to restrict.
    	     * @returns {Function} Returns the new restricted function.
    	     * @example
    	     *
    	     * var saves = ['profile', 'settings'];
    	     *
    	     * var done = _.after(saves.length, function() {
    	     *   console.log('done saving!');
    	     * });
    	     *
    	     * _.forEach(saves, function(type) {
    	     *   asyncSave({ 'type': type, 'complete': done });
    	     * });
    	     * // => Logs 'done saving!' after the two async saves have completed.
    	     */
    	    function after(n, func) {
    	      if (typeof func != 'function') {
    	        throw new TypeError(FUNC_ERROR_TEXT);
    	      }
    	      n = toInteger(n);
    	      return function() {
    	        if (--n < 1) {
    	          return func.apply(this, arguments);
    	        }
    	      };
    	    }
    
    	    /**
    	     * Creates a function that invokes `func`, with up to `n` arguments,
    	     * ignoring any additional arguments.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Function
    	     * @param {Function} func The function to cap arguments for.
    	     * @param {number} [n=func.length] The arity cap.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {Function} Returns the new capped function.
    	     * @example
    	     *
    	     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
    	     * // => [6, 8, 10]
    	     */
    	    function ary(func, n, guard) {
    	      n = guard ? undefined : n;
    	      n = (func && n == null) ? func.length : n;
    	      return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);
    	    }
    
    	    /**
    	     * Creates a function that invokes `func`, with the `this` binding and arguments
    	     * of the created function, while it's called less than `n` times. Subsequent
    	     * calls to the created function return the result of the last `func` invocation.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Function
    	     * @param {number} n The number of calls at which `func` is no longer invoked.
    	     * @param {Function} func The function to restrict.
    	     * @returns {Function} Returns the new restricted function.
    	     * @example
    	     *
    	     * jQuery(element).on('click', _.before(5, addContactToList));
    	     * // => allows adding up to 4 contacts to the list
    	     */
    	    function before(n, func) {
    	      var result;
    	      if (typeof func != 'function') {
    	        throw new TypeError(FUNC_ERROR_TEXT);
    	      }
    	      n = toInteger(n);
    	      return function() {
    	        if (--n > 0) {
    	          result = func.apply(this, arguments);
    	        }
    	        if (n <= 1) {
    	          func = undefined;
    	        }
    	        return result;
    	      };
    	    }
    
    	    /**
    	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
    	     * and `partials` prepended to the arguments it receives.
    	     *
    	     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
    	     * may be used as a placeholder for partially applied arguments.
    	     *
    	     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
    	     * property of bound functions.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Function
    	     * @param {Function} func The function to bind.
    	     * @param {*} thisArg The `this` binding of `func`.
    	     * @param {...*} [partials] The arguments to be partially applied.
    	     * @returns {Function} Returns the new bound function.
    	     * @example
    	     *
    	     * var greet = function(greeting, punctuation) {
    	     *   return greeting + ' ' + this.user + punctuation;
    	     * };
    	     *
    	     * var object = { 'user': 'fred' };
    	     *
    	     * var bound = _.bind(greet, object, 'hi');
    	     * bound('!');
    	     * // => 'hi fred!'
    	     *
    	     * // Bound with placeholders.
    	     * var bound = _.bind(greet, object, _, '!');
    	     * bound('hi');
    	     * // => 'hi fred!'
    	     */
    	    var bind = rest(function(func, thisArg, partials) {
    	      var bitmask = BIND_FLAG;
    	      if (partials.length) {
    	        var holders = replaceHolders(partials, getHolder(bind));
    	        bitmask |= PARTIAL_FLAG;
    	      }
    	      return createWrapper(func, bitmask, thisArg, partials, holders);
    	    });
    
    	    /**
    	     * Creates a function that invokes the method at `object[key]` with `partials`
    	     * prepended to the arguments it receives.
    	     *
    	     * This method differs from `_.bind` by allowing bound functions to reference
    	     * methods that may be redefined or don't yet exist. See
    	     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
    	     * for more details.
    	     *
    	     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
    	     * builds, may be used as a placeholder for partially applied arguments.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.10.0
    	     * @category Function
    	     * @param {Object} object The object to invoke the method on.
    	     * @param {string} key The key of the method.
    	     * @param {...*} [partials] The arguments to be partially applied.
    	     * @returns {Function} Returns the new bound function.
    	     * @example
    	     *
    	     * var object = {
    	     *   'user': 'fred',
    	     *   'greet': function(greeting, punctuation) {
    	     *     return greeting + ' ' + this.user + punctuation;
    	     *   }
    	     * };
    	     *
    	     * var bound = _.bindKey(object, 'greet', 'hi');
    	     * bound('!');
    	     * // => 'hi fred!'
    	     *
    	     * object.greet = function(greeting, punctuation) {
    	     *   return greeting + 'ya ' + this.user + punctuation;
    	     * };
    	     *
    	     * bound('!');
    	     * // => 'hiya fred!'
    	     *
    	     * // Bound with placeholders.
    	     * var bound = _.bindKey(object, 'greet', _, '!');
    	     * bound('hi');
    	     * // => 'hiya fred!'
    	     */
    	    var bindKey = rest(function(object, key, partials) {
    	      var bitmask = BIND_FLAG | BIND_KEY_FLAG;
    	      if (partials.length) {
    	        var holders = replaceHolders(partials, getHolder(bindKey));
    	        bitmask |= PARTIAL_FLAG;
    	      }
    	      return createWrapper(key, bitmask, object, partials, holders);
    	    });
    
    	    /**
    	     * Creates a function that accepts arguments of `func` and either invokes
    	     * `func` returning its result, if at least `arity` number of arguments have
    	     * been provided, or returns a function that accepts the remaining `func`
    	     * arguments, and so on. The arity of `func` may be specified if `func.length`
    	     * is not sufficient.
    	     *
    	     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
    	     * may be used as a placeholder for provided arguments.
    	     *
    	     * **Note:** This method doesn't set the "length" property of curried functions.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.0.0
    	     * @category Function
    	     * @param {Function} func The function to curry.
    	     * @param {number} [arity=func.length] The arity of `func`.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {Function} Returns the new curried function.
    	     * @example
    	     *
    	     * var abc = function(a, b, c) {
    	     *   return [a, b, c];
    	     * };
    	     *
    	     * var curried = _.curry(abc);
    	     *
    	     * curried(1)(2)(3);
    	     * // => [1, 2, 3]
    	     *
    	     * curried(1, 2)(3);
    	     * // => [1, 2, 3]
    	     *
    	     * curried(1, 2, 3);
    	     * // => [1, 2, 3]
    	     *
    	     * // Curried with placeholders.
    	     * curried(1)(_, 3)(2);
    	     * // => [1, 2, 3]
    	     */
    	    function curry(func, arity, guard) {
    	      arity = guard ? undefined : arity;
    	      var result = createWrapper(func, CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
    	      result.placeholder = curry.placeholder;
    	      return result;
    	    }
    
    	    /**
    	     * This method is like `_.curry` except that arguments are applied to `func`
    	     * in the manner of `_.partialRight` instead of `_.partial`.
    	     *
    	     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
    	     * builds, may be used as a placeholder for provided arguments.
    	     *
    	     * **Note:** This method doesn't set the "length" property of curried functions.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Function
    	     * @param {Function} func The function to curry.
    	     * @param {number} [arity=func.length] The arity of `func`.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {Function} Returns the new curried function.
    	     * @example
    	     *
    	     * var abc = function(a, b, c) {
    	     *   return [a, b, c];
    	     * };
    	     *
    	     * var curried = _.curryRight(abc);
    	     *
    	     * curried(3)(2)(1);
    	     * // => [1, 2, 3]
    	     *
    	     * curried(2, 3)(1);
    	     * // => [1, 2, 3]
    	     *
    	     * curried(1, 2, 3);
    	     * // => [1, 2, 3]
    	     *
    	     * // Curried with placeholders.
    	     * curried(3)(1, _)(2);
    	     * // => [1, 2, 3]
    	     */
    	    function curryRight(func, arity, guard) {
    	      arity = guard ? undefined : arity;
    	      var result = createWrapper(func, CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
    	      result.placeholder = curryRight.placeholder;
    	      return result;
    	    }
    
    	    /**
    	     * Creates a debounced function that delays invoking `func` until after `wait`
    	     * milliseconds have elapsed since the last time the debounced function was
    	     * invoked. The debounced function comes with a `cancel` method to cancel
    	     * delayed `func` invocations and a `flush` method to immediately invoke them.
    	     * Provide an options object to indicate whether `func` should be invoked on
    	     * the leading and/or trailing edge of the `wait` timeout. The `func` is invoked
    	     * with the last arguments provided to the debounced function. Subsequent calls
    	     * to the debounced function return the result of the last `func` invocation.
    	     *
    	     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
    	     * on the trailing edge of the timeout only if the debounced function is
    	     * invoked more than once during the `wait` timeout.
    	     *
    	     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
    	     * for details over the differences between `_.debounce` and `_.throttle`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Function
    	     * @param {Function} func The function to debounce.
    	     * @param {number} [wait=0] The number of milliseconds to delay.
    	     * @param {Object} [options={}] The options object.
    	     * @param {boolean} [options.leading=false]
    	     *  Specify invoking on the leading edge of the timeout.
    	     * @param {number} [options.maxWait]
    	     *  The maximum time `func` is allowed to be delayed before it's invoked.
    	     * @param {boolean} [options.trailing=true]
    	     *  Specify invoking on the trailing edge of the timeout.
    	     * @returns {Function} Returns the new debounced function.
    	     * @example
    	     *
    	     * // Avoid costly calculations while the window size is in flux.
    	     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
    	     *
    	     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
    	     * jQuery(element).on('click', _.debounce(sendMail, 300, {
    	     *   'leading': true,
    	     *   'trailing': false
    	     * }));
    	     *
    	     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
    	     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
    	     * var source = new EventSource('/stream');
    	     * jQuery(source).on('message', debounced);
    	     *
    	     * // Cancel the trailing debounced invocation.
    	     * jQuery(window).on('popstate', debounced.cancel);
    	     */
    	    function debounce(func, wait, options) {
    	      var lastArgs,
    	          lastThis,
    	          maxWait,
    	          result,
    	          timerId,
    	          lastCallTime,
    	          lastInvokeTime = 0,
    	          leading = false,
    	          maxing = false,
    	          trailing = true;
    
    	      if (typeof func != 'function') {
    	        throw new TypeError(FUNC_ERROR_TEXT);
    	      }
    	      wait = toNumber(wait) || 0;
    	      if (isObject(options)) {
    	        leading = !!options.leading;
    	        maxing = 'maxWait' in options;
    	        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
    	        trailing = 'trailing' in options ? !!options.trailing : trailing;
    	      }
    
    	      function invokeFunc(time) {
    	        var args = lastArgs,
    	            thisArg = lastThis;
    
    	        lastArgs = lastThis = undefined;
    	        lastInvokeTime = time;
    	        result = func.apply(thisArg, args);
    	        return result;
    	      }
    
    	      function leadingEdge(time) {
    	        // Reset any `maxWait` timer.
    	        lastInvokeTime = time;
    	        // Start the timer for the trailing edge.
    	        timerId = setTimeout(timerExpired, wait);
    	        // Invoke the leading edge.
    	        return leading ? invokeFunc(time) : result;
    	      }
    
    	      function remainingWait(time) {
    	        var timeSinceLastCall = time - lastCallTime,
    	            timeSinceLastInvoke = time - lastInvokeTime,
    	            result = wait - timeSinceLastCall;
    
    	        return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
    	      }
    
    	      function shouldInvoke(time) {
    	        var timeSinceLastCall = time - lastCallTime,
    	            timeSinceLastInvoke = time - lastInvokeTime;
    
    	        // Either this is the first call, activity has stopped and we're at the
    	        // trailing edge, the system time has gone backwards and we're treating
    	        // it as the trailing edge, or we've hit the `maxWait` limit.
    	        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
    	          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
    	      }
    
    	      function timerExpired() {
    	        var time = now();
    	        if (shouldInvoke(time)) {
    	          return trailingEdge(time);
    	        }
    	        // Restart the timer.
    	        timerId = setTimeout(timerExpired, remainingWait(time));
    	      }
    
    	      function trailingEdge(time) {
    	        timerId = undefined;
    
    	        // Only invoke if we have `lastArgs` which means `func` has been
    	        // debounced at least once.
    	        if (trailing && lastArgs) {
    	          return invokeFunc(time);
    	        }
    	        lastArgs = lastThis = undefined;
    	        return result;
    	      }
    
    	      function cancel() {
    	        lastInvokeTime = 0;
    	        lastArgs = lastCallTime = lastThis = timerId = undefined;
    	      }
    
    	      function flush() {
    	        return timerId === undefined ? result : trailingEdge(now());
    	      }
    
    	      function debounced() {
    	        var time = now(),
    	            isInvoking = shouldInvoke(time);
    
    	        lastArgs = arguments;
    	        lastThis = this;
    	        lastCallTime = time;
    
    	        if (isInvoking) {
    	          if (timerId === undefined) {
    	            return leadingEdge(lastCallTime);
    	          }
    	          if (maxing) {
    	            // Handle invocations in a tight loop.
    	            timerId = setTimeout(timerExpired, wait);
    	            return invokeFunc(lastCallTime);
    	          }
    	        }
    	        if (timerId === undefined) {
    	          timerId = setTimeout(timerExpired, wait);
    	        }
    	        return result;
    	      }
    	      debounced.cancel = cancel;
    	      debounced.flush = flush;
    	      return debounced;
    	    }
    
    	    /**
    	     * Defers invoking the `func` until the current call stack has cleared. Any
    	     * additional arguments are provided to `func` when it's invoked.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Function
    	     * @param {Function} func The function to defer.
    	     * @param {...*} [args] The arguments to invoke `func` with.
    	     * @returns {number} Returns the timer id.
    	     * @example
    	     *
    	     * _.defer(function(text) {
    	     *   console.log(text);
    	     * }, 'deferred');
    	     * // => Logs 'deferred' after one or more milliseconds.
    	     */
    	    var defer = rest(function(func, args) {
    	      return baseDelay(func, 1, args);
    	    });
    
    	    /**
    	     * Invokes `func` after `wait` milliseconds. Any additional arguments are
    	     * provided to `func` when it's invoked.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Function
    	     * @param {Function} func The function to delay.
    	     * @param {number} wait The number of milliseconds to delay invocation.
    	     * @param {...*} [args] The arguments to invoke `func` with.
    	     * @returns {number} Returns the timer id.
    	     * @example
    	     *
    	     * _.delay(function(text) {
    	     *   console.log(text);
    	     * }, 1000, 'later');
    	     * // => Logs 'later' after one second.
    	     */
    	    var delay = rest(function(func, wait, args) {
    	      return baseDelay(func, toNumber(wait) || 0, args);
    	    });
    
    	    /**
    	     * Creates a function that invokes `func` with arguments reversed.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Function
    	     * @param {Function} func The function to flip arguments for.
    	     * @returns {Function} Returns the new flipped function.
    	     * @example
    	     *
    	     * var flipped = _.flip(function() {
    	     *   return _.toArray(arguments);
    	     * });
    	     *
    	     * flipped('a', 'b', 'c', 'd');
    	     * // => ['d', 'c', 'b', 'a']
    	     */
    	    function flip(func) {
    	      return createWrapper(func, FLIP_FLAG);
    	    }
    
    	    /**
    	     * Creates a function that memoizes the result of `func`. If `resolver` is
    	     * provided, it determines the cache key for storing the result based on the
    	     * arguments provided to the memoized function. By default, the first argument
    	     * provided to the memoized function is used as the map cache key. The `func`
    	     * is invoked with the `this` binding of the memoized function.
    	     *
    	     * **Note:** The cache is exposed as the `cache` property on the memoized
    	     * function. Its creation may be customized by replacing the `_.memoize.Cache`
    	     * constructor with one whose instances implement the
    	     * [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
    	     * method interface of `delete`, `get`, `has`, and `set`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Function
    	     * @param {Function} func The function to have its output memoized.
    	     * @param {Function} [resolver] The function to resolve the cache key.
    	     * @returns {Function} Returns the new memoized function.
    	     * @example
    	     *
    	     * var object = { 'a': 1, 'b': 2 };
    	     * var other = { 'c': 3, 'd': 4 };
    	     *
    	     * var values = _.memoize(_.values);
    	     * values(object);
    	     * // => [1, 2]
    	     *
    	     * values(other);
    	     * // => [3, 4]
    	     *
    	     * object.a = 2;
    	     * values(object);
    	     * // => [1, 2]
    	     *
    	     * // Modify the result cache.
    	     * values.cache.set(object, ['a', 'b']);
    	     * values(object);
    	     * // => ['a', 'b']
    	     *
    	     * // Replace `_.memoize.Cache`.
    	     * _.memoize.Cache = WeakMap;
    	     */
    	    function memoize(func, resolver) {
    	      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
    	        throw new TypeError(FUNC_ERROR_TEXT);
    	      }
    	      var memoized = function() {
    	        var args = arguments,
    	            key = resolver ? resolver.apply(this, args) : args[0],
    	            cache = memoized.cache;
    
    	        if (cache.has(key)) {
    	          return cache.get(key);
    	        }
    	        var result = func.apply(this, args);
    	        memoized.cache = cache.set(key, result);
    	        return result;
    	      };
    	      memoized.cache = new (memoize.Cache || MapCache);
    	      return memoized;
    	    }
    
    	    // Assign cache to `_.memoize`.
    	    memoize.Cache = MapCache;
    
    	    /**
    	     * Creates a function that negates the result of the predicate `func`. The
    	     * `func` predicate is invoked with the `this` binding and arguments of the
    	     * created function.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Function
    	     * @param {Function} predicate The predicate to negate.
    	     * @returns {Function} Returns the new negated function.
    	     * @example
    	     *
    	     * function isEven(n) {
    	     *   return n % 2 == 0;
    	     * }
    	     *
    	     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
    	     * // => [1, 3, 5]
    	     */
    	    function negate(predicate) {
    	      if (typeof predicate != 'function') {
    	        throw new TypeError(FUNC_ERROR_TEXT);
    	      }
    	      return function() {
    	        return !predicate.apply(this, arguments);
    	      };
    	    }
    
    	    /**
    	     * Creates a function that is restricted to invoking `func` once. Repeat calls
    	     * to the function return the value of the first invocation. The `func` is
    	     * invoked with the `this` binding and arguments of the created function.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Function
    	     * @param {Function} func The function to restrict.
    	     * @returns {Function} Returns the new restricted function.
    	     * @example
    	     *
    	     * var initialize = _.once(createApplication);
    	     * initialize();
    	     * initialize();
    	     * // `initialize` invokes `createApplication` once
    	     */
    	    function once(func) {
    	      return before(2, func);
    	    }
    
    	    /**
    	     * Creates a function that invokes `func` with arguments transformed by
    	     * corresponding `transforms`.
    	     *
    	     * @static
    	     * @since 4.0.0
    	     * @memberOf _
    	     * @category Function
    	     * @param {Function} func The function to wrap.
    	     * @param {...(Array|Array[]|Function|Function[]|Object|Object[]|string|string[])}
    	     *  [transforms[_.identity]] The functions to transform.
    	     * @returns {Function} Returns the new function.
    	     * @example
    	     *
    	     * function doubled(n) {
    	     *   return n * 2;
    	     * }
    	     *
    	     * function square(n) {
    	     *   return n * n;
    	     * }
    	     *
    	     * var func = _.overArgs(function(x, y) {
    	     *   return [x, y];
    	     * }, [square, doubled]);
    	     *
    	     * func(9, 3);
    	     * // => [81, 6]
    	     *
    	     * func(10, 5);
    	     * // => [100, 10]
    	     */
    	    var overArgs = rest(function(func, transforms) {
    	      transforms = (transforms.length == 1 && isArray(transforms[0]))
    	        ? arrayMap(transforms[0], baseUnary(getIteratee()))
    	        : arrayMap(baseFlatten(transforms, 1, isFlattenableIteratee), baseUnary(getIteratee()));
    
    	      var funcsLength = transforms.length;
    	      return rest(function(args) {
    	        var index = -1,
    	            length = nativeMin(args.length, funcsLength);
    
    	        while (++index < length) {
    	          args[index] = transforms[index].call(this, args[index]);
    	        }
    	        return apply(func, this, args);
    	      });
    	    });
    
    	    /**
    	     * Creates a function that invokes `func` with `partials` prepended to the
    	     * arguments it receives. This method is like `_.bind` except it does **not**
    	     * alter the `this` binding.
    	     *
    	     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
    	     * builds, may be used as a placeholder for partially applied arguments.
    	     *
    	     * **Note:** This method doesn't set the "length" property of partially
    	     * applied functions.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.2.0
    	     * @category Function
    	     * @param {Function} func The function to partially apply arguments to.
    	     * @param {...*} [partials] The arguments to be partially applied.
    	     * @returns {Function} Returns the new partially applied function.
    	     * @example
    	     *
    	     * var greet = function(greeting, name) {
    	     *   return greeting + ' ' + name;
    	     * };
    	     *
    	     * var sayHelloTo = _.partial(greet, 'hello');
    	     * sayHelloTo('fred');
    	     * // => 'hello fred'
    	     *
    	     * // Partially applied with placeholders.
    	     * var greetFred = _.partial(greet, _, 'fred');
    	     * greetFred('hi');
    	     * // => 'hi fred'
    	     */
    	    var partial = rest(function(func, partials) {
    	      var holders = replaceHolders(partials, getHolder(partial));
    	      return createWrapper(func, PARTIAL_FLAG, undefined, partials, holders);
    	    });
    
    	    /**
    	     * This method is like `_.partial` except that partially applied arguments
    	     * are appended to the arguments it receives.
    	     *
    	     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
    	     * builds, may be used as a placeholder for partially applied arguments.
    	     *
    	     * **Note:** This method doesn't set the "length" property of partially
    	     * applied functions.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 1.0.0
    	     * @category Function
    	     * @param {Function} func The function to partially apply arguments to.
    	     * @param {...*} [partials] The arguments to be partially applied.
    	     * @returns {Function} Returns the new partially applied function.
    	     * @example
    	     *
    	     * var greet = function(greeting, name) {
    	     *   return greeting + ' ' + name;
    	     * };
    	     *
    	     * var greetFred = _.partialRight(greet, 'fred');
    	     * greetFred('hi');
    	     * // => 'hi fred'
    	     *
    	     * // Partially applied with placeholders.
    	     * var sayHelloTo = _.partialRight(greet, 'hello', _);
    	     * sayHelloTo('fred');
    	     * // => 'hello fred'
    	     */
    	    var partialRight = rest(function(func, partials) {
    	      var holders = replaceHolders(partials, getHolder(partialRight));
    	      return createWrapper(func, PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    	    });
    
    	    /**
    	     * Creates a function that invokes `func` with arguments arranged according
    	     * to the specified `indexes` where the argument value at the first index is
    	     * provided as the first argument, the argument value at the second index is
    	     * provided as the second argument, and so on.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Function
    	     * @param {Function} func The function to rearrange arguments for.
    	     * @param {...(number|number[])} indexes The arranged argument indexes.
    	     * @returns {Function} Returns the new function.
    	     * @example
    	     *
    	     * var rearged = _.rearg(function(a, b, c) {
    	     *   return [a, b, c];
    	     * }, [2, 0, 1]);
    	     *
    	     * rearged('b', 'c', 'a')
    	     * // => ['a', 'b', 'c']
    	     */
    	    var rearg = rest(function(func, indexes) {
    	      return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes, 1));
    	    });
    
    	    /**
    	     * Creates a function that invokes `func` with the `this` binding of the
    	     * created function and arguments from `start` and beyond provided as
    	     * an array.
    	     *
    	     * **Note:** This method is based on the
    	     * [rest parameter](https://mdn.io/rest_parameters).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Function
    	     * @param {Function} func The function to apply a rest parameter to.
    	     * @param {number} [start=func.length-1] The start position of the rest parameter.
    	     * @returns {Function} Returns the new function.
    	     * @example
    	     *
    	     * var say = _.rest(function(what, names) {
    	     *   return what + ' ' + _.initial(names).join(', ') +
    	     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
    	     * });
    	     *
    	     * say('hello', 'fred', 'barney', 'pebbles');
    	     * // => 'hello fred, barney, & pebbles'
    	     */
    	    function rest(func, start) {
    	      if (typeof func != 'function') {
    	        throw new TypeError(FUNC_ERROR_TEXT);
    	      }
    	      start = nativeMax(start === undefined ? (func.length - 1) : toInteger(start), 0);
    	      return function() {
    	        var args = arguments,
    	            index = -1,
    	            length = nativeMax(args.length - start, 0),
    	            array = Array(length);
    
    	        while (++index < length) {
    	          array[index] = args[start + index];
    	        }
    	        switch (start) {
    	          case 0: return func.call(this, array);
    	          case 1: return func.call(this, args[0], array);
    	          case 2: return func.call(this, args[0], args[1], array);
    	        }
    	        var otherArgs = Array(start + 1);
    	        index = -1;
    	        while (++index < start) {
    	          otherArgs[index] = args[index];
    	        }
    	        otherArgs[start] = array;
    	        return apply(func, this, otherArgs);
    	      };
    	    }
    
    	    /**
    	     * Creates a function that invokes `func` with the `this` binding of the
    	     * create function and an array of arguments much like
    	     * [`Function#apply`](http://www.ecma-international.org/ecma-262/6.0/#sec-function.prototype.apply).
    	     *
    	     * **Note:** This method is based on the
    	     * [spread operator](https://mdn.io/spread_operator).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.2.0
    	     * @category Function
    	     * @param {Function} func The function to spread arguments over.
    	     * @param {number} [start=0] The start position of the spread.
    	     * @returns {Function} Returns the new function.
    	     * @example
    	     *
    	     * var say = _.spread(function(who, what) {
    	     *   return who + ' says ' + what;
    	     * });
    	     *
    	     * say(['fred', 'hello']);
    	     * // => 'fred says hello'
    	     *
    	     * var numbers = Promise.all([
    	     *   Promise.resolve(40),
    	     *   Promise.resolve(36)
    	     * ]);
    	     *
    	     * numbers.then(_.spread(function(x, y) {
    	     *   return x + y;
    	     * }));
    	     * // => a Promise of 76
    	     */
    	    function spread(func, start) {
    	      if (typeof func != 'function') {
    	        throw new TypeError(FUNC_ERROR_TEXT);
    	      }
    	      start = start === undefined ? 0 : nativeMax(toInteger(start), 0);
    	      return rest(function(args) {
    	        var array = args[start],
    	            otherArgs = castSlice(args, 0, start);
    
    	        if (array) {
    	          arrayPush(otherArgs, array);
    	        }
    	        return apply(func, this, otherArgs);
    	      });
    	    }
    
    	    /**
    	     * Creates a throttled function that only invokes `func` at most once per
    	     * every `wait` milliseconds. The throttled function comes with a `cancel`
    	     * method to cancel delayed `func` invocations and a `flush` method to
    	     * immediately invoke them. Provide an options object to indicate whether
    	     * `func` should be invoked on the leading and/or trailing edge of the `wait`
    	     * timeout. The `func` is invoked with the last arguments provided to the
    	     * throttled function. Subsequent calls to the throttled function return the
    	     * result of the last `func` invocation.
    	     *
    	     * **Note:** If `leading` and `trailing` options are `true`, `func` is
    	     * invoked on the trailing edge of the timeout only if the throttled function
    	     * is invoked more than once during the `wait` timeout.
    	     *
    	     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
    	     * for details over the differences between `_.throttle` and `_.debounce`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Function
    	     * @param {Function} func The function to throttle.
    	     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
    	     * @param {Object} [options={}] The options object.
    	     * @param {boolean} [options.leading=true]
    	     *  Specify invoking on the leading edge of the timeout.
    	     * @param {boolean} [options.trailing=true]
    	     *  Specify invoking on the trailing edge of the timeout.
    	     * @returns {Function} Returns the new throttled function.
    	     * @example
    	     *
    	     * // Avoid excessively updating the position while scrolling.
    	     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
    	     *
    	     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
    	     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
    	     * jQuery(element).on('click', throttled);
    	     *
    	     * // Cancel the trailing throttled invocation.
    	     * jQuery(window).on('popstate', throttled.cancel);
    	     */
    	    function throttle(func, wait, options) {
    	      var leading = true,
    	          trailing = true;
    
    	      if (typeof func != 'function') {
    	        throw new TypeError(FUNC_ERROR_TEXT);
    	      }
    	      if (isObject(options)) {
    	        leading = 'leading' in options ? !!options.leading : leading;
    	        trailing = 'trailing' in options ? !!options.trailing : trailing;
    	      }
    	      return debounce(func, wait, {
    	        'leading': leading,
    	        'maxWait': wait,
    	        'trailing': trailing
    	      });
    	    }
    
    	    /**
    	     * Creates a function that accepts up to one argument, ignoring any
    	     * additional arguments.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Function
    	     * @param {Function} func The function to cap arguments for.
    	     * @returns {Function} Returns the new capped function.
    	     * @example
    	     *
    	     * _.map(['6', '8', '10'], _.unary(parseInt));
    	     * // => [6, 8, 10]
    	     */
    	    function unary(func) {
    	      return ary(func, 1);
    	    }
    
    	    /**
    	     * Creates a function that provides `value` to the wrapper function as its
    	     * first argument. Any additional arguments provided to the function are
    	     * appended to those provided to the wrapper function. The wrapper is invoked
    	     * with the `this` binding of the created function.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Function
    	     * @param {*} value The value to wrap.
    	     * @param {Function} [wrapper=identity] The wrapper function.
    	     * @returns {Function} Returns the new function.
    	     * @example
    	     *
    	     * var p = _.wrap(_.escape, function(func, text) {
    	     *   return '<p>' + func(text) + '</p>';
    	     * });
    	     *
    	     * p('fred, barney, & pebbles');
    	     * // => '<p>fred, barney, &amp; pebbles</p>'
    	     */
    	    function wrap(value, wrapper) {
    	      wrapper = wrapper == null ? identity : wrapper;
    	      return partial(wrapper, value);
    	    }
    
    	    /*------------------------------------------------------------------------*/
    
    	    /**
    	     * Casts `value` as an array if it's not one.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.4.0
    	     * @category Lang
    	     * @param {*} value The value to inspect.
    	     * @returns {Array} Returns the cast array.
    	     * @example
    	     *
    	     * _.castArray(1);
    	     * // => [1]
    	     *
    	     * _.castArray({ 'a': 1 });
    	     * // => [{ 'a': 1 }]
    	     *
    	     * _.castArray('abc');
    	     * // => ['abc']
    	     *
    	     * _.castArray(null);
    	     * // => [null]
    	     *
    	     * _.castArray(undefined);
    	     * // => [undefined]
    	     *
    	     * _.castArray();
    	     * // => []
    	     *
    	     * var array = [1, 2, 3];
    	     * console.log(_.castArray(array) === array);
    	     * // => true
    	     */
    	    function castArray() {
    	      if (!arguments.length) {
    	        return [];
    	      }
    	      var value = arguments[0];
    	      return isArray(value) ? value : [value];
    	    }
    
    	    /**
    	     * Creates a shallow clone of `value`.
    	     *
    	     * **Note:** This method is loosely based on the
    	     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
    	     * and supports cloning arrays, array buffers, booleans, date objects, maps,
    	     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
    	     * arrays. The own enumerable properties of `arguments` objects are cloned
    	     * as plain objects. An empty object is returned for uncloneable values such
    	     * as error objects, functions, DOM nodes, and WeakMaps.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to clone.
    	     * @returns {*} Returns the cloned value.
    	     * @see _.cloneDeep
    	     * @example
    	     *
    	     * var objects = [{ 'a': 1 }, { 'b': 2 }];
    	     *
    	     * var shallow = _.clone(objects);
    	     * console.log(shallow[0] === objects[0]);
    	     * // => true
    	     */
    	    function clone(value) {
    	      return baseClone(value, false, true);
    	    }
    
    	    /**
    	     * This method is like `_.clone` except that it accepts `customizer` which
    	     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
    	     * cloning is handled by the method instead. The `customizer` is invoked with
    	     * up to four arguments; (value [, index|key, object, stack]).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to clone.
    	     * @param {Function} [customizer] The function to customize cloning.
    	     * @returns {*} Returns the cloned value.
    	     * @see _.cloneDeepWith
    	     * @example
    	     *
    	     * function customizer(value) {
    	     *   if (_.isElement(value)) {
    	     *     return value.cloneNode(false);
    	     *   }
    	     * }
    	     *
    	     * var el = _.cloneWith(document.body, customizer);
    	     *
    	     * console.log(el === document.body);
    	     * // => false
    	     * console.log(el.nodeName);
    	     * // => 'BODY'
    	     * console.log(el.childNodes.length);
    	     * // => 0
    	     */
    	    function cloneWith(value, customizer) {
    	      return baseClone(value, false, true, customizer);
    	    }
    
    	    /**
    	     * This method is like `_.clone` except that it recursively clones `value`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 1.0.0
    	     * @category Lang
    	     * @param {*} value The value to recursively clone.
    	     * @returns {*} Returns the deep cloned value.
    	     * @see _.clone
    	     * @example
    	     *
    	     * var objects = [{ 'a': 1 }, { 'b': 2 }];
    	     *
    	     * var deep = _.cloneDeep(objects);
    	     * console.log(deep[0] === objects[0]);
    	     * // => false
    	     */
    	    function cloneDeep(value) {
    	      return baseClone(value, true, true);
    	    }
    
    	    /**
    	     * This method is like `_.cloneWith` except that it recursively clones `value`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to recursively clone.
    	     * @param {Function} [customizer] The function to customize cloning.
    	     * @returns {*} Returns the deep cloned value.
    	     * @see _.cloneWith
    	     * @example
    	     *
    	     * function customizer(value) {
    	     *   if (_.isElement(value)) {
    	     *     return value.cloneNode(true);
    	     *   }
    	     * }
    	     *
    	     * var el = _.cloneDeepWith(document.body, customizer);
    	     *
    	     * console.log(el === document.body);
    	     * // => false
    	     * console.log(el.nodeName);
    	     * // => 'BODY'
    	     * console.log(el.childNodes.length);
    	     * // => 20
    	     */
    	    function cloneDeepWith(value, customizer) {
    	      return baseClone(value, true, true, customizer);
    	    }
    
    	    /**
    	     * Performs a
    	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
    	     * comparison between two values to determine if they are equivalent.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to compare.
    	     * @param {*} other The other value to compare.
    	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
    	     * @example
    	     *
    	     * var object = { 'user': 'fred' };
    	     * var other = { 'user': 'fred' };
    	     *
    	     * _.eq(object, object);
    	     * // => true
    	     *
    	     * _.eq(object, other);
    	     * // => false
    	     *
    	     * _.eq('a', 'a');
    	     * // => true
    	     *
    	     * _.eq('a', Object('a'));
    	     * // => false
    	     *
    	     * _.eq(NaN, NaN);
    	     * // => true
    	     */
    	    function eq(value, other) {
    	      return value === other || (value !== value && other !== other);
    	    }
    
    	    /**
    	     * Checks if `value` is greater than `other`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.9.0
    	     * @category Lang
    	     * @param {*} value The value to compare.
    	     * @param {*} other The other value to compare.
    	     * @returns {boolean} Returns `true` if `value` is greater than `other`,
    	     *  else `false`.
    	     * @see _.lt
    	     * @example
    	     *
    	     * _.gt(3, 1);
    	     * // => true
    	     *
    	     * _.gt(3, 3);
    	     * // => false
    	     *
    	     * _.gt(1, 3);
    	     * // => false
    	     */
    	    var gt = createRelationalOperation(baseGt);
    
    	    /**
    	     * Checks if `value` is greater than or equal to `other`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.9.0
    	     * @category Lang
    	     * @param {*} value The value to compare.
    	     * @param {*} other The other value to compare.
    	     * @returns {boolean} Returns `true` if `value` is greater than or equal to
    	     *  `other`, else `false`.
    	     * @see _.lte
    	     * @example
    	     *
    	     * _.gte(3, 1);
    	     * // => true
    	     *
    	     * _.gte(3, 3);
    	     * // => true
    	     *
    	     * _.gte(1, 3);
    	     * // => false
    	     */
    	    var gte = createRelationalOperation(function(value, other) {
    	      return value >= other;
    	    });
    
    	    /**
    	     * Checks if `value` is likely an `arguments` object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is correctly classified,
    	     *  else `false`.
    	     * @example
    	     *
    	     * _.isArguments(function() { return arguments; }());
    	     * // => true
    	     *
    	     * _.isArguments([1, 2, 3]);
    	     * // => false
    	     */
    	    function isArguments(value) {
    	      // Safari 8.1 incorrectly makes `arguments.callee` enumerable in strict mode.
    	      return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
    	        (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
    	    }
    
    	    /**
    	     * Checks if `value` is classified as an `Array` object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @type {Function}
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is correctly classified,
    	     *  else `false`.
    	     * @example
    	     *
    	     * _.isArray([1, 2, 3]);
    	     * // => true
    	     *
    	     * _.isArray(document.body.children);
    	     * // => false
    	     *
    	     * _.isArray('abc');
    	     * // => false
    	     *
    	     * _.isArray(_.noop);
    	     * // => false
    	     */
    	    var isArray = Array.isArray;
    
    	    /**
    	     * Checks if `value` is classified as an `ArrayBuffer` object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.3.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is correctly classified,
    	     *  else `false`.
    	     * @example
    	     *
    	     * _.isArrayBuffer(new ArrayBuffer(2));
    	     * // => true
    	     *
    	     * _.isArrayBuffer(new Array(2));
    	     * // => false
    	     */
    	    function isArrayBuffer(value) {
    	      return isObjectLike(value) && objectToString.call(value) == arrayBufferTag;
    	    }
    
    	    /**
    	     * Checks if `value` is array-like. A value is considered array-like if it's
    	     * not a function and has a `value.length` that's an integer greater than or
    	     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
    	     * @example
    	     *
    	     * _.isArrayLike([1, 2, 3]);
    	     * // => true
    	     *
    	     * _.isArrayLike(document.body.children);
    	     * // => true
    	     *
    	     * _.isArrayLike('abc');
    	     * // => true
    	     *
    	     * _.isArrayLike(_.noop);
    	     * // => false
    	     */
    	    function isArrayLike(value) {
    	      return value != null && isLength(getLength(value)) && !isFunction(value);
    	    }
    
    	    /**
    	     * This method is like `_.isArrayLike` except that it also checks if `value`
    	     * is an object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is an array-like object,
    	     *  else `false`.
    	     * @example
    	     *
    	     * _.isArrayLikeObject([1, 2, 3]);
    	     * // => true
    	     *
    	     * _.isArrayLikeObject(document.body.children);
    	     * // => true
    	     *
    	     * _.isArrayLikeObject('abc');
    	     * // => false
    	     *
    	     * _.isArrayLikeObject(_.noop);
    	     * // => false
    	     */
    	    function isArrayLikeObject(value) {
    	      return isObjectLike(value) && isArrayLike(value);
    	    }
    
    	    /**
    	     * Checks if `value` is classified as a boolean primitive or object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is correctly classified,
    	     *  else `false`.
    	     * @example
    	     *
    	     * _.isBoolean(false);
    	     * // => true
    	     *
    	     * _.isBoolean(null);
    	     * // => false
    	     */
    	    function isBoolean(value) {
    	      return value === true || value === false ||
    	        (isObjectLike(value) && objectToString.call(value) == boolTag);
    	    }
    
    	    /**
    	     * Checks if `value` is a buffer.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.3.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
    	     * @example
    	     *
    	     * _.isBuffer(new Buffer(2));
    	     * // => true
    	     *
    	     * _.isBuffer(new Uint8Array(2));
    	     * // => false
    	     */
    	    var isBuffer = !Buffer ? stubFalse : function(value) {
    	      return value instanceof Buffer;
    	    };
    
    	    /**
    	     * Checks if `value` is classified as a `Date` object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is correctly classified,
    	     *  else `false`.
    	     * @example
    	     *
    	     * _.isDate(new Date);
    	     * // => true
    	     *
    	     * _.isDate('Mon April 23 2012');
    	     * // => false
    	     */
    	    function isDate(value) {
    	      return isObjectLike(value) && objectToString.call(value) == dateTag;
    	    }
    
    	    /**
    	     * Checks if `value` is likely a DOM element.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a DOM element,
    	     *  else `false`.
    	     * @example
    	     *
    	     * _.isElement(document.body);
    	     * // => true
    	     *
    	     * _.isElement('<body>');
    	     * // => false
    	     */
    	    function isElement(value) {
    	      return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);
    	    }
    
    	    /**
    	     * Checks if `value` is an empty object, collection, map, or set.
    	     *
    	     * Objects are considered empty if they have no own enumerable string keyed
    	     * properties.
    	     *
    	     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
    	     * jQuery-like collections are considered empty if they have a `length` of `0`.
    	     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
    	     * @example
    	     *
    	     * _.isEmpty(null);
    	     * // => true
    	     *
    	     * _.isEmpty(true);
    	     * // => true
    	     *
    	     * _.isEmpty(1);
    	     * // => true
    	     *
    	     * _.isEmpty([1, 2, 3]);
    	     * // => false
    	     *
    	     * _.isEmpty({ 'a': 1 });
    	     * // => false
    	     */
    	    function isEmpty(value) {
    	      if (isArrayLike(value) &&
    	          (isArray(value) || isString(value) || isFunction(value.splice) ||
    	            isArguments(value) || isBuffer(value))) {
    	        return !value.length;
    	      }
    	      if (isObjectLike(value)) {
    	        var tag = getTag(value);
    	        if (tag == mapTag || tag == setTag) {
    	          return !value.size;
    	        }
    	      }
    	      for (var key in value) {
    	        if (hasOwnProperty.call(value, key)) {
    	          return false;
    	        }
    	      }
    	      return !(nonEnumShadows && keys(value).length);
    	    }
    
    	    /**
    	     * Performs a deep comparison between two values to determine if they are
    	     * equivalent.
    	     *
    	     * **Note:** This method supports comparing arrays, array buffers, booleans,
    	     * date objects, error objects, maps, numbers, `Object` objects, regexes,
    	     * sets, strings, symbols, and typed arrays. `Object` objects are compared
    	     * by their own, not inherited, enumerable properties. Functions and DOM
    	     * nodes are **not** supported.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to compare.
    	     * @param {*} other The other value to compare.
    	     * @returns {boolean} Returns `true` if the values are equivalent,
    	     *  else `false`.
    	     * @example
    	     *
    	     * var object = { 'user': 'fred' };
    	     * var other = { 'user': 'fred' };
    	     *
    	     * _.isEqual(object, other);
    	     * // => true
    	     *
    	     * object === other;
    	     * // => false
    	     */
    	    function isEqual(value, other) {
    	      return baseIsEqual(value, other);
    	    }
    
    	    /**
    	     * This method is like `_.isEqual` except that it accepts `customizer` which
    	     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
    	     * are handled by the method instead. The `customizer` is invoked with up to
    	     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to compare.
    	     * @param {*} other The other value to compare.
    	     * @param {Function} [customizer] The function to customize comparisons.
    	     * @returns {boolean} Returns `true` if the values are equivalent,
    	     *  else `false`.
    	     * @example
    	     *
    	     * function isGreeting(value) {
    	     *   return /^h(?:i|ello)$/.test(value);
    	     * }
    	     *
    	     * function customizer(objValue, othValue) {
    	     *   if (isGreeting(objValue) && isGreeting(othValue)) {
    	     *     return true;
    	     *   }
    	     * }
    	     *
    	     * var array = ['hello', 'goodbye'];
    	     * var other = ['hi', 'goodbye'];
    	     *
    	     * _.isEqualWith(array, other, customizer);
    	     * // => true
    	     */
    	    function isEqualWith(value, other, customizer) {
    	      customizer = typeof customizer == 'function' ? customizer : undefined;
    	      var result = customizer ? customizer(value, other) : undefined;
    	      return result === undefined ? baseIsEqual(value, other, customizer) : !!result;
    	    }
    
    	    /**
    	     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
    	     * `SyntaxError`, `TypeError`, or `URIError` object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is an error object,
    	     *  else `false`.
    	     * @example
    	     *
    	     * _.isError(new Error);
    	     * // => true
    	     *
    	     * _.isError(Error);
    	     * // => false
    	     */
    	    function isError(value) {
    	      if (!isObjectLike(value)) {
    	        return false;
    	      }
    	      return (objectToString.call(value) == errorTag) ||
    	        (typeof value.message == 'string' && typeof value.name == 'string');
    	    }
    
    	    /**
    	     * Checks if `value` is a finite primitive number.
    	     *
    	     * **Note:** This method is based on
    	     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a finite number,
    	     *  else `false`.
    	     * @example
    	     *
    	     * _.isFinite(3);
    	     * // => true
    	     *
    	     * _.isFinite(Number.MIN_VALUE);
    	     * // => true
    	     *
    	     * _.isFinite(Infinity);
    	     * // => false
    	     *
    	     * _.isFinite('3');
    	     * // => false
    	     */
    	    function isFinite(value) {
    	      return typeof value == 'number' && nativeIsFinite(value);
    	    }
    
    	    /**
    	     * Checks if `value` is classified as a `Function` object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is correctly classified,
    	     *  else `false`.
    	     * @example
    	     *
    	     * _.isFunction(_);
    	     * // => true
    	     *
    	     * _.isFunction(/abc/);
    	     * // => false
    	     */
    	    function isFunction(value) {
    	      // The use of `Object#toString` avoids issues with the `typeof` operator
    	      // in Safari 8 which returns 'object' for typed array and weak map constructors,
    	      // and PhantomJS 1.9 which returns 'function' for `NodeList` instances.
    	      var tag = isObject(value) ? objectToString.call(value) : '';
    	      return tag == funcTag || tag == genTag;
    	    }
    
    	    /**
    	     * Checks if `value` is an integer.
    	     *
    	     * **Note:** This method is based on
    	     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
    	     * @example
    	     *
    	     * _.isInteger(3);
    	     * // => true
    	     *
    	     * _.isInteger(Number.MIN_VALUE);
    	     * // => false
    	     *
    	     * _.isInteger(Infinity);
    	     * // => false
    	     *
    	     * _.isInteger('3');
    	     * // => false
    	     */
    	    function isInteger(value) {
    	      return typeof value == 'number' && value == toInteger(value);
    	    }
    
    	    /**
    	     * Checks if `value` is a valid array-like length.
    	     *
    	     * **Note:** This function is loosely based on
    	     * [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a valid length,
    	     *  else `false`.
    	     * @example
    	     *
    	     * _.isLength(3);
    	     * // => true
    	     *
    	     * _.isLength(Number.MIN_VALUE);
    	     * // => false
    	     *
    	     * _.isLength(Infinity);
    	     * // => false
    	     *
    	     * _.isLength('3');
    	     * // => false
    	     */
    	    function isLength(value) {
    	      return typeof value == 'number' &&
    	        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    	    }
    
    	    /**
    	     * Checks if `value` is the
    	     * [language type](http://www.ecma-international.org/ecma-262/6.0/#sec-ecmascript-language-types)
    	     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
    	     * @example
    	     *
    	     * _.isObject({});
    	     * // => true
    	     *
    	     * _.isObject([1, 2, 3]);
    	     * // => true
    	     *
    	     * _.isObject(_.noop);
    	     * // => true
    	     *
    	     * _.isObject(null);
    	     * // => false
    	     */
    	    function isObject(value) {
    	      var type = typeof value;
    	      return !!value && (type == 'object' || type == 'function');
    	    }
    
    	    /**
    	     * Checks if `value` is object-like. A value is object-like if it's not `null`
    	     * and has a `typeof` result of "object".
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
    	     * @example
    	     *
    	     * _.isObjectLike({});
    	     * // => true
    	     *
    	     * _.isObjectLike([1, 2, 3]);
    	     * // => true
    	     *
    	     * _.isObjectLike(_.noop);
    	     * // => false
    	     *
    	     * _.isObjectLike(null);
    	     * // => false
    	     */
    	    function isObjectLike(value) {
    	      return !!value && typeof value == 'object';
    	    }
    
    	    /**
    	     * Checks if `value` is classified as a `Map` object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.3.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is correctly classified,
    	     *  else `false`.
    	     * @example
    	     *
    	     * _.isMap(new Map);
    	     * // => true
    	     *
    	     * _.isMap(new WeakMap);
    	     * // => false
    	     */
    	    function isMap(value) {
    	      return isObjectLike(value) && getTag(value) == mapTag;
    	    }
    
    	    /**
    	     * Performs a partial deep comparison between `object` and `source` to
    	     * determine if `object` contains equivalent property values. This method is
    	     * equivalent to a `_.matches` function when `source` is partially applied.
    	     *
    	     * **Note:** This method supports comparing the same values as `_.isEqual`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Lang
    	     * @param {Object} object The object to inspect.
    	     * @param {Object} source The object of property values to match.
    	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
    	     * @example
    	     *
    	     * var object = { 'user': 'fred', 'age': 40 };
    	     *
    	     * _.isMatch(object, { 'age': 40 });
    	     * // => true
    	     *
    	     * _.isMatch(object, { 'age': 36 });
    	     * // => false
    	     */
    	    function isMatch(object, source) {
    	      return object === source || baseIsMatch(object, source, getMatchData(source));
    	    }
    
    	    /**
    	     * This method is like `_.isMatch` except that it accepts `customizer` which
    	     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
    	     * are handled by the method instead. The `customizer` is invoked with five
    	     * arguments: (objValue, srcValue, index|key, object, source).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {Object} object The object to inspect.
    	     * @param {Object} source The object of property values to match.
    	     * @param {Function} [customizer] The function to customize comparisons.
    	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
    	     * @example
    	     *
    	     * function isGreeting(value) {
    	     *   return /^h(?:i|ello)$/.test(value);
    	     * }
    	     *
    	     * function customizer(objValue, srcValue) {
    	     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
    	     *     return true;
    	     *   }
    	     * }
    	     *
    	     * var object = { 'greeting': 'hello' };
    	     * var source = { 'greeting': 'hi' };
    	     *
    	     * _.isMatchWith(object, source, customizer);
    	     * // => true
    	     */
    	    function isMatchWith(object, source, customizer) {
    	      customizer = typeof customizer == 'function' ? customizer : undefined;
    	      return baseIsMatch(object, source, getMatchData(source), customizer);
    	    }
    
    	    /**
    	     * Checks if `value` is `NaN`.
    	     *
    	     * **Note:** This method is based on
    	     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
    	     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
    	     * `undefined` and other non-number values.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
    	     * @example
    	     *
    	     * _.isNaN(NaN);
    	     * // => true
    	     *
    	     * _.isNaN(new Number(NaN));
    	     * // => true
    	     *
    	     * isNaN(undefined);
    	     * // => true
    	     *
    	     * _.isNaN(undefined);
    	     * // => false
    	     */
    	    function isNaN(value) {
    	      // An `NaN` primitive is the only value that is not equal to itself.
    	      // Perform the `toStringTag` check first to avoid errors with some
    	      // ActiveX objects in IE.
    	      return isNumber(value) && value != +value;
    	    }
    
    	    /**
    	     * Checks if `value` is a pristine native function.
    	     *
    	     * **Note:** This method can't reliably detect native functions in the
    	     * presence of the `core-js` package because `core-js` circumvents this kind
    	     * of detection. Despite multiple requests, the `core-js` maintainer has made
    	     * it clear: any attempt to fix the detection will be obstructed. As a result,
    	     * we're left with little choice but to throw an error. Unfortunately, this
    	     * also affects packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
    	     * which rely on `core-js`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a native function,
    	     *  else `false`.
    	     * @example
    	     *
    	     * _.isNative(Array.prototype.push);
    	     * // => true
    	     *
    	     * _.isNative(_);
    	     * // => false
    	     */
    	    function isNative(value) {
    	      if (isMaskable(value)) {
    	        throw new Error('This method is not supported with `core-js`. Try https://github.com/es-shims.');
    	      }
    	      return baseIsNative(value);
    	    }
    
    	    /**
    	     * Checks if `value` is `null`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
    	     * @example
    	     *
    	     * _.isNull(null);
    	     * // => true
    	     *
    	     * _.isNull(void 0);
    	     * // => false
    	     */
    	    function isNull(value) {
    	      return value === null;
    	    }
    
    	    /**
    	     * Checks if `value` is `null` or `undefined`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
    	     * @example
    	     *
    	     * _.isNil(null);
    	     * // => true
    	     *
    	     * _.isNil(void 0);
    	     * // => true
    	     *
    	     * _.isNil(NaN);
    	     * // => false
    	     */
    	    function isNil(value) {
    	      return value == null;
    	    }
    
    	    /**
    	     * Checks if `value` is classified as a `Number` primitive or object.
    	     *
    	     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
    	     * classified as numbers, use the `_.isFinite` method.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is correctly classified,
    	     *  else `false`.
    	     * @example
    	     *
    	     * _.isNumber(3);
    	     * // => true
    	     *
    	     * _.isNumber(Number.MIN_VALUE);
    	     * // => true
    	     *
    	     * _.isNumber(Infinity);
    	     * // => true
    	     *
    	     * _.isNumber('3');
    	     * // => false
    	     */
    	    function isNumber(value) {
    	      return typeof value == 'number' ||
    	        (isObjectLike(value) && objectToString.call(value) == numberTag);
    	    }
    
    	    /**
    	     * Checks if `value` is a plain object, that is, an object created by the
    	     * `Object` constructor or one with a `[[Prototype]]` of `null`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.8.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a plain object,
    	     *  else `false`.
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = 1;
    	     * }
    	     *
    	     * _.isPlainObject(new Foo);
    	     * // => false
    	     *
    	     * _.isPlainObject([1, 2, 3]);
    	     * // => false
    	     *
    	     * _.isPlainObject({ 'x': 0, 'y': 0 });
    	     * // => true
    	     *
    	     * _.isPlainObject(Object.create(null));
    	     * // => true
    	     */
    	    function isPlainObject(value) {
    	      if (!isObjectLike(value) ||
    	          objectToString.call(value) != objectTag || isHostObject(value)) {
    	        return false;
    	      }
    	      var proto = getPrototype(value);
    	      if (proto === null) {
    	        return true;
    	      }
    	      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
    	      return (typeof Ctor == 'function' &&
    	        Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);
    	    }
    
    	    /**
    	     * Checks if `value` is classified as a `RegExp` object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is correctly classified,
    	     *  else `false`.
    	     * @example
    	     *
    	     * _.isRegExp(/abc/);
    	     * // => true
    	     *
    	     * _.isRegExp('/abc/');
    	     * // => false
    	     */
    	    function isRegExp(value) {
    	      return isObject(value) && objectToString.call(value) == regexpTag;
    	    }
    
    	    /**
    	     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
    	     * double precision number which isn't the result of a rounded unsafe integer.
    	     *
    	     * **Note:** This method is based on
    	     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a safe integer,
    	     *  else `false`.
    	     * @example
    	     *
    	     * _.isSafeInteger(3);
    	     * // => true
    	     *
    	     * _.isSafeInteger(Number.MIN_VALUE);
    	     * // => false
    	     *
    	     * _.isSafeInteger(Infinity);
    	     * // => false
    	     *
    	     * _.isSafeInteger('3');
    	     * // => false
    	     */
    	    function isSafeInteger(value) {
    	      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    	    }
    
    	    /**
    	     * Checks if `value` is classified as a `Set` object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.3.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is correctly classified,
    	     *  else `false`.
    	     * @example
    	     *
    	     * _.isSet(new Set);
    	     * // => true
    	     *
    	     * _.isSet(new WeakSet);
    	     * // => false
    	     */
    	    function isSet(value) {
    	      return isObjectLike(value) && getTag(value) == setTag;
    	    }
    
    	    /**
    	     * Checks if `value` is classified as a `String` primitive or object.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is correctly classified,
    	     *  else `false`.
    	     * @example
    	     *
    	     * _.isString('abc');
    	     * // => true
    	     *
    	     * _.isString(1);
    	     * // => false
    	     */
    	    function isString(value) {
    	      return typeof value == 'string' ||
    	        (!isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag);
    	    }
    
    	    /**
    	     * Checks if `value` is classified as a `Symbol` primitive or object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is correctly classified,
    	     *  else `false`.
    	     * @example
    	     *
    	     * _.isSymbol(Symbol.iterator);
    	     * // => true
    	     *
    	     * _.isSymbol('abc');
    	     * // => false
    	     */
    	    function isSymbol(value) {
    	      return typeof value == 'symbol' ||
    	        (isObjectLike(value) && objectToString.call(value) == symbolTag);
    	    }
    
    	    /**
    	     * Checks if `value` is classified as a typed array.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is correctly classified,
    	     *  else `false`.
    	     * @example
    	     *
    	     * _.isTypedArray(new Uint8Array);
    	     * // => true
    	     *
    	     * _.isTypedArray([]);
    	     * // => false
    	     */
    	    function isTypedArray(value) {
    	      return isObjectLike(value) &&
    	        isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
    	    }
    
    	    /**
    	     * Checks if `value` is `undefined`.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
    	     * @example
    	     *
    	     * _.isUndefined(void 0);
    	     * // => true
    	     *
    	     * _.isUndefined(null);
    	     * // => false
    	     */
    	    function isUndefined(value) {
    	      return value === undefined;
    	    }
    
    	    /**
    	     * Checks if `value` is classified as a `WeakMap` object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.3.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is correctly classified,
    	     *  else `false`.
    	     * @example
    	     *
    	     * _.isWeakMap(new WeakMap);
    	     * // => true
    	     *
    	     * _.isWeakMap(new Map);
    	     * // => false
    	     */
    	    function isWeakMap(value) {
    	      return isObjectLike(value) && getTag(value) == weakMapTag;
    	    }
    
    	    /**
    	     * Checks if `value` is classified as a `WeakSet` object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.3.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is correctly classified,
    	     *  else `false`.
    	     * @example
    	     *
    	     * _.isWeakSet(new WeakSet);
    	     * // => true
    	     *
    	     * _.isWeakSet(new Set);
    	     * // => false
    	     */
    	    function isWeakSet(value) {
    	      return isObjectLike(value) && objectToString.call(value) == weakSetTag;
    	    }
    
    	    /**
    	     * Checks if `value` is less than `other`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.9.0
    	     * @category Lang
    	     * @param {*} value The value to compare.
    	     * @param {*} other The other value to compare.
    	     * @returns {boolean} Returns `true` if `value` is less than `other`,
    	     *  else `false`.
    	     * @see _.gt
    	     * @example
    	     *
    	     * _.lt(1, 3);
    	     * // => true
    	     *
    	     * _.lt(3, 3);
    	     * // => false
    	     *
    	     * _.lt(3, 1);
    	     * // => false
    	     */
    	    var lt = createRelationalOperation(baseLt);
    
    	    /**
    	     * Checks if `value` is less than or equal to `other`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.9.0
    	     * @category Lang
    	     * @param {*} value The value to compare.
    	     * @param {*} other The other value to compare.
    	     * @returns {boolean} Returns `true` if `value` is less than or equal to
    	     *  `other`, else `false`.
    	     * @see _.gte
    	     * @example
    	     *
    	     * _.lte(1, 3);
    	     * // => true
    	     *
    	     * _.lte(3, 3);
    	     * // => true
    	     *
    	     * _.lte(3, 1);
    	     * // => false
    	     */
    	    var lte = createRelationalOperation(function(value, other) {
    	      return value <= other;
    	    });
    
    	    /**
    	     * Converts `value` to an array.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Lang
    	     * @param {*} value The value to convert.
    	     * @returns {Array} Returns the converted array.
    	     * @example
    	     *
    	     * _.toArray({ 'a': 1, 'b': 2 });
    	     * // => [1, 2]
    	     *
    	     * _.toArray('abc');
    	     * // => ['a', 'b', 'c']
    	     *
    	     * _.toArray(1);
    	     * // => []
    	     *
    	     * _.toArray(null);
    	     * // => []
    	     */
    	    function toArray(value) {
    	      if (!value) {
    	        return [];
    	      }
    	      if (isArrayLike(value)) {
    	        return isString(value) ? stringToArray(value) : copyArray(value);
    	      }
    	      if (iteratorSymbol && value[iteratorSymbol]) {
    	        return iteratorToArray(value[iteratorSymbol]());
    	      }
    	      var tag = getTag(value),
    	          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);
    
    	      return func(value);
    	    }
    
    	    /**
    	     * Converts `value` to a finite number.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.12.0
    	     * @category Lang
    	     * @param {*} value The value to convert.
    	     * @returns {number} Returns the converted number.
    	     * @example
    	     *
    	     * _.toFinite(3.2);
    	     * // => 3.2
    	     *
    	     * _.toFinite(Number.MIN_VALUE);
    	     * // => 5e-324
    	     *
    	     * _.toFinite(Infinity);
    	     * // => 1.7976931348623157e+308
    	     *
    	     * _.toFinite('3.2');
    	     * // => 3.2
    	     */
    	    function toFinite(value) {
    	      if (!value) {
    	        return value === 0 ? value : 0;
    	      }
    	      value = toNumber(value);
    	      if (value === INFINITY || value === -INFINITY) {
    	        var sign = (value < 0 ? -1 : 1);
    	        return sign * MAX_INTEGER;
    	      }
    	      return value === value ? value : 0;
    	    }
    
    	    /**
    	     * Converts `value` to an integer.
    	     *
    	     * **Note:** This method is loosely based on
    	     * [`ToInteger`](http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to convert.
    	     * @returns {number} Returns the converted integer.
    	     * @example
    	     *
    	     * _.toInteger(3.2);
    	     * // => 3
    	     *
    	     * _.toInteger(Number.MIN_VALUE);
    	     * // => 0
    	     *
    	     * _.toInteger(Infinity);
    	     * // => 1.7976931348623157e+308
    	     *
    	     * _.toInteger('3.2');
    	     * // => 3
    	     */
    	    function toInteger(value) {
    	      var result = toFinite(value),
    	          remainder = result % 1;
    
    	      return result === result ? (remainder ? result - remainder : result) : 0;
    	    }
    
    	    /**
    	     * Converts `value` to an integer suitable for use as the length of an
    	     * array-like object.
    	     *
    	     * **Note:** This method is based on
    	     * [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to convert.
    	     * @returns {number} Returns the converted integer.
    	     * @example
    	     *
    	     * _.toLength(3.2);
    	     * // => 3
    	     *
    	     * _.toLength(Number.MIN_VALUE);
    	     * // => 0
    	     *
    	     * _.toLength(Infinity);
    	     * // => 4294967295
    	     *
    	     * _.toLength('3.2');
    	     * // => 3
    	     */
    	    function toLength(value) {
    	      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    	    }
    
    	    /**
    	     * Converts `value` to a number.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to process.
    	     * @returns {number} Returns the number.
    	     * @example
    	     *
    	     * _.toNumber(3.2);
    	     * // => 3.2
    	     *
    	     * _.toNumber(Number.MIN_VALUE);
    	     * // => 5e-324
    	     *
    	     * _.toNumber(Infinity);
    	     * // => Infinity
    	     *
    	     * _.toNumber('3.2');
    	     * // => 3.2
    	     */
    	    function toNumber(value) {
    	      if (typeof value == 'number') {
    	        return value;
    	      }
    	      if (isSymbol(value)) {
    	        return NAN;
    	      }
    	      if (isObject(value)) {
    	        var other = isFunction(value.valueOf) ? value.valueOf() : value;
    	        value = isObject(other) ? (other + '') : other;
    	      }
    	      if (typeof value != 'string') {
    	        return value === 0 ? value : +value;
    	      }
    	      value = value.replace(reTrim, '');
    	      var isBinary = reIsBinary.test(value);
    	      return (isBinary || reIsOctal.test(value))
    	        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    	        : (reIsBadHex.test(value) ? NAN : +value);
    	    }
    
    	    /**
    	     * Converts `value` to a plain object flattening inherited enumerable string
    	     * keyed properties of `value` to own properties of the plain object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Lang
    	     * @param {*} value The value to convert.
    	     * @returns {Object} Returns the converted plain object.
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.b = 2;
    	     * }
    	     *
    	     * Foo.prototype.c = 3;
    	     *
    	     * _.assign({ 'a': 1 }, new Foo);
    	     * // => { 'a': 1, 'b': 2 }
    	     *
    	     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
    	     * // => { 'a': 1, 'b': 2, 'c': 3 }
    	     */
    	    function toPlainObject(value) {
    	      return copyObject(value, keysIn(value));
    	    }
    
    	    /**
    	     * Converts `value` to a safe integer. A safe integer can be compared and
    	     * represented correctly.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to convert.
    	     * @returns {number} Returns the converted integer.
    	     * @example
    	     *
    	     * _.toSafeInteger(3.2);
    	     * // => 3
    	     *
    	     * _.toSafeInteger(Number.MIN_VALUE);
    	     * // => 0
    	     *
    	     * _.toSafeInteger(Infinity);
    	     * // => 9007199254740991
    	     *
    	     * _.toSafeInteger('3.2');
    	     * // => 3
    	     */
    	    function toSafeInteger(value) {
    	      return baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
    	    }
    
    	    /**
    	     * Converts `value` to a string. An empty string is returned for `null`
    	     * and `undefined` values. The sign of `-0` is preserved.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to process.
    	     * @returns {string} Returns the string.
    	     * @example
    	     *
    	     * _.toString(null);
    	     * // => ''
    	     *
    	     * _.toString(-0);
    	     * // => '-0'
    	     *
    	     * _.toString([1, 2, 3]);
    	     * // => '1,2,3'
    	     */
    	    function toString(value) {
    	      return value == null ? '' : baseToString(value);
    	    }
    
    	    /*------------------------------------------------------------------------*/
    
    	    /**
    	     * Assigns own enumerable string keyed properties of source objects to the
    	     * destination object. Source objects are applied from left to right.
    	     * Subsequent sources overwrite property assignments of previous sources.
    	     *
    	     * **Note:** This method mutates `object` and is loosely based on
    	     * [`Object.assign`](https://mdn.io/Object/assign).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.10.0
    	     * @category Object
    	     * @param {Object} object The destination object.
    	     * @param {...Object} [sources] The source objects.
    	     * @returns {Object} Returns `object`.
    	     * @see _.assignIn
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.c = 3;
    	     * }
    	     *
    	     * function Bar() {
    	     *   this.e = 5;
    	     * }
    	     *
    	     * Foo.prototype.d = 4;
    	     * Bar.prototype.f = 6;
    	     *
    	     * _.assign({ 'a': 1 }, new Foo, new Bar);
    	     * // => { 'a': 1, 'c': 3, 'e': 5 }
    	     */
    	    var assign = createAssigner(function(object, source) {
    	      if (nonEnumShadows || isPrototype(source) || isArrayLike(source)) {
    	        copyObject(source, keys(source), object);
    	        return;
    	      }
    	      for (var key in source) {
    	        if (hasOwnProperty.call(source, key)) {
    	          assignValue(object, key, source[key]);
    	        }
    	      }
    	    });
    
    	    /**
    	     * This method is like `_.assign` except that it iterates over own and
    	     * inherited source properties.
    	     *
    	     * **Note:** This method mutates `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @alias extend
    	     * @category Object
    	     * @param {Object} object The destination object.
    	     * @param {...Object} [sources] The source objects.
    	     * @returns {Object} Returns `object`.
    	     * @see _.assign
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.b = 2;
    	     * }
    	     *
    	     * function Bar() {
    	     *   this.d = 4;
    	     * }
    	     *
    	     * Foo.prototype.c = 3;
    	     * Bar.prototype.e = 5;
    	     *
    	     * _.assignIn({ 'a': 1 }, new Foo, new Bar);
    	     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5 }
    	     */
    	    var assignIn = createAssigner(function(object, source) {
    	      if (nonEnumShadows || isPrototype(source) || isArrayLike(source)) {
    	        copyObject(source, keysIn(source), object);
    	        return;
    	      }
    	      for (var key in source) {
    	        assignValue(object, key, source[key]);
    	      }
    	    });
    
    	    /**
    	     * This method is like `_.assignIn` except that it accepts `customizer`
    	     * which is invoked to produce the assigned values. If `customizer` returns
    	     * `undefined`, assignment is handled by the method instead. The `customizer`
    	     * is invoked with five arguments: (objValue, srcValue, key, object, source).
    	     *
    	     * **Note:** This method mutates `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @alias extendWith
    	     * @category Object
    	     * @param {Object} object The destination object.
    	     * @param {...Object} sources The source objects.
    	     * @param {Function} [customizer] The function to customize assigned values.
    	     * @returns {Object} Returns `object`.
    	     * @see _.assignWith
    	     * @example
    	     *
    	     * function customizer(objValue, srcValue) {
    	     *   return _.isUndefined(objValue) ? srcValue : objValue;
    	     * }
    	     *
    	     * var defaults = _.partialRight(_.assignInWith, customizer);
    	     *
    	     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
    	     * // => { 'a': 1, 'b': 2 }
    	     */
    	    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
    	      copyObject(source, keysIn(source), object, customizer);
    	    });
    
    	    /**
    	     * This method is like `_.assign` except that it accepts `customizer`
    	     * which is invoked to produce the assigned values. If `customizer` returns
    	     * `undefined`, assignment is handled by the method instead. The `customizer`
    	     * is invoked with five arguments: (objValue, srcValue, key, object, source).
    	     *
    	     * **Note:** This method mutates `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Object
    	     * @param {Object} object The destination object.
    	     * @param {...Object} sources The source objects.
    	     * @param {Function} [customizer] The function to customize assigned values.
    	     * @returns {Object} Returns `object`.
    	     * @see _.assignInWith
    	     * @example
    	     *
    	     * function customizer(objValue, srcValue) {
    	     *   return _.isUndefined(objValue) ? srcValue : objValue;
    	     * }
    	     *
    	     * var defaults = _.partialRight(_.assignWith, customizer);
    	     *
    	     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
    	     * // => { 'a': 1, 'b': 2 }
    	     */
    	    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
    	      copyObject(source, keys(source), object, customizer);
    	    });
    
    	    /**
    	     * Creates an array of values corresponding to `paths` of `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 1.0.0
    	     * @category Object
    	     * @param {Object} object The object to iterate over.
    	     * @param {...(string|string[])} [paths] The property paths of elements to pick.
    	     * @returns {Array} Returns the picked values.
    	     * @example
    	     *
    	     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
    	     *
    	     * _.at(object, ['a[0].b.c', 'a[1]']);
    	     * // => [3, 4]
    	     */
    	    var at = rest(function(object, paths) {
    	      return baseAt(object, baseFlatten(paths, 1));
    	    });
    
    	    /**
    	     * Creates an object that inherits from the `prototype` object. If a
    	     * `properties` object is given, its own enumerable string keyed properties
    	     * are assigned to the created object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.3.0
    	     * @category Object
    	     * @param {Object} prototype The object to inherit from.
    	     * @param {Object} [properties] The properties to assign to the object.
    	     * @returns {Object} Returns the new object.
    	     * @example
    	     *
    	     * function Shape() {
    	     *   this.x = 0;
    	     *   this.y = 0;
    	     * }
    	     *
    	     * function Circle() {
    	     *   Shape.call(this);
    	     * }
    	     *
    	     * Circle.prototype = _.create(Shape.prototype, {
    	     *   'constructor': Circle
    	     * });
    	     *
    	     * var circle = new Circle;
    	     * circle instanceof Circle;
    	     * // => true
    	     *
    	     * circle instanceof Shape;
    	     * // => true
    	     */
    	    function create(prototype, properties) {
    	      var result = baseCreate(prototype);
    	      return properties ? baseAssign(result, properties) : result;
    	    }
    
    	    /**
    	     * Assigns own and inherited enumerable string keyed properties of source
    	     * objects to the destination object for all destination properties that
    	     * resolve to `undefined`. Source objects are applied from left to right.
    	     * Once a property is set, additional values of the same property are ignored.
    	     *
    	     * **Note:** This method mutates `object`.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Object
    	     * @param {Object} object The destination object.
    	     * @param {...Object} [sources] The source objects.
    	     * @returns {Object} Returns `object`.
    	     * @see _.defaultsDeep
    	     * @example
    	     *
    	     * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
    	     * // => { 'user': 'barney', 'age': 36 }
    	     */
    	    var defaults = rest(function(args) {
    	      args.push(undefined, assignInDefaults);
    	      return apply(assignInWith, undefined, args);
    	    });
    
    	    /**
    	     * This method is like `_.defaults` except that it recursively assigns
    	     * default properties.
    	     *
    	     * **Note:** This method mutates `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.10.0
    	     * @category Object
    	     * @param {Object} object The destination object.
    	     * @param {...Object} [sources] The source objects.
    	     * @returns {Object} Returns `object`.
    	     * @see _.defaults
    	     * @example
    	     *
    	     * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });
    	     * // => { 'user': { 'name': 'barney', 'age': 36 } }
    	     *
    	     */
    	    var defaultsDeep = rest(function(args) {
    	      args.push(undefined, mergeDefaults);
    	      return apply(mergeWith, undefined, args);
    	    });
    
    	    /**
    	     * This method is like `_.find` except that it returns the key of the first
    	     * element `predicate` returns truthy for instead of the element itself.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 1.1.0
    	     * @category Object
    	     * @param {Object} object The object to search.
    	     * @param {Array|Function|Object|string} [predicate=_.identity]
    	     *  The function invoked per iteration.
    	     * @returns {string|undefined} Returns the key of the matched element,
    	     *  else `undefined`.
    	     * @example
    	     *
    	     * var users = {
    	     *   'barney':  { 'age': 36, 'active': true },
    	     *   'fred':    { 'age': 40, 'active': false },
    	     *   'pebbles': { 'age': 1,  'active': true }
    	     * };
    	     *
    	     * _.findKey(users, function(o) { return o.age < 40; });
    	     * // => 'barney' (iteration order is not guaranteed)
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.findKey(users, { 'age': 1, 'active': true });
    	     * // => 'pebbles'
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.findKey(users, ['active', false]);
    	     * // => 'fred'
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.findKey(users, 'active');
    	     * // => 'barney'
    	     */
    	    function findKey(object, predicate) {
    	      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    	    }
    
    	    /**
    	     * This method is like `_.findKey` except that it iterates over elements of
    	     * a collection in the opposite order.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.0.0
    	     * @category Object
    	     * @param {Object} object The object to search.
    	     * @param {Array|Function|Object|string} [predicate=_.identity]
    	     *  The function invoked per iteration.
    	     * @returns {string|undefined} Returns the key of the matched element,
    	     *  else `undefined`.
    	     * @example
    	     *
    	     * var users = {
    	     *   'barney':  { 'age': 36, 'active': true },
    	     *   'fred':    { 'age': 40, 'active': false },
    	     *   'pebbles': { 'age': 1,  'active': true }
    	     * };
    	     *
    	     * _.findLastKey(users, function(o) { return o.age < 40; });
    	     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.findLastKey(users, { 'age': 36, 'active': true });
    	     * // => 'barney'
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.findLastKey(users, ['active', false]);
    	     * // => 'fred'
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.findLastKey(users, 'active');
    	     * // => 'pebbles'
    	     */
    	    function findLastKey(object, predicate) {
    	      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    	    }
    
    	    /**
    	     * Iterates over own and inherited enumerable string keyed properties of an
    	     * object and invokes `iteratee` for each property. The iteratee is invoked
    	     * with three arguments: (value, key, object). Iteratee functions may exit
    	     * iteration early by explicitly returning `false`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.3.0
    	     * @category Object
    	     * @param {Object} object The object to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @returns {Object} Returns `object`.
    	     * @see _.forInRight
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = 1;
    	     *   this.b = 2;
    	     * }
    	     *
    	     * Foo.prototype.c = 3;
    	     *
    	     * _.forIn(new Foo, function(value, key) {
    	     *   console.log(key);
    	     * });
    	     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
    	     */
    	    function forIn(object, iteratee) {
    	      return object == null
    	        ? object
    	        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    	    }
    
    	    /**
    	     * This method is like `_.forIn` except that it iterates over properties of
    	     * `object` in the opposite order.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.0.0
    	     * @category Object
    	     * @param {Object} object The object to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @returns {Object} Returns `object`.
    	     * @see _.forIn
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = 1;
    	     *   this.b = 2;
    	     * }
    	     *
    	     * Foo.prototype.c = 3;
    	     *
    	     * _.forInRight(new Foo, function(value, key) {
    	     *   console.log(key);
    	     * });
    	     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
    	     */
    	    function forInRight(object, iteratee) {
    	      return object == null
    	        ? object
    	        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    	    }
    
    	    /**
    	     * Iterates over own enumerable string keyed properties of an object and
    	     * invokes `iteratee` for each property. The iteratee is invoked with three
    	     * arguments: (value, key, object). Iteratee functions may exit iteration
    	     * early by explicitly returning `false`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.3.0
    	     * @category Object
    	     * @param {Object} object The object to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @returns {Object} Returns `object`.
    	     * @see _.forOwnRight
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = 1;
    	     *   this.b = 2;
    	     * }
    	     *
    	     * Foo.prototype.c = 3;
    	     *
    	     * _.forOwn(new Foo, function(value, key) {
    	     *   console.log(key);
    	     * });
    	     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
    	     */
    	    function forOwn(object, iteratee) {
    	      return object && baseForOwn(object, getIteratee(iteratee, 3));
    	    }
    
    	    /**
    	     * This method is like `_.forOwn` except that it iterates over properties of
    	     * `object` in the opposite order.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.0.0
    	     * @category Object
    	     * @param {Object} object The object to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @returns {Object} Returns `object`.
    	     * @see _.forOwn
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = 1;
    	     *   this.b = 2;
    	     * }
    	     *
    	     * Foo.prototype.c = 3;
    	     *
    	     * _.forOwnRight(new Foo, function(value, key) {
    	     *   console.log(key);
    	     * });
    	     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
    	     */
    	    function forOwnRight(object, iteratee) {
    	      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    	    }
    
    	    /**
    	     * Creates an array of function property names from own enumerable properties
    	     * of `object`.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Object
    	     * @param {Object} object The object to inspect.
    	     * @returns {Array} Returns the function names.
    	     * @see _.functionsIn
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = _.constant('a');
    	     *   this.b = _.constant('b');
    	     * }
    	     *
    	     * Foo.prototype.c = _.constant('c');
    	     *
    	     * _.functions(new Foo);
    	     * // => ['a', 'b']
    	     */
    	    function functions(object) {
    	      return object == null ? [] : baseFunctions(object, keys(object));
    	    }
    
    	    /**
    	     * Creates an array of function property names from own and inherited
    	     * enumerable properties of `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Object
    	     * @param {Object} object The object to inspect.
    	     * @returns {Array} Returns the function names.
    	     * @see _.functions
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = _.constant('a');
    	     *   this.b = _.constant('b');
    	     * }
    	     *
    	     * Foo.prototype.c = _.constant('c');
    	     *
    	     * _.functionsIn(new Foo);
    	     * // => ['a', 'b', 'c']
    	     */
    	    function functionsIn(object) {
    	      return object == null ? [] : baseFunctions(object, keysIn(object));
    	    }
    
    	    /**
    	     * Gets the value at `path` of `object`. If the resolved value is
    	     * `undefined`, the `defaultValue` is used in its place.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.7.0
    	     * @category Object
    	     * @param {Object} object The object to query.
    	     * @param {Array|string} path The path of the property to get.
    	     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
    	     * @returns {*} Returns the resolved value.
    	     * @example
    	     *
    	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
    	     *
    	     * _.get(object, 'a[0].b.c');
    	     * // => 3
    	     *
    	     * _.get(object, ['a', '0', 'b', 'c']);
    	     * // => 3
    	     *
    	     * _.get(object, 'a.b.c', 'default');
    	     * // => 'default'
    	     */
    	    function get(object, path, defaultValue) {
    	      var result = object == null ? undefined : baseGet(object, path);
    	      return result === undefined ? defaultValue : result;
    	    }
    
    	    /**
    	     * Checks if `path` is a direct property of `object`.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Object
    	     * @param {Object} object The object to query.
    	     * @param {Array|string} path The path to check.
    	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
    	     * @example
    	     *
    	     * var object = { 'a': { 'b': 2 } };
    	     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
    	     *
    	     * _.has(object, 'a');
    	     * // => true
    	     *
    	     * _.has(object, 'a.b');
    	     * // => true
    	     *
    	     * _.has(object, ['a', 'b']);
    	     * // => true
    	     *
    	     * _.has(other, 'a');
    	     * // => false
    	     */
    	    function has(object, path) {
    	      return object != null && hasPath(object, path, baseHas);
    	    }
    
    	    /**
    	     * Checks if `path` is a direct or inherited property of `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Object
    	     * @param {Object} object The object to query.
    	     * @param {Array|string} path The path to check.
    	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
    	     * @example
    	     *
    	     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
    	     *
    	     * _.hasIn(object, 'a');
    	     * // => true
    	     *
    	     * _.hasIn(object, 'a.b');
    	     * // => true
    	     *
    	     * _.hasIn(object, ['a', 'b']);
    	     * // => true
    	     *
    	     * _.hasIn(object, 'b');
    	     * // => false
    	     */
    	    function hasIn(object, path) {
    	      return object != null && hasPath(object, path, baseHasIn);
    	    }
    
    	    /**
    	     * Creates an object composed of the inverted keys and values of `object`.
    	     * If `object` contains duplicate values, subsequent values overwrite
    	     * property assignments of previous values.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.7.0
    	     * @category Object
    	     * @param {Object} object The object to invert.
    	     * @returns {Object} Returns the new inverted object.
    	     * @example
    	     *
    	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
    	     *
    	     * _.invert(object);
    	     * // => { '1': 'c', '2': 'b' }
    	     */
    	    var invert = createInverter(function(result, value, key) {
    	      result[value] = key;
    	    }, constant(identity));
    
    	    /**
    	     * This method is like `_.invert` except that the inverted object is generated
    	     * from the results of running each element of `object` thru `iteratee`. The
    	     * corresponding inverted value of each inverted key is an array of keys
    	     * responsible for generating the inverted value. The iteratee is invoked
    	     * with one argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.1.0
    	     * @category Object
    	     * @param {Object} object The object to invert.
    	     * @param {Array|Function|Object|string} [iteratee=_.identity]
    	     *  The iteratee invoked per element.
    	     * @returns {Object} Returns the new inverted object.
    	     * @example
    	     *
    	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
    	     *
    	     * _.invertBy(object);
    	     * // => { '1': ['a', 'c'], '2': ['b'] }
    	     *
    	     * _.invertBy(object, function(value) {
    	     *   return 'group' + value;
    	     * });
    	     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
    	     */
    	    var invertBy = createInverter(function(result, value, key) {
    	      if (hasOwnProperty.call(result, value)) {
    	        result[value].push(key);
    	      } else {
    	        result[value] = [key];
    	      }
    	    }, getIteratee);
    
    	    /**
    	     * Invokes the method at `path` of `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Object
    	     * @param {Object} object The object to query.
    	     * @param {Array|string} path The path of the method to invoke.
    	     * @param {...*} [args] The arguments to invoke the method with.
    	     * @returns {*} Returns the result of the invoked method.
    	     * @example
    	     *
    	     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
    	     *
    	     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
    	     * // => [2, 3]
    	     */
    	    var invoke = rest(baseInvoke);
    
    	    /**
    	     * Creates an array of the own enumerable property names of `object`.
    	     *
    	     * **Note:** Non-object values are coerced to objects. See the
    	     * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
    	     * for more details.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Object
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the array of property names.
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = 1;
    	     *   this.b = 2;
    	     * }
    	     *
    	     * Foo.prototype.c = 3;
    	     *
    	     * _.keys(new Foo);
    	     * // => ['a', 'b'] (iteration order is not guaranteed)
    	     *
    	     * _.keys('hi');
    	     * // => ['0', '1']
    	     */
    	    function keys(object) {
    	      var isProto = isPrototype(object);
    	      if (!(isProto || isArrayLike(object))) {
    	        return baseKeys(object);
    	      }
    	      var indexes = indexKeys(object),
    	          skipIndexes = !!indexes,
    	          result = indexes || [],
    	          length = result.length;
    
    	      for (var key in object) {
    	        if (baseHas(object, key) &&
    	            !(skipIndexes && (key == 'length' || isIndex(key, length))) &&
    	            !(isProto && key == 'constructor')) {
    	          result.push(key);
    	        }
    	      }
    	      return result;
    	    }
    
    	    /**
    	     * Creates an array of the own and inherited enumerable property names of `object`.
    	     *
    	     * **Note:** Non-object values are coerced to objects.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Object
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the array of property names.
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = 1;
    	     *   this.b = 2;
    	     * }
    	     *
    	     * Foo.prototype.c = 3;
    	     *
    	     * _.keysIn(new Foo);
    	     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
    	     */
    	    function keysIn(object) {
    	      var index = -1,
    	          isProto = isPrototype(object),
    	          props = baseKeysIn(object),
    	          propsLength = props.length,
    	          indexes = indexKeys(object),
    	          skipIndexes = !!indexes,
    	          result = indexes || [],
    	          length = result.length;
    
    	      while (++index < propsLength) {
    	        var key = props[index];
    	        if (!(skipIndexes && (key == 'length' || isIndex(key, length))) &&
    	            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
    	          result.push(key);
    	        }
    	      }
    	      return result;
    	    }
    
    	    /**
    	     * The opposite of `_.mapValues`; this method creates an object with the
    	     * same values as `object` and keys generated by running each own enumerable
    	     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
    	     * with three arguments: (value, key, object).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.8.0
    	     * @category Object
    	     * @param {Object} object The object to iterate over.
    	     * @param {Array|Function|Object|string} [iteratee=_.identity]
    	     *  The function invoked per iteration.
    	     * @returns {Object} Returns the new mapped object.
    	     * @see _.mapValues
    	     * @example
    	     *
    	     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
    	     *   return key + value;
    	     * });
    	     * // => { 'a1': 1, 'b2': 2 }
    	     */
    	    function mapKeys(object, iteratee) {
    	      var result = {};
    	      iteratee = getIteratee(iteratee, 3);
    
    	      baseForOwn(object, function(value, key, object) {
    	        result[iteratee(value, key, object)] = value;
    	      });
    	      return result;
    	    }
    
    	    /**
    	     * Creates an object with the same keys as `object` and values generated
    	     * by running each own enumerable string keyed property of `object` thru
    	     * `iteratee`. The iteratee is invoked with three arguments:
    	     * (value, key, object).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.4.0
    	     * @category Object
    	     * @param {Object} object The object to iterate over.
    	     * @param {Array|Function|Object|string} [iteratee=_.identity]
    	     *  The function invoked per iteration.
    	     * @returns {Object} Returns the new mapped object.
    	     * @see _.mapKeys
    	     * @example
    	     *
    	     * var users = {
    	     *   'fred':    { 'user': 'fred',    'age': 40 },
    	     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
    	     * };
    	     *
    	     * _.mapValues(users, function(o) { return o.age; });
    	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.mapValues(users, 'age');
    	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
    	     */
    	    function mapValues(object, iteratee) {
    	      var result = {};
    	      iteratee = getIteratee(iteratee, 3);
    
    	      baseForOwn(object, function(value, key, object) {
    	        result[key] = iteratee(value, key, object);
    	      });
    	      return result;
    	    }
    
    	    /**
    	     * This method is like `_.assign` except that it recursively merges own and
    	     * inherited enumerable string keyed properties of source objects into the
    	     * destination object. Source properties that resolve to `undefined` are
    	     * skipped if a destination value exists. Array and plain object properties
    	     * are merged recursively. Other objects and value types are overridden by
    	     * assignment. Source objects are applied from left to right. Subsequent
    	     * sources overwrite property assignments of previous sources.
    	     *
    	     * **Note:** This method mutates `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.5.0
    	     * @category Object
    	     * @param {Object} object The destination object.
    	     * @param {...Object} [sources] The source objects.
    	     * @returns {Object} Returns `object`.
    	     * @example
    	     *
    	     * var users = {
    	     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
    	     * };
    	     *
    	     * var ages = {
    	     *   'data': [{ 'age': 36 }, { 'age': 40 }]
    	     * };
    	     *
    	     * _.merge(users, ages);
    	     * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
    	     */
    	    var merge = createAssigner(function(object, source, srcIndex) {
    	      baseMerge(object, source, srcIndex);
    	    });
    
    	    /**
    	     * This method is like `_.merge` except that it accepts `customizer` which
    	     * is invoked to produce the merged values of the destination and source
    	     * properties. If `customizer` returns `undefined`, merging is handled by the
    	     * method instead. The `customizer` is invoked with seven arguments:
    	     * (objValue, srcValue, key, object, source, stack).
    	     *
    	     * **Note:** This method mutates `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Object
    	     * @param {Object} object The destination object.
    	     * @param {...Object} sources The source objects.
    	     * @param {Function} customizer The function to customize assigned values.
    	     * @returns {Object} Returns `object`.
    	     * @example
    	     *
    	     * function customizer(objValue, srcValue) {
    	     *   if (_.isArray(objValue)) {
    	     *     return objValue.concat(srcValue);
    	     *   }
    	     * }
    	     *
    	     * var object = {
    	     *   'fruits': ['apple'],
    	     *   'vegetables': ['beet']
    	     * };
    	     *
    	     * var other = {
    	     *   'fruits': ['banana'],
    	     *   'vegetables': ['carrot']
    	     * };
    	     *
    	     * _.mergeWith(object, other, customizer);
    	     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
    	     */
    	    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
    	      baseMerge(object, source, srcIndex, customizer);
    	    });
    
    	    /**
    	     * The opposite of `_.pick`; this method creates an object composed of the
    	     * own and inherited enumerable string keyed properties of `object` that are
    	     * not omitted.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Object
    	     * @param {Object} object The source object.
    	     * @param {...(string|string[])} [props] The property identifiers to omit.
    	     * @returns {Object} Returns the new object.
    	     * @example
    	     *
    	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
    	     *
    	     * _.omit(object, ['a', 'c']);
    	     * // => { 'b': '2' }
    	     */
    	    var omit = rest(function(object, props) {
    	      if (object == null) {
    	        return {};
    	      }
    	      props = arrayMap(baseFlatten(props, 1), toKey);
    	      return basePick(object, baseDifference(getAllKeysIn(object), props));
    	    });
    
    	    /**
    	     * The opposite of `_.pickBy`; this method creates an object composed of
    	     * the own and inherited enumerable string keyed properties of `object` that
    	     * `predicate` doesn't return truthy for. The predicate is invoked with two
    	     * arguments: (value, key).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Object
    	     * @param {Object} object The source object.
    	     * @param {Array|Function|Object|string} [predicate=_.identity]
    	     *  The function invoked per property.
    	     * @returns {Object} Returns the new object.
    	     * @example
    	     *
    	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
    	     *
    	     * _.omitBy(object, _.isNumber);
    	     * // => { 'b': '2' }
    	     */
    	    function omitBy(object, predicate) {
    	      predicate = getIteratee(predicate);
    	      return basePickBy(object, function(value, key) {
    	        return !predicate(value, key);
    	      });
    	    }
    
    	    /**
    	     * Creates an object composed of the picked `object` properties.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Object
    	     * @param {Object} object The source object.
    	     * @param {...(string|string[])} [props] The property identifiers to pick.
    	     * @returns {Object} Returns the new object.
    	     * @example
    	     *
    	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
    	     *
    	     * _.pick(object, ['a', 'c']);
    	     * // => { 'a': 1, 'c': 3 }
    	     */
    	    var pick = rest(function(object, props) {
    	      return object == null ? {} : basePick(object, arrayMap(baseFlatten(props, 1), toKey));
    	    });
    
    	    /**
    	     * Creates an object composed of the `object` properties `predicate` returns
    	     * truthy for. The predicate is invoked with two arguments: (value, key).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Object
    	     * @param {Object} object The source object.
    	     * @param {Array|Function|Object|string} [predicate=_.identity]
    	     *  The function invoked per property.
    	     * @returns {Object} Returns the new object.
    	     * @example
    	     *
    	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
    	     *
    	     * _.pickBy(object, _.isNumber);
    	     * // => { 'a': 1, 'c': 3 }
    	     */
    	    function pickBy(object, predicate) {
    	      return object == null ? {} : basePickBy(object, getIteratee(predicate));
    	    }
    
    	    /**
    	     * This method is like `_.get` except that if the resolved value is a
    	     * function it's invoked with the `this` binding of its parent object and
    	     * its result is returned.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Object
    	     * @param {Object} object The object to query.
    	     * @param {Array|string} path The path of the property to resolve.
    	     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
    	     * @returns {*} Returns the resolved value.
    	     * @example
    	     *
    	     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
    	     *
    	     * _.result(object, 'a[0].b.c1');
    	     * // => 3
    	     *
    	     * _.result(object, 'a[0].b.c2');
    	     * // => 4
    	     *
    	     * _.result(object, 'a[0].b.c3', 'default');
    	     * // => 'default'
    	     *
    	     * _.result(object, 'a[0].b.c3', _.constant('default'));
    	     * // => 'default'
    	     */
    	    function result(object, path, defaultValue) {
    	      path = isKey(path, object) ? [path] : castPath(path);
    
    	      var index = -1,
    	          length = path.length;
    
    	      // Ensure the loop is entered when path is empty.
    	      if (!length) {
    	        object = undefined;
    	        length = 1;
    	      }
    	      while (++index < length) {
    	        var value = object == null ? undefined : object[toKey(path[index])];
    	        if (value === undefined) {
    	          index = length;
    	          value = defaultValue;
    	        }
    	        object = isFunction(value) ? value.call(object) : value;
    	      }
    	      return object;
    	    }
    
    	    /**
    	     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
    	     * it's created. Arrays are created for missing index properties while objects
    	     * are created for all other missing properties. Use `_.setWith` to customize
    	     * `path` creation.
    	     *
    	     * **Note:** This method mutates `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.7.0
    	     * @category Object
    	     * @param {Object} object The object to modify.
    	     * @param {Array|string} path The path of the property to set.
    	     * @param {*} value The value to set.
    	     * @returns {Object} Returns `object`.
    	     * @example
    	     *
    	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
    	     *
    	     * _.set(object, 'a[0].b.c', 4);
    	     * console.log(object.a[0].b.c);
    	     * // => 4
    	     *
    	     * _.set(object, ['x', '0', 'y', 'z'], 5);
    	     * console.log(object.x[0].y.z);
    	     * // => 5
    	     */
    	    function set(object, path, value) {
    	      return object == null ? object : baseSet(object, path, value);
    	    }
    
    	    /**
    	     * This method is like `_.set` except that it accepts `customizer` which is
    	     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
    	     * path creation is handled by the method instead. The `customizer` is invoked
    	     * with three arguments: (nsValue, key, nsObject).
    	     *
    	     * **Note:** This method mutates `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Object
    	     * @param {Object} object The object to modify.
    	     * @param {Array|string} path The path of the property to set.
    	     * @param {*} value The value to set.
    	     * @param {Function} [customizer] The function to customize assigned values.
    	     * @returns {Object} Returns `object`.
    	     * @example
    	     *
    	     * var object = {};
    	     *
    	     * _.setWith(object, '[0][1]', 'a', Object);
    	     * // => { '0': { '1': 'a' } }
    	     */
    	    function setWith(object, path, value, customizer) {
    	      customizer = typeof customizer == 'function' ? customizer : undefined;
    	      return object == null ? object : baseSet(object, path, value, customizer);
    	    }
    
    	    /**
    	     * Creates an array of own enumerable string keyed-value pairs for `object`
    	     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
    	     * entries are returned.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @alias entries
    	     * @category Object
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the key-value pairs.
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = 1;
    	     *   this.b = 2;
    	     * }
    	     *
    	     * Foo.prototype.c = 3;
    	     *
    	     * _.toPairs(new Foo);
    	     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
    	     */
    	    var toPairs = createToPairs(keys);
    
    	    /**
    	     * Creates an array of own and inherited enumerable string keyed-value pairs
    	     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
    	     * or set, its entries are returned.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @alias entriesIn
    	     * @category Object
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the key-value pairs.
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = 1;
    	     *   this.b = 2;
    	     * }
    	     *
    	     * Foo.prototype.c = 3;
    	     *
    	     * _.toPairsIn(new Foo);
    	     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
    	     */
    	    var toPairsIn = createToPairs(keysIn);
    
    	    /**
    	     * An alternative to `_.reduce`; this method transforms `object` to a new
    	     * `accumulator` object which is the result of running each of its own
    	     * enumerable string keyed properties thru `iteratee`, with each invocation
    	     * potentially mutating the `accumulator` object. If `accumulator` is not
    	     * provided, a new object with the same `[[Prototype]]` will be used. The
    	     * iteratee is invoked with four arguments: (accumulator, value, key, object).
    	     * Iteratee functions may exit iteration early by explicitly returning `false`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 1.3.0
    	     * @category Object
    	     * @param {Object} object The object to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @param {*} [accumulator] The custom accumulator value.
    	     * @returns {*} Returns the accumulated value.
    	     * @example
    	     *
    	     * _.transform([2, 3, 4], function(result, n) {
    	     *   result.push(n *= n);
    	     *   return n % 2 == 0;
    	     * }, []);
    	     * // => [4, 9]
    	     *
    	     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
    	     *   (result[value] || (result[value] = [])).push(key);
    	     * }, {});
    	     * // => { '1': ['a', 'c'], '2': ['b'] }
    	     */
    	    function transform(object, iteratee, accumulator) {
    	      var isArr = isArray(object) || isTypedArray(object);
    	      iteratee = getIteratee(iteratee, 4);
    
    	      if (accumulator == null) {
    	        if (isArr || isObject(object)) {
    	          var Ctor = object.constructor;
    	          if (isArr) {
    	            accumulator = isArray(object) ? new Ctor : [];
    	          } else {
    	            accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
    	          }
    	        } else {
    	          accumulator = {};
    	        }
    	      }
    	      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {
    	        return iteratee(accumulator, value, index, object);
    	      });
    	      return accumulator;
    	    }
    
    	    /**
    	     * Removes the property at `path` of `object`.
    	     *
    	     * **Note:** This method mutates `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Object
    	     * @param {Object} object The object to modify.
    	     * @param {Array|string} path The path of the property to unset.
    	     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
    	     * @example
    	     *
    	     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
    	     * _.unset(object, 'a[0].b.c');
    	     * // => true
    	     *
    	     * console.log(object);
    	     * // => { 'a': [{ 'b': {} }] };
    	     *
    	     * _.unset(object, ['a', '0', 'b', 'c']);
    	     * // => true
    	     *
    	     * console.log(object);
    	     * // => { 'a': [{ 'b': {} }] };
    	     */
    	    function unset(object, path) {
    	      return object == null ? true : baseUnset(object, path);
    	    }
    
    	    /**
    	     * This method is like `_.set` except that accepts `updater` to produce the
    	     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
    	     * is invoked with one argument: (value).
    	     *
    	     * **Note:** This method mutates `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.6.0
    	     * @category Object
    	     * @param {Object} object The object to modify.
    	     * @param {Array|string} path The path of the property to set.
    	     * @param {Function} updater The function to produce the updated value.
    	     * @returns {Object} Returns `object`.
    	     * @example
    	     *
    	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
    	     *
    	     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
    	     * console.log(object.a[0].b.c);
    	     * // => 9
    	     *
    	     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
    	     * console.log(object.x[0].y.z);
    	     * // => 0
    	     */
    	    function update(object, path, updater) {
    	      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    	    }
    
    	    /**
    	     * This method is like `_.update` except that it accepts `customizer` which is
    	     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
    	     * path creation is handled by the method instead. The `customizer` is invoked
    	     * with three arguments: (nsValue, key, nsObject).
    	     *
    	     * **Note:** This method mutates `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.6.0
    	     * @category Object
    	     * @param {Object} object The object to modify.
    	     * @param {Array|string} path The path of the property to set.
    	     * @param {Function} updater The function to produce the updated value.
    	     * @param {Function} [customizer] The function to customize assigned values.
    	     * @returns {Object} Returns `object`.
    	     * @example
    	     *
    	     * var object = {};
    	     *
    	     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
    	     * // => { '0': { '1': 'a' } }
    	     */
    	    function updateWith(object, path, updater, customizer) {
    	      customizer = typeof customizer == 'function' ? customizer : undefined;
    	      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    	    }
    
    	    /**
    	     * Creates an array of the own enumerable string keyed property values of `object`.
    	     *
    	     * **Note:** Non-object values are coerced to objects.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Object
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the array of property values.
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = 1;
    	     *   this.b = 2;
    	     * }
    	     *
    	     * Foo.prototype.c = 3;
    	     *
    	     * _.values(new Foo);
    	     * // => [1, 2] (iteration order is not guaranteed)
    	     *
    	     * _.values('hi');
    	     * // => ['h', 'i']
    	     */
    	    function values(object) {
    	      return object ? baseValues(object, keys(object)) : [];
    	    }
    
    	    /**
    	     * Creates an array of the own and inherited enumerable string keyed property
    	     * values of `object`.
    	     *
    	     * **Note:** Non-object values are coerced to objects.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Object
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the array of property values.
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = 1;
    	     *   this.b = 2;
    	     * }
    	     *
    	     * Foo.prototype.c = 3;
    	     *
    	     * _.valuesIn(new Foo);
    	     * // => [1, 2, 3] (iteration order is not guaranteed)
    	     */
    	    function valuesIn(object) {
    	      return object == null ? [] : baseValues(object, keysIn(object));
    	    }
    
    	    /*------------------------------------------------------------------------*/
    
    	    /**
    	     * Clamps `number` within the inclusive `lower` and `upper` bounds.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Number
    	     * @param {number} number The number to clamp.
    	     * @param {number} [lower] The lower bound.
    	     * @param {number} upper The upper bound.
    	     * @returns {number} Returns the clamped number.
    	     * @example
    	     *
    	     * _.clamp(-10, -5, 5);
    	     * // => -5
    	     *
    	     * _.clamp(10, -5, 5);
    	     * // => 5
    	     */
    	    function clamp(number, lower, upper) {
    	      if (upper === undefined) {
    	        upper = lower;
    	        lower = undefined;
    	      }
    	      if (upper !== undefined) {
    	        upper = toNumber(upper);
    	        upper = upper === upper ? upper : 0;
    	      }
    	      if (lower !== undefined) {
    	        lower = toNumber(lower);
    	        lower = lower === lower ? lower : 0;
    	      }
    	      return baseClamp(toNumber(number), lower, upper);
    	    }
    
    	    /**
    	     * Checks if `n` is between `start` and up to, but not including, `end`. If
    	     * `end` is not specified, it's set to `start` with `start` then set to `0`.
    	     * If `start` is greater than `end` the params are swapped to support
    	     * negative ranges.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.3.0
    	     * @category Number
    	     * @param {number} number The number to check.
    	     * @param {number} [start=0] The start of the range.
    	     * @param {number} end The end of the range.
    	     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
    	     * @see _.range, _.rangeRight
    	     * @example
    	     *
    	     * _.inRange(3, 2, 4);
    	     * // => true
    	     *
    	     * _.inRange(4, 8);
    	     * // => true
    	     *
    	     * _.inRange(4, 2);
    	     * // => false
    	     *
    	     * _.inRange(2, 2);
    	     * // => false
    	     *
    	     * _.inRange(1.2, 2);
    	     * // => true
    	     *
    	     * _.inRange(5.2, 4);
    	     * // => false
    	     *
    	     * _.inRange(-3, -2, -6);
    	     * // => true
    	     */
    	    function inRange(number, start, end) {
    	      start = toNumber(start) || 0;
    	      if (end === undefined) {
    	        end = start;
    	        start = 0;
    	      } else {
    	        end = toNumber(end) || 0;
    	      }
    	      number = toNumber(number);
    	      return baseInRange(number, start, end);
    	    }
    
    	    /**
    	     * Produces a random number between the inclusive `lower` and `upper` bounds.
    	     * If only one argument is provided a number between `0` and the given number
    	     * is returned. If `floating` is `true`, or either `lower` or `upper` are
    	     * floats, a floating-point number is returned instead of an integer.
    	     *
    	     * **Note:** JavaScript follows the IEEE-754 standard for resolving
    	     * floating-point values which can produce unexpected results.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.7.0
    	     * @category Number
    	     * @param {number} [lower=0] The lower bound.
    	     * @param {number} [upper=1] The upper bound.
    	     * @param {boolean} [floating] Specify returning a floating-point number.
    	     * @returns {number} Returns the random number.
    	     * @example
    	     *
    	     * _.random(0, 5);
    	     * // => an integer between 0 and 5
    	     *
    	     * _.random(5);
    	     * // => also an integer between 0 and 5
    	     *
    	     * _.random(5, true);
    	     * // => a floating-point number between 0 and 5
    	     *
    	     * _.random(1.2, 5.2);
    	     * // => a floating-point number between 1.2 and 5.2
    	     */
    	    function random(lower, upper, floating) {
    	      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
    	        upper = floating = undefined;
    	      }
    	      if (floating === undefined) {
    	        if (typeof upper == 'boolean') {
    	          floating = upper;
    	          upper = undefined;
    	        }
    	        else if (typeof lower == 'boolean') {
    	          floating = lower;
    	          lower = undefined;
    	        }
    	      }
    	      if (lower === undefined && upper === undefined) {
    	        lower = 0;
    	        upper = 1;
    	      }
    	      else {
    	        lower = toNumber(lower) || 0;
    	        if (upper === undefined) {
    	          upper = lower;
    	          lower = 0;
    	        } else {
    	          upper = toNumber(upper) || 0;
    	        }
    	      }
    	      if (lower > upper) {
    	        var temp = lower;
    	        lower = upper;
    	        upper = temp;
    	      }
    	      if (floating || lower % 1 || upper % 1) {
    	        var rand = nativeRandom();
    	        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
    	      }
    	      return baseRandom(lower, upper);
    	    }
    
    	    /*------------------------------------------------------------------------*/
    
    	    /**
    	     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to convert.
    	     * @returns {string} Returns the camel cased string.
    	     * @example
    	     *
    	     * _.camelCase('Foo Bar');
    	     * // => 'fooBar'
    	     *
    	     * _.camelCase('--foo-bar--');
    	     * // => 'fooBar'
    	     *
    	     * _.camelCase('__FOO_BAR__');
    	     * // => 'fooBar'
    	     */
    	    var camelCase = createCompounder(function(result, word, index) {
    	      word = word.toLowerCase();
    	      return result + (index ? capitalize(word) : word);
    	    });
    
    	    /**
    	     * Converts the first character of `string` to upper case and the remaining
    	     * to lower case.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to capitalize.
    	     * @returns {string} Returns the capitalized string.
    	     * @example
    	     *
    	     * _.capitalize('FRED');
    	     * // => 'Fred'
    	     */
    	    function capitalize(string) {
    	      return upperFirst(toString(string).toLowerCase());
    	    }
    
    	    /**
    	     * Deburrs `string` by converting
    	     * [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
    	     * to basic latin letters and removing
    	     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to deburr.
    	     * @returns {string} Returns the deburred string.
    	     * @example
    	     *
    	     * _.deburr('déjà vu');
    	     * // => 'deja vu'
    	     */
    	    function deburr(string) {
    	      string = toString(string);
    	      return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');
    	    }
    
    	    /**
    	     * Checks if `string` ends with the given target string.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to search.
    	     * @param {string} [target] The string to search for.
    	     * @param {number} [position=string.length] The position to search up to.
    	     * @returns {boolean} Returns `true` if `string` ends with `target`,
    	     *  else `false`.
    	     * @example
    	     *
    	     * _.endsWith('abc', 'c');
    	     * // => true
    	     *
    	     * _.endsWith('abc', 'b');
    	     * // => false
    	     *
    	     * _.endsWith('abc', 'b', 2);
    	     * // => true
    	     */
    	    function endsWith(string, target, position) {
    	      string = toString(string);
    	      target = baseToString(target);
    
    	      var length = string.length;
    	      position = position === undefined
    	        ? length
    	        : baseClamp(toInteger(position), 0, length);
    
    	      position -= target.length;
    	      return position >= 0 && string.indexOf(target, position) == position;
    	    }
    
    	    /**
    	     * Converts the characters "&", "<", ">", '"', "'", and "\`" in `string` to
    	     * their corresponding HTML entities.
    	     *
    	     * **Note:** No other characters are escaped. To escape additional
    	     * characters use a third-party library like [_he_](https://mths.be/he).
    	     *
    	     * Though the ">" character is escaped for symmetry, characters like
    	     * ">" and "/" don't need escaping in HTML and have no special meaning
    	     * unless they're part of a tag or unquoted attribute value. See
    	     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
    	     * (under "semi-related fun fact") for more details.
    	     *
    	     * Backticks are escaped because in IE < 9, they can break out of
    	     * attribute values or HTML comments. See [#59](https://html5sec.org/#59),
    	     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
    	     * [#133](https://html5sec.org/#133) of the
    	     * [HTML5 Security Cheatsheet](https://html5sec.org/) for more details.
    	     *
    	     * When working with HTML you should always
    	     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
    	     * XSS vectors.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category String
    	     * @param {string} [string=''] The string to escape.
    	     * @returns {string} Returns the escaped string.
    	     * @example
    	     *
    	     * _.escape('fred, barney, & pebbles');
    	     * // => 'fred, barney, &amp; pebbles'
    	     */
    	    function escape(string) {
    	      string = toString(string);
    	      return (string && reHasUnescapedHtml.test(string))
    	        ? string.replace(reUnescapedHtml, escapeHtmlChar)
    	        : string;
    	    }
    
    	    /**
    	     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
    	     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to escape.
    	     * @returns {string} Returns the escaped string.
    	     * @example
    	     *
    	     * _.escapeRegExp('[lodash](https://lodash.com/)');
    	     * // => '\[lodash\]\(https://lodash\.com/\)'
    	     */
    	    function escapeRegExp(string) {
    	      string = toString(string);
    	      return (string && reHasRegExpChar.test(string))
    	        ? string.replace(reRegExpChar, '\\$&')
    	        : string;
    	    }
    
    	    /**
    	     * Converts `string` to
    	     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to convert.
    	     * @returns {string} Returns the kebab cased string.
    	     * @example
    	     *
    	     * _.kebabCase('Foo Bar');
    	     * // => 'foo-bar'
    	     *
    	     * _.kebabCase('fooBar');
    	     * // => 'foo-bar'
    	     *
    	     * _.kebabCase('__FOO_BAR__');
    	     * // => 'foo-bar'
    	     */
    	    var kebabCase = createCompounder(function(result, word, index) {
    	      return result + (index ? '-' : '') + word.toLowerCase();
    	    });
    
    	    /**
    	     * Converts `string`, as space separated words, to lower case.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to convert.
    	     * @returns {string} Returns the lower cased string.
    	     * @example
    	     *
    	     * _.lowerCase('--Foo-Bar--');
    	     * // => 'foo bar'
    	     *
    	     * _.lowerCase('fooBar');
    	     * // => 'foo bar'
    	     *
    	     * _.lowerCase('__FOO_BAR__');
    	     * // => 'foo bar'
    	     */
    	    var lowerCase = createCompounder(function(result, word, index) {
    	      return result + (index ? ' ' : '') + word.toLowerCase();
    	    });
    
    	    /**
    	     * Converts the first character of `string` to lower case.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to convert.
    	     * @returns {string} Returns the converted string.
    	     * @example
    	     *
    	     * _.lowerFirst('Fred');
    	     * // => 'fred'
    	     *
    	     * _.lowerFirst('FRED');
    	     * // => 'fRED'
    	     */
    	    var lowerFirst = createCaseFirst('toLowerCase');
    
    	    /**
    	     * Pads `string` on the left and right sides if it's shorter than `length`.
    	     * Padding characters are truncated if they can't be evenly divided by `length`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to pad.
    	     * @param {number} [length=0] The padding length.
    	     * @param {string} [chars=' '] The string used as padding.
    	     * @returns {string} Returns the padded string.
    	     * @example
    	     *
    	     * _.pad('abc', 8);
    	     * // => '  abc   '
    	     *
    	     * _.pad('abc', 8, '_-');
    	     * // => '_-abc_-_'
    	     *
    	     * _.pad('abc', 3);
    	     * // => 'abc'
    	     */
    	    function pad(string, length, chars) {
    	      string = toString(string);
    	      length = toInteger(length);
    
    	      var strLength = length ? stringSize(string) : 0;
    	      if (!length || strLength >= length) {
    	        return string;
    	      }
    	      var mid = (length - strLength) / 2;
    	      return (
    	        createPadding(nativeFloor(mid), chars) +
    	        string +
    	        createPadding(nativeCeil(mid), chars)
    	      );
    	    }
    
    	    /**
    	     * Pads `string` on the right side if it's shorter than `length`. Padding
    	     * characters are truncated if they exceed `length`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to pad.
    	     * @param {number} [length=0] The padding length.
    	     * @param {string} [chars=' '] The string used as padding.
    	     * @returns {string} Returns the padded string.
    	     * @example
    	     *
    	     * _.padEnd('abc', 6);
    	     * // => 'abc   '
    	     *
    	     * _.padEnd('abc', 6, '_-');
    	     * // => 'abc_-_'
    	     *
    	     * _.padEnd('abc', 3);
    	     * // => 'abc'
    	     */
    	    function padEnd(string, length, chars) {
    	      string = toString(string);
    	      length = toInteger(length);
    
    	      var strLength = length ? stringSize(string) : 0;
    	      return (length && strLength < length)
    	        ? (string + createPadding(length - strLength, chars))
    	        : string;
    	    }
    
    	    /**
    	     * Pads `string` on the left side if it's shorter than `length`. Padding
    	     * characters are truncated if they exceed `length`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to pad.
    	     * @param {number} [length=0] The padding length.
    	     * @param {string} [chars=' '] The string used as padding.
    	     * @returns {string} Returns the padded string.
    	     * @example
    	     *
    	     * _.padStart('abc', 6);
    	     * // => '   abc'
    	     *
    	     * _.padStart('abc', 6, '_-');
    	     * // => '_-_abc'
    	     *
    	     * _.padStart('abc', 3);
    	     * // => 'abc'
    	     */
    	    function padStart(string, length, chars) {
    	      string = toString(string);
    	      length = toInteger(length);
    
    	      var strLength = length ? stringSize(string) : 0;
    	      return (length && strLength < length)
    	        ? (createPadding(length - strLength, chars) + string)
    	        : string;
    	    }
    
    	    /**
    	     * Converts `string` to an integer of the specified radix. If `radix` is
    	     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
    	     * hexadecimal, in which case a `radix` of `16` is used.
    	     *
    	     * **Note:** This method aligns with the
    	     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 1.1.0
    	     * @category String
    	     * @param {string} string The string to convert.
    	     * @param {number} [radix=10] The radix to interpret `value` by.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {number} Returns the converted integer.
    	     * @example
    	     *
    	     * _.parseInt('08');
    	     * // => 8
    	     *
    	     * _.map(['6', '08', '10'], _.parseInt);
    	     * // => [6, 8, 10]
    	     */
    	    function parseInt(string, radix, guard) {
    	      // Chrome fails to trim leading <BOM> whitespace characters.
    	      // See https://bugs.chromium.org/p/v8/issues/detail?id=3109 for more details.
    	      if (guard || radix == null) {
    	        radix = 0;
    	      } else if (radix) {
    	        radix = +radix;
    	      }
    	      string = toString(string).replace(reTrim, '');
    	      return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));
    	    }
    
    	    /**
    	     * Repeats the given string `n` times.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to repeat.
    	     * @param {number} [n=1] The number of times to repeat the string.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {string} Returns the repeated string.
    	     * @example
    	     *
    	     * _.repeat('*', 3);
    	     * // => '***'
    	     *
    	     * _.repeat('abc', 2);
    	     * // => 'abcabc'
    	     *
    	     * _.repeat('abc', 0);
    	     * // => ''
    	     */
    	    function repeat(string, n, guard) {
    	      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
    	        n = 1;
    	      } else {
    	        n = toInteger(n);
    	      }
    	      return baseRepeat(toString(string), n);
    	    }
    
    	    /**
    	     * Replaces matches for `pattern` in `string` with `replacement`.
    	     *
    	     * **Note:** This method is based on
    	     * [`String#replace`](https://mdn.io/String/replace).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to modify.
    	     * @param {RegExp|string} pattern The pattern to replace.
    	     * @param {Function|string} replacement The match replacement.
    	     * @returns {string} Returns the modified string.
    	     * @example
    	     *
    	     * _.replace('Hi Fred', 'Fred', 'Barney');
    	     * // => 'Hi Barney'
    	     */
    	    function replace() {
    	      var args = arguments,
    	          string = toString(args[0]);
    
    	      return args.length < 3 ? string : nativeReplace.call(string, args[1], args[2]);
    	    }
    
    	    /**
    	     * Converts `string` to
    	     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to convert.
    	     * @returns {string} Returns the snake cased string.
    	     * @example
    	     *
    	     * _.snakeCase('Foo Bar');
    	     * // => 'foo_bar'
    	     *
    	     * _.snakeCase('fooBar');
    	     * // => 'foo_bar'
    	     *
    	     * _.snakeCase('--FOO-BAR--');
    	     * // => 'foo_bar'
    	     */
    	    var snakeCase = createCompounder(function(result, word, index) {
    	      return result + (index ? '_' : '') + word.toLowerCase();
    	    });
    
    	    /**
    	     * Splits `string` by `separator`.
    	     *
    	     * **Note:** This method is based on
    	     * [`String#split`](https://mdn.io/String/split).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to split.
    	     * @param {RegExp|string} separator The separator pattern to split by.
    	     * @param {number} [limit] The length to truncate results to.
    	     * @returns {Array} Returns the string segments.
    	     * @example
    	     *
    	     * _.split('a-b-c', '-', 2);
    	     * // => ['a', 'b']
    	     */
    	    function split(string, separator, limit) {
    	      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
    	        separator = limit = undefined;
    	      }
    	      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
    	      if (!limit) {
    	        return [];
    	      }
    	      string = toString(string);
    	      if (string && (
    	            typeof separator == 'string' ||
    	            (separator != null && !isRegExp(separator))
    	          )) {
    	        separator = baseToString(separator);
    	        if (separator == '' && reHasComplexSymbol.test(string)) {
    	          return castSlice(stringToArray(string), 0, limit);
    	        }
    	      }
    	      return nativeSplit.call(string, separator, limit);
    	    }
    
    	    /**
    	     * Converts `string` to
    	     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.1.0
    	     * @category String
    	     * @param {string} [string=''] The string to convert.
    	     * @returns {string} Returns the start cased string.
    	     * @example
    	     *
    	     * _.startCase('--foo-bar--');
    	     * // => 'Foo Bar'
    	     *
    	     * _.startCase('fooBar');
    	     * // => 'Foo Bar'
    	     *
    	     * _.startCase('__FOO_BAR__');
    	     * // => 'FOO BAR'
    	     */
    	    var startCase = createCompounder(function(result, word, index) {
    	      return result + (index ? ' ' : '') + upperFirst(word);
    	    });
    
    	    /**
    	     * Checks if `string` starts with the given target string.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to search.
    	     * @param {string} [target] The string to search for.
    	     * @param {number} [position=0] The position to search from.
    	     * @returns {boolean} Returns `true` if `string` starts with `target`,
    	     *  else `false`.
    	     * @example
    	     *
    	     * _.startsWith('abc', 'a');
    	     * // => true
    	     *
    	     * _.startsWith('abc', 'b');
    	     * // => false
    	     *
    	     * _.startsWith('abc', 'b', 1);
    	     * // => true
    	     */
    	    function startsWith(string, target, position) {
    	      string = toString(string);
    	      position = baseClamp(toInteger(position), 0, string.length);
    	      return string.lastIndexOf(baseToString(target), position) == position;
    	    }
    
    	    /**
    	     * Creates a compiled template function that can interpolate data properties
    	     * in "interpolate" delimiters, HTML-escape interpolated data properties in
    	     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
    	     * properties may be accessed as free variables in the template. If a setting
    	     * object is given, it takes precedence over `_.templateSettings` values.
    	     *
    	     * **Note:** In the development build `_.template` utilizes
    	     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
    	     * for easier debugging.
    	     *
    	     * For more information on precompiling templates see
    	     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
    	     *
    	     * For more information on Chrome extension sandboxes see
    	     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category String
    	     * @param {string} [string=''] The template string.
    	     * @param {Object} [options={}] The options object.
    	     * @param {RegExp} [options.escape=_.templateSettings.escape]
    	     *  The HTML "escape" delimiter.
    	     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
    	     *  The "evaluate" delimiter.
    	     * @param {Object} [options.imports=_.templateSettings.imports]
    	     *  An object to import into the template as free variables.
    	     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
    	     *  The "interpolate" delimiter.
    	     * @param {string} [options.sourceURL='lodash.templateSources[n]']
    	     *  The sourceURL of the compiled template.
    	     * @param {string} [options.variable='obj']
    	     *  The data object variable name.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {Function} Returns the compiled template function.
    	     * @example
    	     *
    	     * // Use the "interpolate" delimiter to create a compiled template.
    	     * var compiled = _.template('hello <%= user %>!');
    	     * compiled({ 'user': 'fred' });
    	     * // => 'hello fred!'
    	     *
    	     * // Use the HTML "escape" delimiter to escape data property values.
    	     * var compiled = _.template('<b><%- value %></b>');
    	     * compiled({ 'value': '<script>' });
    	     * // => '<b>&lt;script&gt;</b>'
    	     *
    	     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
    	     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
    	     * compiled({ 'users': ['fred', 'barney'] });
    	     * // => '<li>fred</li><li>barney</li>'
    	     *
    	     * // Use the internal `print` function in "evaluate" delimiters.
    	     * var compiled = _.template('<% print("hello " + user); %>!');
    	     * compiled({ 'user': 'barney' });
    	     * // => 'hello barney!'
    	     *
    	     * // Use the ES delimiter as an alternative to the default "interpolate" delimiter.
    	     * var compiled = _.template('hello ${ user }!');
    	     * compiled({ 'user': 'pebbles' });
    	     * // => 'hello pebbles!'
    	     *
    	     * // Use backslashes to treat delimiters as plain text.
    	     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
    	     * compiled({ 'value': 'ignored' });
    	     * // => '<%- value %>'
    	     *
    	     * // Use the `imports` option to import `jQuery` as `jq`.
    	     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
    	     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
    	     * compiled({ 'users': ['fred', 'barney'] });
    	     * // => '<li>fred</li><li>barney</li>'
    	     *
    	     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
    	     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
    	     * compiled(data);
    	     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
    	     *
    	     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
    	     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
    	     * compiled.source;
    	     * // => function(data) {
    	     * //   var __t, __p = '';
    	     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
    	     * //   return __p;
    	     * // }
    	     *
    	     * // Use custom template delimiters.
    	     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
    	     * var compiled = _.template('hello {{ user }}!');
    	     * compiled({ 'user': 'mustache' });
    	     * // => 'hello mustache!'
    	     *
    	     * // Use the `source` property to inline compiled templates for meaningful
    	     * // line numbers in error messages and stack traces.
    	     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
    	     *   var JST = {\
    	     *     "main": ' + _.template(mainText).source + '\
    	     *   };\
    	     * ');
    	     */
    	    function template(string, options, guard) {
    	      // Based on John Resig's `tmpl` implementation
    	      // (http://ejohn.org/blog/javascript-micro-templating/)
    	      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
    	      var settings = lodash.templateSettings;
    
    	      if (guard && isIterateeCall(string, options, guard)) {
    	        options = undefined;
    	      }
    	      string = toString(string);
    	      options = assignInWith({}, options, settings, assignInDefaults);
    
    	      var imports = assignInWith({}, options.imports, settings.imports, assignInDefaults),
    	          importsKeys = keys(imports),
    	          importsValues = baseValues(imports, importsKeys);
    
    	      var isEscaping,
    	          isEvaluating,
    	          index = 0,
    	          interpolate = options.interpolate || reNoMatch,
    	          source = "__p += '";
    
    	      // Compile the regexp to match each delimiter.
    	      var reDelimiters = RegExp(
    	        (options.escape || reNoMatch).source + '|' +
    	        interpolate.source + '|' +
    	        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
    	        (options.evaluate || reNoMatch).source + '|$'
    	      , 'g');
    
    	      // Use a sourceURL for easier debugging.
    	      var sourceURL = '//# sourceURL=' +
    	        ('sourceURL' in options
    	          ? options.sourceURL
    	          : ('lodash.templateSources[' + (++templateCounter) + ']')
    	        ) + '\n';
    
    	      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
    	        interpolateValue || (interpolateValue = esTemplateValue);
    
    	        // Escape characters that can't be included in string literals.
    	        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
    
    	        // Replace delimiters with snippets.
    	        if (escapeValue) {
    	          isEscaping = true;
    	          source += "' +\n__e(" + escapeValue + ") +\n'";
    	        }
    	        if (evaluateValue) {
    	          isEvaluating = true;
    	          source += "';\n" + evaluateValue + ";\n__p += '";
    	        }
    	        if (interpolateValue) {
    	          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
    	        }
    	        index = offset + match.length;
    
    	        // The JS engine embedded in Adobe products needs `match` returned in
    	        // order to produce the correct `offset` value.
    	        return match;
    	      });
    
    	      source += "';\n";
    
    	      // If `variable` is not specified wrap a with-statement around the generated
    	      // code to add the data object to the top of the scope chain.
    	      var variable = options.variable;
    	      if (!variable) {
    	        source = 'with (obj) {\n' + source + '\n}\n';
    	      }
    	      // Cleanup code by stripping empty strings.
    	      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
    	        .replace(reEmptyStringMiddle, '$1')
    	        .replace(reEmptyStringTrailing, '$1;');
    
    	      // Frame code as the function body.
    	      source = 'function(' + (variable || 'obj') + ') {\n' +
    	        (variable
    	          ? ''
    	          : 'obj || (obj = {});\n'
    	        ) +
    	        "var __t, __p = ''" +
    	        (isEscaping
    	           ? ', __e = _.escape'
    	           : ''
    	        ) +
    	        (isEvaluating
    	          ? ', __j = Array.prototype.join;\n' +
    	            "function print() { __p += __j.call(arguments, '') }\n"
    	          : ';\n'
    	        ) +
    	        source +
    	        'return __p\n}';
    
    	      var result = attempt(function() {
    	        return Function(importsKeys, sourceURL + 'return ' + source)
    	          .apply(undefined, importsValues);
    	      });
    
    	      // Provide the compiled function's source by its `toString` method or
    	      // the `source` property as a convenience for inlining compiled templates.
    	      result.source = source;
    	      if (isError(result)) {
    	        throw result;
    	      }
    	      return result;
    	    }
    
    	    /**
    	     * Converts `string`, as a whole, to lower case just like
    	     * [String#toLowerCase](https://mdn.io/toLowerCase).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to convert.
    	     * @returns {string} Returns the lower cased string.
    	     * @example
    	     *
    	     * _.toLower('--Foo-Bar--');
    	     * // => '--foo-bar--'
    	     *
    	     * _.toLower('fooBar');
    	     * // => 'foobar'
    	     *
    	     * _.toLower('__FOO_BAR__');
    	     * // => '__foo_bar__'
    	     */
    	    function toLower(value) {
    	      return toString(value).toLowerCase();
    	    }
    
    	    /**
    	     * Converts `string`, as a whole, to upper case just like
    	     * [String#toUpperCase](https://mdn.io/toUpperCase).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to convert.
    	     * @returns {string} Returns the upper cased string.
    	     * @example
    	     *
    	     * _.toUpper('--foo-bar--');
    	     * // => '--FOO-BAR--'
    	     *
    	     * _.toUpper('fooBar');
    	     * // => 'FOOBAR'
    	     *
    	     * _.toUpper('__foo_bar__');
    	     * // => '__FOO_BAR__'
    	     */
    	    function toUpper(value) {
    	      return toString(value).toUpperCase();
    	    }
    
    	    /**
    	     * Removes leading and trailing whitespace or specified characters from `string`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to trim.
    	     * @param {string} [chars=whitespace] The characters to trim.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {string} Returns the trimmed string.
    	     * @example
    	     *
    	     * _.trim('  abc  ');
    	     * // => 'abc'
    	     *
    	     * _.trim('-_-abc-_-', '_-');
    	     * // => 'abc'
    	     *
    	     * _.map(['  foo  ', '  bar  '], _.trim);
    	     * // => ['foo', 'bar']
    	     */
    	    function trim(string, chars, guard) {
    	      string = toString(string);
    	      if (string && (guard || chars === undefined)) {
    	        return string.replace(reTrim, '');
    	      }
    	      if (!string || !(chars = baseToString(chars))) {
    	        return string;
    	      }
    	      var strSymbols = stringToArray(string),
    	          chrSymbols = stringToArray(chars),
    	          start = charsStartIndex(strSymbols, chrSymbols),
    	          end = charsEndIndex(strSymbols, chrSymbols) + 1;
    
    	      return castSlice(strSymbols, start, end).join('');
    	    }
    
    	    /**
    	     * Removes trailing whitespace or specified characters from `string`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to trim.
    	     * @param {string} [chars=whitespace] The characters to trim.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {string} Returns the trimmed string.
    	     * @example
    	     *
    	     * _.trimEnd('  abc  ');
    	     * // => '  abc'
    	     *
    	     * _.trimEnd('-_-abc-_-', '_-');
    	     * // => '-_-abc'
    	     */
    	    function trimEnd(string, chars, guard) {
    	      string = toString(string);
    	      if (string && (guard || chars === undefined)) {
    	        return string.replace(reTrimEnd, '');
    	      }
    	      if (!string || !(chars = baseToString(chars))) {
    	        return string;
    	      }
    	      var strSymbols = stringToArray(string),
    	          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
    
    	      return castSlice(strSymbols, 0, end).join('');
    	    }
    
    	    /**
    	     * Removes leading whitespace or specified characters from `string`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to trim.
    	     * @param {string} [chars=whitespace] The characters to trim.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {string} Returns the trimmed string.
    	     * @example
    	     *
    	     * _.trimStart('  abc  ');
    	     * // => 'abc  '
    	     *
    	     * _.trimStart('-_-abc-_-', '_-');
    	     * // => 'abc-_-'
    	     */
    	    function trimStart(string, chars, guard) {
    	      string = toString(string);
    	      if (string && (guard || chars === undefined)) {
    	        return string.replace(reTrimStart, '');
    	      }
    	      if (!string || !(chars = baseToString(chars))) {
    	        return string;
    	      }
    	      var strSymbols = stringToArray(string),
    	          start = charsStartIndex(strSymbols, stringToArray(chars));
    
    	      return castSlice(strSymbols, start).join('');
    	    }
    
    	    /**
    	     * Truncates `string` if it's longer than the given maximum string length.
    	     * The last characters of the truncated string are replaced with the omission
    	     * string which defaults to "...".
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to truncate.
    	     * @param {Object} [options={}] The options object.
    	     * @param {number} [options.length=30] The maximum string length.
    	     * @param {string} [options.omission='...'] The string to indicate text is omitted.
    	     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
    	     * @returns {string} Returns the truncated string.
    	     * @example
    	     *
    	     * _.truncate('hi-diddly-ho there, neighborino');
    	     * // => 'hi-diddly-ho there, neighbo...'
    	     *
    	     * _.truncate('hi-diddly-ho there, neighborino', {
    	     *   'length': 24,
    	     *   'separator': ' '
    	     * });
    	     * // => 'hi-diddly-ho there,...'
    	     *
    	     * _.truncate('hi-diddly-ho there, neighborino', {
    	     *   'length': 24,
    	     *   'separator': /,? +/
    	     * });
    	     * // => 'hi-diddly-ho there...'
    	     *
    	     * _.truncate('hi-diddly-ho there, neighborino', {
    	     *   'omission': ' [...]'
    	     * });
    	     * // => 'hi-diddly-ho there, neig [...]'
    	     */
    	    function truncate(string, options) {
    	      var length = DEFAULT_TRUNC_LENGTH,
    	          omission = DEFAULT_TRUNC_OMISSION;
    
    	      if (isObject(options)) {
    	        var separator = 'separator' in options ? options.separator : separator;
    	        length = 'length' in options ? toInteger(options.length) : length;
    	        omission = 'omission' in options ? baseToString(options.omission) : omission;
    	      }
    	      string = toString(string);
    
    	      var strLength = string.length;
    	      if (reHasComplexSymbol.test(string)) {
    	        var strSymbols = stringToArray(string);
    	        strLength = strSymbols.length;
    	      }
    	      if (length >= strLength) {
    	        return string;
    	      }
    	      var end = length - stringSize(omission);
    	      if (end < 1) {
    	        return omission;
    	      }
    	      var result = strSymbols
    	        ? castSlice(strSymbols, 0, end).join('')
    	        : string.slice(0, end);
    
    	      if (separator === undefined) {
    	        return result + omission;
    	      }
    	      if (strSymbols) {
    	        end += (result.length - end);
    	      }
    	      if (isRegExp(separator)) {
    	        if (string.slice(end).search(separator)) {
    	          var match,
    	              substring = result;
    
    	          if (!separator.global) {
    	            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
    	          }
    	          separator.lastIndex = 0;
    	          while ((match = separator.exec(substring))) {
    	            var newEnd = match.index;
    	          }
    	          result = result.slice(0, newEnd === undefined ? end : newEnd);
    	        }
    	      } else if (string.indexOf(baseToString(separator), end) != end) {
    	        var index = result.lastIndexOf(separator);
    	        if (index > -1) {
    	          result = result.slice(0, index);
    	        }
    	      }
    	      return result + omission;
    	    }
    
    	    /**
    	     * The inverse of `_.escape`; this method converts the HTML entities
    	     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to
    	     * their corresponding characters.
    	     *
    	     * **Note:** No other HTML entities are unescaped. To unescape additional
    	     * HTML entities use a third-party library like [_he_](https://mths.be/he).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.6.0
    	     * @category String
    	     * @param {string} [string=''] The string to unescape.
    	     * @returns {string} Returns the unescaped string.
    	     * @example
    	     *
    	     * _.unescape('fred, barney, &amp; pebbles');
    	     * // => 'fred, barney, & pebbles'
    	     */
    	    function unescape(string) {
    	      string = toString(string);
    	      return (string && reHasEscapedHtml.test(string))
    	        ? string.replace(reEscapedHtml, unescapeHtmlChar)
    	        : string;
    	    }
    
    	    /**
    	     * Converts `string`, as space separated words, to upper case.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to convert.
    	     * @returns {string} Returns the upper cased string.
    	     * @example
    	     *
    	     * _.upperCase('--foo-bar');
    	     * // => 'FOO BAR'
    	     *
    	     * _.upperCase('fooBar');
    	     * // => 'FOO BAR'
    	     *
    	     * _.upperCase('__foo_bar__');
    	     * // => 'FOO BAR'
    	     */
    	    var upperCase = createCompounder(function(result, word, index) {
    	      return result + (index ? ' ' : '') + word.toUpperCase();
    	    });
    
    	    /**
    	     * Converts the first character of `string` to upper case.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to convert.
    	     * @returns {string} Returns the converted string.
    	     * @example
    	     *
    	     * _.upperFirst('fred');
    	     * // => 'Fred'
    	     *
    	     * _.upperFirst('FRED');
    	     * // => 'FRED'
    	     */
    	    var upperFirst = createCaseFirst('toUpperCase');
    
    	    /**
    	     * Splits `string` into an array of its words.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to inspect.
    	     * @param {RegExp|string} [pattern] The pattern to match words.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {Array} Returns the words of `string`.
    	     * @example
    	     *
    	     * _.words('fred, barney, & pebbles');
    	     * // => ['fred', 'barney', 'pebbles']
    	     *
    	     * _.words('fred, barney, & pebbles', /[^, ]+/g);
    	     * // => ['fred', 'barney', '&', 'pebbles']
    	     */
    	    function words(string, pattern, guard) {
    	      string = toString(string);
    	      pattern = guard ? undefined : pattern;
    
    	      if (pattern === undefined) {
    	        pattern = reHasComplexWord.test(string) ? reComplexWord : reBasicWord;
    	      }
    	      return string.match(pattern) || [];
    	    }
    
    	    /*------------------------------------------------------------------------*/
    
    	    /**
    	     * Attempts to invoke `func`, returning either the result or the caught error
    	     * object. Any additional arguments are provided to `func` when it's invoked.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Util
    	     * @param {Function} func The function to attempt.
    	     * @param {...*} [args] The arguments to invoke `func` with.
    	     * @returns {*} Returns the `func` result or error object.
    	     * @example
    	     *
    	     * // Avoid throwing errors for invalid selectors.
    	     * var elements = _.attempt(function(selector) {
    	     *   return document.querySelectorAll(selector);
    	     * }, '>_>');
    	     *
    	     * if (_.isError(elements)) {
    	     *   elements = [];
    	     * }
    	     */
    	    var attempt = rest(function(func, args) {
    	      try {
    	        return apply(func, undefined, args);
    	      } catch (e) {
    	        return isError(e) ? e : new Error(e);
    	      }
    	    });
    
    	    /**
    	     * Binds methods of an object to the object itself, overwriting the existing
    	     * method.
    	     *
    	     * **Note:** This method doesn't set the "length" property of bound functions.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Util
    	     * @param {Object} object The object to bind and assign the bound methods to.
    	     * @param {...(string|string[])} methodNames The object method names to bind.
    	     * @returns {Object} Returns `object`.
    	     * @example
    	     *
    	     * var view = {
    	     *   'label': 'docs',
    	     *   'onClick': function() {
    	     *     console.log('clicked ' + this.label);
    	     *   }
    	     * };
    	     *
    	     * _.bindAll(view, ['onClick']);
    	     * jQuery(element).on('click', view.onClick);
    	     * // => Logs 'clicked docs' when clicked.
    	     */
    	    var bindAll = rest(function(object, methodNames) {
    	      arrayEach(baseFlatten(methodNames, 1), function(key) {
    	        key = toKey(key);
    	        object[key] = bind(object[key], object);
    	      });
    	      return object;
    	    });
    
    	    /**
    	     * Creates a function that iterates over `pairs` and invokes the corresponding
    	     * function of the first predicate to return truthy. The predicate-function
    	     * pairs are invoked with the `this` binding and arguments of the created
    	     * function.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Util
    	     * @param {Array} pairs The predicate-function pairs.
    	     * @returns {Function} Returns the new composite function.
    	     * @example
    	     *
    	     * var func = _.cond([
    	     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
    	     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
    	     *   [_.constant(true),                _.constant('no match')]
    	     * ]);
    	     *
    	     * func({ 'a': 1, 'b': 2 });
    	     * // => 'matches A'
    	     *
    	     * func({ 'a': 0, 'b': 1 });
    	     * // => 'matches B'
    	     *
    	     * func({ 'a': '1', 'b': '2' });
    	     * // => 'no match'
    	     */
    	    function cond(pairs) {
    	      var length = pairs ? pairs.length : 0,
    	          toIteratee = getIteratee();
    
    	      pairs = !length ? [] : arrayMap(pairs, function(pair) {
    	        if (typeof pair[1] != 'function') {
    	          throw new TypeError(FUNC_ERROR_TEXT);
    	        }
    	        return [toIteratee(pair[0]), pair[1]];
    	      });
    
    	      return rest(function(args) {
    	        var index = -1;
    	        while (++index < length) {
    	          var pair = pairs[index];
    	          if (apply(pair[0], this, args)) {
    	            return apply(pair[1], this, args);
    	          }
    	        }
    	      });
    	    }
    
    	    /**
    	     * Creates a function that invokes the predicate properties of `source` with
    	     * the corresponding property values of a given object, returning `true` if
    	     * all predicates return truthy, else `false`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Util
    	     * @param {Object} source The object of property predicates to conform to.
    	     * @returns {Function} Returns the new spec function.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney', 'age': 36 },
    	     *   { 'user': 'fred',   'age': 40 }
    	     * ];
    	     *
    	     * _.filter(users, _.conforms({ 'age': function(n) { return n > 38; } }));
    	     * // => [{ 'user': 'fred', 'age': 40 }]
    	     */
    	    function conforms(source) {
    	      return baseConforms(baseClone(source, true));
    	    }
    
    	    /**
    	     * Creates a function that returns `value`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.4.0
    	     * @category Util
    	     * @param {*} value The value to return from the new function.
    	     * @returns {Function} Returns the new constant function.
    	     * @example
    	     *
    	     * var objects = _.times(2, _.constant({ 'a': 1 }));
    	     *
    	     * console.log(objects);
    	     * // => [{ 'a': 1 }, { 'a': 1 }]
    	     *
    	     * console.log(objects[0] === objects[1]);
    	     * // => true
    	     */
    	    function constant(value) {
    	      return function() {
    	        return value;
    	      };
    	    }
    
    	    /**
    	     * Creates a function that returns the result of invoking the given functions
    	     * with the `this` binding of the created function, where each successive
    	     * invocation is supplied the return value of the previous.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Util
    	     * @param {...(Function|Function[])} [funcs] Functions to invoke.
    	     * @returns {Function} Returns the new composite function.
    	     * @see _.flowRight
    	     * @example
    	     *
    	     * function square(n) {
    	     *   return n * n;
    	     * }
    	     *
    	     * var addSquare = _.flow([_.add, square]);
    	     * addSquare(1, 2);
    	     * // => 9
    	     */
    	    var flow = createFlow();
    
    	    /**
    	     * This method is like `_.flow` except that it creates a function that
    	     * invokes the given functions from right to left.
    	     *
    	     * @static
    	     * @since 3.0.0
    	     * @memberOf _
    	     * @category Util
    	     * @param {...(Function|Function[])} [funcs] Functions to invoke.
    	     * @returns {Function} Returns the new composite function.
    	     * @see _.flow
    	     * @example
    	     *
    	     * function square(n) {
    	     *   return n * n;
    	     * }
    	     *
    	     * var addSquare = _.flowRight([square, _.add]);
    	     * addSquare(1, 2);
    	     * // => 9
    	     */
    	    var flowRight = createFlow(true);
    
    	    /**
    	     * This method returns the first argument given to it.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Util
    	     * @param {*} value Any value.
    	     * @returns {*} Returns `value`.
    	     * @example
    	     *
    	     * var object = { 'user': 'fred' };
    	     *
    	     * console.log(_.identity(object) === object);
    	     * // => true
    	     */
    	    function identity(value) {
    	      return value;
    	    }
    
    	    /**
    	     * Creates a function that invokes `func` with the arguments of the created
    	     * function. If `func` is a property name, the created function returns the
    	     * property value for a given element. If `func` is an array or object, the
    	     * created function returns `true` for elements that contain the equivalent
    	     * source properties, otherwise it returns `false`.
    	     *
    	     * @static
    	     * @since 4.0.0
    	     * @memberOf _
    	     * @category Util
    	     * @param {*} [func=_.identity] The value to convert to a callback.
    	     * @returns {Function} Returns the callback.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney', 'age': 36, 'active': true },
    	     *   { 'user': 'fred',   'age': 40, 'active': false }
    	     * ];
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
    	     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.filter(users, _.iteratee(['user', 'fred']));
    	     * // => [{ 'user': 'fred', 'age': 40 }]
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.map(users, _.iteratee('user'));
    	     * // => ['barney', 'fred']
    	     *
    	     * // Create custom iteratee shorthands.
    	     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
    	     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
    	     *     return func.test(string);
    	     *   };
    	     * });
    	     *
    	     * _.filter(['abc', 'def'], /ef/);
    	     * // => ['def']
    	     */
    	    function iteratee(func) {
    	      return baseIteratee(typeof func == 'function' ? func : baseClone(func, true));
    	    }
    
    	    /**
    	     * Creates a function that performs a partial deep comparison between a given
    	     * object and `source`, returning `true` if the given object has equivalent
    	     * property values, else `false`. The created function is equivalent to
    	     * `_.isMatch` with a `source` partially applied.
    	     *
    	     * **Note:** This method supports comparing the same values as `_.isEqual`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Util
    	     * @param {Object} source The object of property values to match.
    	     * @returns {Function} Returns the new spec function.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney', 'age': 36, 'active': true },
    	     *   { 'user': 'fred',   'age': 40, 'active': false }
    	     * ];
    	     *
    	     * _.filter(users, _.matches({ 'age': 40, 'active': false }));
    	     * // => [{ 'user': 'fred', 'age': 40, 'active': false }]
    	     */
    	    function matches(source) {
    	      return baseMatches(baseClone(source, true));
    	    }
    
    	    /**
    	     * Creates a function that performs a partial deep comparison between the
    	     * value at `path` of a given object to `srcValue`, returning `true` if the
    	     * object value is equivalent, else `false`.
    	     *
    	     * **Note:** This method supports comparing the same values as `_.isEqual`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.2.0
    	     * @category Util
    	     * @param {Array|string} path The path of the property to get.
    	     * @param {*} srcValue The value to match.
    	     * @returns {Function} Returns the new spec function.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney' },
    	     *   { 'user': 'fred' }
    	     * ];
    	     *
    	     * _.find(users, _.matchesProperty('user', 'fred'));
    	     * // => { 'user': 'fred' }
    	     */
    	    function matchesProperty(path, srcValue) {
    	      return baseMatchesProperty(path, baseClone(srcValue, true));
    	    }
    
    	    /**
    	     * Creates a function that invokes the method at `path` of a given object.
    	     * Any additional arguments are provided to the invoked method.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.7.0
    	     * @category Util
    	     * @param {Array|string} path The path of the method to invoke.
    	     * @param {...*} [args] The arguments to invoke the method with.
    	     * @returns {Function} Returns the new invoker function.
    	     * @example
    	     *
    	     * var objects = [
    	     *   { 'a': { 'b': _.constant(2) } },
    	     *   { 'a': { 'b': _.constant(1) } }
    	     * ];
    	     *
    	     * _.map(objects, _.method('a.b'));
    	     * // => [2, 1]
    	     *
    	     * _.map(objects, _.method(['a', 'b']));
    	     * // => [2, 1]
    	     */
    	    var method = rest(function(path, args) {
    	      return function(object) {
    	        return baseInvoke(object, path, args);
    	      };
    	    });
    
    	    /**
    	     * The opposite of `_.method`; this method creates a function that invokes
    	     * the method at a given path of `object`. Any additional arguments are
    	     * provided to the invoked method.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.7.0
    	     * @category Util
    	     * @param {Object} object The object to query.
    	     * @param {...*} [args] The arguments to invoke the method with.
    	     * @returns {Function} Returns the new invoker function.
    	     * @example
    	     *
    	     * var array = _.times(3, _.constant),
    	     *     object = { 'a': array, 'b': array, 'c': array };
    	     *
    	     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
    	     * // => [2, 0]
    	     *
    	     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
    	     * // => [2, 0]
    	     */
    	    var methodOf = rest(function(object, args) {
    	      return function(path) {
    	        return baseInvoke(object, path, args);
    	      };
    	    });
    
    	    /**
    	     * Adds all own enumerable string keyed function properties of a source
    	     * object to the destination object. If `object` is a function, then methods
    	     * are added to its prototype as well.
    	     *
    	     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
    	     * avoid conflicts caused by modifying the original.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Util
    	     * @param {Function|Object} [object=lodash] The destination object.
    	     * @param {Object} source The object of functions to add.
    	     * @param {Object} [options={}] The options object.
    	     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
    	     * @returns {Function|Object} Returns `object`.
    	     * @example
    	     *
    	     * function vowels(string) {
    	     *   return _.filter(string, function(v) {
    	     *     return /[aeiou]/i.test(v);
    	     *   });
    	     * }
    	     *
    	     * _.mixin({ 'vowels': vowels });
    	     * _.vowels('fred');
    	     * // => ['e']
    	     *
    	     * _('fred').vowels().value();
    	     * // => ['e']
    	     *
    	     * _.mixin({ 'vowels': vowels }, { 'chain': false });
    	     * _('fred').vowels();
    	     * // => ['e']
    	     */
    	    function mixin(object, source, options) {
    	      var props = keys(source),
    	          methodNames = baseFunctions(source, props);
    
    	      if (options == null &&
    	          !(isObject(source) && (methodNames.length || !props.length))) {
    	        options = source;
    	        source = object;
    	        object = this;
    	        methodNames = baseFunctions(source, keys(source));
    	      }
    	      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
    	          isFunc = isFunction(object);
    
    	      arrayEach(methodNames, function(methodName) {
    	        var func = source[methodName];
    	        object[methodName] = func;
    	        if (isFunc) {
    	          object.prototype[methodName] = function() {
    	            var chainAll = this.__chain__;
    	            if (chain || chainAll) {
    	              var result = object(this.__wrapped__),
    	                  actions = result.__actions__ = copyArray(this.__actions__);
    
    	              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
    	              result.__chain__ = chainAll;
    	              return result;
    	            }
    	            return func.apply(object, arrayPush([this.value()], arguments));
    	          };
    	        }
    	      });
    
    	      return object;
    	    }
    
    	    /**
    	     * Reverts the `_` variable to its previous value and returns a reference to
    	     * the `lodash` function.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Util
    	     * @returns {Function} Returns the `lodash` function.
    	     * @example
    	     *
    	     * var lodash = _.noConflict();
    	     */
    	    function noConflict() {
    	      if (root._ === this) {
    	        root._ = oldDash;
    	      }
    	      return this;
    	    }
    
    	    /**
    	     * A method that returns `undefined`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.3.0
    	     * @category Util
    	     * @example
    	     *
    	     * _.times(2, _.noop);
    	     * // => [undefined, undefined]
    	     */
    	    function noop() {
    	      // No operation performed.
    	    }
    
    	    /**
    	     * Creates a function that gets the argument at index `n`. If `n` is negative,
    	     * the nth argument from the end is returned.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Util
    	     * @param {number} [n=0] The index of the argument to return.
    	     * @returns {Function} Returns the new pass-thru function.
    	     * @example
    	     *
    	     * var func = _.nthArg(1);
    	     * func('a', 'b', 'c', 'd');
    	     * // => 'b'
    	     *
    	     * var func = _.nthArg(-2);
    	     * func('a', 'b', 'c', 'd');
    	     * // => 'c'
    	     */
    	    function nthArg(n) {
    	      n = toInteger(n);
    	      return rest(function(args) {
    	        return baseNth(args, n);
    	      });
    	    }
    
    	    /**
    	     * Creates a function that invokes `iteratees` with the arguments it receives
    	     * and returns their results.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Util
    	     * @param {...(Array|Array[]|Function|Function[]|Object|Object[]|string|string[])}
    	     *  [iteratees=[_.identity]] The iteratees to invoke.
    	     * @returns {Function} Returns the new function.
    	     * @example
    	     *
    	     * var func = _.over([Math.max, Math.min]);
    	     *
    	     * func(1, 2, 3, 4);
    	     * // => [4, 1]
    	     */
    	    var over = createOver(arrayMap);
    
    	    /**
    	     * Creates a function that checks if **all** of the `predicates` return
    	     * truthy when invoked with the arguments it receives.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Util
    	     * @param {...(Array|Array[]|Function|Function[]|Object|Object[]|string|string[])}
    	     *  [predicates=[_.identity]] The predicates to check.
    	     * @returns {Function} Returns the new function.
    	     * @example
    	     *
    	     * var func = _.overEvery([Boolean, isFinite]);
    	     *
    	     * func('1');
    	     * // => true
    	     *
    	     * func(null);
    	     * // => false
    	     *
    	     * func(NaN);
    	     * // => false
    	     */
    	    var overEvery = createOver(arrayEvery);
    
    	    /**
    	     * Creates a function that checks if **any** of the `predicates` return
    	     * truthy when invoked with the arguments it receives.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Util
    	     * @param {...(Array|Array[]|Function|Function[]|Object|Object[]|string|string[])}
    	     *  [predicates=[_.identity]] The predicates to check.
    	     * @returns {Function} Returns the new function.
    	     * @example
    	     *
    	     * var func = _.overSome([Boolean, isFinite]);
    	     *
    	     * func('1');
    	     * // => true
    	     *
    	     * func(null);
    	     * // => true
    	     *
    	     * func(NaN);
    	     * // => false
    	     */
    	    var overSome = createOver(arraySome);
    
    	    /**
    	     * Creates a function that returns the value at `path` of a given object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.4.0
    	     * @category Util
    	     * @param {Array|string} path The path of the property to get.
    	     * @returns {Function} Returns the new accessor function.
    	     * @example
    	     *
    	     * var objects = [
    	     *   { 'a': { 'b': 2 } },
    	     *   { 'a': { 'b': 1 } }
    	     * ];
    	     *
    	     * _.map(objects, _.property('a.b'));
    	     * // => [2, 1]
    	     *
    	     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
    	     * // => [1, 2]
    	     */
    	    function property(path) {
    	      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    	    }
    
    	    /**
    	     * The opposite of `_.property`; this method creates a function that returns
    	     * the value at a given path of `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Util
    	     * @param {Object} object The object to query.
    	     * @returns {Function} Returns the new accessor function.
    	     * @example
    	     *
    	     * var array = [0, 1, 2],
    	     *     object = { 'a': array, 'b': array, 'c': array };
    	     *
    	     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
    	     * // => [2, 0]
    	     *
    	     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
    	     * // => [2, 0]
    	     */
    	    function propertyOf(object) {
    	      return function(path) {
    	        return object == null ? undefined : baseGet(object, path);
    	      };
    	    }
    
    	    /**
    	     * Creates an array of numbers (positive and/or negative) progressing from
    	     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
    	     * `start` is specified without an `end` or `step`. If `end` is not specified,
    	     * it's set to `start` with `start` then set to `0`.
    	     *
    	     * **Note:** JavaScript follows the IEEE-754 standard for resolving
    	     * floating-point values which can produce unexpected results.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Util
    	     * @param {number} [start=0] The start of the range.
    	     * @param {number} end The end of the range.
    	     * @param {number} [step=1] The value to increment or decrement by.
    	     * @returns {Array} Returns the range of numbers.
    	     * @see _.inRange, _.rangeRight
    	     * @example
    	     *
    	     * _.range(4);
    	     * // => [0, 1, 2, 3]
    	     *
    	     * _.range(-4);
    	     * // => [0, -1, -2, -3]
    	     *
    	     * _.range(1, 5);
    	     * // => [1, 2, 3, 4]
    	     *
    	     * _.range(0, 20, 5);
    	     * // => [0, 5, 10, 15]
    	     *
    	     * _.range(0, -4, -1);
    	     * // => [0, -1, -2, -3]
    	     *
    	     * _.range(1, 4, 0);
    	     * // => [1, 1, 1]
    	     *
    	     * _.range(0);
    	     * // => []
    	     */
    	    var range = createRange();
    
    	    /**
    	     * This method is like `_.range` except that it populates values in
    	     * descending order.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Util
    	     * @param {number} [start=0] The start of the range.
    	     * @param {number} end The end of the range.
    	     * @param {number} [step=1] The value to increment or decrement by.
    	     * @returns {Array} Returns the range of numbers.
    	     * @see _.inRange, _.range
    	     * @example
    	     *
    	     * _.rangeRight(4);
    	     * // => [3, 2, 1, 0]
    	     *
    	     * _.rangeRight(-4);
    	     * // => [-3, -2, -1, 0]
    	     *
    	     * _.rangeRight(1, 5);
    	     * // => [4, 3, 2, 1]
    	     *
    	     * _.rangeRight(0, 20, 5);
    	     * // => [15, 10, 5, 0]
    	     *
    	     * _.rangeRight(0, -4, -1);
    	     * // => [-3, -2, -1, 0]
    	     *
    	     * _.rangeRight(1, 4, 0);
    	     * // => [1, 1, 1]
    	     *
    	     * _.rangeRight(0);
    	     * // => []
    	     */
    	    var rangeRight = createRange(true);
    
    	    /**
    	     * A method that returns a new empty array.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.13.0
    	     * @category Util
    	     * @returns {Array} Returns the new empty array.
    	     * @example
    	     *
    	     * var arrays = _.times(2, _.stubArray);
    	     *
    	     * console.log(arrays);
    	     * // => [[], []]
    	     *
    	     * console.log(arrays[0] === arrays[1]);
    	     * // => false
    	     */
    	    function stubArray() {
    	      return [];
    	    }
    
    	    /**
    	     * A method that returns `false`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.13.0
    	     * @category Util
    	     * @returns {boolean} Returns `false`.
    	     * @example
    	     *
    	     * _.times(2, _.stubFalse);
    	     * // => [false, false]
    	     */
    	    function stubFalse() {
    	      return false;
    	    }
    
    	    /**
    	     * A method that returns a new empty object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.13.0
    	     * @category Util
    	     * @returns {Object} Returns the new empty object.
    	     * @example
    	     *
    	     * var objects = _.times(2, _.stubObject);
    	     *
    	     * console.log(objects);
    	     * // => [{}, {}]
    	     *
    	     * console.log(objects[0] === objects[1]);
    	     * // => false
    	     */
    	    function stubObject() {
    	      return {};
    	    }
    
    	    /**
    	     * A method that returns an empty string.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.13.0
    	     * @category Util
    	     * @returns {string} Returns the empty string.
    	     * @example
    	     *
    	     * _.times(2, _.stubString);
    	     * // => ['', '']
    	     */
    	    function stubString() {
    	      return '';
    	    }
    
    	    /**
    	     * A method that returns `true`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.13.0
    	     * @category Util
    	     * @returns {boolean} Returns `true`.
    	     * @example
    	     *
    	     * _.times(2, _.stubTrue);
    	     * // => [true, true]
    	     */
    	    function stubTrue() {
    	      return true;
    	    }
    
    	    /**
    	     * Invokes the iteratee `n` times, returning an array of the results of
    	     * each invocation. The iteratee is invoked with one argument; (index).
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Util
    	     * @param {number} n The number of times to invoke `iteratee`.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @returns {Array} Returns the array of results.
    	     * @example
    	     *
    	     * _.times(3, String);
    	     * // => ['0', '1', '2']
    	     *
    	     *  _.times(4, _.constant(0));
    	     * // => [0, 0, 0, 0]
    	     */
    	    function times(n, iteratee) {
    	      n = toInteger(n);
    	      if (n < 1 || n > MAX_SAFE_INTEGER) {
    	        return [];
    	      }
    	      var index = MAX_ARRAY_LENGTH,
    	          length = nativeMin(n, MAX_ARRAY_LENGTH);
    
    	      iteratee = getIteratee(iteratee);
    	      n -= MAX_ARRAY_LENGTH;
    
    	      var result = baseTimes(length, iteratee);
    	      while (++index < n) {
    	        iteratee(index);
    	      }
    	      return result;
    	    }
    
    	    /**
    	     * Converts `value` to a property path array.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Util
    	     * @param {*} value The value to convert.
    	     * @returns {Array} Returns the new property path array.
    	     * @example
    	     *
    	     * _.toPath('a.b.c');
    	     * // => ['a', 'b', 'c']
    	     *
    	     * _.toPath('a[0].b.c');
    	     * // => ['a', '0', 'b', 'c']
    	     */
    	    function toPath(value) {
    	      if (isArray(value)) {
    	        return arrayMap(value, toKey);
    	      }
    	      return isSymbol(value) ? [value] : copyArray(stringToPath(value));
    	    }
    
    	    /**
    	     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Util
    	     * @param {string} [prefix=''] The value to prefix the ID with.
    	     * @returns {string} Returns the unique ID.
    	     * @example
    	     *
    	     * _.uniqueId('contact_');
    	     * // => 'contact_104'
    	     *
    	     * _.uniqueId();
    	     * // => '105'
    	     */
    	    function uniqueId(prefix) {
    	      var id = ++idCounter;
    	      return toString(prefix) + id;
    	    }
    
    	    /*------------------------------------------------------------------------*/
    
    	    /**
    	     * Adds two numbers.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.4.0
    	     * @category Math
    	     * @param {number} augend The first number in an addition.
    	     * @param {number} addend The second number in an addition.
    	     * @returns {number} Returns the total.
    	     * @example
    	     *
    	     * _.add(6, 4);
    	     * // => 10
    	     */
    	    var add = createMathOperation(function(augend, addend) {
    	      return augend + addend;
    	    });
    
    	    /**
    	     * Computes `number` rounded up to `precision`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.10.0
    	     * @category Math
    	     * @param {number} number The number to round up.
    	     * @param {number} [precision=0] The precision to round up to.
    	     * @returns {number} Returns the rounded up number.
    	     * @example
    	     *
    	     * _.ceil(4.006);
    	     * // => 5
    	     *
    	     * _.ceil(6.004, 2);
    	     * // => 6.01
    	     *
    	     * _.ceil(6040, -2);
    	     * // => 6100
    	     */
    	    var ceil = createRound('ceil');
    
    	    /**
    	     * Divide two numbers.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.7.0
    	     * @category Math
    	     * @param {number} dividend The first number in a division.
    	     * @param {number} divisor The second number in a division.
    	     * @returns {number} Returns the quotient.
    	     * @example
    	     *
    	     * _.divide(6, 4);
    	     * // => 1.5
    	     */
    	    var divide = createMathOperation(function(dividend, divisor) {
    	      return dividend / divisor;
    	    });
    
    	    /**
    	     * Computes `number` rounded down to `precision`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.10.0
    	     * @category Math
    	     * @param {number} number The number to round down.
    	     * @param {number} [precision=0] The precision to round down to.
    	     * @returns {number} Returns the rounded down number.
    	     * @example
    	     *
    	     * _.floor(4.006);
    	     * // => 4
    	     *
    	     * _.floor(0.046, 2);
    	     * // => 0.04
    	     *
    	     * _.floor(4060, -2);
    	     * // => 4000
    	     */
    	    var floor = createRound('floor');
    
    	    /**
    	     * Computes the maximum value of `array`. If `array` is empty or falsey,
    	     * `undefined` is returned.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Math
    	     * @param {Array} array The array to iterate over.
    	     * @returns {*} Returns the maximum value.
    	     * @example
    	     *
    	     * _.max([4, 2, 8, 6]);
    	     * // => 8
    	     *
    	     * _.max([]);
    	     * // => undefined
    	     */
    	    function max(array) {
    	      return (array && array.length)
    	        ? baseExtremum(array, identity, baseGt)
    	        : undefined;
    	    }
    
    	    /**
    	     * This method is like `_.max` except that it accepts `iteratee` which is
    	     * invoked for each element in `array` to generate the criterion by which
    	     * the value is ranked. The iteratee is invoked with one argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Math
    	     * @param {Array} array The array to iterate over.
    	     * @param {Array|Function|Object|string} [iteratee=_.identity]
    	     *  The iteratee invoked per element.
    	     * @returns {*} Returns the maximum value.
    	     * @example
    	     *
    	     * var objects = [{ 'n': 1 }, { 'n': 2 }];
    	     *
    	     * _.maxBy(objects, function(o) { return o.n; });
    	     * // => { 'n': 2 }
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.maxBy(objects, 'n');
    	     * // => { 'n': 2 }
    	     */
    	    function maxBy(array, iteratee) {
    	      return (array && array.length)
    	        ? baseExtremum(array, getIteratee(iteratee), baseGt)
    	        : undefined;
    	    }
    
    	    /**
    	     * Computes the mean of the values in `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Math
    	     * @param {Array} array The array to iterate over.
    	     * @returns {number} Returns the mean.
    	     * @example
    	     *
    	     * _.mean([4, 2, 8, 6]);
    	     * // => 5
    	     */
    	    function mean(array) {
    	      return baseMean(array, identity);
    	    }
    
    	    /**
    	     * This method is like `_.mean` except that it accepts `iteratee` which is
    	     * invoked for each element in `array` to generate the value to be averaged.
    	     * The iteratee is invoked with one argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.7.0
    	     * @category Math
    	     * @param {Array} array The array to iterate over.
    	     * @param {Array|Function|Object|string} [iteratee=_.identity]
    	     *  The iteratee invoked per element.
    	     * @returns {number} Returns the mean.
    	     * @example
    	     *
    	     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
    	     *
    	     * _.meanBy(objects, function(o) { return o.n; });
    	     * // => 5
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.meanBy(objects, 'n');
    	     * // => 5
    	     */
    	    function meanBy(array, iteratee) {
    	      return baseMean(array, getIteratee(iteratee));
    	    }
    
    	    /**
    	     * Computes the minimum value of `array`. If `array` is empty or falsey,
    	     * `undefined` is returned.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Math
    	     * @param {Array} array The array to iterate over.
    	     * @returns {*} Returns the minimum value.
    	     * @example
    	     *
    	     * _.min([4, 2, 8, 6]);
    	     * // => 2
    	     *
    	     * _.min([]);
    	     * // => undefined
    	     */
    	    function min(array) {
    	      return (array && array.length)
    	        ? baseExtremum(array, identity, baseLt)
    	        : undefined;
    	    }
    
    	    /**
    	     * This method is like `_.min` except that it accepts `iteratee` which is
    	     * invoked for each element in `array` to generate the criterion by which
    	     * the value is ranked. The iteratee is invoked with one argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Math
    	     * @param {Array} array The array to iterate over.
    	     * @param {Array|Function|Object|string} [iteratee=_.identity]
    	     *  The iteratee invoked per element.
    	     * @returns {*} Returns the minimum value.
    	     * @example
    	     *
    	     * var objects = [{ 'n': 1 }, { 'n': 2 }];
    	     *
    	     * _.minBy(objects, function(o) { return o.n; });
    	     * // => { 'n': 1 }
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.minBy(objects, 'n');
    	     * // => { 'n': 1 }
    	     */
    	    function minBy(array, iteratee) {
    	      return (array && array.length)
    	        ? baseExtremum(array, getIteratee(iteratee), baseLt)
    	        : undefined;
    	    }
    
    	    /**
    	     * Multiply two numbers.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.7.0
    	     * @category Math
    	     * @param {number} multiplier The first number in a multiplication.
    	     * @param {number} multiplicand The second number in a multiplication.
    	     * @returns {number} Returns the product.
    	     * @example
    	     *
    	     * _.multiply(6, 4);
    	     * // => 24
    	     */
    	    var multiply = createMathOperation(function(multiplier, multiplicand) {
    	      return multiplier * multiplicand;
    	    });
    
    	    /**
    	     * Computes `number` rounded to `precision`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.10.0
    	     * @category Math
    	     * @param {number} number The number to round.
    	     * @param {number} [precision=0] The precision to round to.
    	     * @returns {number} Returns the rounded number.
    	     * @example
    	     *
    	     * _.round(4.006);
    	     * // => 4
    	     *
    	     * _.round(4.006, 2);
    	     * // => 4.01
    	     *
    	     * _.round(4060, -2);
    	     * // => 4100
    	     */
    	    var round = createRound('round');
    
    	    /**
    	     * Subtract two numbers.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Math
    	     * @param {number} minuend The first number in a subtraction.
    	     * @param {number} subtrahend The second number in a subtraction.
    	     * @returns {number} Returns the difference.
    	     * @example
    	     *
    	     * _.subtract(6, 4);
    	     * // => 2
    	     */
    	    var subtract = createMathOperation(function(minuend, subtrahend) {
    	      return minuend - subtrahend;
    	    });
    
    	    /**
    	     * Computes the sum of the values in `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.4.0
    	     * @category Math
    	     * @param {Array} array The array to iterate over.
    	     * @returns {number} Returns the sum.
    	     * @example
    	     *
    	     * _.sum([4, 2, 8, 6]);
    	     * // => 20
    	     */
    	    function sum(array) {
    	      return (array && array.length)
    	        ? baseSum(array, identity)
    	        : 0;
    	    }
    
    	    /**
    	     * This method is like `_.sum` except that it accepts `iteratee` which is
    	     * invoked for each element in `array` to generate the value to be summed.
    	     * The iteratee is invoked with one argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Math
    	     * @param {Array} array The array to iterate over.
    	     * @param {Array|Function|Object|string} [iteratee=_.identity]
    	     *  The iteratee invoked per element.
    	     * @returns {number} Returns the sum.
    	     * @example
    	     *
    	     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
    	     *
    	     * _.sumBy(objects, function(o) { return o.n; });
    	     * // => 20
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.sumBy(objects, 'n');
    	     * // => 20
    	     */
    	    function sumBy(array, iteratee) {
    	      return (array && array.length)
    	        ? baseSum(array, getIteratee(iteratee))
    	        : 0;
    	    }
    
    	    /*------------------------------------------------------------------------*/
    
    	    // Add methods that return wrapped values in chain sequences.
    	    lodash.after = after;
    	    lodash.ary = ary;
    	    lodash.assign = assign;
    	    lodash.assignIn = assignIn;
    	    lodash.assignInWith = assignInWith;
    	    lodash.assignWith = assignWith;
    	    lodash.at = at;
    	    lodash.before = before;
    	    lodash.bind = bind;
    	    lodash.bindAll = bindAll;
    	    lodash.bindKey = bindKey;
    	    lodash.castArray = castArray;
    	    lodash.chain = chain;
    	    lodash.chunk = chunk;
    	    lodash.compact = compact;
    	    lodash.concat = concat;
    	    lodash.cond = cond;
    	    lodash.conforms = conforms;
    	    lodash.constant = constant;
    	    lodash.countBy = countBy;
    	    lodash.create = create;
    	    lodash.curry = curry;
    	    lodash.curryRight = curryRight;
    	    lodash.debounce = debounce;
    	    lodash.defaults = defaults;
    	    lodash.defaultsDeep = defaultsDeep;
    	    lodash.defer = defer;
    	    lodash.delay = delay;
    	    lodash.difference = difference;
    	    lodash.differenceBy = differenceBy;
    	    lodash.differenceWith = differenceWith;
    	    lodash.drop = drop;
    	    lodash.dropRight = dropRight;
    	    lodash.dropRightWhile = dropRightWhile;
    	    lodash.dropWhile = dropWhile;
    	    lodash.fill = fill;
    	    lodash.filter = filter;
    	    lodash.flatMap = flatMap;
    	    lodash.flatMapDeep = flatMapDeep;
    	    lodash.flatMapDepth = flatMapDepth;
    	    lodash.flatten = flatten;
    	    lodash.flattenDeep = flattenDeep;
    	    lodash.flattenDepth = flattenDepth;
    	    lodash.flip = flip;
    	    lodash.flow = flow;
    	    lodash.flowRight = flowRight;
    	    lodash.fromPairs = fromPairs;
    	    lodash.functions = functions;
    	    lodash.functionsIn = functionsIn;
    	    lodash.groupBy = groupBy;
    	    lodash.initial = initial;
    	    lodash.intersection = intersection;
    	    lodash.intersectionBy = intersectionBy;
    	    lodash.intersectionWith = intersectionWith;
    	    lodash.invert = invert;
    	    lodash.invertBy = invertBy;
    	    lodash.invokeMap = invokeMap;
    	    lodash.iteratee = iteratee;
    	    lodash.keyBy = keyBy;
    	    lodash.keys = keys;
    	    lodash.keysIn = keysIn;
    	    lodash.map = map;
    	    lodash.mapKeys = mapKeys;
    	    lodash.mapValues = mapValues;
    	    lodash.matches = matches;
    	    lodash.matchesProperty = matchesProperty;
    	    lodash.memoize = memoize;
    	    lodash.merge = merge;
    	    lodash.mergeWith = mergeWith;
    	    lodash.method = method;
    	    lodash.methodOf = methodOf;
    	    lodash.mixin = mixin;
    	    lodash.negate = negate;
    	    lodash.nthArg = nthArg;
    	    lodash.omit = omit;
    	    lodash.omitBy = omitBy;
    	    lodash.once = once;
    	    lodash.orderBy = orderBy;
    	    lodash.over = over;
    	    lodash.overArgs = overArgs;
    	    lodash.overEvery = overEvery;
    	    lodash.overSome = overSome;
    	    lodash.partial = partial;
    	    lodash.partialRight = partialRight;
    	    lodash.partition = partition;
    	    lodash.pick = pick;
    	    lodash.pickBy = pickBy;
    	    lodash.property = property;
    	    lodash.propertyOf = propertyOf;
    	    lodash.pull = pull;
    	    lodash.pullAll = pullAll;
    	    lodash.pullAllBy = pullAllBy;
    	    lodash.pullAllWith = pullAllWith;
    	    lodash.pullAt = pullAt;
    	    lodash.range = range;
    	    lodash.rangeRight = rangeRight;
    	    lodash.rearg = rearg;
    	    lodash.reject = reject;
    	    lodash.remove = remove;
    	    lodash.rest = rest;
    	    lodash.reverse = reverse;
    	    lodash.sampleSize = sampleSize;
    	    lodash.set = set;
    	    lodash.setWith = setWith;
    	    lodash.shuffle = shuffle;
    	    lodash.slice = slice;
    	    lodash.sortBy = sortBy;
    	    lodash.sortedUniq = sortedUniq;
    	    lodash.sortedUniqBy = sortedUniqBy;
    	    lodash.split = split;
    	    lodash.spread = spread;
    	    lodash.tail = tail;
    	    lodash.take = take;
    	    lodash.takeRight = takeRight;
    	    lodash.takeRightWhile = takeRightWhile;
    	    lodash.takeWhile = takeWhile;
    	    lodash.tap = tap;
    	    lodash.throttle = throttle;
    	    lodash.thru = thru;
    	    lodash.toArray = toArray;
    	    lodash.toPairs = toPairs;
    	    lodash.toPairsIn = toPairsIn;
    	    lodash.toPath = toPath;
    	    lodash.toPlainObject = toPlainObject;
    	    lodash.transform = transform;
    	    lodash.unary = unary;
    	    lodash.union = union;
    	    lodash.unionBy = unionBy;
    	    lodash.unionWith = unionWith;
    	    lodash.uniq = uniq;
    	    lodash.uniqBy = uniqBy;
    	    lodash.uniqWith = uniqWith;
    	    lodash.unset = unset;
    	    lodash.unzip = unzip;
    	    lodash.unzipWith = unzipWith;
    	    lodash.update = update;
    	    lodash.updateWith = updateWith;
    	    lodash.values = values;
    	    lodash.valuesIn = valuesIn;
    	    lodash.without = without;
    	    lodash.words = words;
    	    lodash.wrap = wrap;
    	    lodash.xor = xor;
    	    lodash.xorBy = xorBy;
    	    lodash.xorWith = xorWith;
    	    lodash.zip = zip;
    	    lodash.zipObject = zipObject;
    	    lodash.zipObjectDeep = zipObjectDeep;
    	    lodash.zipWith = zipWith;
    
    	    // Add aliases.
    	    lodash.entries = toPairs;
    	    lodash.entriesIn = toPairsIn;
    	    lodash.extend = assignIn;
    	    lodash.extendWith = assignInWith;
    
    	    // Add methods to `lodash.prototype`.
    	    mixin(lodash, lodash);
    
    	    /*------------------------------------------------------------------------*/
    
    	    // Add methods that return unwrapped values in chain sequences.
    	    lodash.add = add;
    	    lodash.attempt = attempt;
    	    lodash.camelCase = camelCase;
    	    lodash.capitalize = capitalize;
    	    lodash.ceil = ceil;
    	    lodash.clamp = clamp;
    	    lodash.clone = clone;
    	    lodash.cloneDeep = cloneDeep;
    	    lodash.cloneDeepWith = cloneDeepWith;
    	    lodash.cloneWith = cloneWith;
    	    lodash.deburr = deburr;
    	    lodash.divide = divide;
    	    lodash.endsWith = endsWith;
    	    lodash.eq = eq;
    	    lodash.escape = escape;
    	    lodash.escapeRegExp = escapeRegExp;
    	    lodash.every = every;
    	    lodash.find = find;
    	    lodash.findIndex = findIndex;
    	    lodash.findKey = findKey;
    	    lodash.findLast = findLast;
    	    lodash.findLastIndex = findLastIndex;
    	    lodash.findLastKey = findLastKey;
    	    lodash.floor = floor;
    	    lodash.forEach = forEach;
    	    lodash.forEachRight = forEachRight;
    	    lodash.forIn = forIn;
    	    lodash.forInRight = forInRight;
    	    lodash.forOwn = forOwn;
    	    lodash.forOwnRight = forOwnRight;
    	    lodash.get = get;
    	    lodash.gt = gt;
    	    lodash.gte = gte;
    	    lodash.has = has;
    	    lodash.hasIn = hasIn;
    	    lodash.head = head;
    	    lodash.identity = identity;
    	    lodash.includes = includes;
    	    lodash.indexOf = indexOf;
    	    lodash.inRange = inRange;
    	    lodash.invoke = invoke;
    	    lodash.isArguments = isArguments;
    	    lodash.isArray = isArray;
    	    lodash.isArrayBuffer = isArrayBuffer;
    	    lodash.isArrayLike = isArrayLike;
    	    lodash.isArrayLikeObject = isArrayLikeObject;
    	    lodash.isBoolean = isBoolean;
    	    lodash.isBuffer = isBuffer;
    	    lodash.isDate = isDate;
    	    lodash.isElement = isElement;
    	    lodash.isEmpty = isEmpty;
    	    lodash.isEqual = isEqual;
    	    lodash.isEqualWith = isEqualWith;
    	    lodash.isError = isError;
    	    lodash.isFinite = isFinite;
    	    lodash.isFunction = isFunction;
    	    lodash.isInteger = isInteger;
    	    lodash.isLength = isLength;
    	    lodash.isMap = isMap;
    	    lodash.isMatch = isMatch;
    	    lodash.isMatchWith = isMatchWith;
    	    lodash.isNaN = isNaN;
    	    lodash.isNative = isNative;
    	    lodash.isNil = isNil;
    	    lodash.isNull = isNull;
    	    lodash.isNumber = isNumber;
    	    lodash.isObject = isObject;
    	    lodash.isObjectLike = isObjectLike;
    	    lodash.isPlainObject = isPlainObject;
    	    lodash.isRegExp = isRegExp;
    	    lodash.isSafeInteger = isSafeInteger;
    	    lodash.isSet = isSet;
    	    lodash.isString = isString;
    	    lodash.isSymbol = isSymbol;
    	    lodash.isTypedArray = isTypedArray;
    	    lodash.isUndefined = isUndefined;
    	    lodash.isWeakMap = isWeakMap;
    	    lodash.isWeakSet = isWeakSet;
    	    lodash.join = join;
    	    lodash.kebabCase = kebabCase;
    	    lodash.last = last;
    	    lodash.lastIndexOf = lastIndexOf;
    	    lodash.lowerCase = lowerCase;
    	    lodash.lowerFirst = lowerFirst;
    	    lodash.lt = lt;
    	    lodash.lte = lte;
    	    lodash.max = max;
    	    lodash.maxBy = maxBy;
    	    lodash.mean = mean;
    	    lodash.meanBy = meanBy;
    	    lodash.min = min;
    	    lodash.minBy = minBy;
    	    lodash.stubArray = stubArray;
    	    lodash.stubFalse = stubFalse;
    	    lodash.stubObject = stubObject;
    	    lodash.stubString = stubString;
    	    lodash.stubTrue = stubTrue;
    	    lodash.multiply = multiply;
    	    lodash.nth = nth;
    	    lodash.noConflict = noConflict;
    	    lodash.noop = noop;
    	    lodash.now = now;
    	    lodash.pad = pad;
    	    lodash.padEnd = padEnd;
    	    lodash.padStart = padStart;
    	    lodash.parseInt = parseInt;
    	    lodash.random = random;
    	    lodash.reduce = reduce;
    	    lodash.reduceRight = reduceRight;
    	    lodash.repeat = repeat;
    	    lodash.replace = replace;
    	    lodash.result = result;
    	    lodash.round = round;
    	    lodash.runInContext = runInContext;
    	    lodash.sample = sample;
    	    lodash.size = size;
    	    lodash.snakeCase = snakeCase;
    	    lodash.some = some;
    	    lodash.sortedIndex = sortedIndex;
    	    lodash.sortedIndexBy = sortedIndexBy;
    	    lodash.sortedIndexOf = sortedIndexOf;
    	    lodash.sortedLastIndex = sortedLastIndex;
    	    lodash.sortedLastIndexBy = sortedLastIndexBy;
    	    lodash.sortedLastIndexOf = sortedLastIndexOf;
    	    lodash.startCase = startCase;
    	    lodash.startsWith = startsWith;
    	    lodash.subtract = subtract;
    	    lodash.sum = sum;
    	    lodash.sumBy = sumBy;
    	    lodash.template = template;
    	    lodash.times = times;
    	    lodash.toFinite = toFinite;
    	    lodash.toInteger = toInteger;
    	    lodash.toLength = toLength;
    	    lodash.toLower = toLower;
    	    lodash.toNumber = toNumber;
    	    lodash.toSafeInteger = toSafeInteger;
    	    lodash.toString = toString;
    	    lodash.toUpper = toUpper;
    	    lodash.trim = trim;
    	    lodash.trimEnd = trimEnd;
    	    lodash.trimStart = trimStart;
    	    lodash.truncate = truncate;
    	    lodash.unescape = unescape;
    	    lodash.uniqueId = uniqueId;
    	    lodash.upperCase = upperCase;
    	    lodash.upperFirst = upperFirst;
    
    	    // Add aliases.
    	    lodash.each = forEach;
    	    lodash.eachRight = forEachRight;
    	    lodash.first = head;
    
    	    mixin(lodash, (function() {
    	      var source = {};
    	      baseForOwn(lodash, function(func, methodName) {
    	        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
    	          source[methodName] = func;
    	        }
    	      });
    	      return source;
    	    }()), { 'chain': false });
    
    	    /*------------------------------------------------------------------------*/
    
    	    /**
    	     * The semantic version number.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @type {string}
    	     */
    	    lodash.VERSION = VERSION;
    
    	    // Assign default placeholders.
    	    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
    	      lodash[methodName].placeholder = lodash;
    	    });
    
    	    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    	    arrayEach(['drop', 'take'], function(methodName, index) {
    	      LazyWrapper.prototype[methodName] = function(n) {
    	        var filtered = this.__filtered__;
    	        if (filtered && !index) {
    	          return new LazyWrapper(this);
    	        }
    	        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);
    
    	        var result = this.clone();
    	        if (filtered) {
    	          result.__takeCount__ = nativeMin(n, result.__takeCount__);
    	        } else {
    	          result.__views__.push({
    	            'size': nativeMin(n, MAX_ARRAY_LENGTH),
    	            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
    	          });
    	        }
    	        return result;
    	      };
    
    	      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
    	        return this.reverse()[methodName](n).reverse();
    	      };
    	    });
    
    	    // Add `LazyWrapper` methods that accept an `iteratee` value.
    	    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
    	      var type = index + 1,
    	          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
    
    	      LazyWrapper.prototype[methodName] = function(iteratee) {
    	        var result = this.clone();
    	        result.__iteratees__.push({
    	          'iteratee': getIteratee(iteratee, 3),
    	          'type': type
    	        });
    	        result.__filtered__ = result.__filtered__ || isFilter;
    	        return result;
    	      };
    	    });
    
    	    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    	    arrayEach(['head', 'last'], function(methodName, index) {
    	      var takeName = 'take' + (index ? 'Right' : '');
    
    	      LazyWrapper.prototype[methodName] = function() {
    	        return this[takeName](1).value()[0];
    	      };
    	    });
    
    	    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    	    arrayEach(['initial', 'tail'], function(methodName, index) {
    	      var dropName = 'drop' + (index ? '' : 'Right');
    
    	      LazyWrapper.prototype[methodName] = function() {
    	        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
    	      };
    	    });
    
    	    LazyWrapper.prototype.compact = function() {
    	      return this.filter(identity);
    	    };
    
    	    LazyWrapper.prototype.find = function(predicate) {
    	      return this.filter(predicate).head();
    	    };
    
    	    LazyWrapper.prototype.findLast = function(predicate) {
    	      return this.reverse().find(predicate);
    	    };
    
    	    LazyWrapper.prototype.invokeMap = rest(function(path, args) {
    	      if (typeof path == 'function') {
    	        return new LazyWrapper(this);
    	      }
    	      return this.map(function(value) {
    	        return baseInvoke(value, path, args);
    	      });
    	    });
    
    	    LazyWrapper.prototype.reject = function(predicate) {
    	      predicate = getIteratee(predicate, 3);
    	      return this.filter(function(value) {
    	        return !predicate(value);
    	      });
    	    };
    
    	    LazyWrapper.prototype.slice = function(start, end) {
    	      start = toInteger(start);
    
    	      var result = this;
    	      if (result.__filtered__ && (start > 0 || end < 0)) {
    	        return new LazyWrapper(result);
    	      }
    	      if (start < 0) {
    	        result = result.takeRight(-start);
    	      } else if (start) {
    	        result = result.drop(start);
    	      }
    	      if (end !== undefined) {
    	        end = toInteger(end);
    	        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
    	      }
    	      return result;
    	    };
    
    	    LazyWrapper.prototype.takeRightWhile = function(predicate) {
    	      return this.reverse().takeWhile(predicate).reverse();
    	    };
    
    	    LazyWrapper.prototype.toArray = function() {
    	      return this.take(MAX_ARRAY_LENGTH);
    	    };
    
    	    // Add `LazyWrapper` methods to `lodash.prototype`.
    	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
    	      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
    	          isTaker = /^(?:head|last)$/.test(methodName),
    	          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
    	          retUnwrapped = isTaker || /^find/.test(methodName);
    
    	      if (!lodashFunc) {
    	        return;
    	      }
    	      lodash.prototype[methodName] = function() {
    	        var value = this.__wrapped__,
    	            args = isTaker ? [1] : arguments,
    	            isLazy = value instanceof LazyWrapper,
    	            iteratee = args[0],
    	            useLazy = isLazy || isArray(value);
    
    	        var interceptor = function(value) {
    	          var result = lodashFunc.apply(lodash, arrayPush([value], args));
    	          return (isTaker && chainAll) ? result[0] : result;
    	        };
    
    	        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
    	          // Avoid lazy use if the iteratee has a "length" value other than `1`.
    	          isLazy = useLazy = false;
    	        }
    	        var chainAll = this.__chain__,
    	            isHybrid = !!this.__actions__.length,
    	            isUnwrapped = retUnwrapped && !chainAll,
    	            onlyLazy = isLazy && !isHybrid;
    
    	        if (!retUnwrapped && useLazy) {
    	          value = onlyLazy ? value : new LazyWrapper(this);
    	          var result = func.apply(value, args);
    	          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
    	          return new LodashWrapper(result, chainAll);
    	        }
    	        if (isUnwrapped && onlyLazy) {
    	          return func.apply(this, args);
    	        }
    	        result = this.thru(interceptor);
    	        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
    	      };
    	    });
    
    	    // Add `Array` methods to `lodash.prototype`.
    	    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
    	      var func = arrayProto[methodName],
    	          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
    	          retUnwrapped = /^(?:pop|shift)$/.test(methodName);
    
    	      lodash.prototype[methodName] = function() {
    	        var args = arguments;
    	        if (retUnwrapped && !this.__chain__) {
    	          var value = this.value();
    	          return func.apply(isArray(value) ? value : [], args);
    	        }
    	        return this[chainName](function(value) {
    	          return func.apply(isArray(value) ? value : [], args);
    	        });
    	      };
    	    });
    
    	    // Map minified method names to their real names.
    	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
    	      var lodashFunc = lodash[methodName];
    	      if (lodashFunc) {
    	        var key = (lodashFunc.name + ''),
    	            names = realNames[key] || (realNames[key] = []);
    
    	        names.push({ 'name': methodName, 'func': lodashFunc });
    	      }
    	    });
    
    	    realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{
    	      'name': 'wrapper',
    	      'func': undefined
    	    }];
    
    	    // Add methods to `LazyWrapper`.
    	    LazyWrapper.prototype.clone = lazyClone;
    	    LazyWrapper.prototype.reverse = lazyReverse;
    	    LazyWrapper.prototype.value = lazyValue;
    
    	    // Add chain sequence methods to the `lodash` wrapper.
    	    lodash.prototype.at = wrapperAt;
    	    lodash.prototype.chain = wrapperChain;
    	    lodash.prototype.commit = wrapperCommit;
    	    lodash.prototype.next = wrapperNext;
    	    lodash.prototype.plant = wrapperPlant;
    	    lodash.prototype.reverse = wrapperReverse;
    	    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
    
    	    if (iteratorSymbol) {
    	      lodash.prototype[iteratorSymbol] = wrapperToIterator;
    	    }
    	    return lodash;
    	  }
    
    	  /*--------------------------------------------------------------------------*/
    
    	  // Export lodash.
    	  var _ = runInContext();
    
    	  // Expose Lodash on the free variable `window` or `self` when available so it's
    	  // globally accessible, even when bundled with Browserify, Webpack, etc. This
    	  // also prevents errors in cases where Lodash is loaded by a script tag in the
    	  // presence of an AMD loader. See http://requirejs.org/docs/errors.html#mismatch
    	  // for more details. Use `_.noConflict` to remove Lodash from the global object.
    	  (freeSelf || {})._ = _;
    
    	  // Some AMD build optimizers like r.js check for condition patterns like the following:
    	  if (true) {
    	    // Define as an anonymous module so, through path mapping, it can be
    	    // referenced as the "underscore" module.
    	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
    	      return _;
    	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    	  }
    	  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
    	  else if (freeModule) {
    	    // Export for Node.js.
    	    (freeModule.exports = _)._ = _;
    	    // Export for CommonJS support.
    	    freeExports._ = _;
    	  }
    	  else {
    	    // Export to the global object.
    	    root._ = _;
    	  }
    	}.call(this));
    
    	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(87)(module), (function() { return this; }())))
    
    /***/ },
    /* 87 */
    /***/ function(module, exports) {
    
    	module.exports = function(module) {
    		if(!module.webpackPolyfill) {
    			module.deprecate = function() {};
    			module.paths = [];
    			// module.parent = undefined by default
    			module.children = [];
    			module.webpackPolyfill = 1;
    		}
    		return module;
    	}
    
    
    /***/ },
    /* 88 */
    /***/ function(module, exports, __webpack_require__) {
    
    	"use strict";
    
    	exports.__esModule = true;
    
    	var _defineProperty = __webpack_require__(89);
    
    	var _defineProperty2 = _interopRequireDefault(_defineProperty);
    
    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    	exports.default = function () {
    	  function defineProperties(target, props) {
    	    for (var i = 0; i < props.length; i++) {
    	      var descriptor = props[i];
    	      descriptor.enumerable = descriptor.enumerable || false;
    	      descriptor.configurable = true;
    	      if ("value" in descriptor) descriptor.writable = true;
    	      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
    	    }
    	  }
    
    	  return function (Constructor, protoProps, staticProps) {
    	    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    	    if (staticProps) defineProperties(Constructor, staticProps);
    	    return Constructor;
    	  };
    	}();
    
    /***/ },
    /* 89 */
    /***/ function(module, exports, __webpack_require__) {
    
    	module.exports = { "default": __webpack_require__(90), __esModule: true };
    
    /***/ },
    /* 90 */
    /***/ function(module, exports, __webpack_require__) {
    
    	__webpack_require__(91);
    	var $Object = __webpack_require__(15).Object;
    	module.exports = function defineProperty(it, key, desc){
    	  return $Object.defineProperty(it, key, desc);
    	};
    
    /***/ },
    /* 91 */
    /***/ function(module, exports, __webpack_require__) {
    
    	var $export = __webpack_require__(14);
    	// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
    	$export($export.S + $export.F * !__webpack_require__(23), 'Object', {defineProperty: __webpack_require__(19).f});
    
    /***/ },
    /* 92 */
    /***/ function(module, exports, __webpack_require__) {
    
    	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
    	  if (true) {
    	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [module, exports, __webpack_require__(2), __webpack_require__(28), __webpack_require__(88), __webpack_require__(29), __webpack_require__(76), __webpack_require__(84), __webpack_require__(85)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    	  } else if (typeof exports !== "undefined") {
    	    factory(module, exports, require('babel-runtime/core-js/object/get-prototype-of'), require('babel-runtime/helpers/classCallCheck'), require('babel-runtime/helpers/createClass'), require('babel-runtime/helpers/possibleConstructorReturn'), require('babel-runtime/helpers/inherits'), require('react'), require('../utils/roleMatcher'));
    	  } else {
    	    var mod = {
    	      exports: {}
    	    };
    	    factory(mod, mod.exports, global.getPrototypeOf, global.classCallCheck, global.createClass, global.possibleConstructorReturn, global.inherits, global.react, global.roleMatcher);
    	    global.RoleAwareComponentReact = mod.exports;
    	  }
    	})(this, function (module, exports, _getPrototypeOf, _classCallCheck2, _createClass2, _possibleConstructorReturn2, _inherits2, _react, _roleMatcher) {
    	  'use strict';
    
    	  Object.defineProperty(exports, "__esModule", {
    	    value: true
    	  });
    
    	  var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);
    
    	  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
    
    	  var _createClass3 = _interopRequireDefault(_createClass2);
    
    	  var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
    
    	  var _inherits3 = _interopRequireDefault(_inherits2);
    
    	  var _react2 = _interopRequireDefault(_react);
    
    	  var roleMatcher = _interopRequireWildcard(_roleMatcher);
    
    	  function _interopRequireWildcard(obj) {
    	    if (obj && obj.__esModule) {
    	      return obj;
    	    } else {
    	      var newObj = {};
    
    	      if (obj != null) {
    	        for (var key in obj) {
    	          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
    	        }
    	      }
    
    	      newObj.default = obj;
    	      return newObj;
    	    }
    	  }
    
    	  function _interopRequireDefault(obj) {
    	    return obj && obj.__esModule ? obj : {
    	      default: obj
    	    };
    	  }
    
    	  var RoleAwareComponent = function (_React$Component) {
    	    (0, _inherits3.default)(RoleAwareComponent, _React$Component);
    
    	    function RoleAwareComponent(props) {
    	      (0, _classCallCheck3.default)(this, RoleAwareComponent);
    
    	      var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(RoleAwareComponent).call(this, props));
    
    	      // roles for which the component should be visible
    	      _this.allowedRoles = undefined;
    
    	      // roles of the user - usually fetched during authentication
    	      _this.userRoles = undefined;
    	      return _this;
    	    }
    
    	    // checks if allowed roles and user roles have any common part
    
    
    	    (0, _createClass3.default)(RoleAwareComponent, [{
    	      key: 'rolesMatched',
    	      value: function rolesMatched() {
    	        this.validate();
    	        return roleMatcher.rolesMatched(this.allowedRoles, this.userRoles);
    	      }
    	    }, {
    	      key: 'rolesMatchedExact',
    	      value: function rolesMatchedExact() {
    	        this.validate();
    	        return roleMatcher.rolesMatchedExact(this.allowedRoles, this.userRoles);
    	      }
    	    }, {
    	      key: 'validate',
    	      value: function validate() {
    	        if (this.allowedRoles === 'undefined') {
    	          throw new Error('RoleAwareComponent: No allowed roles defined! Please define them in the constructor of your component.');
    	        }
    
    	        if (this.userRoles === undefined) {
    	          throw new Error('AuthorizedComponent: No user roles defined! Please define them in the constructor of your component.');
    	        }
    	      }
    	    }]);
    	    return RoleAwareComponent;
    	  }(_react2.default.Component);
    
    	  exports.default = RoleAwareComponent;
    	  module.exports = exports['default'];
    	});
    
    /***/ }
    /******/ ])
    });
    ;
  provide("react-router-role-authorization", module.exports);
}(global));